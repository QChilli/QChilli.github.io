<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2024/09/03/%E6%9D%82%E8%B0%88/1/"/>
      <url>/2024/09/03/%E6%9D%82%E8%B0%88/1/</url>
      
        <content type="html"><![CDATA[<ol><li><h1 id="开发板简介"><a href="#开发板简介" class="headerlink" title="开发板简介"></a>开发板简介</h1></li><li><h2 id="开发板实物图"><a href="#开发板实物图" class="headerlink" title="开发板实物图"></a>开发板实物图</h2></li><li><h2 id="核心板原理图"><a href="#核心板原理图" class="headerlink" title="核心板原理图"></a>核心板原理图</h2></li><li><h2 id="扩展板原理图"><a href="#扩展板原理图" class="headerlink" title="扩展板原理图"></a>扩展板原理图</h2></li><li><h2 id="STM32最小系统"><a href="#STM32最小系统" class="headerlink" title="STM32最小系统"></a>STM32最小系统</h2></li></ol><p>STM32单片机能工作的最小外围电路就叫<strong>最小系统</strong>。</p><p>最小系统通常包括：<strong>STM32芯片、电源、时钟、下载调试和复位</strong>5部分组成。</p><ol><li>STM32芯片</li></ol><p>选用的是<strong>STM32F103ZET6</strong>这款芯片。</p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=MTM4MmEwYTI1ZTZlM2Q0ZGI0OGM2OGY2YTI2NDljM2VfRWVvcXVicGtKV2hvVzhhdHdjV1IyN2txekNFSWtMV05fVG9rZW46SWtKZmJ1V2xsb0YwZDV4aFczYmMwYmlSbk5RXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><ol><li>电源<ol><li>采用3.3V电源供电。 我们电路采用了两路供电。</li><li>一路是USB的TypeC供电， TypeC提供的是5V，使用芯片AMS1117把5V转成3.3V。</li><li>另一路是STLink下载器直接提供3.3V供电（下载器内部已经把5V转成了3.3V）。</li></ol></li></ol><ul><li>MCU电源</li></ul><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=ZDExYjg2MTBkY2M0N2RiNWY0OTM5MjAzYTQ3ZmNkYjhfdTdKV2cwTGRUMHIxamFxd3lyTzBaOGRNUmF2dG5pWVBfVG9rZW46T3hrdGJhQnM1b0dGM1l4WkR1dWNzeVNSbm9lXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><ul><li>USB供电转3.3v</li></ul><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=NWMzZjE0NmU1ZjgzMGJlOGZjZTBlZjBjMzY2NDg0YmVfdXl1WXBzbzczdnlHaExSTHdXTzlkSlM0RmNmb3NYTHZfVG9rZW46V2lVWmJSQVdhb0pWeEN4dGJ3VWNFeXRUbkFjXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><ul><li>MCU调试口</li></ul><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=ZjQ5MzU1OWFjY2E0ODBkYTY3ODQ5ODI3OWUyODM2YzJfcE95emxvZWl2cXJDMUFZSUVzZTE1aks4ZU0ydzl0cmtfVG9rZW46QXU5dGJRT0lLb2xaSnB4bFZ2d2NuWFlHbmJvXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><p>不用额外再接串口模块。</p><ol><li>时钟</li></ol><p>SMT32提供了两路外部时钟： <strong>外部高速时钟和外部低速时钟</strong> 。</p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=YzI0NDU3NzhkYTk3NzE1MzFmYmNmN2M3NGY3YWYyMmNfVHl0YnhYME4yc1NkaXc0ZnJuQ2Z0cE1UQW10V3oxQjNfVG9rZW46Rk1CV2JUVGtrb3RVSkV4NVljTmNHY25ObnBoXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=ODhmZDZjMWRkZTVlN2NhMGMxZWMyZjNjNDRkZTI4MWRfT1U2SEkxWlNwVFozTHRRbEJWeU9NcFBlRlZNTlRYUzBfVG9rZW46RHd0d2JrZnlEb2FKUzh4RG1TbmNQdDhlbmhkXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><ol><li>复位</li></ol><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=ODRjOWFjZjgwMjYxOTY1NTljMTkyZTI2MzRlNzAxZWRfaFJIUkgxeWJ6alFGaTdiSlJYVWpmZzVhYm50MnphblNfVG9rZW46RDd3M2JaQmFmbzBBWEt4QzBYZWMyc0IzbnZjXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><ol><li>下载调试</li></ol><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=ZTM5YTNjYWExMjM5ZmQxOTM2ZTM2MjAwMGYzOWRlNDlfbm9KQ3ZWQmZEU1REVXhlMVJxUlRRZk9ZaFJVNkZZdnBfVG9rZW46TUhzeWJHa1FHb245cTF4VEhNNGNQM3ZIbmxlXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><ol><li><h1 id="点亮LED灯案例（寄存器）"><a href="#点亮LED灯案例（寄存器）" class="headerlink" title="点亮LED灯案例（寄存器）"></a>点亮LED灯案例（寄存器）</h1><p>我们首先使用基于寄存器开发方式点亮第一个LED灯。</p></li></ol><p>在代码期间会涉及到一些寄存器知识，先不要深究，后面再详细介绍。 现在要做的就是点亮第一个LED灯。</p><ol><li><h2 id="需求描述"><a href="#需求描述" class="headerlink" title="需求描述"></a>需求描述</h2></li></ol><p>快速体验STM32开发：点亮LED1。</p><ol><li><h2 id="硬件电路设计"><a href="#硬件电路设计" class="headerlink" title="硬件电路设计"></a>硬件电路设计</h2></li></ol><p>LED1-LED3是普通LED灯，LED4为电源指示灯。</p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=M2VkNDA0ZGYxMTZjMjQ0NDcwMDg1YmVkZTg5ZGM3MzhfQVhKSnhNRVYycXBqQ0F4MFcyMXcxOVNTcm9aTUZYWFFfVG9rZW46RTI4VGIzdVJUb3VHdjd4SVdBeGM2WnJHbjVmXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=NjY0YjRkYTQ4Nzc5MGY2ZDI0ZTQ0MzAzZjgyMWJiMDBfTWZSRXNzZlNFZldPT2k3azFDTG1hNGVYdHZKVWtHN2pfVG9rZW46UHdYZ2J4aVhsb3ZwcDN4enBvR2NIQXJRbmFkXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><p>说明：</p><ol><li><p>LED1连接的是端口PA0</p></li><li><p>只要让PA0引脚输出低电平就可以点亮LED1。</p></li><li><h2 id="创建项目工程"><a href="#创建项目工程" class="headerlink" title="创建项目工程"></a>创建项目工程</h2></li><li><h3 id="创建工程准备"><a href="#创建工程准备" class="headerlink" title="创建工程准备"></a>创建工程准备</h3></li><li><p>创建需要的目录</p></li></ol><p>在磁盘上创建一个目录 atguigu，然后再在atguigu目录下创建我们的第一个工程目录 led_register。</p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=OTNmYzZkNTM5MmU3OGQ2ZTFlODAzNmZiOWIyMTA1NGFfNGY5NHgxUlJGMTA0ZFE5a2FHZnBTRVBrNTczVVVYM2dfVG9rZW46UUF0MGJPRjhob3JyR214MXhnaGNpTzRUbktVXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><ol><li>准备启动文件</li></ol><p>STM32程序需要启动文件，我们需要提前准备好。先去ST官网下载官方提供的外设标准库，里面有提供标准的启动文件，我们从里面copy一份出来。</p><p>标准外设库下载地址：<strong><a href="https://www.st.com/zh/embedded-software/stm32-standard-peripheral-libraries/products.html">https://www.st.com/zh/embedded-software/stm32-standard-peripheral-libraries/products.html</a></strong></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=NGE4ZjZiZmJlNzBhOTAzM2IyYjNkZTA0NDkwYzk5ZGRfMU04UHpOcGF5aXhCQ1Q2ZGs0RzQzRHRMU1pDbjZOdW5fVG9rZW46TEV2VGJCVldNb0tvUll4WnM5Z2NOcXVjbnFiXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=N2YxN2Y5NzlkZTM4YzZhNmIyYWNmMmU2MDQyNzA4ZWNfN3ZOM091RlUzN0NTSmRJM25SVjhaWlJ1OEtRODV0ZlBfVG9rZW46RmNmZmJqMHAyb3hyTGd4SnhUdmM4ajB3bnlnXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><p>下载完成之后解压，后面我们需要从里面copy文件出来。</p><ol><li>创建目录放入启动文件和其他核心文件</li></ol><p>为了方便管理，我们把启动文件放入专门目录中。在刚才创建的工程目录中创建一个目录：Start（名字没有强制要求，随意，但是最好不要有中文）。</p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=MDE3MjcyNTA1ZjQxZTU3OThjMjU0ZjJlODhmNGE2ZGJfQUhjWXhpTk80V09abTdWRG1CbHE3NU1CdDRSRXNpSkhfVG9rZW46QmE0SmJVNURvb3VLVFZ4WGd3amMyUUFGbjBnXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><p>去到我们刚才下载的标准外设库目录，找到我们需要的启动文件和其他核心文件copy到Start目录。</p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=NmYxM2I4Y2ZmNjRkNmZiNzdhYjVhZjYxNDNlNWQzOWNfbWxlMndwbTBERHhUTmZrbFNURHU4cGpScEVsMENxZVlfVG9rZW46Rkhsb2I5MHl4b09aV1J4UWJCV2Ntc2N6bnNmXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><p>启动文件选择标准：</p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=YWEwOThlYzBkYzJmNDk3NmVhNjIxZThhZjNlM2JkODFfU3h6Q1lRMTVUSGdaN0NZb3RkM0Z6YmZUQnBlWDhWVlZfVG9rZW46QWVtNWJxVkt5b2YzdHJ4d29aNGNhbVdVbnRnXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=MDc3YjI1NjQzYjg5ODY1NWJiODZiMjdlMTkyZmM2MzhfOXNiZmRuVU9aUFFnSGN5QmMwZXd0ZDlJbG5RbzFsVFRfVG9rZW46STlPU2I5R05sbzR4bXp4ck53aWN0ZXEybm1lXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=MGUzYjRiN2I0NzRlOGUwYzcyMzg3NWE2M2JiNTZmZGJfVlJET1U3a3FScTdXZGRMTmN3WWFHNlVNWENnTGFwSElfVG9rZW46Q0JGZmIxTkVob0FvVnB4aGxNZmNZZFdLbnlnXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><p>Copy完之后：</p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=MjUxMGZhNWYwYTUyOWM4NTQ0MjdlMWQxNzcxYWJkOWJfdHlyMmZLTGRiYnlBNndnc21QSXc2VDViSzhqVjVnbkxfVG9rZW46S3RZWGJKMzNzb0NPZE54T2pTdGNmT291bjdmXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><ol><li>创建工程</li></ol><p>打开Keil MDK创建工程。</p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=NzUyNmRlOTExNzRkZjRmNTYwNDE2NWQ1ZDYzMjNjNjdfdmJ3S2Z6UE8xbjhxVjRKNldzWGUySUdPblNWNHlGZldfVG9rZW46S0pNcmJsUkxGb2tKM3d4N0p5cmNlZ1ZBbmRlXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=NmVmMzQ1YTEzZjVjZWI1M2U1MDA3ZWUyZWI5MWQxMjlfMzVPRktlZnFwRlBuajlRZWVjdHNPWkYyU2wyRThyMlpfVG9rZW46SVloaWI5ZU1Fb0puUUl4S282a2N6cHpmbnliXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=N2FlODdiZTNjNmM3ZmMyYmM1YWNlZTk5ODc2ZTA1NzVfZEJoejlJRDJrajM3ZHhzMmhxSVVkWnlidXk1YUxESm5fVG9rZW46SkNaU2JNb1Yzb0lmSkJ4a1BoNmNwbmV6bnJnXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=MTUyM2YzZmFjMDdmNTJjN2E3ZGI4ZTRlZmMyZjIyZDFfa29TNG5rRDU1eG5HWW50djAxQmJycE9aaVQ0a3pGRGFfVG9rZW46Wldwa2I2TUlDb3E2M0V4Zm81MWNydXNBbmloXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><ol><li><h3 id="工程配置"><a href="#工程配置" class="headerlink" title="工程配置"></a>工程配置</h3></li><li><p>添加两个Project Group方便管理代码文件。</p></li></ol><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=MmZjMTNlZWUxMTEwY2JkZjY2YzM2MzNmY2IyNmFkYTBfT2FjWjAwYzkwZFhmd0dRendLRTVxMnVqbDNHTW5KVHNfVG9rZW46T0pSZmJTUjV5b2JOQTd4RGNOTWNhZ2tYbm1jXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><ol><li>先删除默认的Source Group 1，再添加两个：Start（启动相关的文件），User（我们自己写的代码）。</li></ol><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=ODI4MGNjNzAwOTQyZjNiYWY4ZDY2NTQzNWQwMTVhZGZfT0pUbFZNWU5zYVBicEVQN3RyeEZjaXJFNHloblVMR1FfVG9rZW46UHU4SWJyNU51bzdoU054VHViT2NFVmY3bjNiXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=NjIxNjY2MDZjZDc2YmQzMDU3MzViZTBjMGZjYTQzZThfQVRPTGx2YjVwMzNCZGI4MG1rSng0TUFlYldMZ0JNYlZfVG9rZW46UGVKWmJjaDRzb0t3RmZ4WVpFcGNFa3ZIbmhkXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=ZGNjOGE0MDNhODU0ZjUzOTdjZWQ3Y2IyOTcyMjhmYzdfQXg5YXZQdFFLYUZzcXVUWnhKTzFEV2RKcGVUZnJTUHRfVG9rZW46RThZdmJ3Nzkxb2ZWVFd4emdTQ2NmakpPbmxiXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=MzUwM2Y1MjQ2ZWY0OTI5OWExMThiNjhiYTJiN2Q3NzFfUVdLUXd3NUp5MUxRcGdudVlJUEdBdlpSZk03TElySllfVG9rZW46WGhzYWI2ZzVUb29WTE54UktHemM5VkVZbnJTXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><ol><li>创建main.c 文件</li></ol><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=NzU5NGQ4NzJhZmIzNDIyMTBjNmY3MDI1ZjhmOWYwZDdfZEVhbjBOSVlvUjZNam5GRnJCTFV5TGx1bGZKT1piUFFfVG9rZW46WUh5SWJOcHc2b25oeTl4Q1prVmM2MnZTbm1jXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=ZjE0ZGVkZWJjOWRmZWJhZDM3NzE3OWUzMjhlNjFiNDVfUlQ0T3k5UTRyWFNCTTBVaU9ObHRKU3lPb29STEpuYUxfVG9rZW46TEZtN2JaVFpkb0JPWG54U2ZxUWNjUVF1blJnXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><p>User路径不存在，让它帮我们创建。</p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=YTI0MzgxNjUwMGZmMzA4YjVmYjQ4NzczZjZmZmY5MDNfV3BBM09kUDVveXlqcUtKMlg2Y0Y5ZVBLN2RIUzlKc2NfVG9rZW46Rm82emJZTm5Obzk4eHh4d0hhMGNoYWo0bjRlXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><ol><li><h3 id="编译配置"><a href="#编译配置" class="headerlink" title="编译配置"></a>编译配置</h3></li><li><p>编译器版本改为5</p></li></ol><p>目前最新的Keil ARM用的是 Compiler version 6，与前面的core_cm3.c不兼容，所以需要提前准备好Compiler version 5。</p><p>下载地址：<strong><a href="https://developer.arm.com/downloads/view/ACOMP5">https://developer.arm.com/downloads/view/ACOMP5</a></strong></p><p>解压之后，把解压的后文件夹放入到<strong>Keil \</strong>**MDK**<em>\</em>的安装目录**下：</p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=MmRhZGJjYTk2NDNlYjcwMGU4ODNkNTA2NGFmNzVlOTNfNFFyY0U3R0VTd1R0azdtNUpTMkROS21jYjNRNmdocFBfVG9rZW46V3c2T2JqTm5sb0J2N0V4VlpGaGNxejRCbktmXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=ODMzM2E0ZmM2OGQwY2MyMzgyZWNmNWI4YWY5ODM4YmJfTXIwTzVUYWI2UzR2OVE2M2ozWGR1cDZFVmlCZkxnQzBfVG9rZW46WTh4cGJyaFNlb0F5Zmp4TzFVOGNUVHdQbjBmXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=MDg5NGZkYTI0YmExZjE5MmY4NDMzZjUxY2U1ZmM4MWJfWldMaDhhRkFiOENrenZSdTg1eXR0eXlZN2dwcGlHNExfVG9rZW46R1VVRmJXRlV2bzBFSDN4SzUxUWNlVWpyblRmXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=ZDg3Nzk5YmU0YjE1YTdjOGQzMzliZmM1ZDNkY2JlOTlfWk9hSDJaTjhkb1E2WG95dHVIV3VnUFdBSFNDWTVKaXFfVG9rZW46S0ZLUGJqZzJtb21YdDR4VWRVcWNmanM0bjVjXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=MGZmMGVhZmIwYmJkNTA2Y2JhNDQyZGY5ZDU5NGIwYzFfcjN5N3NpRUgxRHRtUjNPWHAyTzhZQmVBUnFsTndVUzZfVG9rZW46TXNuSGJJbGNjb2dxbmx4a3czZ2NsRVh0bmNoXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=MzM1ZjAxZDc4NzBiYTRkYTA0NmZlMTAxOWNhMzVlYzZfMGpxWG5OT0V4YmVVc3pwYVZaMmlmR0lLMlliRHNYSmJfVG9rZW46U3RoU2JtUXVWb21jZkF4WlhENmMzcmxWbk5oXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=YjA5MTI0YmJjODYzNGU0MTU4OWRiYTIzYWQ3OTdjMTRfVnV3d294ZGhuUGp4bkNIeVBuWWJGOU1LNGtCY0hkSG1fVG9rZW46UTJ2UWJPWE5Ub3JwNzN4ZExicGNNU21Bbk5kXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=N2RmMGEwODEzZjU1MmI3YWQzY2VkZWFkYWJiODBkZGJfTXh2d3c0T1o2a1RnbXJWSjJqbEhTY2I5RjBCQ3RjV1lfVG9rZW46SjRsTmIyd2kwb3M2d2l4bjdmWWNSYjVEbk9iXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=MTY0YmU1NjlhYTM3MDExMTI2OTA4YzM4MjgxMTI3YmJfNWtycThNZzNONk1Sc2puQzM0QnV0dGlXOWlaSXo1YnZfVG9rZW46TXJhTGJjVVZlb1Y5UWZ4UENmUmNFOWVPbktmXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><ol><li>一些其他配置</li></ol><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=MDA4NTBjM2NiYTFhNzk1OGVmMWFiYmVkZDIyNzg0MzlfSWdXdG1ueVJpb3FkUWY5UmowbkE1VHdDekMydUlJTEpfVG9rZW46WDRsWmJwNkgyb1hWN1N4UVFpSGN2UEkzbklnXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=NzExZmRkNGQyOTBlMTE4OGZlZTNlYjFlMGU2NzM0ODNfZHpkTkJQcXEzeXFYVFJWdkJiWGI2eWNZV2JsZzVRa1BfVG9rZW46T0k5bGJXeXFsb3VBbkd4V25tR2NRcGx0bnNlXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=MjVjMDljMjQ2YzQwZTM3ZmY3MDQ4ZDNiYWMwOTI3ODFfa3dYS2EydEREUzVkWHVhZEI5SElVbkxNRHFQQnhrU3BfVG9rZW46VTVlc2JKVTNPb05UZTF4WTZqcWNuVElqbjRnXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=NzlmNWM4MGU1NzNhZTQ4ZmFkMDkzMmEyODQ3NjNlNjRfSVdHcEtYRDFPOXRzZ1FyQVI0NzZCR0xzbDlUU2MyMXJfVG9rZW46RDN6aWJ5a3ptb3hya1R4dm1HemNBMkN2bmliXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><ol><li><h2 id="软件设计"><a href="#软件设计" class="headerlink" title="软件设计"></a>软件设计</h2></li><li><h3 id="main-c"><a href="#main-c" class="headerlink" title="main.c"></a>main.c</h3></li></ol><p>根据前面硬件电路设计，我们只要让<strong>GPIOA的0口输出低电平就行了</strong>。代码需要按照下面的步骤来实现。</p><ol><li>开启时钟</li></ol><p>在STM32中，让IO口工作，必须先开启对应的时钟。所以需要先查找到开启时钟的寄存器，然后通过该寄存器操作时钟的开启或关闭。我们要打开的是GPIOA的时钟。</p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=NWNiZTBkMzlmZDc4MGIzYTdmYTJlNjViOTZjZWRkMWJfd21RQ2FVUWZOZ2Q0dWdwVmNQNHhicDBCSEM3b2txMkVfVG9rZW46VXZ2VWJQY0dLb3Y3RVd4N3FPb2NTRk5ublRoXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=ZTY5MWY5MDQ0ZWYyM2IyYTZiZDg0YjVkODY5M2NkZjJfdXdTT0dvMnJmOThheTBHTTJVYUV3emJqVkZ5T09IWWxfVG9rZW46VHEwdGJLdDRDb2wyS3Z4Z3ZFNGNiZ0t5bmg4XzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=MjZlM2MzNWJkZmY0OTI3YzE3NGY1NTlkNzAxNWNiNjVfa0hJT0RWTDZ6RXJOaW1PMHBwNmFheVFVN29QSnBibGNfVG9rZW46UG9uVGJoRHVnb01QbzJ4Nm5CZ2NpS0Y5blJiXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><p>我们需要知道RCC_APB2ENR这个寄存器的地址。如何查找呢？先知道RCC这个外设的基地址，然后加上这个寄存器的偏移地址就行了。</p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=NDA0OGYyNTYzZjg5MWIyNWU4ZjVjNDQ4Nzk0OGUyYTVfbHZHWmVvZmVBSmI0RGpSVVBVbGJyUThUUmdCQVQ2Y3JfVG9rZW46REFpd2JjcHQ5b1ZPN0Z4RExUcmNhQUpmbmdjXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><p>从上面可以看出来，RCC的基地址是0x4002 1000，APB2ENR的偏移量是0x18，所以<strong>APB2ENR的地址值是0x4002 1000 + 0x18</strong></p><p>有了地址，在这个地址写入一个数据，这个数据的二进制第2是1就行了。其他位暂时不管。我们写入4。这样就开启了GPIOA的时钟。</p><p>在代码中，我们需要把地址强转成指针才能给这个地址赋值。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*(<span class="type">uint32_t</span> *)(<span class="number">0x40021000</span> + <span class="number">0x18</span>) = <span class="number">4</span>;</span><br></pre></td></tr></table></figure><ol><li>给IO口设置输出模式</li></ol><p>在STM32中，如果要让IO口输出低电平或高电平，必须给要使用的IO设置为输出模式。</p><p>根据前面的思路，需要先找到GPIOA的基地址，再根据偏移地址找到要使用的寄存器的地址。GPIOA的基地址是<strong>0x4001 0800</strong>。</p><p>配置PA0口的输出模式的寄存器是GPIOA_CRL。</p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=ZTYzNGY2ZmVlNjE3Njk2OWM5YzY0OTBiZTIxMmFlMTBfY3lmTFhBTDhKaDVpbVhkMTRYRlVVaHhDRFdna0M3eURfVG9rZW46QXA2b2JPQmYybzlFek54SlBHY2NqU1hQbkFmXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><p>只需要让这个寄存器的最后4位是 0011，就是最大速度的推挽输出。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*(<span class="type">uint32_t</span> *)(<span class="number">0x40010800</span> + <span class="number">0x00</span>) = <span class="number">3</span>;</span><br></pre></td></tr></table></figure><ol><li>给PA0口输出0</li></ol><p>给指定PA0口输出0就可以点亮LED1了。用到的寄存器是ODR数据输出寄存器。</p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=NDQ1MzY0MTIyYTc5ZmI1OGMzNzVkZGFkMDNiNjAxMjBfZWh6akRKMndyVXZ2SjQ2TlFnenJtdURTZWhMUktUaWxfVG9rZW46Qk03WGIxWkxpb29lS2F4a0RTOWNsQ1VkbmRiXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><p>ODR寄存器的地址是 <strong>0x40010800 + 0x0c</strong>。给这个地址的第0位写0，其他位写1。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*(<span class="type">uint32_t</span> *)((<span class="number">0x40010800</span> + <span class="number">0x0c</span>)) = <span class="number">0xfffe</span>;</span><br></pre></td></tr></table></figure><p><strong>main.c具体代码清单。</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;stdint.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 开启GPIOA的时钟 */</span></span><br><span class="line">    *(<span class="type">uint32_t</span> *)(<span class="number">0x40021000</span> + <span class="number">0x18</span>) = <span class="number">4</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 给PA0设置为通用推挽输出 */</span></span><br><span class="line">    *(<span class="type">uint32_t</span> *)(<span class="number">0x40010800</span> + <span class="number">0x00</span>) = <span class="number">3</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 给输出寄存器赋值 */</span></span><br><span class="line">    *(<span class="type">uint32_t</span> *)(<span class="number">0x40010800</span> + <span class="number">0x0c</span>) = <span class="number">0xfffe</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h3 id="编译工程"><a href="#编译工程" class="headerlink" title="编译工程"></a>编译工程</h3></li></ol><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=OTJhYTUwZmI2NGZiYzliZjcyYTM2ODE2OGFiNjNhNDFfWU9INkZxNHBEcEY2UHM1aGkyT2kzR2Y5dDJFUnBOdjdfVG9rZW46QkVEM2J5b0Rqb01ob3l4T0lvb2NaS2FrblRhXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><ol><li><h3 id="安装ST-LINK驱动"><a href="#安装ST-LINK驱动" class="headerlink" title="安装ST-LINK驱动"></a>安装ST-LINK驱动</h3></li><li><p>我们使用ST-LINK仿真器下载程序。</p></li></ol><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=NWRmMjk5NTQwMmUwZTliODYxM2MzN2RhZGU0NTc5OTBfVlJzNG5SR3Vza3Jxd2F0OEVhZ1Q5OFdIajJJVURUWlRfVG9rZW46QXphZ2J5SEZ2b0NsZDZ4M2F0N2NxUUM4bjdtXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><ol><li>Keil的安装目录下自带了ST-LINK的USB驱动，双击安装即可。</li></ol><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=ODRmY2EwNDBlMWYwZjYxMGQ4NzcwMjliOTUzYjgwMjdfV1ZUZXF5S1NCcmJMeXJaUm5FbFpmb3RwSnhPdW9SSlRfVG9rZW46RUdDdmJpeTNzb2IwQVh4bHpaOGNoMVhWblVjXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><ol><li>升级STLink固件</li></ol><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=ZDAxMzY1M2NhNWI5OWRiM2EzMGIzNzlkZWUwMjkzZjNfY1ZUT2lrVVZ4bFNjZUdSa3dreHd2U2pQV1h6SkJxVTBfVG9rZW46V0xseWJkcWNFb0NONkd4bUZCdWNNcWtHbmRiXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=NTY2Yjg0MjI3YWUwNjdkNTc4NzJjZDZmOTkwZjllNDRfcjZGUFg2YUw4MmI0ZDZSdGZ4NWx3ZDljNTJDVnFYcUpfVG9rZW46VFFnV2J5WUxkb2thZWp4VDlVZGNzWmVFbmNDXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=MzcwMDNkZThmZTUyOTEyZDYyOTYxYjk2YmNlZDMwMDdfR0FWbFdJa0FJT2lscTg2SGhqTHZ4ZUlXdFVTc3BVV2NfVG9rZW46V1FQcGI3dnZ4bzQ5bk94a3duZ2NYUGdzbmViXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=NjhlZDNlOGNkN2MzMTcyZWFlMjJhYzcwMmUwNGIwMTBfb1NxUndHYnpFa0w1RFVPZTZZMExTemJsOVAxOUtpaTJfVG9rZW46TWNrSmJRWmxsbzBzRmJ4eVZXNmNPZDNLbnNiXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=YjEyYzU0ZWM1NDBjY2FiMWQ0MDVmOTM4OTc5MGYzY2ZfSFo2dWI2dDNWU2c5WVdmakFzZlpjY1lJbWE3UFIyTXdfVG9rZW46VDNlcGJ4dEhEb2R5Q1F4TzFkNGNDVjNjbk9mXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><ol><li><h3 id="Keil中配置ST-LINK"><a href="#Keil中配置ST-LINK" class="headerlink" title="Keil中配置ST-LINK"></a>Keil中配置ST-LINK</h3></li></ol><p>还需要在Keil软件中，对仿真器做一些必要的配置。</p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=YjM2NDRhMzNkYzU3ODcyMGIxMzUyNTM1YzZhZGIwNTVfbUpiRUZTenVKcEljQ1A1V3FiSllqcG1JaHVwRFBaNGpfVG9rZW46VE1ya2JRU1pzb0cxNDJ4YXBtbWNxTUZBbnJOXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=YjY0MjhjN2IxYjRlMjA2NDk3OGQzODcyMjZhYmQwNjNfQlE3OU1IMGdvRTA1dG9OR2pkbUVvVnlhUXFncm5ScGJfVG9rZW46QU5ERmJ0Y1Bxb0V3SXd4UDBzbmNEbGttbklaXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=ZmFkZjY2NmNlMGEwMWEwYzAyMzExNGQzNWY4MDQ3NjZfcWRTckk0T2t3U1JiRWpqSkRWNldrUzBUazNkSFhDYnNfVG9rZW46VHV2UGJLZHVjb0dWc254WEhUaWM0dkF5bktjXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=OTVkNzA5ODNiZTliMjMyN2JjNjgwYjhkMThkNzhhZjVfVmxsRlFGWkxZSk1Ed1BielpueGlqMzdXWHZiMlZqMVVfVG9rZW46WWlyS2JNQnlXbzlVRmV4Z1F0TmNXSEUyblljXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><ol><li><h3 id="下载程序"><a href="#下载程序" class="headerlink" title="下载程序"></a>下载程序</h3></li></ol><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=MTQ0OTA3NjVlMTEzMzI1NTdhYTA5MTI1YWM0YWI4M2VfYURRN0Jnb1hCdnA5ZXpRdW9mR1VTbEZaQ1lTUUx4eTdfVG9rZW46RmNTU2JpNXdub29rNHp4UFdHT2NNZzMxblFnXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><ol><li><h3 id="操作寄存器方式的”进化”"><a href="#操作寄存器方式的”进化”" class="headerlink" title="操作寄存器方式的”进化”"></a>操作寄存器方式的”进化”</h3></li><li><h4 id="“进化1”"><a href="#“进化1”" class="headerlink" title="“进化1”"></a>“进化1”</h4></li></ol><p>在操作寄存器的时候，如果每次都查手册计算地址，是相当麻烦且无聊。ST公司早就考虑到了这个问题，已经提前把每个外设寄存器的地址提前给我们用<strong>宏定义</strong>的方式给算好了，我只需要直接使用即可。比如下面是定义的RCC各个寄存器地址。（stm32f10x.h中定义）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> PERIPH_BASE                ((uint32_t)0x40000000)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AHBPERIPH_BASE             (PERIPH_BASE +0x20000)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RCC_BASE                   (AHBPERIPH_BASE +0x1000)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RCC                        ((RCC_TypeDef*) RCC_BASE)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    __IO <span class="type">uint32_t</span> CR;</span><br><span class="line">    __IO <span class="type">uint32_t</span> CFGR;</span><br><span class="line">    __IO <span class="type">uint32_t</span> CIR;</span><br><span class="line">    __IO <span class="type">uint32_t</span> APB2RSTR;</span><br><span class="line">    __IO <span class="type">uint32_t</span> APB1RSTR;</span><br><span class="line">    __IO <span class="type">uint32_t</span> AHBENR;</span><br><span class="line">    __IO <span class="type">uint32_t</span> APB2ENR;</span><br><span class="line">    __IO <span class="type">uint32_t</span> APB1ENR;</span><br><span class="line">    __IO <span class="type">uint32_t</span> BDCR;</span><br><span class="line">    __IO <span class="type">uint32_t</span> CSR;</span><br><span class="line">&#125; RCC_TypeDef;</span><br></pre></td></tr></table></figure><p>这里还巧妙的运用了<strong>结构体中各个成员地址是连续的特征</strong>。CR寄存器是RCC第0个32位寄存器，所以它相对于基地址的偏移是0。CFGR相对于基地址的偏移是4，…</p><p>APB2ENR的相对于基地址的偏移是6*4=24=0x18，和我们前面查找手册的结果是一致的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    RCC-&gt;APB2ENR = <span class="number">4</span>;</span><br><span class="line">    GPIOA-&gt;CRL = <span class="number">3</span>;</span><br><span class="line">    GPIOA-&gt;ODR = <span class="number">0xfffe</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样写起来是不是可读性就好很多了，而且也简单了很多。</p><ol><li><h4 id="“进化2”"><a href="#“进化2”" class="headerlink" title="“进化2”"></a>“进化2”</h4></li></ol><p>其实在上面的代码中还有一些问题。在STM32中一个寄存器是32位的，我们在编写代码的时候只是需要给某位或某几位赋值。由于STM32不支持位寻址，所以在前面的操作中，我们其实是修改了所有位。这是非常不合理的，也许其他位在其他地方有赋值，我们重新赋值势必会覆盖了其他值，带来的后果也是很严重的。</p><p>如何只修改特定的位的值，而不影响其他位呢？我们需要先回顾下一些常见的位操作，再来继续进化上面的代码。</p><ol><li>常用的一些位操作回顾</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;stdlib.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> buffer[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printfBinary</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *op, <span class="type">unsigned</span> <span class="type">char</span> result)</span></span><br><span class="line">&#123;</span><br><span class="line">    itoa(result, buffer, <span class="number">2</span>); <span class="comment">// 把result转成2进制字符串</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s = %s\r\n&quot;</span>, op, buffer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 左移 8&lt;&lt;1 = 1000&lt;&lt;1 = 10000*/</span></span><br><span class="line">    printfBinary(<span class="string">&quot;8 &lt;&lt; 1&quot;</span>, <span class="number">8</span> &lt;&lt; <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 右移 8&gt;&gt;1 = 1000&gt;&gt;1 = 100*/</span></span><br><span class="line">    printfBinary(<span class="string">&quot;8 &gt;&gt; 1&quot;</span>, <span class="number">8</span> &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 按位或 8|7 = 1000|0111 = 1111 */</span></span><br><span class="line">    printfBinary(<span class="string">&quot;8 | 7&quot;</span>, <span class="number">8</span> | <span class="number">7</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 按位或 8&amp;7 = 1000&amp;0111 = 0000 */</span></span><br><span class="line">    printfBinary(<span class="string">&quot;8 &amp; 7&quot;</span>, <span class="number">8</span> &amp; <span class="number">7</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 按位取反 ~8 = ~1000 = 0111 */</span></span><br><span class="line">    printfBinary(<span class="string">&quot;~8&quot;</span>, ~<span class="number">8</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        把某位置 1  (0 位 1位 ...)</span></span><br><span class="line"><span class="comment">            比如把 mum 的第 2 位置 1</span></span><br><span class="line"><span class="comment">                1. 得到一个数第 2 位是 1 其他都为 0</span></span><br><span class="line"><span class="comment">                   a =  0000 0100  是由 1&lt;&lt;2 得到</span></span><br><span class="line"><span class="comment">                2. 让 num | a</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    printfBinary(<span class="string">&quot;8置第 2 位为 1 &quot;</span>, <span class="number">8</span> | (<span class="number">1</span> &lt;&lt; <span class="number">2</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        把连续的多位同时置 1  (0 位 1位 ...)</span></span><br><span class="line"><span class="comment">            比如把 mum 的第 1和2 位置 1</span></span><br><span class="line"><span class="comment">                1  a =  3 &lt;&lt; 1</span></span><br><span class="line"><span class="comment">                2. num | a</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    printfBinary(<span class="string">&quot;8置第 1和2 位为 1 &quot;</span>, <span class="number">8</span> | (<span class="number">3</span> &lt;&lt; <span class="number">1</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        把某位置 0  (0位 1位 ...)</span></span><br><span class="line"><span class="comment">            比如把 mum 的第 2 位置 0</span></span><br><span class="line"><span class="comment">                1. 得到一个数第 2 位是 0 其他都为 1</span></span><br><span class="line"><span class="comment">                   a =  1111 0100  是由 ~(1&lt;&lt;2) 得到</span></span><br><span class="line"><span class="comment">                2. 让 num &amp; a</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    printfBinary(<span class="string">&quot;7置第 2 位为 0 &quot;</span>, <span class="number">7</span> &amp; ~(<span class="number">1</span> &lt;&lt; <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        把连续多位同时置 0  (0位 1位 ...)</span></span><br><span class="line"><span class="comment">            比如把 mum 的第 1和2 位置 0</span></span><br><span class="line"><span class="comment">                1. a = ~(3&lt;&lt;1)</span></span><br><span class="line"><span class="comment">                2. 让 num &amp; a</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    printfBinary(<span class="string">&quot;7置第 1和2 位为 0 &quot;</span>, <span class="number">7</span> &amp; ~(<span class="number">3</span> &lt;&lt; <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        把连续的多位同时置位  101 (二进制)</span></span><br><span class="line"><span class="comment">            比如把 mum 的第 1,2,3 位置为 101</span></span><br><span class="line"><span class="comment">            1. num的 1,2,3位置为0</span></span><br><span class="line"><span class="comment">                num &amp;= ~(7&lt;&lt;1)</span></span><br><span class="line"><span class="comment">            2. num |= (5 &lt;&lt; 1);    (5 = 101)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> num = <span class="number">13</span>;</span><br><span class="line">    num &amp;= ~(<span class="number">7</span> &lt;&lt; <span class="number">1</span>);</span><br><span class="line">    num |= <span class="number">5</span> &lt;&lt; <span class="number">1</span>;</span><br><span class="line">    printfBinary(<span class="string">&quot;13&quot;</span>, <span class="number">13</span>);</span><br><span class="line">    printfBinary(<span class="string">&quot;10的123位置为101 &quot;</span>, num);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>继续进化</li></ol><p>根据前面基本位操作的回顾，我们综合使用这些位操作，可以把代码进化为下面的形式。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 开启GPIOA的时钟 第2位置1*/</span></span><br><span class="line">    RCC-&gt;APB2ENR |= <span class="number">0x1</span> &lt;&lt; <span class="number">2</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* GPIOA_CRL的最后4位置 0011 */</span></span><br><span class="line">    GPIOA-&gt;CRL &amp;= ~(<span class="number">0x1</span> &lt;&lt; <span class="number">3</span>);</span><br><span class="line">    GPIOA-&gt;CRL &amp;= ~(<span class="number">0x1</span> &lt;&lt; <span class="number">2</span>);</span><br><span class="line">    GPIOA-&gt;CRL |= <span class="number">0x1</span> &lt;&lt; <span class="number">1</span>;</span><br><span class="line">    GPIOA-&gt;CRL |= <span class="number">0x1</span> &lt;&lt; <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* GPIOA_ODR的第0位置0 */</span></span><br><span class="line">    GPIOA-&gt;ODR &amp;= ~(<span class="number">0x1</span> &lt;&lt; <span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h4 id="“进化3”"><a href="#“进化3”" class="headerlink" title="“进化3”"></a>“进化3”</h4></li></ol><p>在上次的进化中，我们是给寄存器“或等”和“与等”了一些值，这些值都是通过相应的“移位”操作得到的。比如要操作第2位，就需要把0x1左移2位得到。我们需要查找手册才能知道要移位几。也是很不方便。</p><p>其实ST公司也把我们需要的<strong>移位后的值给提前计算好</strong>了，用宏定义的方式供我们使用。</p><p>比如前面的开启时钟，已经定义了好了这个值。正好就是1&lt;&lt;2</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span>    RCC_APB2ENR_IOPAEN        ((uint32_t)0x00000004)</span></span><br></pre></td></tr></table></figure><p>利用ST公司提前预定义的这些值，可以进一步进化代码为下面的形式。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    RCC-&gt;APB2ENR |= RCC_APB2ENR_IOPAEN;</span><br><span class="line">    </span><br><span class="line">    GPIOA-&gt;CRL &amp;= ~GPIO_CRL_CNF0_1;</span><br><span class="line">    GPIOA-&gt;CRL &amp;= ~GPIO_CRL_CNF0_0;</span><br><span class="line">    GPIOA-&gt;CRL |= GPIO_CRL_MODE0_1;</span><br><span class="line">    GPIOA-&gt;CRL |= GPIO_CRL_MODE0_0;</span><br><span class="line"></span><br><span class="line">    GPIOA-&gt;ODR &amp;= ~GPIO_ODR_ODR0;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样可读性就好多了，等操作熟练之后，很多操作不查找寄存器手册也能直接操作了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>STM32基础篇</title>
      <link href="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
      <url>/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h2 id="1-STM32最小系统"><a href="#1-STM32最小系统" class="headerlink" title="1. STM32最小系统"></a>1. STM32最小系统</h2><p>STM32单片机能工作的最小外围电路就叫最小系统。最小系统通常包括：STM32芯片、电源、时钟、下载调试和复位五部分组成。</p><h3 id="1-STM32芯片"><a href="#1-STM32芯片" class="headerlink" title="1. STM32芯片"></a>1. STM32芯片</h3><p>选用的是STM32F103ZET6这款芯片。</p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=OTBjNGYyZDM1MmJkMjUwZWE2M2JiNTEwZmZlZjJiMmJfT25ESWxMa09wYnBGeWMwa2c3bUhTRFY4RUVPNlNxMEJfVG9rZW46SWtKZmJ1V2xsb0YwZDV4aFczYmMwYmlSbk5RXzE3MjUzNjA2Nzg6MTcyNTM2NDI3OF9WNA" alt="img"></p><h3 id="2-电源"><a href="#2-电源" class="headerlink" title="2. 电源"></a>2. 电源</h3><ul><li><p>采用3.3V电源供电。我们电路采用了两路供电：</p><ol><li>一路是USB的Type-C供电，Type-C提供的是5V，使用芯片AMS1117把5V转成3.3V。</li><li>另一路是ST-Link下载器直接提供3.3V供电（下载器内部已经把5V转成了3.3V）。</li></ol><ul><li><strong>MCU电源</strong></li><li><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=YzIzNzlkYWRhZWQ1NTQ4ODM3OGM4MmVjNDZlOGRkYzNfdjlRbVhscG5Ma24wNGxLczg0aVNuOG9aN1Znc3A3QW5fVG9rZW46T3hrdGJhQnM1b0dGM1l4WkR1dWNzeVNSbm9lXzE3MjUzNjA2ODc6MTcyNTM2NDI4N19WNA" alt="img"></li><li><strong>USB供电转3.3V</strong><br><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=YTNjODYzZjExOTNhOGY0MTVmMTcwNWM5OWIwNDFlNjRfaDhUM3B4MnNSWVlhSENXT1dZOFE1OXB3U0lRb3NBQ1VfVG9rZW46V2lVWmJSQVdhb0pWeEN4dGJ3VWNFeXRUbkFjXzE3MjUzNjA2OTU6MTcyNTM2NDI5NV9WNA" alt="img"></li><li><strong>MCU调试口</strong><br><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=NGM0NzRiMzY4MWQzMmQ5ZDdjZDM3NTBhZDUxMDY5NjFfZFprMTFFNjlUMmhZRjE4ZkNXcUlmQUtzZ1l0VnB4WVJfVG9rZW46QXU5dGJRT0lLb2xaSnB4bFZ2d2NuWFlHbmJvXzE3MjUzNjA3MTA6MTcyNTM2NDMxMF9WNA" alt="img"></li></ul><p>不用额外再接串口模块。</p></li></ul><h3 id="3-时钟"><a href="#3-时钟" class="headerlink" title="3. 时钟"></a>3. 时钟</h3><p>STM32提供了两路外部时钟：外部高速时钟和外部低速时钟。</p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=MDZjM2I1OGRiYmVjMTRmNjIwMGNhZWM2YTdjZDJiN2RfRE1KT0t0MGQ4VmttbmZ4SXBwRXY3RHlaUnVhekNVdnZfVG9rZW46Rk1CV2JUVGtrb3RVSkV4NVljTmNHY25ObnBoXzE3MjUzNjA3MTg6MTcyNTM2NDMxOF9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=OWJjODc3MWI2OTRmNTE5ZjQxOGRhZmMwMDNiOTY5Y2FfZmxqUUI1cDlXaWZaNGNPM1BZVEE1ZTJtV3ZnY2xVRDRfVG9rZW46RHd0d2JrZnlEb2FKUzh4RG1TbmNQdDhlbmhkXzE3MjUzNjA3Mjc6MTcyNTM2NDMyN19WNA" alt="img"></p><h3 id="4-复位"><a href="#4-复位" class="headerlink" title="4. 复位"></a>4. 复位</h3><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=MDNlNzZhNjYxNGIxZDM4ZDZmNDY4ODVhOGE3N2UzMTJfRXE0MHVNN0tPOGQ0MUZ3VXI4bVY1YTJNR0pST2VjYzJfVG9rZW46RDd3M2JaQmFmbzBBWEt4QzBYZWMyc0IzbnZjXzE3MjUzNjA3MzU6MTcyNTM2NDMzNV9WNA" alt="img"></p><h3 id="5-下载调试"><a href="#5-下载调试" class="headerlink" title="5. 下载调试"></a>5. 下载调试</h3><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=OGFhZWEwNWQwYWQ0ZTU1OTEwOTI1MzFiODQzMTEyZWVfMjFTdmFENmlOaUZvUTU3SGVOa2NoWXlMdjVmWXg2eFhfVG9rZW46TUhzeWJHa1FHb245cTF4VEhNNGNQM3ZIbmxlXzE3MjUzNjA4NTc6MTcyNTM2NDQ1N19WNA" alt="img"></p><h2 id="2-点亮LED灯案例（寄存器）"><a href="#2-点亮LED灯案例（寄存器）" class="headerlink" title="2. 点亮LED灯案例（寄存器）"></a>2. 点亮LED灯案例（寄存器）</h2><p>我们首先使用基于寄存器开发方式点亮第一个LED灯。</p><p>在代码期间会涉及到一些寄存器知识，先不要深究，后面再详细介绍。现在要做的就是点亮第一个LED灯。</p><h3 id="1-需求描述"><a href="#1-需求描述" class="headerlink" title="1. 需求描述"></a>1. 需求描述</h3><p>快速体验STM32开发：点亮LED1。</p><h3 id="2-硬件电路设计"><a href="#2-硬件电路设计" class="headerlink" title="2. 硬件电路设计"></a>2. 硬件电路设计</h3><p>LED1-LED3是普通LED灯，LED4为电源指示灯。</p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=NGMxNjE0MDNkNWE0ZGYwNTNkYzg3M2I5NzZiODQ5YzJfUmFOY3FvTG1naTNvQTlIa2Z0Z1p5V2x2bU1JOGw4QlJfVG9rZW46RTI4VGIzdVJUb3VHdjd4SVdBeGM2WnJHbjVmXzE3MjUzNjA5MzU6MTcyNTM2NDUzNV9WNA" alt="img" style="zoom: 200%;" /></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=YmNlNjgwZGI2Nzc2MTNkOWMwMzEyYjJlMWRiZjYyZjVfZktaRm53clFtWnAycTBhN2R2MTB3eXF0enB0VFZ5SWFfVG9rZW46UHdYZ2J4aVhsb3ZwcDN4enBvR2NIQXJRbmFkXzE3MjUzNjA4OTc6MTcyNTM2NDQ5N19WNA" alt="img"></p><p>说明：</p><ol><li>LED1连接的是端口PA0</li><li>只要让PA0引脚输出低电平就可以点亮LED1。</li></ol><h3 id="3-创建项目工程"><a href="#3-创建项目工程" class="headerlink" title="3. 创建项目工程"></a>3. 创建项目工程</h3><h4 id="1-创建工程准备"><a href="#1-创建工程准备" class="headerlink" title="1. 创建工程准备"></a>1. 创建工程准备</h4><h5 id="1-创建需要的目录"><a href="#1-创建需要的目录" class="headerlink" title="1. 创建需要的目录"></a>1. 创建需要的目录</h5><p>在磁盘上创建一个目录 <code>atguigu</code>，然后再在 <code>atguigu</code> 目录下创建我们的第一个工程目录 <code>led_register</code>。</p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=M2Q1M2M4MDQ5YWRkNjQ1ZTJjZmMzOTZlMTIyZDE4MGJfNTI0UEo5eHNpOXplSDZLSnNrNXdyZnBhZkdzejJyeERfVG9rZW46UUF0MGJPRjhob3JyR214MXhnaGNpTzRUbktVXzE3MjUzNjA5NjI6MTcyNTM2NDU2Ml9WNA" alt="img"></p><h5 id="2-准备启动文件"><a href="#2-准备启动文件" class="headerlink" title="2. 准备启动文件"></a>2. 准备启动文件</h5><p>STM32程序需要启动文件，我们需要提前准备好。先去ST官网下载官方提供的外设标准库，里面有提供标准的启动文件，我们从里面copy一份出来。</p><p>标准外设库下载地址：<a href="https://www.st.com/zh/embedded-software/stm32-standard-peripheral-libraries/products.html">ST官网</a></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=MTdhNGE4ZjAzNzZkODE5NzY1NDg2YTEwMDk0YWVkYTJfbVpvSGZFdkc5WnJGUkJVYVQyYklzd1BMU3dXcUl4RXFfVG9rZW46TEV2VGJCVldNb0tvUll4WnM5Z2NOcXVjbnFiXzE3MjUzNjA5NzA6MTcyNTM2NDU3MF9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=ZDdhOWQ5OGY3ZjU2NmY0NjM4NGUyMzczOGE2NzBkOTVfNXliVXZlMzczNklnZDNBb2p4anB1Q0FkeElCMTluSm5fVG9rZW46RmNmZmJqMHAyb3hyTGd4SnhUdmM4ajB3bnlnXzE3MjUzNjA5Nzk6MTcyNTM2NDU3OV9WNA" alt="img"></p><p>下载完成之后解压，后面我们需要从里面copy文件出来。</p><h5 id="3-创建目录放入启动文件和其他核心文件"><a href="#3-创建目录放入启动文件和其他核心文件" class="headerlink" title="3. 创建目录放入启动文件和其他核心文件"></a>3. 创建目录放入启动文件和其他核心文件</h5><p>为了方便管理，我们把启动文件放入专门目录中。在刚才创建的工程目录中创建一个目录：<code>Start</code>（名字没有强制要求，随意，但是最好不要有中文）。</p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=ZWM3ZWY4NGY1OTQwZGY0M2IxMjMwOTU5ZDljY2M5MWFfNHh6M01KR245dmtoTVFnd3lEOFFqRURoYkJibWJ0bFJfVG9rZW46QmE0SmJVNURvb3VLVFZ4WGd3amMyUUFGbjBnXzE3MjUzNjA5ODY6MTcyNTM2NDU4Nl9WNA" alt="img"></p><p>去到我们刚才下载的标准外设库目录，找到我们需要的启动文件和其他核心文件copy到 <code>Start</code> 目录。</p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=NzkzMjY0OTA2YjU4ZDMwYjYwOTQ3OWM4NjU5MzYxYWJfOWVRZXVrbHhvV2o0aExvYlI1cjJxQTBEZmxkVEN5T3pfVG9rZW46Rkhsb2I5MHl4b09aV1J4UWJCV2Ntc2N6bnNmXzE3MjUzNjA5OTE6MTcyNTM2NDU5MV9WNA" alt="img"></p><p>启动文件选择标准：</p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=YmZmM2U4ZGYxNGUxOGI5ZmFhYjM1OTk0N2I5MTgxYzRfSDhrOTBWMjZsTXVuTTJjZUJTc1ZlMlZXMU5LVTVhMzFfVG9rZW46QWVtNWJxVkt5b2YzdHJ4d29aNGNhbVdVbnRnXzE3MjUzNjEwMDU6MTcyNTM2NDYwNV9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=NWI5NzExY2JjM2RjYTE5N2Q3MDg5YWMzM2RhZDM1M2ZfTGRqRjdLSGNaUTNHem02N1c5SzhSMFpiNzFHZGE0VWxfVG9rZW46STlPU2I5R05sbzR4bXp4ck53aWN0ZXEybm1lXzE3MjUzNjEwMjc6MTcyNTM2NDYyN19WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=ODRjYjYyZjlhZTE4YjNkZDcxODExZTM0NmQyYzMxOTlfYlk1ZE9FenV1SDFSWThVSXFwVkJ6ZTZhT2FGTEdBY2xfVG9rZW46Q0JGZmIxTkVob0FvVnB4aGxNZmNZZFdLbnlnXzE3MjUzNjEwNTc6MTcyNTM2NDY1N19WNA" alt="img"></p><p>Copy完之后：<br><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=NzA5ZWIzYWNjMTBiMWM4MTRjMmM2MmM4ZWYzNTIzNjRfQmtVemZYazBkb0ZuYjZXN1pNTFZWY0VBNDNNQnNvcVNfVG9rZW46S3RZWGJKMzNzb0NPZE54T2pTdGNmT291bjdmXzE3MjUzNjEwNjU6MTcyNTM2NDY2NV9WNA" alt="img"></p><h5 id="4-创建工程"><a href="#4-创建工程" class="headerlink" title="4. 创建工程"></a>4. 创建工程</h5><p>打开Keil MDK创建工程。</p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=OWQ0N2E2YTQ5MDMxN2QxM2EzMGNkYTBlMzQ4ZTM0NzJfbThGaXFvMFBaVlZFT0F5c2tPamZ5SGhBMEZoWVdXQlFfVG9rZW46S0pNcmJsUkxGb2tKM3d4N0p5cmNlZ1ZBbmRlXzE3MjUzNjEwNzA6MTcyNTM2NDY3MF9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=MWMxMzk3Mzg2ODQ3YjYyN2NlZTRhNThkYjY2NWEzNzBfWWgxeGpueUlvYk5PN0hVTjRhVXVla2pxQ0ozcjZKbUdfVG9rZW46SVloaWI5ZU1Fb0puUUl4S282a2N6cHpmbnliXzE3MjUzNjEwNzQ6MTcyNTM2NDY3NF9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=YjI2MTlmMTM1NGZiNjUzOWVlYjJkMjRiNTAwMmExZWRfRTBsVDNuaTIxYWhPWW43UnBBNUlkRGg1Mm9aYTd2VlpfVG9rZW46SkNaU2JNb1Yzb0lmSkJ4a1BoNmNwbmV6bnJnXzE3MjUzNjEwODI6MTcyNTM2NDY4Ml9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=YWYyY2JkNDU4NTc5YWM2YTM0ZjdkZDcyNTBmNzM4YjFfQ01RR0lhQW5PeUxKUmo1ZFRHNmE5Q0FNc0ZMVmtXaTRfVG9rZW46Wldwa2I2TUlDb3E2M0V4Zm81MWNydXNBbmloXzE3MjUzNjEwODk6MTcyNTM2NDY4OV9WNA" alt="img"></p><h4 id="2-工程配置"><a href="#2-工程配置" class="headerlink" title="2. 工程配置"></a>2. 工程配置</h4><h5 id="1-添加两个Project-Group方便管理代码文件。"><a href="#1-添加两个Project-Group方便管理代码文件。" class="headerlink" title="1. 添加两个Project Group方便管理代码文件。"></a>1. 添加两个Project Group方便管理代码文件。</h5><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=OGFlZDZkZmJhN2RkYTQ4ZTJiODU1ZWMxYmZhYjY2ODVfZ29CbnpCTGI0OTlPbGZ1bWZZeWtaZ2JKRlAzTUF0YnJfVG9rZW46T0pSZmJTUjV5b2JOQTd4RGNOTWNhZ2tYbm1jXzE3MjUzNjExMDM6MTcyNTM2NDcwM19WNA" alt="img"></p><h5 id="2-先删除默认的-Source-Group-1，再添加两个：Start（启动相关的文件），User（我们自己写的代码）。"><a href="#2-先删除默认的-Source-Group-1，再添加两个：Start（启动相关的文件），User（我们自己写的代码）。" class="headerlink" title="2. 先删除默认的 Source Group 1，再添加两个：Start（启动相关的文件），User（我们自己写的代码）。"></a>2. 先删除默认的 <code>Source Group 1</code>，再添加两个：<code>Start</code>（启动相关的文件），<code>User</code>（我们自己写的代码）。</h5><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=MmNmZGViNzY2Mzk4OTRjZjcyNmNiNjBhNGZjZDEwMWFfNkxBQzhYckVuMUttd3NHbjR0dVBqNWVuclY3bGJGUThfVG9rZW46UHU4SWJyNU51bzdoU054VHViT2NFVmY3bjNiXzE3MjUzNjExMDc6MTcyNTM2NDcwN19WNA" alt="img"><br><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=YTAxNjI4ZDE5MWEwZDViOWQ0NGYxODc2MjM3OGUzOGVfVUJ3SG9sYU8yVUdLaTJNNWpVT0szaUVGT3dTSTJiSk5fVG9rZW46UGVKWmJjaDRzb0t3RmZ4WVpFcGNFa3ZIbmhkXzE3MjUzNjExMTU6MTcyNTM2NDcxNV9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=NWVlMWVlNGFmMDlmODI3MjZiNDQ5ODRhYzZjMjVlOWVfNkRYelNsZ1luTHFkV2I0UTgwell5V05IY3ZLQnFiQWhfVG9rZW46RThZdmJ3Nzkxb2ZWVFd4emdTQ2NmakpPbmxiXzE3MjUzNjExMzg6MTcyNTM2NDczOF9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=NDNhOTUwN2RmYjVhN2Y4ODRiZDI0ZGYwZTUyZTY2NzlfOWcxTldlYlZwcTZQV09kODlKTEM1emdJSVlwY09TSWFfVG9rZW46WGhzYWI2ZzVUb29WTE54UktHemM5VkVZbnJTXzE3MjUzNjExNDc6MTcyNTM2NDc0N19WNA" alt="img"></p><h5 id="3-创建-main-c-文件"><a href="#3-创建-main-c-文件" class="headerlink" title="3. 创建 main.c 文件"></a>3. 创建 <code>main.c</code> 文件</h5><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=MzU4ZjdmOWIwMDk5OGIxOTJhNTYwYmIwZTg4MjU4ZjlfUXVGZE1pOFd6dDZaWkNpc1JoSmtSZGZwTzBoUmFaTXlfVG9rZW46WUh5SWJOcHc2b25oeTl4Q1prVmM2MnZTbm1jXzE3MjUzNjExNjM6MTcyNTM2NDc2M19WNA" alt="img"></p><p><code>User</code>路径不存在，让它帮我们创建。</p><p><img src="链接到创建路径图片" alt="创建路径"></p>]]></content>
      
      
      <categories>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STM32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试</title>
      <link href="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/"/>
      <url>/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 蓝桥杯32 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第2篇文章</title>
      <link href="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/MCU/mm/"/>
      <url>/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/MCU/mm/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 蓝桥杯51 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>测试</title>
      <link href="/2024/09/01/%E6%9D%82%E8%B0%88/sb/"/>
      <url>/2024/09/01/%E6%9D%82%E8%B0%88/sb/</url>
      
        <content type="html"><![CDATA[<h1 id="STM32单片机基础篇"><a href="#STM32单片机基础篇" class="headerlink" title="STM32单片机基础篇"></a>STM32单片机基础篇</h1><h2 id="1-开发板简介"><a href="#1-开发板简介" class="headerlink" title="1. 开发板简介"></a>1. 开发板简介</h2><h2 id="1-开发板实物图"><a href="#1-开发板实物图" class="headerlink" title="1. 开发板实物图"></a>1. 开发板实物图</h2><h2 id="2-核心板原理图"><a href="#2-核心板原理图" class="headerlink" title="2. 核心板原理图"></a>2. 核心板原理图</h2><h2 id="3-扩展板原理图"><a href="#3-扩展板原理图" class="headerlink" title="3. 扩展板原理图"></a>3. 扩展板原理图</h2><h2 id="4-STM32最小系统"><a href="#4-STM32最小系统" class="headerlink" title="4. STM32最小系统"></a>4. STM32最小系统</h2><h6 id="STM32单片机能工作的最小外围电路就叫-最小系统-。"><a href="#STM32单片机能工作的最小外围电路就叫-最小系统-。" class="headerlink" title="STM32单片机能工作的最小外围电路就叫 最小系统 。"></a>STM32单片机能工作的最小外围电路就叫 最小系统 。</h6><h6 id="最小系统通常包括：-STM32芯片、电源、时钟、下载调试和复位-5-部分组成。"><a href="#最小系统通常包括：-STM32芯片、电源、时钟、下载调试和复位-5-部分组成。" class="headerlink" title="最小系统通常包括： STM32芯片、电源、时钟、下载调试和复位 5 部分组成。"></a>最小系统通常包括： STM32芯片、电源、时钟、下载调试和复位 5 部分组成。</h6><h6 id="1-STM32芯片"><a href="#1-STM32芯片" class="headerlink" title="1. STM32芯片"></a>1. STM32芯片</h6><h6 id="选用的是-STM32F103ZET6-这款芯片。"><a href="#选用的是-STM32F103ZET6-这款芯片。" class="headerlink" title="选用的是 STM32F103ZET6 这款芯片。"></a>选用的是 STM32F103ZET6 这款芯片。</h6><h6 id="2-电源"><a href="#2-电源" class="headerlink" title="2. 电源"></a>2. 电源</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a. 采用3.3V电源供电。我们电路采用了两路供电。</span><br><span class="line">b. 一路是USB的TypeC供电，TypeC提供的是5V，使用芯片AMS1117把5V转成 3 .3V。</span><br><span class="line">c. 另一路是STLink下载器直接提供3.3V供电（下载器内部已经把5V转成了3.3V）。</span><br></pre></td></tr></table></figure><ul><li><p>MCU电源</p></li><li><p>USB供电转3.3v</p></li><li><p>MCU调试口</p></li></ul><h6 id="不用额外再接串口模块。"><a href="#不用额外再接串口模块。" class="headerlink" title="不用额外再接串口模块。"></a>不用额外再接串口模块。</h6><h6 id="3-时钟"><a href="#3-时钟" class="headerlink" title="3. 时钟"></a>3. 时钟</h6><h6 id="SMT32提供了两路外部时钟：-外部高速时钟和外部低速时钟-。"><a href="#SMT32提供了两路外部时钟：-外部高速时钟和外部低速时钟-。" class="headerlink" title="SMT32提供了两路外部时钟： 外部高速时钟和外部低速时钟 。"></a>SMT32提供了两路外部时钟： 外部高速时钟和外部低速时钟 。</h6><h6 id="4-复位"><a href="#4-复位" class="headerlink" title="4. 复位"></a>4. 复位</h6><h6 id="5-下载调试"><a href="#5-下载调试" class="headerlink" title="5. 下载调试"></a>5. 下载调试</h6><h2 id="2-点亮LED灯案例（寄存器）"><a href="#2-点亮LED灯案例（寄存器）" class="headerlink" title="2. 点亮LED灯案例（寄存器）"></a>2. 点亮LED灯案例（寄存器）</h2><h6 id="我们首先使用基于寄存器开发方式点亮第一个LED灯。"><a href="#我们首先使用基于寄存器开发方式点亮第一个LED灯。" class="headerlink" title="我们首先使用基于寄存器开发方式点亮第一个LED灯。"></a>我们首先使用基于寄存器开发方式点亮第一个LED灯。</h6><h6 id="在代码期间会涉及到一些寄存器知识，先不要深究，后面再详细介绍。现在要做的就是点亮第一"><a href="#在代码期间会涉及到一些寄存器知识，先不要深究，后面再详细介绍。现在要做的就是点亮第一" class="headerlink" title="在代码期间会涉及到一些寄存器知识，先不要深究，后面再详细介绍。现在要做的就是点亮第一"></a>在代码期间会涉及到一些寄存器知识，先不要深究，后面再详细介绍。现在要做的就是点亮第一</h6><h6 id="个LED灯。"><a href="#个LED灯。" class="headerlink" title="个LED灯。"></a>个LED灯。</h6><h3 id="1-需求描述"><a href="#1-需求描述" class="headerlink" title="1. 需求描述"></a>1. 需求描述</h3><h6 id="快速体验STM32开发：点亮LED1。"><a href="#快速体验STM32开发：点亮LED1。" class="headerlink" title="快速体验STM32开发：点亮LED1。"></a>快速体验STM32开发：点亮LED1。</h6><h3 id="2-硬件电路设计"><a href="#2-硬件电路设计" class="headerlink" title="2. 硬件电路设计"></a>2. 硬件电路设计</h3><h6 id="LED1-LED3是普通LED灯，LED4为电源指示灯。"><a href="#LED1-LED3是普通LED灯，LED4为电源指示灯。" class="headerlink" title="LED1-LED3是普通LED灯，LED4为电源指示灯。"></a>LED1-LED3是普通LED灯，LED4为电源指示灯。</h6><h6 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a. LED1连接的是端口PA0</span><br><span class="line">b. 只要让PA0引脚输出低电平就可以点亮LED1。</span><br></pre></td></tr></table></figure><h3 id="3-创建项目工程"><a href="#3-创建项目工程" class="headerlink" title="3. 创建项目工程"></a>3. 创建项目工程</h3><h4 id="1-创建工程准备"><a href="#1-创建工程准备" class="headerlink" title="1. 创建工程准备"></a>1. 创建工程准备</h4><h6 id="1-创建需要的目录"><a href="#1-创建需要的目录" class="headerlink" title="1. 创建需要的目录"></a>1. 创建需要的目录</h6><p>在磁盘上创建一个目录atguigu，然后再在atguigu目录下创建我们的第一个工程目录<br>led_register。</p><h6 id="2-准备启动文件"><a href="#2-准备启动文件" class="headerlink" title="2. 准备启动文件"></a>2. 准备启动文件</h6><h6 id="STM32程序需要启动文件，我们需要提前准备好。先去ST官网下载官方提供的外设标准库，里面"><a href="#STM32程序需要启动文件，我们需要提前准备好。先去ST官网下载官方提供的外设标准库，里面" class="headerlink" title="STM32程序需要启动文件，我们需要提前准备好。先去ST官网下载官方提供的外设标准库，里面"></a>STM32程序需要启动文件，我们需要提前准备好。先去ST官网下载官方提供的外设标准库，里面</h6><p>有提供标准的启动文件，我们从里面copy一份出来。</p><p>标准外设库下载地址： <strong><a href="https://www.st.com/zh/embedded-software/stm32-standard-">https://www.st.com/zh/embedded-software/stm32-standard-</a><br>peripheral-libraries/products.html</strong> </p><p>下载完成之后解压，后面我们需要从里面copy文件出来。</p><ol><li>创建目录放入启动文件和其他核心文件<br>为了方便管理，我们把启动文件放入专⻔目录中。在刚才创建的工程目录中创建一个目录：Start<br>（名字没有强制要求，随意，但是最好不要有中文）。</li></ol><p>去到我们刚才下载的标准外设库目录，找到我们需要的启动文件和其他核心文件copy到S tart目<br>录。</p><h6 id="启动文件选择标准："><a href="#启动文件选择标准：" class="headerlink" title="启动文件选择标准："></a>启动文件选择标准：</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Copy完之后：</span><br></pre></td></tr></table></figure><h6 id="4-创建工程"><a href="#4-创建工程" class="headerlink" title="4. 创建工程"></a>4. 创建工程</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">打开KeilMDK创建工程。</span><br></pre></td></tr></table></figure><h4 id="2-工程配置"><a href="#2-工程配置" class="headerlink" title="2. 工程配置"></a>2. 工程配置</h4><ol><li><p>添加两个ProjectGroup方便管理代码文件。</p></li><li><p>先删除默认的SourceGroup1，再添加两个：Start（启动相关的文件），User（我们自己写的代<br>码）。</p></li><li><p>创建main.c文件</p></li></ol><p>User路径不存在，让它帮我们创建。</p><h4 id="3-编译配置"><a href="#3-编译配置" class="headerlink" title="3. 编译配置"></a>3. 编译配置</h4><h6 id="1-编译器版本改为-5"><a href="#1-编译器版本改为-5" class="headerlink" title="1. 编译器版本改为 5 "></a>1. 编译器版本改为 5 </h6><p>目前最新的KeilARM用的是Compilerversion6，与前面的core_cm3.c不兼容，所以需要提前准<br>备好Compilerversion5。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">下载地址： https://developer.arm.com/downloads/view/ACOMP5 </span><br><span class="line">解压之后，把解压的后文件夹放入到 KeilMDK的安装目录 下：</span><br></pre></td></tr></table></figure><h6 id="2-一些其他配置"><a href="#2-一些其他配置" class="headerlink" title="2. 一些其他配置"></a>2. 一些其他配置</h6><h3 id="4-软件设计"><a href="#4-软件设计" class="headerlink" title="4. 软件设计"></a>4. 软件设计</h3><h4 id="1-main-c"><a href="#1-main-c" class="headerlink" title="1. main.c"></a>1. main.c</h4><h6 id="根据前面硬件电路设计，我们只要让-GPIOA的-0-口输出低电平就行了-。代码需要按照下面的步骤来"><a href="#根据前面硬件电路设计，我们只要让-GPIOA的-0-口输出低电平就行了-。代码需要按照下面的步骤来" class="headerlink" title="根据前面硬件电路设计，我们只要让 GPIOA的 0 口输出低电平就行了 。代码需要按照下面的步骤来"></a>根据前面硬件电路设计，我们只要让 GPIOA的 0 口输出低电平就行了 。代码需要按照下面的步骤来</h6><h6 id="实现。"><a href="#实现。" class="headerlink" title="实现。"></a>实现。</h6><h6 id="1-开启时钟"><a href="#1-开启时钟" class="headerlink" title="1. 开启时钟"></a>1. 开启时钟</h6><h6 id="在STM32中，让IO口工作，必须先开启对应的时钟。所以需要先查找到开启时钟的寄存器，然后"><a href="#在STM32中，让IO口工作，必须先开启对应的时钟。所以需要先查找到开启时钟的寄存器，然后" class="headerlink" title="在STM32中，让IO口工作，必须先开启对应的时钟。所以需要先查找到开启时钟的寄存器，然后"></a>在STM32中，让IO口工作，必须先开启对应的时钟。所以需要先查找到开启时钟的寄存器，然后</h6><h6 id="通过该寄存器操作时钟的开启或关闭。我们要打开的是GPIOA的时钟。"><a href="#通过该寄存器操作时钟的开启或关闭。我们要打开的是GPIOA的时钟。" class="headerlink" title="通过该寄存器操作时钟的开启或关闭。我们要打开的是GPIOA的时钟。"></a>通过该寄存器操作时钟的开启或关闭。我们要打开的是GPIOA的时钟。</h6><h6 id="我们需要知道RCC-APB2ENR这个寄存器的地址。如何查找呢？先知道RCC这个外设的基地址，然"><a href="#我们需要知道RCC-APB2ENR这个寄存器的地址。如何查找呢？先知道RCC这个外设的基地址，然" class="headerlink" title="我们需要知道RCC_APB2ENR这个寄存器的地址。如何查找呢？先知道RCC这个外设的基地址，然"></a>我们需要知道RCC_APB2ENR这个寄存器的地址。如何查找呢？先知道RCC这个外设的基地址，然</h6><h6 id="后加上这个寄存器的偏移地址就行了。"><a href="#后加上这个寄存器的偏移地址就行了。" class="headerlink" title="后加上这个寄存器的偏移地址就行了。"></a>后加上这个寄存器的偏移地址就行了。</h6><p>从上面可以看出来，RCC的基地址是0x40021000，APB2ENR的偏移量是0x18，所以 <strong>APB2ENR的<br>地址值是0x40021000+0x18</strong> </p><p>有了地址，在这个地址写入一个数据，这个数据的二进制第 2 是 1 就行了。其他位暂时不管。我们<br>写入 4 。这样就开启了GPIOA的时钟。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在代码中，我们需要把地址强转成指针才能给这个地址赋值。</span><br><span class="line">1 *(uint32_t *)(0x40021000 + 0x18) = 4 ;</span><br></pre></td></tr></table></figure><h6 id="2-给IO口设置输出模式"><a href="#2-给IO口设置输出模式" class="headerlink" title="2. 给IO口设置输出模式"></a>2. 给IO口设置输出模式</h6><h6 id="在STM32中，如果要让IO口输出低电平或高电平，必须给要使用的IO设置为输出模式。"><a href="#在STM32中，如果要让IO口输出低电平或高电平，必须给要使用的IO设置为输出模式。" class="headerlink" title="在STM32中，如果要让IO口输出低电平或高电平，必须给要使用的IO设置为输出模式。"></a>在STM32中，如果要让IO口输出低电平或高电平，必须给要使用的IO设置为输出模式。</h6><h6 id="根据前面的思路，需要先找到GPIOA的基地址，再根据偏移地址找到要使用的寄存器的地址。"><a href="#根据前面的思路，需要先找到GPIOA的基地址，再根据偏移地址找到要使用的寄存器的地址。" class="headerlink" title="根据前面的思路，需要先找到GPIOA的基地址，再根据偏移地址找到要使用的寄存器的地址。"></a>根据前面的思路，需要先找到GPIOA的基地址，再根据偏移地址找到要使用的寄存器的地址。</h6><p>GPIOA的基地址是 <strong>0x40010800</strong> 。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">配置PA0口的输出模式的寄存器是GPIOA_CRL。</span><br></pre></td></tr></table></figure><h6 id="只需要让这个寄存器的最后-4-位是0011，就是最大速度的推挽输出。"><a href="#只需要让这个寄存器的最后-4-位是0011，就是最大速度的推挽输出。" class="headerlink" title="只需要让这个寄存器的最后 4 位是0011，就是最大速度的推挽输出。"></a>只需要让这个寄存器的最后 4 位是0011，就是最大速度的推挽输出。</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 *(uint32_t *)(0x40010800 + 0x00) = 3 ;</span><br></pre></td></tr></table></figure><h6 id="3-给PA0口输出-0"><a href="#3-给PA0口输出-0" class="headerlink" title="3. 给PA0口输出 0 "></a>3. 给PA0口输出 0 </h6><h6 id="给指定PA0口输出-0-就可以点亮LED1了。用到的寄存器是ODR数据输出寄存器。"><a href="#给指定PA0口输出-0-就可以点亮LED1了。用到的寄存器是ODR数据输出寄存器。" class="headerlink" title="给指定PA0口输出 0 就可以点亮LED1了。用到的寄存器是ODR数据输出寄存器。"></a>给指定PA0口输出 0 就可以点亮LED1了。用到的寄存器是ODR数据输出寄存器。</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">ODR寄存器的地址是 0x40010800+0x0c 。给这个地址的第 0 位写 0 ，其他位写 1 。</span><br><span class="line">1 *(uint32_t *)((0x40010800 + 0x0c)) = 0xfffe;</span><br><span class="line">main.c具体代码清单。 </span><br><span class="line">#include &quot;stdint.h&quot;</span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">/* 开启GPIOA的时钟 */</span><br><span class="line">*(uint32_t *)(0x40021000 + 0x18) = 4 ;</span><br><span class="line">/* 给PA0设置为通用推挽输出 */</span><br><span class="line">*(uint32_t *)(0x40010800 + 0x00) = 3 ;</span><br><span class="line">/* 给输出寄存器赋值 */</span><br><span class="line">*(uint32_t *)(0x40010800 + 0x0c) = 0xfffe;</span><br><span class="line">while ( 1 )</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">1 2 3 4 5 6 7 8 9</span><br></pre></td></tr></table></figure><p>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17</p><h4 id="2-编译工程"><a href="#2-编译工程" class="headerlink" title="2. 编译工程"></a>2. 编译工程</h4><h4 id="3-安装ST-LINK驱动"><a href="#3-安装ST-LINK驱动" class="headerlink" title="3. 安装ST-LINK驱动"></a>3. 安装ST-LINK驱动</h4><h6 id="1-我们使用ST-LINK仿真器下载程序。"><a href="#1-我们使用ST-LINK仿真器下载程序。" class="headerlink" title="1. 我们使用ST-LINK仿真器下载程序。"></a>1. 我们使用ST-LINK仿真器下载程序。</h6><ol><li><p>Keil的安装目录下自带了ST-LINK的USB驱动，双击安装即可。</p></li><li><p>升级STLink固件</p></li></ol><h4 id="4-Keil中配置ST-LINK"><a href="#4-Keil中配置ST-LINK" class="headerlink" title="4. Keil中配置ST-LINK"></a>4. Keil中配置ST-LINK</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">还需要在Keil软件中，对仿真器做一些必要的配置。</span><br></pre></td></tr></table></figure><h4 id="5-下载程序"><a href="#5-下载程序" class="headerlink" title="5. 下载程序"></a>5. 下载程序</h4><h4 id="6-操作寄存器方式的”进化”"><a href="#6-操作寄存器方式的”进化”" class="headerlink" title="6. 操作寄存器方式的”进化”"></a>6. 操作寄存器方式的”进化”</h4><h5 id="1-“进化1”"><a href="#1-“进化1”" class="headerlink" title="1. “进化1”"></a>1. “进化1”</h5><h6 id="在操作寄存器的时候，如果每次都查手册计算地址，是相当麻烦且无聊。ST公司早就考虑到了这"><a href="#在操作寄存器的时候，如果每次都查手册计算地址，是相当麻烦且无聊。ST公司早就考虑到了这" class="headerlink" title="在操作寄存器的时候，如果每次都查手册计算地址，是相当麻烦且无聊。ST公司早就考虑到了这"></a>在操作寄存器的时候，如果每次都查手册计算地址，是相当麻烦且无聊。ST公司早就考虑到了这</h6><h6 id="个问题，已经提前把每个外设寄存器的地址提前给我们用-宏定义-的方式给算好了，我只需要直接使用"><a href="#个问题，已经提前把每个外设寄存器的地址提前给我们用-宏定义-的方式给算好了，我只需要直接使用" class="headerlink" title="个问题，已经提前把每个外设寄存器的地址提前给我们用 宏定义 的方式给算好了，我只需要直接使用"></a>个问题，已经提前把每个外设寄存器的地址提前给我们用 宏定义 的方式给算好了，我只需要直接使用</h6><p>即可。比如下面是定义的RCC各个寄存器地址。（stm32f10x.h中定义）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">1 #define PERIPH_BASE ((uint32_t)0x40000000)</span><br><span class="line">#define AHBPERIPH_BASE (PERIPH_BASE + 0x20000)</span><br><span class="line">#define RCC_BASE (AHBPERIPH_BASE + 0x1000)</span><br><span class="line">#define RCC ((RCC_TypeDef *) RCC_BASE)</span><br><span class="line">typedef struct</span><br><span class="line">&#123;</span><br><span class="line">__IO uint32_t CR;</span><br><span class="line">__IO uint32_t CFGR;</span><br><span class="line">__IO uint32_t CIR;</span><br><span class="line">__IO uint32_t APB2RSTR;</span><br><span class="line">__IO uint32_t APB1RSTR;</span><br><span class="line">__IO uint32_t AHBENR;</span><br><span class="line">__IO uint32_t APB2ENR;</span><br><span class="line">__IO uint32_t APB1ENR;</span><br><span class="line">__IO uint32_t BDCR;</span><br><span class="line">__IO uint32_t CSR;</span><br><span class="line">&#125; RCC_TypeDef;</span><br><span class="line">2 3 4 5 6 7 8 9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td></tr></table></figure><h6 id="这里还巧妙的运用了-结构体中各个成员地址是连续的特征-。CR寄存器是RCC第-0-个-32-位寄存器，所"><a href="#这里还巧妙的运用了-结构体中各个成员地址是连续的特征-。CR寄存器是RCC第-0-个-32-位寄存器，所" class="headerlink" title="这里还巧妙的运用了 结构体中各个成员地址是连续的特征 。CR寄存器是RCC第 0 个 32 位寄存器，所"></a>这里还巧妙的运用了 结构体中各个成员地址是连续的特征 。CR寄存器是RCC第 0 个 32 位寄存器，所</h6><h6 id="以它相对于基地址的偏移是-0-。CFGR相对于基地址的偏移是-4-，…"><a href="#以它相对于基地址的偏移是-0-。CFGR相对于基地址的偏移是-4-，…" class="headerlink" title="以它相对于基地址的偏移是 0 。CFGR相对于基地址的偏移是 4 ，…"></a>以它相对于基地址的偏移是 0 。CFGR相对于基地址的偏移是 4 ，…</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">APB2ENR的相对于基地址的偏移是6*4=24=0x18，和我们前面查找手册的结果是一致的。</span><br><span class="line">#include &quot;stm32f10x.h&quot;</span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">RCC-&gt;APB2ENR = 4 ;</span><br><span class="line">GPIOA-&gt;CRL = 3 ;</span><br><span class="line">GPIOA-&gt;ODR = 0xfffe;</span><br><span class="line">while ( 1 )</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">1 2 3 4 5 6 7 8 9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td></tr></table></figure><h6 id="这样写起来是不是可读性就好很多了，而且也简单了很多。"><a href="#这样写起来是不是可读性就好很多了，而且也简单了很多。" class="headerlink" title="这样写起来是不是可读性就好很多了，而且也简单了很多。"></a>这样写起来是不是可读性就好很多了，而且也简单了很多。</h6><h5 id="2-“进化2”"><a href="#2-“进化2”" class="headerlink" title="2. “进化2”"></a>2. “进化2”</h5><h6 id="其实在上面的代码中还有一些问题。在STM32中一个寄存器是-32-位的，我们在编写代码的时候只"><a href="#其实在上面的代码中还有一些问题。在STM32中一个寄存器是-32-位的，我们在编写代码的时候只" class="headerlink" title="其实在上面的代码中还有一些问题。在STM32中一个寄存器是 32 位的，我们在编写代码的时候只"></a>其实在上面的代码中还有一些问题。在STM32中一个寄存器是 32 位的，我们在编写代码的时候只</h6><h6 id="是需要给某位或某几位赋值。由于STM32不支持位寻址，所以在前面的操作中，我们其实是修改了所"><a href="#是需要给某位或某几位赋值。由于STM32不支持位寻址，所以在前面的操作中，我们其实是修改了所" class="headerlink" title="是需要给某位或某几位赋值。由于STM32不支持位寻址，所以在前面的操作中，我们其实是修改了所"></a>是需要给某位或某几位赋值。由于STM32不支持位寻址，所以在前面的操作中，我们其实是修改了所</h6><h6 id="有位。这是非常不合理的，也许其他位在其他地方有赋值，我们重新赋值势必会覆盖了其他值，带来"><a href="#有位。这是非常不合理的，也许其他位在其他地方有赋值，我们重新赋值势必会覆盖了其他值，带来" class="headerlink" title="有位。这是非常不合理的，也许其他位在其他地方有赋值，我们重新赋值势必会覆盖了其他值，带来"></a>有位。这是非常不合理的，也许其他位在其他地方有赋值，我们重新赋值势必会覆盖了其他值，带来</h6><h6 id="的后果也是很严重的。"><a href="#的后果也是很严重的。" class="headerlink" title="的后果也是很严重的。"></a>的后果也是很严重的。</h6><h6 id="如何只修改特定的位的值，而不影响其他位呢？我们需要先回顾下一些常⻅的位操作，再来继续"><a href="#如何只修改特定的位的值，而不影响其他位呢？我们需要先回顾下一些常⻅的位操作，再来继续" class="headerlink" title="如何只修改特定的位的值，而不影响其他位呢？我们需要先回顾下一些常⻅的位操作，再来继续"></a>如何只修改特定的位的值，而不影响其他位呢？我们需要先回顾下一些常⻅的位操作，再来继续</h6><h6 id="进化上面的代码。"><a href="#进化上面的代码。" class="headerlink" title="进化上面的代码。"></a>进化上面的代码。</h6><h6 id="1-常用的一些位操作回顾"><a href="#1-常用的一些位操作回顾" class="headerlink" title="1. 常用的一些位操作回顾"></a>1. 常用的一些位操作回顾</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;stdio.h&quot;</span><br><span class="line">#include &quot;stdlib.h&quot;</span><br><span class="line">char buffer[ 100 ] = &#123; 0 &#125;;</span><br><span class="line">void printfBinary(unsigned char *op, unsigned char result)</span><br><span class="line">&#123;</span><br><span class="line">itoa(result, buffer, 2 ); // 把result转成 2 进制字符串</span><br><span class="line">printf(&quot;%s = %s\r\n&quot;, op, buffer);</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">/* 左移 8&lt;&lt;1 = 1000&lt;&lt;1 = 10000*/</span><br><span class="line">printfBinary(&quot;8 &lt;&lt; 1&quot;, 8 &lt;&lt; 1 );</span><br><span class="line">/* 右移 8&gt;&gt;1 = 1000&gt;&gt;1 = 100*/</span><br><span class="line">printfBinary(&quot;8 &gt;&gt; 1&quot;, 8 &gt;&gt; 1 );</span><br><span class="line">/* 按位或 8|7 = 1000|0111 = 1111 */</span><br><span class="line">printfBinary(&quot;8 | 7&quot;, 8 | 7 );</span><br><span class="line">/* 按位或 8&amp;7 = 1000&amp;0111 = 0000 */</span><br><span class="line">printfBinary(&quot;8 &amp; 7&quot;, 8 &amp; 7 );</span><br><span class="line">/* 按位取反 ~8 = ~1000 = 0111 */</span><br><span class="line">printfBinary(&quot;~8&quot;, ~ 8 );</span><br><span class="line">/*</span><br><span class="line">把某位置 1  (0 位 1 位 ...)</span><br><span class="line">比如把 mum 的第 2 位置 1</span><br></pre></td></tr></table></figure><ol><li>得到一个数第 2 位是 1 其他都为 0<br>a = 0000 0100 是由 1&lt;&lt;2 得到</li><li>让 num | a<br>*/<br>printfBinary(“8置第 2 位为 1 “, 8 | ( 1 &lt;&lt; 2 ));</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">把连续的多位同时置 1  (0 位 1 位 ...)</span><br><span class="line">比如把 mum 的第 1 和 2 位置 1</span><br><span class="line">1  a =  3 &lt;&lt; 1</span><br><span class="line">1 2 3 4 5 6 7 8 9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td></tr></table></figure><ol><li>num | a<br>*/<br>printfBinary(“8置第 1 和 2 位为 1 “, 8 | ( 3 &lt;&lt; 1 ));</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">把某位置 0  (0位 1 位 ...)</span><br><span class="line">比如把 mum 的第 2 位置 0</span><br></pre></td></tr></table></figure><ol><li>得到一个数第 2 位是 0 其他都为 1<br>a = 1111 0100 是由 ~(1&lt;&lt;2) 得到</li><li>让 num &amp; a<br>*/<br>printfBinary(“7置第 2 位为 0 “, 7 &amp; ~( 1 &lt;&lt; 2 ));</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">把连续多位同时置 0  (0位 1 位 ...)</span><br><span class="line">比如把 mum 的第 1 和 2 位置 0</span><br></pre></td></tr></table></figure><ol><li>a = ~(3&lt;&lt;1)</li><li>让 num &amp; a<br>*/<br>printfBinary(“7置第 1 和 2 位为 0 “, 7 &amp; ~( 3 &lt;&lt; 1 ));</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">把连续的多位同时置位  101 (二进制)</span><br><span class="line">比如把 mum 的第 1,2,3 位置为 101</span><br></pre></td></tr></table></figure><ol><li>num的 1,2,3位置为 0<br>num &amp;= ~(7&lt;&lt;1)</li><li>num |= (5 &lt;&lt; 1); (5 = 101)<br>*/</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">unsigned char num = 13 ;</span><br><span class="line">num &amp;= ~( 7 &lt;&lt; 1 );</span><br><span class="line">num |= 5 &lt;&lt; 1 ;</span><br><span class="line">printfBinary(&quot;13&quot;, 13 );</span><br><span class="line">printfBinary(&quot;10的 123 位置为101 &quot;, num);</span><br><span class="line">&#125;</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td></tr></table></figure><h6 id="2-继续进化"><a href="#2-继续进化" class="headerlink" title="2. 继续进化"></a>2. 继续进化</h6><h6 id="根据前面基本位操作的回顾，我们综合使用这些位操作，可以把代码进化为下面的形式。"><a href="#根据前面基本位操作的回顾，我们综合使用这些位操作，可以把代码进化为下面的形式。" class="headerlink" title="根据前面基本位操作的回顾，我们综合使用这些位操作，可以把代码进化为下面的形式。"></a>根据前面基本位操作的回顾，我们综合使用这些位操作，可以把代码进化为下面的形式。</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;stm32f10x.h&quot;</span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">/* 开启GPIOA的时钟 第 2 位置1*/</span><br><span class="line">RCC-&gt;APB2ENR |= 0x1 &lt;&lt; 2 ;</span><br><span class="line">1 2 3 4 5 6</span><br><span class="line">/* GPIOA_CRL的最后 4 位置 0011 */</span><br><span class="line">GPIOA-&gt;CRL &amp;= ~(0x1 &lt;&lt; 3 );</span><br><span class="line">GPIOA-&gt;CRL &amp;= ~(0x1 &lt;&lt; 2 );</span><br><span class="line">GPIOA-&gt;CRL |= 0x1 &lt;&lt; 1 ;</span><br><span class="line">GPIOA-&gt;CRL |= 0x1 &lt;&lt; 0 ;</span><br><span class="line">/* GPIOA_ODR的第 0 位置0 */</span><br><span class="line">GPIOA-&gt;ODR &amp;= ~(0x1 &lt;&lt; 0 );</span><br><span class="line">while ( 1 )</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td></tr></table></figure><h5 id="3-“进化3”"><a href="#3-“进化3”" class="headerlink" title="3. “进化3”"></a>3. “进化3”</h5><h6 id="在上次的进化中，我们是给寄存器“或等”和“与等”了一些值，这些值都是通过相应的“移"><a href="#在上次的进化中，我们是给寄存器“或等”和“与等”了一些值，这些值都是通过相应的“移" class="headerlink" title="在上次的进化中，我们是给寄存器“或等”和“与等”了一些值，这些值都是通过相应的“移"></a>在上次的进化中，我们是给寄存器“或等”和“与等”了一些值，这些值都是通过相应的“移</h6><p>位”操作得到的。比如要操作第 2 位，就需要把0x1左移 2 位得到。我们需要查找手册才能知道要移位<br>几。也是很不方便。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">其实ST公司也把我们需要的 移位后的值给提前计算好 了，用宏定义的方式供我们使用。</span><br><span class="line">比如前面的开启时钟，已经定义了好了这个值。正好就是1&lt;&lt;2</span><br><span class="line">1 #define RCC_APB2ENR_IOPAEN ((uint32_t)0x00000004)</span><br></pre></td></tr></table></figure><h6 id="利用ST公司提前预定义的这些值，可以进一步进化代码为下面的形式。"><a href="#利用ST公司提前预定义的这些值，可以进一步进化代码为下面的形式。" class="headerlink" title="利用ST公司提前预定义的这些值，可以进一步进化代码为下面的形式。"></a>利用ST公司提前预定义的这些值，可以进一步进化代码为下面的形式。</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;stm32f10x.h&quot;</span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">RCC-&gt;APB2ENR |= RCC_APB2ENR_IOPAEN;</span><br><span class="line">GPIOA-&gt;CRL &amp;= ~GPIO_CRL_CNF0_1;</span><br><span class="line">GPIOA-&gt;CRL &amp;= ~GPIO_CRL_CNF0_0;</span><br><span class="line">GPIOA-&gt;CRL |= GPIO_CRL_MODE0_1;</span><br><span class="line">GPIOA-&gt;CRL |= GPIO_CRL_MODE0_0;</span><br><span class="line">GPIOA-&gt;ODR &amp;= ~GPIO_ODR_ODR0;</span><br><span class="line">while ( 1 )</span><br><span class="line">1 2 3 4 5 6 7 8 9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td></tr></table></figure><h6 id="这样可读性就好多了，等操作熟练之后，很多操作不查找寄存器手册也能直接操作了。"><a href="#这样可读性就好多了，等操作熟练之后，很多操作不查找寄存器手册也能直接操作了。" class="headerlink" title="这样可读性就好多了，等操作熟练之后，很多操作不查找寄存器手册也能直接操作了。"></a>这样可读性就好多了，等操作熟练之后，很多操作不查找寄存器手册也能直接操作了。</h6><h2 id="3-GPIO外设"><a href="#3-GPIO外设" class="headerlink" title="3. GPIO外设"></a>3. GPIO外设</h2><h3 id="1-GPIO概述"><a href="#1-GPIO概述" class="headerlink" title="1. GPIO概述"></a>1. GPIO概述</h3><p>GPIO <strong>（General-purposeinput/output）</strong> ，通用型输入输出。简单理解就是我们可以 <strong>控制输入<br>输出</strong> 的STM32引脚，统称为GPIO。</p><p>GPIO存在的意义就是 <strong>用程序控制或读取</strong> 他们的 <strong>输出或输入</strong> 。</p><h4 id="1-GPIO总体说明"><a href="#1-GPIO总体说明" class="headerlink" title="1. GPIO总体说明"></a>1. GPIO总体说明</h4><h6 id="STM32有多组GPIO，比如我们使用的芯片：STM32F103ZET6共有-7-组GPIO端口-，他们分别是"><a href="#STM32有多组GPIO，比如我们使用的芯片：STM32F103ZET6共有-7-组GPIO端口-，他们分别是" class="headerlink" title="STM32有多组GPIO，比如我们使用的芯片：STM32F103ZET6共有 7 组GPIO端口 ，他们分别是"></a>STM32有多组GPIO，比如我们使用的芯片：STM32F103ZET6共有 7 组GPIO端口 ，他们分别是</h6><p><strong>GPIOx（x从A-G）</strong> ， <strong>每组控制 16 个引脚，</strong> 共有 <strong>112</strong> 个GPIO引脚。具体一个其他STM32芯片有多少组<br>GPIO，可以去查看他们的对应的 <strong>数据手册</strong> 。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">每个引脚的电平是 0-3.3V ，部分引脚最高可以兼容到 5V 。</span><br></pre></td></tr></table></figure><h4 id="1-GPIO的主要特点"><a href="#1-GPIO的主要特点" class="headerlink" title="1. GPIO的主要特点"></a>1. GPIO的主要特点</h4><h6 id="1-不同型号，IO口的数量可能不一样。"><a href="#1-不同型号，IO口的数量可能不一样。" class="headerlink" title="1. 不同型号，IO口的数量可能不一样。"></a>1. 不同型号，IO口的数量可能不一样。</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2. 快速翻转。最快可以达到每 2 个时钟周期翻转一次。（STM32F1系列最快可以达到 5 0MHz的翻转速</span><br><span class="line">度）。</span><br><span class="line">3. 每个IO都可以作为外部中断。</span><br><span class="line">4. 支持 8 种工作模式。</span><br></pre></td></tr></table></figure><h4 id="2-GPIO的-8-种工作模式"><a href="#2-GPIO的-8-种工作模式" class="headerlink" title="2. GPIO的 8 种工作模式"></a>2. GPIO的 8 种工作模式</h4><h6 id="GPIO端口的每个位（引脚）可以由-软件-分别-配置-成-8-种模式，当然对同一个引脚同一时间只能处于某"><a href="#GPIO端口的每个位（引脚）可以由-软件-分别-配置-成-8-种模式，当然对同一个引脚同一时间只能处于某" class="headerlink" title="GPIO端口的每个位（引脚）可以由 软件 分别 配置 成 8 种模式，当然对同一个引脚同一时间只能处于某"></a>GPIO端口的每个位（引脚）可以由 软件 分别 配置 成 8 种模式，当然对同一个引脚同一时间只能处于某</h6><h6 id="一种模式中。"><a href="#一种模式中。" class="headerlink" title="一种模式中。"></a>一种模式中。</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1. 输入浮空（Inputfloating） </span><br></pre></td></tr></table></figure><ol><li><strong>输入上拉（Inputpull-up）信号默认高电平</strong> </li><li><strong>输入下拉（Input-pull-down）信号默认低电平</strong> </li><li><strong>模拟输入（Analog）</strong> </li><li><strong>通用开漏式输出（Outputopen-drain）</strong> </li><li><strong>通用推挽式输出（Outputpush-pull）</strong> </li><li><strong>复用推挽式功能（Alternatefunctionpush-pull）</strong> </li><li><strong>复用开漏式功能（Alternatefunctionopen-drain）</strong> <br>每个I/O端口位可以自由编程，然而I/0端口寄存器必须按 <strong>32 位字</strong> 被访问。<br><strong>输出模式</strong> 下可以 <strong>控制端口输出</strong> 高电平低电平，用于驱动LED，蜂鸣器等，如果是大功率器件（比如<br>电机），还需要加上驱动器（小电流控制大电流）。</li></ol><p><strong>输入模式</strong> 下可以 <strong>读取端口</strong> 的高低电平，用于读取外接按键，外接模拟信号的输入，ADC电压采<br>集，模拟通信协议接受数据等。</p><h3 id="2-GPIO工作模式"><a href="#2-GPIO工作模式" class="headerlink" title="2. GPIO工作模式"></a>2. GPIO工作模式</h3><h4 id="1-GPIO每位的具体电路结构"><a href="#1-GPIO每位的具体电路结构" class="headerlink" title="1. GPIO每位的具体电路结构"></a>1. GPIO每位的具体电路结构</h4><h4 id="2-每种模式详解"><a href="#2-每种模式详解" class="headerlink" title="2. 每种模式详解"></a>2. 每种模式详解</h4><h5 id="1-输出模式"><a href="#1-输出模式" class="headerlink" title="1. 输出模式"></a>1. 输出模式</h5><h6 id="1-输出缓冲器被激活。"><a href="#1-输出缓冲器被激活。" class="headerlink" title="1. 输出缓冲器被激活。"></a>1. 输出缓冲器被激活。</h6><h6 id="2-推挽模式：输出寄存器上的1将激活P-MOS，输出高电平。0将激活N-MOS，输出低电平。"><a href="#2-推挽模式：输出寄存器上的1将激活P-MOS，输出高电平。0将激活N-MOS，输出低电平。" class="headerlink" title="2. 推挽模式：输出寄存器上的1将激活P-MOS，输出高电平。0将激活N-MOS，输出低电平。 "></a>2. 推挽模式：输出寄存器上的1将激活P-MOS，输出高电平。0将激活N-MOS，输出低电平。 </h6><h6 id="3-开漏模式：P-MOS永远关闭。输出寄存器上的0激活N-MOS，而输出寄存器上的-1将端口置于高"><a href="#3-开漏模式：P-MOS永远关闭。输出寄存器上的0激活N-MOS，而输出寄存器上的-1将端口置于高" class="headerlink" title="3. 开漏模式：P-MOS永远关闭。输出寄存器上的0激活N-MOS，而输出寄存器上的 1将端口置于高"></a>3. 开漏模式：P-MOS永远关闭。输出寄存器上的0激活N-MOS，而输出寄存器上的 1将端口置于高</h6><h6 id="阻状态，所以外部必须要接上拉电阻。"><a href="#阻状态，所以外部必须要接上拉电阻。" class="headerlink" title="阻状态，所以外部必须要接上拉电阻。"></a>阻状态，所以外部必须要接上拉电阻。</h6><h6 id="4-施密特触发输入被激活。"><a href="#4-施密特触发输入被激活。" class="headerlink" title="4. 施密特触发输入被激活。"></a>4. 施密特触发输入被激活。</h6><h6 id="5-弱上拉和下拉电阻被禁止。"><a href="#5-弱上拉和下拉电阻被禁止。" class="headerlink" title="5. 弱上拉和下拉电阻被禁止。"></a>5. 弱上拉和下拉电阻被禁止。</h6><h6 id="6-出现在I-O脚上的数据在每个APB2时钟被采样到输入数据寄存器。"><a href="#6-出现在I-O脚上的数据在每个APB2时钟被采样到输入数据寄存器。" class="headerlink" title="6. 出现在I/O脚上的数据在每个APB2时钟被采样到输入数据寄存器。 "></a>6. 出现在I/O脚上的数据在每个APB2时钟被采样到输入数据寄存器。 </h6><h6 id="7-在开漏模式时，对输入数据寄存器的读访问可得到I-O状态。"><a href="#7-在开漏模式时，对输入数据寄存器的读访问可得到I-O状态。" class="headerlink" title="7. 在开漏模式时，对输入数据寄存器的读访问可得到I/O状态。 "></a>7. 在开漏模式时，对输入数据寄存器的读访问可得到I/O状态。 </h6><h6 id="8-在推挽模式时，对输出数据寄存器的读访问得到最后一次写的值。"><a href="#8-在推挽模式时，对输出数据寄存器的读访问得到最后一次写的值。" class="headerlink" title="8. 在推挽模式时，对输出数据寄存器的读访问得到最后一次写的值。"></a>8. 在推挽模式时，对输出数据寄存器的读访问得到最后一次写的值。</h6><h5 id="2-复用输出模式"><a href="#2-复用输出模式" class="headerlink" title="2. 复用输出模式"></a>2. 复用输出模式</h5><h6 id="1-在开漏或推挽式配置中，输出缓冲器被打开。"><a href="#1-在开漏或推挽式配置中，输出缓冲器被打开。" class="headerlink" title="1. 在开漏或推挽式配置中，输出缓冲器被打开。"></a>1. 在开漏或推挽式配置中，输出缓冲器被打开。</h6><h6 id="2-内置外设的信号驱动输出缓冲器（复用功能输出）。"><a href="#2-内置外设的信号驱动输出缓冲器（复用功能输出）。" class="headerlink" title="2. 内置外设的信号驱动输出缓冲器（复用功能输出）。"></a>2. 内置外设的信号驱动输出缓冲器（复用功能输出）。</h6><h6 id="3-施密特触发输入被激活。"><a href="#3-施密特触发输入被激活。" class="headerlink" title="3. 施密特触发输入被激活。"></a>3. 施密特触发输入被激活。</h6><h6 id="4-弱上拉和下拉电阻被禁止。"><a href="#4-弱上拉和下拉电阻被禁止。" class="headerlink" title="4. 弱上拉和下拉电阻被禁止。"></a>4. 弱上拉和下拉电阻被禁止。</h6><h6 id="5-在每个APB2时钟周期，出现在I-O脚上的数据被采样到输入数据寄存器。"><a href="#5-在每个APB2时钟周期，出现在I-O脚上的数据被采样到输入数据寄存器。" class="headerlink" title="5. 在每个APB2时钟周期，出现在I/O脚上的数据被采样到输入数据寄存器。 "></a>5. 在每个APB2时钟周期，出现在I/O脚上的数据被采样到输入数据寄存器。 </h6><h6 id="6-开漏模式时，读输入数据寄存器时可得到I-O口状态。"><a href="#6-开漏模式时，读输入数据寄存器时可得到I-O口状态。" class="headerlink" title="6. 开漏模式时，读输入数据寄存器时可得到I/O口状态。 "></a>6. 开漏模式时，读输入数据寄存器时可得到I/O口状态。 </h6><h6 id="7-在推挽模式时，读输出数据寄存器时可得到最后一次写的值。"><a href="#7-在推挽模式时，读输出数据寄存器时可得到最后一次写的值。" class="headerlink" title="7. 在推挽模式时，读输出数据寄存器时可得到最后一次写的值。"></a>7. 在推挽模式时，读输出数据寄存器时可得到最后一次写的值。</h6><h5 id="3-输入模式"><a href="#3-输入模式" class="headerlink" title="3. 输入模式"></a>3. 输入模式</h5><h6 id="1-2-个保护二极管的作用是保护我们的芯片不会由于电压过高或过低而烧毁。"><a href="#1-2-个保护二极管的作用是保护我们的芯片不会由于电压过高或过低而烧毁。" class="headerlink" title="1. 2 个保护二极管的作用是保护我们的芯片不会由于电压过高或过低而烧毁。 "></a>1. 2 个保护二极管的作用是保护我们的芯片不会由于电压过高或过低而烧毁。 </h6><h6 id="VDD是接电源（3-3V），VSS接地（0V）。如果IO引脚的输入电压高于VDD的值到一定程度，上方"><a href="#VDD是接电源（3-3V），VSS接地（0V）。如果IO引脚的输入电压高于VDD的值到一定程度，上方" class="headerlink" title="VDD是接电源（3.3V），VSS接地（0V）。如果IO引脚的输入电压高于VDD的值到一定程度，上方"></a>VDD是接电源（3.3V），VSS接地（0V）。如果IO引脚的输入电压高于VDD的值到一定程度，上方</h6><h6 id="保护二极管导通，则引脚电压被拉低到VDD。如果IO引脚的输入电压（负电压）低于VSS到一定程度，"><a href="#保护二极管导通，则引脚电压被拉低到VDD。如果IO引脚的输入电压（负电压）低于VSS到一定程度，" class="headerlink" title="保护二极管导通，则引脚电压被拉低到VDD。如果IO引脚的输入电压（负电压）低于VSS到一定程度，"></a>保护二极管导通，则引脚电压被拉低到VDD。如果IO引脚的输入电压（负电压）低于VSS到一定程度，</h6><h6 id="则下方保护二极管导通，电压被拉高到VSS。"><a href="#则下方保护二极管导通，电压被拉高到VSS。" class="headerlink" title="则下方保护二极管导通，电压被拉高到VSS。"></a>则下方保护二极管导通，电压被拉高到VSS。</h6><h6 id="2-2-个开关控制引脚没有输入的时候是上拉，下拉还是浮空。"><a href="#2-2-个开关控制引脚没有输入的时候是上拉，下拉还是浮空。" class="headerlink" title="2. 2 个开关控制引脚没有输入的时候是上拉，下拉还是浮空。"></a>2. 2 个开关控制引脚没有输入的时候是上拉，下拉还是浮空。</h6><h6 id="当上面的开关闭合的时候，输入被拉高到高电平。当下面的开关闭合的时候，入被拉低到低电"><a href="#当上面的开关闭合的时候，输入被拉高到高电平。当下面的开关闭合的时候，入被拉低到低电" class="headerlink" title="当上面的开关闭合的时候，输入被拉高到高电平。当下面的开关闭合的时候，入被拉低到低电"></a>当上面的开关闭合的时候，输入被拉高到高电平。当下面的开关闭合的时候，入被拉低到低电</h6><h6 id="平。如果两个都不闭合，输入就是悬空状态。-两个同时闭合，就是费电了，不会这么做的-。"><a href="#平。如果两个都不闭合，输入就是悬空状态。-两个同时闭合，就是费电了，不会这么做的-。" class="headerlink" title="平。如果两个都不闭合，输入就是悬空状态。 两个同时闭合，就是费电了，不会这么做的 。"></a>平。如果两个都不闭合，输入就是悬空状态。 两个同时闭合，就是费电了，不会这么做的 。</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3. 施密特（图中翻译成肖特基触发器应该是翻译错误，英文版手册是TTLSchmitttrigger）触发器是</span><br><span class="line">包含正反馈的比较器电路。可以对信号进行波形整形。</span><br></pre></td></tr></table></figure><h6 id="4-从施密特触发起出来的数据，进入到输入数据寄存器中，我们就可以从中读取数据了。"><a href="#4-从施密特触发起出来的数据，进入到输入数据寄存器中，我们就可以从中读取数据了。" class="headerlink" title="4. 从施密特触发起出来的数据，进入到输入数据寄存器中，我们就可以从中读取数据了。"></a>4. 从施密特触发起出来的数据，进入到输入数据寄存器中，我们就可以从中读取数据了。</h6><h5 id="4-模拟输入模式"><a href="#4-模拟输入模式" class="headerlink" title="4. 模拟输入模式"></a>4. 模拟输入模式</h5><h6 id="当配置为-模拟输入-时："><a href="#当配置为-模拟输入-时：" class="headerlink" title="当配置为 模拟输入 时："></a>当配置为 模拟输入 时：</h6><h6 id="1-输出部分被禁止。"><a href="#1-输出部分被禁止。" class="headerlink" title="1. 输出部分被禁止。"></a>1. 输出部分被禁止。</h6><h6 id="2-禁止施密特触发输入-，实现了每个模拟I-O引脚上的零消耗。施密特触发输出值被强置为-0-，此时也"><a href="#2-禁止施密特触发输入-，实现了每个模拟I-O引脚上的零消耗。施密特触发输出值被强置为-0-，此时也" class="headerlink" title="2. 禁止施密特触发输入 ，实现了每个模拟I/O引脚上的零消耗。施密特触发输出值被强置为 0 ，此时也"></a>2. 禁止施密特触发输入 ，实现了每个模拟I/O引脚上的零消耗。施密特触发输出值被强置为 0 ，此时也</h6><h6 id="可以不用开启对应GPIO的时钟。"><a href="#可以不用开启对应GPIO的时钟。" class="headerlink" title="可以不用开启对应GPIO的时钟。"></a>可以不用开启对应GPIO的时钟。</h6><h6 id="3-弱上拉和下拉电阻被禁止。"><a href="#3-弱上拉和下拉电阻被禁止。" class="headerlink" title="3. 弱上拉和下拉电阻被禁止。"></a>3. 弱上拉和下拉电阻被禁止。</h6><h6 id="4-读取输入数据寄存器时数值永远为-0-。"><a href="#4-读取输入数据寄存器时数值永远为-0-。" class="headerlink" title="4. 读取输入数据寄存器时数值永远为 0 。"></a>4. 读取输入数据寄存器时数值永远为 0 。</h6><h3 id="3-与GPIO相关的-7-个寄存器（重要）"><a href="#3-与GPIO相关的-7-个寄存器（重要）" class="headerlink" title="3. 与GPIO相关的 7 个寄存器（重要）"></a>3. 与GPIO相关的 7 个寄存器（重要）</h3><h6 id="每个GPI-O端口有-7-个相关的："><a href="#每个GPI-O端口有-7-个相关的：" class="headerlink" title="每个GPI/O端口有 7 个相关的："></a>每个GPI/O端口有 7 个相关的：</h6><p>-^2 个^32 位配置寄存器 <strong>（GPIOx_CRL，GPIOx_CRH）</strong> 。<br>-^2 个^32 位数据寄存器 <strong>（GPIOx_IDR和GPIOx_ODR）</strong> 。<br>-^1 个^32 位置位/复位寄存器 <strong>（GPIOx_BSRR）</strong> 。<br>-^1 个^16 位复位寄存器 <strong>（GPIOx_BRR）</strong> 。<br>-^1 个^32 位锁定寄存器 <strong>（GPIOx_LCKR）</strong> 。</p><h4 id="1-GPIOx-CRL（端口配置低寄存器）"><a href="#1-GPIOx-CRL（端口配置低寄存器）" class="headerlink" title="1. GPIOx_CRL（端口配置低寄存器）"></a>1. GPIOx_CRL（端口配置低寄存器）</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GPIOx_CRL（Portconfigurationregisterlow） ， x 可以是 A-G 。</span><br></pre></td></tr></table></figure><h6 id="该寄存器配置的每个GPIO的0-7这个-8-个位，所以叫低寄存器。"><a href="#该寄存器配置的每个GPIO的0-7这个-8-个位，所以叫低寄存器。" class="headerlink" title="该寄存器配置的每个GPIO的0-7这个 8 个位，所以叫低寄存器。"></a>该寄存器配置的每个GPIO的0-7这个 8 个位，所以叫低寄存器。</h6><h6 id="1-MODE：每个端口有-2-个MODE位进行控制。"><a href="#1-MODE：每个端口有-2-个MODE位进行控制。" class="headerlink" title="1. MODE：每个端口有 2 个MODE位进行控制。"></a>1. MODE：每个端口有 2 个MODE位进行控制。</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a. 00 ：输入模式（复位后的状态）</span><br><span class="line">b. 01 ：输出模式，最大速度10MHz</span><br><span class="line">c. 10 ：输出模式，最大速度2MHz</span><br><span class="line">d. 11 ：输出模式，最大速度50MHz</span><br><span class="line">2. CNF：每个端口有 2 个CNF位进行控制。</span><br><span class="line">a. 当MODE是00（输入模式）</span><br></pre></td></tr></table></figure><h3 id="▪-00-：模拟输入模式"><a href="#▪-00-：模拟输入模式" class="headerlink" title="▪^00 ：模拟输入模式"></a>▪^00 ：模拟输入模式</h3><h3 id="▪-01-：浮空输入模式-复位后的状态"><a href="#▪-01-：浮空输入模式-复位后的状态" class="headerlink" title="▪^01 ：浮空输入模式(复位后的状态)"></a>▪^01 ：浮空输入模式(复位后的状态)</h3><h3 id="▪-10-：上拉-下拉输入模式"><a href="#▪-10-：上拉-下拉输入模式" class="headerlink" title="▪^10 ：上拉/下拉输入模式"></a>▪^10 ：上拉/下拉输入模式</h3><h3 id="▪-11-：保留"><a href="#▪-11-：保留" class="headerlink" title="▪^11 ：保留"></a>▪^11 ：保留</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b. 当MODE&gt;00（输出模式）</span><br></pre></td></tr></table></figure><h3 id="▪-00-：通用推挽输出模式"><a href="#▪-00-：通用推挽输出模式" class="headerlink" title="▪^00 ：通用推挽输出模式"></a>▪^00 ：通用推挽输出模式</h3><h3 id="▪-01-：通用开漏输出模式"><a href="#▪-01-：通用开漏输出模式" class="headerlink" title="▪^01 ：通用开漏输出模式"></a>▪^01 ：通用开漏输出模式</h3><h3 id="▪-10-：复用功能推挽输出模式"><a href="#▪-10-：复用功能推挽输出模式" class="headerlink" title="▪^10 ：复用功能推挽输出模式"></a>▪^10 ：复用功能推挽输出模式</h3><h3 id="▪-11-：复用功能开漏输出模式"><a href="#▪-11-：复用功能开漏输出模式" class="headerlink" title="▪^11 ：复用功能开漏输出模式"></a>▪^11 ：复用功能开漏输出模式</h3><h4 id="2-GPIOx-CRH（端口配置高寄存器）"><a href="#2-GPIOx-CRH（端口配置高寄存器）" class="headerlink" title="2. GPIOx_CRH（端口配置高寄存器）"></a>2. GPIOx_CRH（端口配置高寄存器）</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GPIOx_CRH（Portconfigurationregisterhigh） 。</span><br><span class="line">该寄存器配置的是每个端口的8-15引脚，配置方式和低位寄存器完全一样。</span><br></pre></td></tr></table></figure><h4 id="3-GPIOx-IDR（端口输入数据寄存器）"><a href="#3-GPIOx-IDR（端口输入数据寄存器）" class="headerlink" title="3. GPIOx_IDR（端口输入数据寄存器）"></a>3. GPIOx_IDR（端口输入数据寄存器）</h4><p><strong>Portinputdataregister</strong> </p><h6 id="保留位始终读为-0-。剩下的分别对应每个引脚的输入值。"><a href="#保留位始终读为-0-。剩下的分别对应每个引脚的输入值。" class="headerlink" title="保留位始终读为 0 。剩下的分别对应每个引脚的输入值。"></a>保留位始终读为 0 。剩下的分别对应每个引脚的输入值。</h6><h4 id="4-GPIOx-ODR（端口输出数据寄存器）"><a href="#4-GPIOx-ODR（端口输出数据寄存器）" class="headerlink" title="4. GPIOx_ODR（端口输出数据寄存器）"></a>4. GPIOx_ODR（端口输出数据寄存器）</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Portoutputdataregister </span><br></pre></td></tr></table></figure><h6 id="保留位始终读为-0-。剩下的分别对应每个引脚的输出值。"><a href="#保留位始终读为-0-。剩下的分别对应每个引脚的输出值。" class="headerlink" title="保留位始终读为 0 。剩下的分别对应每个引脚的输出值。"></a>保留位始终读为 0 。剩下的分别对应每个引脚的输出值。</h6><h4 id="5-GPIOx-BSRR（端口位设置-清除寄存器）"><a href="#5-GPIOx-BSRR（端口位设置-清除寄存器）" class="headerlink" title="5. GPIOx_BSRR（端口位设置/清除寄存器）"></a>5. GPIOx_BSRR（端口位设置/清除寄存器）</h4><p><strong>Portbitset/resetregister</strong> </p><h6 id="1-高-16-位是用清除对应的数据输出寄存器的位（0-15）的值：设置为-0-不影响，设置为-1-会清除ODR对"><a href="#1-高-16-位是用清除对应的数据输出寄存器的位（0-15）的值：设置为-0-不影响，设置为-1-会清除ODR对" class="headerlink" title="1. 高 16 位是用清除对应的数据输出寄存器的位（0-15）的值：设置为 0 不影响，设置为 1 会清除ODR对"></a>1. 高 16 位是用清除对应的数据输出寄存器的位（0-15）的值：设置为 0 不影响，设置为 1 会清除ODR对</h6><h6 id="应的位的值（置为-0-）。"><a href="#应的位的值（置为-0-）。" class="headerlink" title="应的位的值（置为 0 ）。"></a>应的位的值（置为 0 ）。</h6><h6 id="2-低-16-位是用设置对应的数据输出寄存器的位（0-15）的值：设置为-0-不影响，设置为-1-会设置ODR对"><a href="#2-低-16-位是用设置对应的数据输出寄存器的位（0-15）的值：设置为-0-不影响，设置为-1-会设置ODR对" class="headerlink" title="2. 低 16 位是用设置对应的数据输出寄存器的位（0-15）的值：设置为 0 不影响，设置为 1 会设置ODR对"></a>2. 低 16 位是用设置对应的数据输出寄存器的位（0-15）的值：设置为 0 不影响，设置为 1 会设置ODR对</h6><h6 id="应的位的值（置为-1-）。"><a href="#应的位的值（置为-1-）。" class="headerlink" title="应的位的值（置为 1 ）。"></a>应的位的值（置为 1 ）。</h6><h4 id="6-GPIOx-BRR（端口位清除寄存器）"><a href="#6-GPIOx-BRR（端口位清除寄存器）" class="headerlink" title="6. GPIOx_BRR（端口位清除寄存器）"></a>6. GPIOx_BRR（端口位清除寄存器）</h4><p>这个寄存器具有了 <strong>GPIOx_BSRR一半的功能：清除</strong> 。</p><h4 id="7-GPIOx-LCKR（端口配置锁定寄存器）"><a href="#7-GPIOx-LCKR（端口配置锁定寄存器）" class="headerlink" title="7. GPIOx_LCKR（端口配置锁定寄存器）"></a>7. GPIOx_LCKR（端口配置锁定寄存器）</h4><p><strong>Portconfigurationlockregister</strong> </p><h6 id="该寄存器用来锁定端口位的配置。位-15-0-用于锁定GPIO端口的配置。在规定的写入操作期间，"><a href="#该寄存器用来锁定端口位的配置。位-15-0-用于锁定GPIO端口的配置。在规定的写入操作期间，" class="headerlink" title="该寄存器用来锁定端口位的配置。位[15:0]用于锁定GPIO端口的配置。在规定的写入操作期间，"></a>该寄存器用来锁定端口位的配置。位[15:0]用于锁定GPIO端口的配置。在规定的写入操作期间，</h6><h6 id="不能改变LCKP-15-0-。当对相应的端口位执行了LOCK序列后，在下次系统复位之前将不能再更改端口"><a href="#不能改变LCKP-15-0-。当对相应的端口位执行了LOCK序列后，在下次系统复位之前将不能再更改端口" class="headerlink" title="不能改变LCKP[15:0]。当对相应的端口位执行了LOCK序列后，在下次系统复位之前将不能再更改端口"></a>不能改变LCKP[15:0]。当对相应的端口位执行了LOCK序列后，在下次系统复位之前将不能再更改端口</h6><h6 id="位的配置。"><a href="#位的配置。" class="headerlink" title="位的配置。"></a>位的配置。</h6><h6 id="每个锁定位锁定控制寄存器（CRL，CRH）中相应的-4-个位（CNF2位和MODE2位）。"><a href="#每个锁定位锁定控制寄存器（CRL，CRH）中相应的-4-个位（CNF2位和MODE2位）。" class="headerlink" title="每个锁定位锁定控制寄存器（CRL，CRH）中相应的 4 个位（CNF2位和MODE2位）。"></a>每个锁定位锁定控制寄存器（CRL，CRH）中相应的 4 个位（CNF2位和MODE2位）。</h6><h6 id="第-16-位用来激活锁定寄存器，必须按照规定的时序来操作才行-写1-gt-写0-gt-写1-gt-读0-gt-读-1-。"><a href="#第-16-位用来激活锁定寄存器，必须按照规定的时序来操作才行-写1-gt-写0-gt-写1-gt-读0-gt-读-1-。" class="headerlink" title="第 16 位用来激活锁定寄存器，必须按照规定的时序来操作才行:写1-&gt;写0-&gt;写1 -&gt;读0 -&gt;读 1 。"></a>第 16 位用来激活锁定寄存器，必须按照规定的时序来操作才行:写1-&gt;写0-&gt;写1 -&gt;读0 -&gt;读 1 。</h6><h6 id="对0-15位："><a href="#对0-15位：" class="headerlink" title="对0-15位："></a>对0-15位：</h6><h3 id="◦-0-：不锁定对应端口的配置。"><a href="#◦-0-：不锁定对应端口的配置。" class="headerlink" title="◦^0 ：不锁定对应端口的配置。"></a>◦^0 ：不锁定对应端口的配置。</h3><h3 id="◦-1-：锁定对应端口的配置。"><a href="#◦-1-：锁定对应端口的配置。" class="headerlink" title="◦^1 ：锁定对应端口的配置。"></a>◦^1 ：锁定对应端口的配置。</h3><h3 id="4-GPIO案例：流水灯"><a href="#4-GPIO案例：流水灯" class="headerlink" title="4. GPIO案例：流水灯"></a>4. GPIO案例：流水灯</h3><h4 id="1-需求描述-1"><a href="#1-需求描述-1" class="headerlink" title="1. 需求描述"></a>1. 需求描述</h4><h6 id="在-3-个LED上实现流水灯效果。"><a href="#在-3-个LED上实现流水灯效果。" class="headerlink" title="在 3 个LED上实现流水灯效果。"></a>在 3 个LED上实现流水灯效果。</h6><h4 id="2-硬件电路设计-1"><a href="#2-硬件电路设计-1" class="headerlink" title="2. 硬件电路设计"></a>2. 硬件电路设计</h4><h4 id="3-软件设计（寄存器）"><a href="#3-软件设计（寄存器）" class="headerlink" title="3. 软件设计（寄存器）"></a>3. 软件设计（寄存器）</h4><h5 id="1-配置"><a href="#1-配置" class="headerlink" title="1. 配置"></a>1. 配置</h5><ol><li>copy上一个项目</li><li><p>并做如下操作</p></li><li><p>创建一个目录：Hardware/Led存储我们的LED驱动文件。</p></li><li>在Hardware/Led下创建 2 个文件led.h和led.c。</li><li>使用keil打开项目，做下简单配置。</li></ol><h5 id="2-具体代码"><a href="#2-具体代码" class="headerlink" title="2. 具体代码"></a>2. 具体代码</h5><p>2.1 main.c</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;Driver_LED.h&quot;</span><br><span class="line">#include &quot;Delay.h&quot;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">uint32_t leds[] = &#123;LED_1, LED_2, LED_3&#125;;</span><br><span class="line">/* 1. 初始化LED */</span><br><span class="line">Driver_LED_Init();</span><br><span class="line">Driver_LED_OffAll(leds, 3 );</span><br><span class="line">while ( 1 )</span><br><span class="line">&#123;</span><br><span class="line">for (uint8_t i = 0 ; i &lt; 3 ; i++)</span><br><span class="line">&#123;</span><br><span class="line">Driver_LED_OffAll(leds, 3 );</span><br><span class="line">Driver_LED_On(leds[i]);</span><br><span class="line">1 2 3 4 5 6 7 8 9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">Delay_ms( 500 );</span><br><span class="line">&#125;</span><br><span class="line">Driver_LED_OffAll(leds, 3 );</span><br><span class="line">Driver_LED_On(leds[ 1 ]);</span><br><span class="line">Delay_ms( 500 );</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td></tr></table></figure><p>2.2 Delay.h</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#ifndef __delay_h</span><br><span class="line">#define __delay_h</span><br><span class="line">#include &quot;stm32f10x.h&quot; // Device header</span><br><span class="line">void Delay_us(uint16_t us);</span><br><span class="line">void Delay_ms(uint16_t ms);</span><br><span class="line">void Delay_s(uint16_t s);</span><br><span class="line">#endif</span><br><span class="line">1 2 3 4 5 6 7 8 9</span><br></pre></td></tr></table></figure><p>2.3 Delay.c</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">//延时函数使用到了系统定时器，大家先使用，到提高篇时再学习具体为什么这么写。</span><br><span class="line">#include &quot;delay.h&quot; // Device header</span><br><span class="line">void Delay_us(uint16_t us)</span><br><span class="line">&#123;</span><br><span class="line">/* 定时器重装值 */</span><br><span class="line">SysTick-&gt;LOAD = 72 * us;</span><br><span class="line">/* 清除当前计数值 */</span><br><span class="line">SysTick-&gt;VAL = 0 ;</span><br><span class="line">/*设置内部时钟源（ 2 位-&gt;1）,不需要中断（ 1 位-&gt;0），并启动定时器(0位-&gt;1)*/</span><br><span class="line">SysTick-&gt;CTRL = 0x5;</span><br><span class="line">/*等待计数到 0 ， 如果计数到 0 则 16 位会置为1*/</span><br><span class="line">while (!(SysTick-&gt;CTRL &amp; SysTick_CTRL_COUNTFLAG));</span><br><span class="line">/* 关闭定时器 */</span><br><span class="line">SysTick-&gt;CTRL &amp;= ~SysTick_CTRL_ENABLE;</span><br><span class="line">&#125;</span><br><span class="line">1 2 3 4 5 6 7 8 9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">void Delay_ms(uint16_t ms)</span><br><span class="line">&#123;</span><br><span class="line">while (ms--)</span><br><span class="line">&#123;</span><br><span class="line">Delay_us( 1000 );</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">void Delay_s(uint16_t s)</span><br><span class="line">&#123;</span><br><span class="line">while (s--)</span><br><span class="line">&#123;</span><br><span class="line">Delay_ms( 1000 );</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td></tr></table></figure><p>2.4 Driver_LED.h</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#ifndef __DRIVER_LED_H</span><br><span class="line">#define __DRIVER_LED_H</span><br><span class="line">#include &quot;stm32f10x.h&quot;</span><br><span class="line">#define LED_1 GPIO_ODR_ODR0</span><br><span class="line">#define LED_2 GPIO_ODR_ODR1</span><br><span class="line">#define LED_3 GPIO_ODR_ODR8</span><br><span class="line">void Driver_LED_Init(void);</span><br><span class="line">void Driver_LED_On(uint32_t led);</span><br><span class="line">void Driver_LED_Off(uint32_t led);</span><br><span class="line">void Driver_LED_Toggle(uint32_t led);</span><br><span class="line">void Driver_LED_OnAll(uint32_t leds[], uint8_t size);</span><br><span class="line">void Driver_LED_OffAll(uint32_t leds[], uint8_t size);</span><br><span class="line">#endif</span><br><span class="line">1 2 3 4 5 6 7 8 9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td></tr></table></figure><p>2.5 Driver_LED.c</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;Driver_LED.h&quot;</span><br><span class="line">/**</span><br><span class="line"> * @description: 对LED进行初始化</span><br><span class="line"> */</span><br><span class="line">void Driver_LED_Init(void)</span><br><span class="line">&#123;</span><br><span class="line">/* 1. 打开GPIOA的时钟 */</span><br><span class="line">RCC-&gt;APB2ENR |= RCC_APB2ENR_IOPAEN;</span><br><span class="line">/* 2. 给用到的端口的所有 PIN (PA0 PA1 PA8) 设置工作模式: 通用推挽输出 MODE:11</span><br><span class="line"> CNF:00 */</span><br><span class="line">GPIOA-&gt;CRL |= (GPIO_CRL_MODE0 | GPIO_CRL_MODE1);</span><br><span class="line">GPIOA-&gt;CRL &amp;= ~(GPIO_CRL_CNF0 | GPIO_CRL_CNF1);</span><br><span class="line">GPIOA-&gt;CRH |= GPIO_CRH_MODE8;</span><br><span class="line">GPIOA-&gt;CRH &amp;= ~GPIO_CRH_CNF8;</span><br><span class="line">/* 3. 关闭所有灯  */</span><br><span class="line">Driver_LED_Off(LED_1);</span><br><span class="line">Driver_LED_Off(LED_2);</span><br><span class="line">Driver_LED_Off(LED_3);</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line"> * @description: 点亮指定的LED</span><br><span class="line"> * @param &#123;uint32_t&#125; led 要点亮的LED</span><br><span class="line"> */</span><br><span class="line">void Driver_LED_On(uint32_t led)</span><br><span class="line">&#123;</span><br><span class="line">GPIOA-&gt;ODR &amp;= ~led;</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line"> * @description: 关闭指定的LED</span><br><span class="line"> * @param &#123;uint32_t&#125; led 要关闭的LED</span><br><span class="line"> */</span><br><span class="line">void Driver_LED_Off(uint32_t led)</span><br><span class="line">&#123;</span><br><span class="line">GPIOA-&gt;ODR |= led;</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line"> * @description: 翻转LED的状态</span><br><span class="line"> * @param &#123;uint32_t&#125; led 要翻转的LED</span><br><span class="line"> */</span><br><span class="line">void Driver_LED_Toggle(uint32_t led)</span><br><span class="line">1 2 3 4 5 6 7 8 9</span><br></pre></td></tr></table></figure><p>10<br>11</p><p>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">/* 1. 读取引脚的电平,如果是1(目前是关闭), 打开, 否则就关闭 */</span><br><span class="line">if ((GPIOA-&gt;IDR &amp; led) == 0 )</span><br><span class="line">&#123;</span><br><span class="line">Driver_LED_Off(led);</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">Driver_LED_On(led);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line"> * @description: 打开数组中所有的灯</span><br><span class="line"> * @param &#123;uint32_t&#125; leds 所有灯</span><br><span class="line"> * @param &#123;uint8_t&#125; size 灯的个数</span><br><span class="line"> */</span><br><span class="line">void Driver_LED_OnAll(uint32_t leds[], uint8_t size)</span><br><span class="line">&#123;</span><br><span class="line">for (uint8_t i = 0 ; i &lt; size; i++)</span><br><span class="line">&#123;</span><br><span class="line">Driver_LED_On(leds[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line"> * @description: 关闭数组中所有的灯</span><br><span class="line"> * @param &#123;uint32_t&#125; leds 所有灯</span><br><span class="line"> * @param &#123;uint8_t&#125; size 灯的个数</span><br><span class="line"> */</span><br><span class="line">void Driver_LED_OffAll(uint32_t leds[], uint8_t size)</span><br><span class="line">&#123;</span><br><span class="line">for (uint8_t i = 0 ; i &lt; size; i++)</span><br><span class="line">&#123;</span><br><span class="line">Driver_LED_Off(leds[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td></tr></table></figure><h2 id="4-总体架构和时钟系统"><a href="#4-总体架构和时钟系统" class="headerlink" title="4. 总体架构和时钟系统"></a>4. 总体架构和时钟系统</h2><h3 id="1-STM32总体架构"><a href="#1-STM32总体架构" class="headerlink" title="1. STM32总体架构"></a>1. STM32总体架构</h3><h6 id="经过一段时间的学习，我们需要从宏观上了解下它的系统架构，各个模块之间的层级关系以及相"><a href="#经过一段时间的学习，我们需要从宏观上了解下它的系统架构，各个模块之间的层级关系以及相" class="headerlink" title="经过一段时间的学习，我们需要从宏观上了解下它的系统架构，各个模块之间的层级关系以及相"></a>经过一段时间的学习，我们需要从宏观上了解下它的系统架构，各个模块之间的层级关系以及相</h6><h6 id="互的影响。"><a href="#互的影响。" class="headerlink" title="互的影响。"></a>互的影响。</h6><h3 id="2-时钟系统"><a href="#2-时钟系统" class="headerlink" title="2. 时钟系统"></a>2. 时钟系统</h3><h4 id="1-时钟树"><a href="#1-时钟树" class="headerlink" title="1. 时钟树"></a>1. 时钟树</h4><h6 id="在STM32中有-3-种不同的时钟源用来驱动系统时钟-SYSCLK-："><a href="#在STM32中有-3-种不同的时钟源用来驱动系统时钟-SYSCLK-：" class="headerlink" title="在STM32中有 3 种不同的时钟源用来驱动系统时钟(SYSCLK)："></a>在STM32中有 3 种不同的时钟源用来驱动系统时钟(SYSCLK)：</h6><ul><li>HSI振荡器时钟（HighSpeedInternaloscillator，高速内部时钟）</li><li>HSE振荡器时钟（HighSpeedExternal（Oscillator/Clock），高速外部时钟）</li><li>PLL时钟（PhaseLockedLoop锁相环/倍频器）</li></ul><p>还有 2 种 2 级时钟：</p><ul><li>LSI时钟（LowSpeedInternal，低速内部时钟）</li><li>LSE时钟（LowSpeedExternaloscillator，低速外部时钟）。</li></ul><p>为什么提供这么多的时钟？ <strong>节能！</strong> 高速设备接高速时钟，低速设备接低速时钟，可以最大程度的达到<br>节能效果。详⻅下图时钟树。</p><h6 id="可以看这个简图："><a href="#可以看这个简图：" class="headerlink" title="可以看这个简图："></a>可以看这个简图：</h6><h6 id="该时钟树目前不要求记住，等以后编程时，只需要时不时回头翻看即可。代码写多了，这些知识"><a href="#该时钟树目前不要求记住，等以后编程时，只需要时不时回头翻看即可。代码写多了，这些知识" class="headerlink" title="该时钟树目前不要求记住，等以后编程时，只需要时不时回头翻看即可。代码写多了，这些知识"></a>该时钟树目前不要求记住，等以后编程时，只需要时不时回头翻看即可。代码写多了，这些知识</h6><h6 id="自会烂熟于胸。"><a href="#自会烂熟于胸。" class="headerlink" title="自会烂熟于胸。"></a>自会烂熟于胸。</h6><h4 id="2-各个时钟介绍"><a href="#2-各个时钟介绍" class="headerlink" title="2. 各个时钟介绍"></a>2. 各个时钟介绍</h4><h6 id="1-HSE时钟"><a href="#1-HSE时钟" class="headerlink" title="1. HSE时钟"></a>1. HSE时钟</h6><p>高速外部时钟是由外部时钟源提供，目前几乎所有的STM32单片机的设计都是在外部接一个8MHz<br>的晶振，经过PLL倍频（ 9 倍频）后得到一个72MHz的系统时钟。我们系统默认就是这个时钟。这个在<br>启动文件可以看到。</p><h6 id="2-HSI时钟"><a href="#2-HSI时钟" class="headerlink" title="2. HSI时钟"></a>2. HSI时钟</h6><p>HSI时钟信号由内部8MHz的RC振荡器产生，可直接作为系统时钟或在 2 分频后作为PLL输入。HSI<br>RC振荡器能够在不需要任何外部器件的条件下提供系统时钟。它的启动时间比HSE晶体振荡器短。然<br>而，即使在校准之后它的时钟频率 <strong>精度仍较差</strong> 。</p><h6 id="3-PLL时钟"><a href="#3-PLL时钟" class="headerlink" title="3. PLL时钟"></a>3. PLL时钟</h6><h6 id="内部PLL用来倍频-HSIRC-的输出时钟或-HSE-晶体输出时钟。PLL的设置必须在其被激活前完成。-一"><a href="#内部PLL用来倍频-HSIRC-的输出时钟或-HSE-晶体输出时钟。PLL的设置必须在其被激活前完成。-一" class="headerlink" title="内部PLL用来倍频 HSIRC 的输出时钟或 HSE 晶体输出时钟。PLL的设置必须在其被激活前完成。 一"></a>内部PLL用来倍频 HSIRC 的输出时钟或 HSE 晶体输出时钟。PLL的设置必须在其被激活前完成。 一</h6><h6 id="旦PLL被激活，这些参数就不能被改动-。如果PLL中断在时钟中断寄存器里被允许，当PLL准备就绪"><a href="#旦PLL被激活，这些参数就不能被改动-。如果PLL中断在时钟中断寄存器里被允许，当PLL准备就绪" class="headerlink" title="旦PLL被激活，这些参数就不能被改动 。如果PLL中断在时钟中断寄存器里被允许，当PLL准备就绪"></a>旦PLL被激活，这些参数就不能被改动 。如果PLL中断在时钟中断寄存器里被允许，当PLL准备就绪</h6><h6 id="时，可产生中断申请。"><a href="#时，可产生中断申请。" class="headerlink" title="时，可产生中断申请。"></a>时，可产生中断申请。</h6><p>PLL时钟一般都是对外部的8MHz的时钟信号经过 9 倍频后，得到72MHz的时钟频率，这是<br>STM32F1系列允许的最高时钟频率。</p><h6 id="4-LSE时钟"><a href="#4-LSE时钟" class="headerlink" title="4. LSE时钟"></a>4. LSE时钟</h6><p>LSE晶体是一个32.768kHz的低速外部晶体或陶瓷谐振器。它为实时时钟或者其他定时功能提供一<br>个低功耗且精确的时钟源。</p><p>LSE是 <strong>不能驱动系统时钟</strong> 的。</p><h6 id="5-LSI时钟"><a href="#5-LSI时钟" class="headerlink" title="5. LSI时钟"></a>5. LSI时钟</h6><h6 id="LSIRC担当一个低功耗时钟源的⻆色，它可以在停机和待机模式下保持运行，为独立看⻔狗和自"><a href="#LSIRC担当一个低功耗时钟源的⻆色，它可以在停机和待机模式下保持运行，为独立看⻔狗和自" class="headerlink" title="LSIRC担当一个低功耗时钟源的⻆色，它可以在停机和待机模式下保持运行，为独立看⻔狗和自"></a>LSIRC担当一个低功耗时钟源的⻆色，它可以在停机和待机模式下保持运行，为独立看⻔狗和自</h6><p>动唤醒单元提供时钟。LSI时钟频率大约40kHz（在30kHz和60kHz之间）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LSI也是 不能驱动系统时钟 的。</span><br></pre></td></tr></table></figure><h2 id="5-HAL库开发入⻔"><a href="#5-HAL库开发入⻔" class="headerlink" title="5. HAL库开发入⻔"></a>5. HAL库开发入⻔</h2><h3 id="5-1-HAL介绍"><a href="#5-1-HAL介绍" class="headerlink" title="5.1 HAL介绍"></a>5.1 HAL介绍</h3><h6 id="1-为什么要学习HAL库开发"><a href="#1-为什么要学习HAL库开发" class="headerlink" title="1. 为什么要学习HAL库开发"></a>1. 为什么要学习HAL库开发</h6><h6 id="到目前我们已经学会-1-种开发SMT32程序的姿势：基于寄存器开发。"><a href="#到目前我们已经学会-1-种开发SMT32程序的姿势：基于寄存器开发。" class="headerlink" title="到目前我们已经学会 1 种开发SMT32程序的姿势：基于寄存器开发。"></a>到目前我们已经学会 1 种开发SMT32程序的姿势：基于寄存器开发。</h6><h6 id="寄存器开发效率比较低，在工作中如果想-快速开发-还是要会用到HAL库开发。"><a href="#寄存器开发效率比较低，在工作中如果想-快速开发-还是要会用到HAL库开发。" class="headerlink" title="寄存器开发效率比较低，在工作中如果想 快速开发 还是要会用到HAL库开发。"></a>寄存器开发效率比较低，在工作中如果想 快速开发 还是要会用到HAL库开发。</h6><h6 id="HAL库是目前ST主力推广的开发方式，所以你如果还-要用ST的芯片-，会使用HAL库开发是势在必"><a href="#HAL库是目前ST主力推广的开发方式，所以你如果还-要用ST的芯片-，会使用HAL库开发是势在必" class="headerlink" title="HAL库是目前ST主力推广的开发方式，所以你如果还 要用ST的芯片 ，会使用HAL库开发是势在必"></a>HAL库是目前ST主力推广的开发方式，所以你如果还 要用ST的芯片 ，会使用HAL库开发是势在必</h6><h6 id="行的。而且最最关键的是，使用HAL开发有诸多的好处。"><a href="#行的。而且最最关键的是，使用HAL开发有诸多的好处。" class="headerlink" title="行的。而且最最关键的是，使用HAL开发有诸多的好处。"></a>行的。而且最最关键的是，使用HAL开发有诸多的好处。</h6><h6 id="目前，HAL库已经支持STM32全线产品。"><a href="#目前，HAL库已经支持STM32全线产品。" class="headerlink" title="目前，HAL库已经支持STM32全线产品。"></a>目前，HAL库已经支持STM32全线产品。</h6><h6 id="2-什么是HAL库"><a href="#2-什么是HAL库" class="headerlink" title="2. 什么是HAL库"></a>2. 什么是HAL库</h6><p>HAL库的全称是HardwareAbstractionLayer，翻译成 <strong>硬件抽象层</strong> 。HAL库是ST为STM32最新推<br>出的抽象层嵌入式软件，可以更好的确保跨STM32产品的最大可移植性。该库提供了一整套一致的中<br>间件组件，如RTOS，USB，TCP/IP和图形等。</p><p>HAL库是基于一个非限制性的BSD许可协议（BerkeleySoftwareDistribution）而发布的开源代<br>码。ST制作的中间件堆栈（USB主机和设备库，STemWin）带有允许轻松重用的许可模式，只要是在<br>ST公司的MCU芯片上使用，库中的中间件(USB主机/设备库,STemWin)协议栈即被允许随便修改，并<br>可以反复使用。至于基于其它著名的开源解决方案商的中间件（FreeRTOS，F atFs，L wIP和<br>PolarSSL）也都具有友好的用戶许可条款。</p><ol><li>CMSIS和HAL库的关系<br><strong>CMSIS（CortexMicrocontrollerSoftwareInterfaceStandard）</strong> 是Cortex-M处理器系列的<br>与供应商无关的硬件抽象层。它是ARM公司制定的一个标准。它可以为处理器和外设实现一致且简单<br>的软件接口，从而简化软件的重用、缩短微控制器新开发人员的学习过程，并缩短新设备的上市时<br>间。简单来说，就是ARM公司制定标准，芯片厂商按照此标准编写相应的程序，实现统一的接口，方<br>便开发人员的使用。</li></ol><h3 id="5-2-HAL库开发环境搭建"><a href="#5-2-HAL库开发环境搭建" class="headerlink" title="5.2 HAL库开发环境搭建"></a>5.2 HAL库开发环境搭建</h3><h4 id="1-安装Java运行环境"><a href="#1-安装Java运行环境" class="headerlink" title="1. 安装Java运行环境"></a>1. 安装Java运行环境</h4><p>STM32CubeMX要求java8的运行环境。下载地址：<br><strong><a href="https://www.oracle.com/java/technologies/javase/javase8u211-later-archive-">https://www.oracle.com/java/technologies/javase/javase8u211-later-archive-</a><br>downloads.html</strong> </p><h4 id="2-安装STM32CubeMX"><a href="#2-安装STM32CubeMX" class="headerlink" title="2. 安装STM32CubeMX"></a>2. 安装STM32CubeMX</h4><h6 id="ST公司提供的一个工具，非常方便的用图形化的方式帮我们创建工程，和完成各种配置。"><a href="#ST公司提供的一个工具，非常方便的用图形化的方式帮我们创建工程，和完成各种配置。" class="headerlink" title="ST公司提供的一个工具，非常方便的用图形化的方式帮我们创建工程，和完成各种配置。"></a>ST公司提供的一个工具，非常方便的用图形化的方式帮我们创建工程，和完成各种配置。</h6><p>下载地址： <strong><a href="https://www.st.com/zh/development-tools/stm32cubemx.html#get-">https://www.st.com/zh/development-tools/stm32cubemx.html#get-</a><br>software</strong> </p><h6 id="双击安装即可。"><a href="#双击安装即可。" class="headerlink" title="双击安装即可。"></a>双击安装即可。</h6><h4 id="3-在线下载芯片支持包"><a href="#3-在线下载芯片支持包" class="headerlink" title="3. 在线下载芯片支持包"></a>3. 在线下载芯片支持包</h4><p>双击 <strong>CubeMX</strong> 进入如下界面。</p><h6 id="先安装下软件支持包："><a href="#先安装下软件支持包：" class="headerlink" title="先安装下软件支持包："></a>先安装下软件支持包：</h6><h6 id="点击安装之后，需要先登录你的ST账号，没有就先注册一个。"><a href="#点击安装之后，需要先登录你的ST账号，没有就先注册一个。" class="headerlink" title="点击安装之后，需要先登录你的ST账号，没有就先注册一个。"></a>点击安装之后，需要先登录你的ST账号，没有就先注册一个。</h6><h4 id="4-离线安装芯片支持包"><a href="#4-离线安装芯片支持包" class="headerlink" title="4. 离线安装芯片支持包"></a>4. 离线安装芯片支持包</h4><h6 id="如果网速不好，下载会比较慢。也可以选择离线安装。"><a href="#如果网速不好，下载会比较慢。也可以选择离线安装。" class="headerlink" title="如果网速不好，下载会比较慢。也可以选择离线安装。"></a>如果网速不好，下载会比较慢。也可以选择离线安装。</h6><h6 id="1-下载离线芯片支持包"><a href="#1-下载离线芯片支持包" class="headerlink" title="1. 下载离线芯片支持包"></a>1. 下载离线芯片支持包</h6><p>下载地址： <strong><a href="https://www.st.com/zh/development-tools/stm32cubemx.html#tools-">https://www.st.com/zh/development-tools/stm32cubemx.html#tools-</a><br>software</strong> </p><h6 id="2-导入芯片支持包"><a href="#2-导入芯片支持包" class="headerlink" title="2. 导入芯片支持包"></a>2. 导入芯片支持包</h6><h6 id="注意"><a href="#注意" class="headerlink" title="注意: "></a>注意: </h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 上面的离线安装方式只能安装基础包(en.stm32cubef1.zip),升级包(en.stm32cubef1-v1-8-</span><br><span class="line">5.zip)无法安装. </span><br><span class="line">2. 把en.stm32cubef1-v1-8-5.zip拷⻉到stm32cube的仓库中,直接解压就行了.仓库位置:</span><br><span class="line">C:\Users\你的用戶名\STM32Cube\Repository.用解压的文件覆盖原来的基础包. </span><br></pre></td></tr></table></figure><h3 id="3-LED流水灯案例（HAL库）"><a href="#3-LED流水灯案例（HAL库）" class="headerlink" title="3. LED流水灯案例（HAL库）"></a>3. LED流水灯案例（HAL库）</h3><h4 id="3-1-需求描述"><a href="#3-1-需求描述" class="headerlink" title="3.1 需求描述"></a>3.1 需求描述</h4><h6 id="实现LED流水灯。用的GPIOA的0、-1-、-8-口。"><a href="#实现LED流水灯。用的GPIOA的0、-1-、-8-口。" class="headerlink" title="实现LED流水灯。用的GPIOA的0、 1 、 8 口。"></a>实现LED流水灯。用的GPIOA的0、 1 、 8 口。</h6><h4 id="3-2-硬件电路设计"><a href="#3-2-硬件电路设计" class="headerlink" title="3.2 硬件电路设计"></a>3.2 硬件电路设计</h4><h4 id="3-3-软件设计"><a href="#3-3-软件设计" class="headerlink" title="3.3 软件设计"></a>3.3 软件设计</h4><h5 id="1-创建HAL库工程"><a href="#1-创建HAL库工程" class="headerlink" title="1. 创建HAL库工程"></a>1. 创建HAL库工程</h5><h6 id="1-操作⻚面介绍"><a href="#1-操作⻚面介绍" class="headerlink" title="1. 操作⻚面介绍"></a>1. 操作⻚面介绍</h6><h6 id="2-根据需求设置参数"><a href="#2-根据需求设置参数" class="headerlink" title="2. 根据需求设置参数"></a>2. 根据需求设置参数</h6><ul><li>Debug参数选择</li></ul><p>默认debug选项没有设置，需要开启。 <strong>选择串口即可。这个地方务必设置好，否则只能下载一次程序<br>到MCU，以后就无法下载了。</strong> </p><ul><li>RCC时钟选择</li></ul><h6 id="3-GPIO配置"><a href="#3-GPIO配置" class="headerlink" title="3. GPIO配置"></a>3. GPIO配置</h6><h6 id="4-配置PA0引脚。"><a href="#4-配置PA0引脚。" class="headerlink" title="4. 配置PA0引脚。"></a>4. 配置PA0引脚。</h6><h6 id="5-同样的方式配置PA1和PA8，然后可以看到这-3-个引脚。"><a href="#5-同样的方式配置PA1和PA8，然后可以看到这-3-个引脚。" class="headerlink" title="5. 同样的方式配置PA1和PA8，然后可以看到这 3 个引脚。"></a>5. 同样的方式配置PA1和PA8，然后可以看到这 3 个引脚。</h6><h6 id="6-分别对他们进行设置。"><a href="#6-分别对他们进行设置。" class="headerlink" title="6. 分别对他们进行设置。"></a>6. 分别对他们进行设置。</h6><h6 id="7-工程配置"><a href="#7-工程配置" class="headerlink" title="7. 工程配置"></a>7. 工程配置</h6><h6 id="8-生成代码"><a href="#8-生成代码" class="headerlink" title="8. 生成代码"></a>8. 生成代码</h6><h6 id="3-生成的工程目录介绍"><a href="#3-生成的工程目录介绍" class="headerlink" title="3. 生成的工程目录介绍"></a>3. 生成的工程目录介绍</h6><h5 id="2-自动生成的代码解读"><a href="#2-自动生成的代码解读" class="headerlink" title="2. 自动生成的代码解读"></a>2. 自动生成的代码解读</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">main 函数中已经替我们调用了HAL的初始化，时钟的初始化，GPIO的初始化。</span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">HAL_Init();</span><br><span class="line">SystemClock_Config();</span><br><span class="line">MX_GPIO_Init();</span><br><span class="line">while ( 1 )</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">//下面是GPIO初始化的代码。</span><br><span class="line">void MX_GPIO_Init(void)</span><br><span class="line">&#123;</span><br><span class="line">GPIO_InitTypeDef GPIO_InitStruct = &#123; 0 &#125;;</span><br><span class="line">/* GPIO Ports Clock Enable */</span><br><span class="line">__HAL_RCC_GPIOC_CLK_ENABLE();</span><br><span class="line">__HAL_RCC_GPIOA_CLK_ENABLE();</span><br><span class="line">/*Configure GPIO pin Output Level */</span><br><span class="line">HAL_GPIO_WritePin(GPIOA, LED1_Pin | LED2_Pin | LED3_Pin, GPIO_PIN_SET);</span><br><span class="line">/*Configure GPIO pins : PAPin PAPin PAPin */</span><br><span class="line">GPIO_InitStruct.Pin = LED1_Pin | LED2_Pin | LED3_Pin;</span><br><span class="line">GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;</span><br><span class="line">GPIO_InitStruct.Pull = GPIO_NOPULL;</span><br><span class="line">GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;</span><br><span class="line">HAL_GPIO_Init(GPIOA, &amp;GPIO_InitStruct);</span><br><span class="line">&#125;</span><br><span class="line">1 2 3 4 5 6 7 8 9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td></tr></table></figure><h5 id="3-构建LED驱动"><a href="#3-构建LED驱动" class="headerlink" title="3. 构建LED驱动"></a>3. 构建LED驱动</h5><p>为了方便管理，我们把LED驱动放入单独的文件夹管理。在项目根目录下创建H ardware/led目<br>录。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">然后在Hardware/led目录下创建 2 个文件led.h和led.c。</span><br></pre></td></tr></table></figure><p>并在Keil中添加如下配置。</p><p>3.1 led.h</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#ifndef __led_h</span><br><span class="line">#define __led_h</span><br><span class="line">#include &quot;gpio.h&quot;</span><br><span class="line">#define LED uint16_t</span><br><span class="line">void LED_Turn_On(LED led);</span><br><span class="line">void LED_Turn_Off(LED led);</span><br><span class="line">void LED_Toggle(LED led);</span><br><span class="line">void LED_Turn_Off_All(LED led[], uint8_t len);</span><br><span class="line">#endif</span><br><span class="line">1 2 3 4 5 6 7 8 9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td></tr></table></figure><p>3.2 led.c</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;led.h&quot;</span><br><span class="line">/**</span><br><span class="line"> * @description: 点亮LED</span><br><span class="line"> * @param &#123;LED&#125; led</span><br><span class="line"> */</span><br><span class="line">void LED_Turn_On(LED led)</span><br><span class="line">&#123;</span><br><span class="line">HAL_GPIO_WritePin(GPIOA, led, GPIO_PIN_RESET);</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line"> * @description: 熄灭LED</span><br><span class="line"> * @param &#123;LED&#125; led</span><br><span class="line"> */</span><br><span class="line">void LED_Turn_Off(LED led)</span><br><span class="line">&#123;</span><br><span class="line">HAL_GPIO_WritePin(GPIOA, led, GPIO_PIN_SET);</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line"> * @description: 翻转LED的状态</span><br><span class="line"> * @param &#123;LED&#125; led</span><br><span class="line"> */</span><br><span class="line">void LED_Toggle(LED led)</span><br><span class="line">&#123;</span><br><span class="line">1 2 3 4 5 6 7 8 9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">HAL_GPIO_TogglePin(GPIOA, led);</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line"> * @description: 关闭所有LED</span><br><span class="line"> * @param &#123;LED&#125; led</span><br><span class="line"> * @param &#123;uint8_t&#125; len</span><br><span class="line"> * @return &#123;*&#125;</span><br><span class="line"> */</span><br><span class="line">void LED_Turn_Off_All(LED led[], uint8_t len)</span><br><span class="line">&#123;</span><br><span class="line">uint8_t i;</span><br><span class="line">for (i = 0 ; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line">LED_Turn_Off(led[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td></tr></table></figure><p>3.3 main函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;LED.h&quot;</span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">HAL_Init();</span><br><span class="line">SystemClock_Config();</span><br><span class="line">MX_GPIO_Init();</span><br><span class="line">uint16_t leds[] = &#123;LED1_Pin, LED2_Pin, LED3_Pin&#125;;</span><br><span class="line">uint8_t i;</span><br><span class="line">while ( 1 )</span><br><span class="line">&#123;</span><br><span class="line">for (i = 0 ; i &lt; 3 ; i++)</span><br><span class="line">&#123;</span><br><span class="line">LED_Turn_Off_All(leds, 3 );</span><br><span class="line">LED_Turn_On(leds[i]);</span><br><span class="line">HAL_Delay( 200 );</span><br><span class="line">&#125;</span><br><span class="line">for (i = 0 ; i &lt; 3 ; i++)</span><br><span class="line">&#123;</span><br><span class="line">LED_Turn_Off_All(leds, 3 );</span><br><span class="line">LED_Turn_On(leds[ 2 - i]);</span><br><span class="line">HAL_Delay( 200 );</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">1 2 3 4 5 6 7 8 9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26 &#125;</span><br></pre></td></tr></table></figure><h5 id="4-注意"><a href="#4-注意" class="headerlink" title="4. 注意"></a>4. 注意</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">每新建一个工程，都需要 重新配置IncludePath和Debug参数 。</span><br></pre></td></tr></table></figure><h2 id="6-STM32的中断系统"><a href="#6-STM32的中断系统" class="headerlink" title="6. STM32的中断系统"></a>6. STM32的中断系统</h2><h3 id="1-中断概述"><a href="#1-中断概述" class="headerlink" title="1. 中断概述"></a>1. 中断概述</h3><h4 id="1-中断的概念"><a href="#1-中断的概念" class="headerlink" title="1. 中断的概念"></a>1. 中断的概念</h4><h6 id="在主程序运行过程中，出现了特定事件，使得CPU暂停当前正在运行的程序，转而去处理这个事"><a href="#在主程序运行过程中，出现了特定事件，使得CPU暂停当前正在运行的程序，转而去处理这个事" class="headerlink" title="在主程序运行过程中，出现了特定事件，使得CPU暂停当前正在运行的程序，转而去处理这个事"></a>在主程序运行过程中，出现了特定事件，使得CPU暂停当前正在运行的程序，转而去处理这个事</h6><h6 id="件，等这个事件处理完成之后，CPU再回到刚才被打断的位置继续处理，这就是-中断-。"><a href="#件，等这个事件处理完成之后，CPU再回到刚才被打断的位置继续处理，这就是-中断-。" class="headerlink" title="件，等这个事件处理完成之后，CPU再回到刚才被打断的位置继续处理，这就是 中断 。"></a>件，等这个事件处理完成之后，CPU再回到刚才被打断的位置继续处理，这就是 中断 。</h6><h6 id="在ARM体系结构中，中断通常由外设或外部输入产生，有时也可以由软件触发。中断是单片机系"><a href="#在ARM体系结构中，中断通常由外设或外部输入产生，有时也可以由软件触发。中断是单片机系" class="headerlink" title="在ARM体系结构中，中断通常由外设或外部输入产生，有时也可以由软件触发。中断是单片机系"></a>在ARM体系结构中，中断通常由外设或外部输入产生，有时也可以由软件触发。中断是单片机系</h6><h6 id="统处理紧急或突发事件的重要方式，如定时器溢出、按键输入、串口数据到达等。"><a href="#统处理紧急或突发事件的重要方式，如定时器溢出、按键输入、串口数据到达等。" class="headerlink" title="统处理紧急或突发事件的重要方式，如定时器溢出、按键输入、串口数据到达等。"></a>统处理紧急或突发事件的重要方式，如定时器溢出、按键输入、串口数据到达等。</h6><h6 id="那个打断CPU执行的特定事件，我们一般称之为-中断源-。被中断源打断的位置我们称为-断点-。处"><a href="#那个打断CPU执行的特定事件，我们一般称之为-中断源-。被中断源打断的位置我们称为-断点-。处" class="headerlink" title="那个打断CPU执行的特定事件，我们一般称之为 中断源 。被中断源打断的位置我们称为 断点 。处"></a>那个打断CPU执行的特定事件，我们一般称之为 中断源 。被中断源打断的位置我们称为 断点 。处</h6><h6 id="理特定事件的过程，我们称为执行-中断处理程序-。"><a href="#理特定事件的过程，我们称为执行-中断处理程序-。" class="headerlink" title="理特定事件的过程，我们称为执行 中断处理程序 。"></a>理特定事件的过程，我们称为执行 中断处理程序 。</h6><h6 id="正在执行中断程序的时候，这个时候有可能被另外一个中断源给中断，CPU转而去执行另外一个"><a href="#正在执行中断程序的时候，这个时候有可能被另外一个中断源给中断，CPU转而去执行另外一个" class="headerlink" title="正在执行中断程序的时候，这个时候有可能被另外一个中断源给中断，CPU转而去执行另外一个"></a>正在执行中断程序的时候，这个时候有可能被另外一个中断源给中断，CPU转而去执行另外一个</h6><h6 id="中断源的中断处理程序，这叫-中断嵌套-。"><a href="#中断源的中断处理程序，这叫-中断嵌套-。" class="headerlink" title="中断源的中断处理程序，这叫 中断嵌套 。"></a>中断源的中断处理程序，这叫 中断嵌套 。</h6><h6 id="中断B能否打断中断A，要看他们的优先级，优先级高的可以打断优先级低的，优先级低的无法打断优"><a href="#中断B能否打断中断A，要看他们的优先级，优先级高的可以打断优先级低的，优先级低的无法打断优" class="headerlink" title="中断B能否打断中断A，要看他们的优先级，优先级高的可以打断优先级低的，优先级低的无法打断优"></a>中断B能否打断中断A，要看他们的优先级，优先级高的可以打断优先级低的，优先级低的无法打断优</h6><h6 id="先级高的。"><a href="#先级高的。" class="headerlink" title="先级高的。"></a>先级高的。</h6><h6 id="中断源可以是外部的，也可以是内部的。外部的叫-外部中断源-，内部的叫-内部中断源（有时候也"><a href="#中断源可以是外部的，也可以是内部的。外部的叫-外部中断源-，内部的叫-内部中断源（有时候也" class="headerlink" title="中断源可以是外部的，也可以是内部的。外部的叫 外部中断源 ，内部的叫 内部中断源（有时候也"></a>中断源可以是外部的，也可以是内部的。外部的叫 外部中断源 ，内部的叫 内部中断源（有时候也</h6><h6 id="叫异常）-。"><a href="#叫异常）-。" class="headerlink" title="叫异常） 。"></a>叫异常） 。</h6><h4 id="2-为什么需要中断"><a href="#2-为什么需要中断" class="headerlink" title="2. 为什么需要中断"></a>2. 为什么需要中断</h4><h6 id="对单片机系统来说，-中断至关重要-。"><a href="#对单片机系统来说，-中断至关重要-。" class="headerlink" title="对单片机系统来说， 中断至关重要 。"></a>对单片机系统来说， 中断至关重要 。</h6><h6 id="中断的主要意义在于提高CPU的效率，而不会一直占用CPU，实现对突发事件的实时处理，以及"><a href="#中断的主要意义在于提高CPU的效率，而不会一直占用CPU，实现对突发事件的实时处理，以及" class="headerlink" title="中断的主要意义在于提高CPU的效率，而不会一直占用CPU，实现对突发事件的实时处理，以及"></a>中断的主要意义在于提高CPU的效率，而不会一直占用CPU，实现对突发事件的实时处理，以及</h6><h6 id="实现程序的并行化和嵌入式系统进程之间的切换。相较于轮询方式（即按照一定的频率和周期不断地"><a href="#实现程序的并行化和嵌入式系统进程之间的切换。相较于轮询方式（即按照一定的频率和周期不断地" class="headerlink" title="实现程序的并行化和嵌入式系统进程之间的切换。相较于轮询方式（即按照一定的频率和周期不断地"></a>实现程序的并行化和嵌入式系统进程之间的切换。相较于轮询方式（即按照一定的频率和周期不断地</h6><h6 id="检测某些事件的发生），中断在处理一些偶然发生的事情时效率更高。"><a href="#检测某些事件的发生），中断在处理一些偶然发生的事情时效率更高。" class="headerlink" title="检测某些事件的发生），中断在处理一些偶然发生的事情时效率更高。"></a>检测某些事件的发生），中断在处理一些偶然发生的事情时效率更高。</h6><h6 id="假设我们要检测按键是否按下，如果没有中断，则需要用循环的方式（阻塞）不断的去检测按键"><a href="#假设我们要检测按键是否按下，如果没有中断，则需要用循环的方式（阻塞）不断的去检测按键" class="headerlink" title="假设我们要检测按键是否按下，如果没有中断，则需要用循环的方式（阻塞）不断的去检测按键"></a>假设我们要检测按键是否按下，如果没有中断，则需要用循环的方式（阻塞）不断的去检测按键</h6><h6 id="对应的IO口的电平，这是比较耗费CPU的时间的。如果要检测的更多的话，C-PU有可能会导致阻塞。"><a href="#对应的IO口的电平，这是比较耗费CPU的时间的。如果要检测的更多的话，C-PU有可能会导致阻塞。" class="headerlink" title="对应的IO口的电平，这是比较耗费CPU的时间的。如果要检测的更多的话，C PU有可能会导致阻塞。"></a>对应的IO口的电平，这是比较耗费CPU的时间的。如果要检测的更多的话，C PU有可能会导致阻塞。</h6><h6 id="中断则使这件事简单化-，主程序不需要循环不断的去检测按键，当有按键按下的时候，CPU执行被打"><a href="#中断则使这件事简单化-，主程序不需要循环不断的去检测按键，当有按键按下的时候，CPU执行被打" class="headerlink" title="中断则使这件事简单化 ，主程序不需要循环不断的去检测按键，当有按键按下的时候，CPU执行被打"></a>中断则使这件事简单化 ，主程序不需要循环不断的去检测按键，当有按键按下的时候，CPU执行被打</h6><h6 id="断，去执行按键处理程序就行了。当没有按键按下的时候，CPU完全可以正常执行代码，丝毫不受任"><a href="#断，去执行按键处理程序就行了。当没有按键按下的时候，CPU完全可以正常执行代码，丝毫不受任" class="headerlink" title="断，去执行按键处理程序就行了。当没有按键按下的时候，CPU完全可以正常执行代码，丝毫不受任"></a>断，去执行按键处理程序就行了。当没有按键按下的时候，CPU完全可以正常执行代码，丝毫不受任</h6><h6 id="何的影响。"><a href="#何的影响。" class="headerlink" title="何的影响。"></a>何的影响。</h6><h4 id="3-STM32的中断"><a href="#3-STM32的中断" class="headerlink" title="3. STM32的中断"></a>3. STM32的中断</h4><p>Cortext-M3内核支持 256 个中断，其中包含了 16 个内核中断和 240 个外部中断，并且具有 256 级的<br>可编程中断设置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">一般情况下，芯片厂商会对Cortex-M3的中断进行裁剪。</span><br><span class="line">STM32有 84 个中断，包括 16 个内核中断和 68 个可屏蔽中断，具有 16 级可编程的中断优先级。</span><br><span class="line">STM32F103系列 70 个中断（咱们目前使用的芯片）有 10 个内核中断和 60 个可编程的外部中断。</span><br><span class="line">下面的列表中，灰色背景的是内部中断（或者异常），其他的为外部中断。</span><br></pre></td></tr></table></figure><h4 id="4-STM32的中断体系架构"><a href="#4-STM32的中断体系架构" class="headerlink" title="4. STM32的中断体系架构"></a>4. STM32的中断体系架构</h4><h6 id="这图已经无敌了！"><a href="#这图已经无敌了！" class="headerlink" title="这图已经无敌了！"></a>这图已经无敌了！</h6><h4 id="5-NVIC嵌套向量中断控制器"><a href="#5-NVIC嵌套向量中断控制器" class="headerlink" title="5. NVIC嵌套向量中断控制器"></a>5. NVIC嵌套向量中断控制器</h4><h5 id="1-NVIC的介绍"><a href="#1-NVIC的介绍" class="headerlink" title="1. NVIC的介绍"></a>1. NVIC的介绍</h5><p><strong>NVIC（Nestedvectoredinterruptcontroller嵌套向量中断控制器）和处理器核的接口紧密相<br>连，可以实现低延迟的中断处理和高效地处理中断。</strong> 嵌套向量中断控制器管理着包括内核异常，外部<br>中断等 <strong>所有中断</strong> 。 <strong>NVIC决定哪个中断的处理程序交给CPU来执行（秘书，大内总管）</strong> 。</p><p>每一个外部中断都可以被使能或者禁止，并且可以被设置为挂起状态或者清除状态。处理器的中<br>断可以电平的形式的，也可以是脉冲形式的，这样中断控制器就可以处理任何中断源。</p><p>16 个IO的中断与PVD(电源电压检测)，RTC(实时时钟)，USB，以太网检测这2 0个外部中断会通过<br>EXTI来控制，然后交给NVIC。其他中断都是直接交给NVIC来处理。</p><p>NVIC提供了灵活、高效、可扩展的中断处理机制，支持多级优先级、多向中断、嵌套向量中断等<br>特性。当一个中断请求到达时，NVIC会确定其优先级并决定是否应该中断当前执行的程序，以便及时<br>响应和处理该中断请求。这种设计有助于提高系统的响应速度和可靠性，特别是在需要处理大量中断<br>请求的实时应用程序中。</p><h5 id="2-NVIC原理"><a href="#2-NVIC原理" class="headerlink" title="2. NVIC原理"></a>2. NVIC原理</h5><h6 id="如图："><a href="#如图：" class="headerlink" title="如图："></a>如图：</h6><h5 id="3-中断优先级"><a href="#3-中断优先级" class="headerlink" title="3. 中断优先级"></a>3. 中断优先级</h5><h6 id="NVIC为了方便管理中断，可以通过软件给每个中断设置优先级。NVIC用-4-个位来控制优先级，值"><a href="#NVIC为了方便管理中断，可以通过软件给每个中断设置优先级。NVIC用-4-个位来控制优先级，值" class="headerlink" title="NVIC为了方便管理中断，可以通过软件给每个中断设置优先级。NVIC用 4 个位来控制优先级，值"></a>NVIC为了方便管理中断，可以通过软件给每个中断设置优先级。NVIC用 4 个位来控制优先级，值</h6><h6 id="小的优先级高。把优先级分为两种：抢占优先级和响应优先级。"><a href="#小的优先级高。把优先级分为两种：抢占优先级和响应优先级。" class="headerlink" title="小的优先级高。把优先级分为两种：抢占优先级和响应优先级。"></a>小的优先级高。把优先级分为两种：抢占优先级和响应优先级。</h6><h6 id="规则："><a href="#规则：" class="headerlink" title="规则："></a>规则：</h6><h3 id="◦-优先级值越小，优先级越高。"><a href="#◦-优先级值越小，优先级越高。" class="headerlink" title="◦ 优先级值越小，优先级越高。"></a>◦ 优先级值越小，优先级越高。</h3><h3 id="◦-如果不设置优先级，则默认优先级为-0-。"><a href="#◦-如果不设置优先级，则默认优先级为-0-。" class="headerlink" title="◦ 如果不设置优先级，则默认优先级为^0 。"></a>◦ 如果不设置优先级，则默认优先级为^0 。</h3><h3 id="◦-先比较抢占优先级。抢占优先级高的可以打断抢占优先级低的。"><a href="#◦-先比较抢占优先级。抢占优先级高的可以打断抢占优先级低的。" class="headerlink" title="◦ 先比较抢占优先级。抢占优先级高的可以打断抢占优先级低的。"></a>◦ 先比较抢占优先级。抢占优先级高的可以打断抢占优先级低的。</h3><h3 id="◦-若抢占优先级一样，再比较响应优先级。-但是响应优先级不会导致中断嵌套。"><a href="#◦-若抢占优先级一样，再比较响应优先级。-但是响应优先级不会导致中断嵌套。" class="headerlink" title="◦ 若抢占优先级一样，再比较响应优先级。 但是响应优先级不会导致中断嵌套。"></a>◦ 若抢占优先级一样，再比较响应优先级。 但是响应优先级不会导致中断嵌套。</h3><h3 id="◦-若-抢占优先级一样-的同时挂起，则优先处理-响应抢占优先级高-的。"><a href="#◦-若-抢占优先级一样-的同时挂起，则优先处理-响应抢占优先级高-的。" class="headerlink" title="◦ 若 抢占优先级一样 的同时挂起，则优先处理 响应抢占优先级高 的。"></a>◦ 若 抢占优先级一样 的同时挂起，则优先处理 响应抢占优先级高 的。</h3><h3 id="◦-若挂起的优先级（抢占和响应）都一样，则查找中断向量表，值小的先响应（看自然优先级优"><a href="#◦-若挂起的优先级（抢占和响应）都一样，则查找中断向量表，值小的先响应（看自然优先级优" class="headerlink" title="◦ 若挂起的优先级（抢占和响应）都一样，则查找中断向量表，值小的先响应（看自然优先级优"></a>◦ 若挂起的优先级（抢占和响应）都一样，则查找中断向量表，值小的先响应（看自然优先级优</h3><h6 id="先级）。"><a href="#先级）。" class="headerlink" title="先级）。"></a>先级）。</h6><h3 id="◦-NVIC对优先级分了-5-组，在程序中先对中断进行分组，优先级寄存器IPR有8位，但实际只使用"><a href="#◦-NVIC对优先级分了-5-组，在程序中先对中断进行分组，优先级寄存器IPR有8位，但实际只使用" class="headerlink" title="◦ NVIC对优先级分了^5 组，在程序中先对中断进行分组，优先级寄存器IPR有8位，但实际只使用"></a>◦ NVIC对优先级分了^5 组，在程序中先对中断进行分组，优先级寄存器IPR有8位，但实际只使用</h3><h6 id="到高4位，用于决定抢占优先级、响应优先级的等级。"><a href="#到高4位，用于决定抢占优先级、响应优先级的等级。" class="headerlink" title="到高4位，用于决定抢占优先级、响应优先级的等级。"></a>到高4位，用于决定抢占优先级、响应优先级的等级。</h6><h3 id="◦-具体这4位如何切割？由又由AIRCR寄存器控制，而且分组只能分一次，若多次分，只有最后"><a href="#◦-具体这4位如何切割？由又由AIRCR寄存器控制，而且分组只能分一次，若多次分，只有最后" class="headerlink" title="◦ 具体这4位如何切割？由又由AIRCR寄存器控制，而且分组只能分一次，若多次分，只有最后"></a>◦ 具体这4位如何切割？由又由AIRCR寄存器控制，而且分组只能分一次，若多次分，只有最后</h3><h6 id="一次生效。"><a href="#一次生效。" class="headerlink" title="一次生效。"></a>一次生效。</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">分组 抢占优先级 响应优先级</span><br><span class="line">0  0 位取值范围： 0  4 位取值范围：0-15</span><br><span class="line">1  1 位取值范围：0-1 3 位取值范围：0-7</span><br><span class="line">2  2 位取值范围：0-3 2 位取值范围：0-3</span><br><span class="line">3  3 位取值范围：0-7 1 位取值范围：0-1</span><br><span class="line">4  4 位取值范围：0-15 0 位取值范围： 0 </span><br><span class="line">抢占优先级和子优先级可通过CubeMX配置。</span><br></pre></td></tr></table></figure><h5 id="4-NVIC常用寄存器"><a href="#4-NVIC常用寄存器" class="headerlink" title="4. NVIC常用寄存器"></a>4. NVIC常用寄存器</h5><h6 id="如图：-1"><a href="#如图：-1" class="headerlink" title="如图："></a>如图：</h6><h5 id="5-NVIC配置思路"><a href="#5-NVIC配置思路" class="headerlink" title="5. NVIC配置思路"></a>5. NVIC配置思路</h5><h6 id="设置中断分组→设置中断优先级→使能中断"><a href="#设置中断分组→设置中断优先级→使能中断" class="headerlink" title="设置中断分组→设置中断优先级→使能中断 "></a>设置中断分组→设置中断优先级→使能中断 </h6><h4 id="6-中断向量表"><a href="#6-中断向量表" class="headerlink" title="6. 中断向量表"></a>6. 中断向量表</h4><p><strong>STM32的中断向量表是一个存储中断处理函数地址的数组，位于Flash区的起始位置。</strong> 每个数组<br>元素对应一个中断源，其地址指向相应的中断服务程序。当中断发生时，处理器会根据中断号查找向<br>量表，然后跳转到对应的中断服务程序执行。</p><p>中断向量表的主要作用是解决中断函数地址不固定与中断必须跳转到固定地方执行程序之间的矛<br>盾。由于编译器每次编译都会为中断函数随机分配地址，但硬件要求中断必须跳转到固定的位置。</p><p>因此，中断向量表就作为这样一个固定的地址列表，其中包含了中断函数的地址以及跳转到这些<br>地址的程序。当中断发生时，处理器会跳转到这个固定的中断向量表，然后根据其中的信息跳转到相<br>应的中断处理函数，从而执行中断。</p><h4 id="🎼-注意："><a href="#🎼-注意：" class="headerlink" title="🎼 注意："></a>🎼 注意：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">NVIC（NestedVectoredInterruptController） 和 中断向量表 不是一回事。NVIC是处</span><br><span class="line">理器中的一个组件，负责管理和响应中断请求，包括优先级和中断的嵌套处理。中断向量表</span><br><span class="line">则是一个存储中断服务程序（ISR）地址的表格，当中断发生时，NVIC使用这个表来找到对</span><br><span class="line">应的ISR。它们配合工作，NVIC通过中断向量表来确定应执行哪个中断处理程序。</span><br></pre></td></tr></table></figure><h4 id="7-中断执行流程"><a href="#7-中断执行流程" class="headerlink" title="7. 中断执行流程"></a>7. 中断执行流程</h4><h6 id="中断发生时，STM32的执行流程如下："><a href="#中断发生时，STM32的执行流程如下：" class="headerlink" title="中断发生时，STM32的执行流程如下："></a>中断发生时，STM32的执行流程如下：</h6><h6 id="首先，由外设发出中断请求；然后，处理器暂停当前执行的任务，保护现场（如将当前位置的PC"><a href="#首先，由外设发出中断请求；然后，处理器暂停当前执行的任务，保护现场（如将当前位置的PC" class="headerlink" title="首先，由外设发出中断请求；然后，处理器暂停当前执行的任务，保护现场（如将当前位置的PC"></a>首先，由外设发出中断请求；然后，处理器暂停当前执行的任务，保护现场（如将当前位置的PC</h6><h6 id="地址压栈）；接着，程序跳转到对应的中断服务程序（ISR）并执行；中断服务程序执行完毕后，恢复"><a href="#地址压栈）；接着，程序跳转到对应的中断服务程序（ISR）并执行；中断服务程序执行完毕后，恢复" class="headerlink" title="地址压栈）；接着，程序跳转到对应的中断服务程序（ISR）并执行；中断服务程序执行完毕后，恢复"></a>地址压栈）；接着，程序跳转到对应的中断服务程序（ISR）并执行；中断服务程序执行完毕后，恢复</h6><h6 id="现场（如将栈顶的值送回PC）；最后，处理器返回到被中断的位置，继续执行下一个指令。"><a href="#现场（如将栈顶的值送回PC）；最后，处理器返回到被中断的位置，继续执行下一个指令。" class="headerlink" title="现场（如将栈顶的值送回PC）；最后，处理器返回到被中断的位置，继续执行下一个指令。"></a>现场（如将栈顶的值送回PC）；最后，处理器返回到被中断的位置，继续执行下一个指令。</h6><h3 id="2-中断案例：检测按键按下"><a href="#2-中断案例：检测按键按下" class="headerlink" title="2. 中断案例：检测按键按下"></a>2. 中断案例：检测按键按下</h3><h4 id="1-需求描述-2"><a href="#1-需求描述-2" class="headerlink" title="1. 需求描述"></a>1. 需求描述</h4><h6 id="利用外部中断检测按键KEY3，当按键按下，翻转LED1显示。"><a href="#利用外部中断检测按键KEY3，当按键按下，翻转LED1显示。" class="headerlink" title="利用外部中断检测按键KEY3，当按键按下，翻转LED1显示。"></a>利用外部中断检测按键KEY3，当按键按下，翻转LED1显示。</h6><h4 id="2-硬件电路设计-2"><a href="#2-硬件电路设计-2" class="headerlink" title="2. 硬件电路设计"></a>2. 硬件电路设计</h4><h5 id="1-LED1的硬件电路"><a href="#1-LED1的硬件电路" class="headerlink" title="1. LED1的硬件电路"></a>1. LED1的硬件电路</h5><h5 id="2-KEY的硬件电路"><a href="#2-KEY的硬件电路" class="headerlink" title="2. KEY的硬件电路"></a>2. KEY的硬件电路</h5><h6 id="说明：-1"><a href="#说明：-1" class="headerlink" title="说明："></a>说明：</h6><h6 id="1-PF10对应的是KEY-3-SW3-我们可以设置PF10的模式为-下拉输入-，则当按键没有按下的时候是低"><a href="#1-PF10对应的是KEY-3-SW3-我们可以设置PF10的模式为-下拉输入-，则当按键没有按下的时候是低" class="headerlink" title="1. PF10对应的是KEY_3(SW3),我们可以设置PF10的模式为 下拉输入 ，则当按键没有按下的时候是低"></a>1. PF10对应的是KEY_3(SW3),我们可以设置PF10的模式为 下拉输入 ，则当按键没有按下的时候是低</h6><h6 id="电平，当按键按下的时候是高电平。"><a href="#电平，当按键按下的时候是高电平。" class="headerlink" title="电平，当按键按下的时候是高电平。"></a>电平，当按键按下的时候是高电平。</h6><ol><li>由于按键没有设置硬件防抖，则我们需要软件设计防抖。一般延时10-15ms即可实现软件防抖。</li></ol><h4 id="3-软件设计（寄存器）-1"><a href="#3-软件设计（寄存器）-1" class="headerlink" title="3. 软件设计（寄存器）"></a>3. 软件设计（寄存器）</h4><h6 id="复制我们第一个项目，在第一个项目的基础上修改，可以省去一些配置步骤。"><a href="#复制我们第一个项目，在第一个项目的基础上修改，可以省去一些配置步骤。" class="headerlink" title="复制我们第一个项目，在第一个项目的基础上修改，可以省去一些配置步骤。"></a>复制我们第一个项目，在第一个项目的基础上修改，可以省去一些配置步骤。</h6><h6 id="另外文件如何创建以后不再说明。"><a href="#另外文件如何创建以后不再说明。" class="headerlink" title="另外文件如何创建以后不再说明。"></a>另外文件如何创建以后不再说明。</h6><h5 id="3-1-main-c"><a href="#3-1-main-c" class="headerlink" title="3.1 main.c"></a>3.1 main.c</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;Driver_LED.h&quot;</span><br><span class="line">#include &quot;Delay.h&quot;</span><br><span class="line">#include &quot;Driver_Key.h&quot;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">/* 1. 初始化LED */</span><br><span class="line">Driver_LED_Init();</span><br><span class="line">/* 2. 初始化按键 */</span><br><span class="line">Driver_Key_Init();</span><br><span class="line">while ( 1 )</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">1 2 3 4 5 6 7 8 9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td></tr></table></figure><h5 id="3-2-Delay-h"><a href="#3-2-Delay-h" class="headerlink" title="3.2 Delay.h"></a>3.2 Delay.h</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#ifndef __delay_h</span><br><span class="line">#define __delay_h</span><br><span class="line">#include &quot;stm32f10x.h&quot; // Device header</span><br><span class="line">void Delay_us(uint16_t us);</span><br><span class="line">void Delay_ms(uint16_t ms);</span><br><span class="line">void Delay_s(uint16_t s);</span><br><span class="line">#endif</span><br><span class="line">1 2 3 4 5 6 7 8 9</span><br></pre></td></tr></table></figure><h5 id="3-3-Delay-c"><a href="#3-3-Delay-c" class="headerlink" title="3.3 Delay.c"></a>3.3 Delay.c</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;delay.h&quot; // Device header</span><br><span class="line">void Delay_us(uint16_t us)</span><br><span class="line">&#123;</span><br><span class="line">/* 定时器重装值 */</span><br><span class="line">SysTick-&gt;LOAD = 72 * us;</span><br><span class="line">/* 清除当前计数值 */</span><br><span class="line">SysTick-&gt;VAL = 0 ;</span><br><span class="line">/*设置内部时钟源（ 2 位-&gt;1）,不需要中断（ 1 位-&gt;0），并启动定时器(0位-&gt;1)*/</span><br><span class="line">SysTick-&gt;CTRL = 0x5;</span><br><span class="line">/*等待计数到 0 ， 如果计数到 0 则 16 位会置为1*/</span><br><span class="line">while (!(SysTick-&gt;CTRL &amp; SysTick_CTRL_COUNTFLAG));</span><br><span class="line">/* 关闭定时器 */</span><br><span class="line">SysTick-&gt;CTRL &amp;= ~SysTick_CTRL_ENABLE;</span><br><span class="line">&#125;</span><br><span class="line">void Delay_ms(uint16_t ms)</span><br><span class="line">&#123;</span><br><span class="line">while (ms--)</span><br><span class="line">&#123;</span><br><span class="line">Delay_us( 1000 );</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">void Delay_s(uint16_t s)</span><br><span class="line">&#123;</span><br><span class="line">while (s--)</span><br><span class="line">&#123;</span><br><span class="line">Delay_ms( 1000 );</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">1 2 3 4 5 6 7 8 9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td></tr></table></figure><h5 id="3-4-Driver-LED-h"><a href="#3-4-Driver-LED-h" class="headerlink" title="3.4 Driver_LED.h"></a>3.4 Driver_LED.h</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">#ifndef __DRIVER_LED_H</span><br><span class="line">#define __DRIVER_LED_H</span><br><span class="line">#include &quot;stm32f10x.h&quot;</span><br><span class="line">#define LED_1 GPIO_ODR_ODR0</span><br><span class="line">1 2 3 4 5 6</span><br><span class="line">#define LED_2 GPIO_ODR_ODR1</span><br><span class="line">#define LED_3 GPIO_ODR_ODR8</span><br><span class="line">void Driver_LED_Init(void);</span><br><span class="line">void Driver_LED_On(uint32_t led);</span><br><span class="line">void Driver_LED_Off(uint32_t led);</span><br><span class="line">void Driver_LED_Toggle(uint32_t led);</span><br><span class="line">void Driver_LED_OnAll(uint32_t leds[], uint8_t size);</span><br><span class="line">void Driver_LED_OffAll(uint32_t leds[], uint8_t size);</span><br><span class="line">#endif</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td></tr></table></figure><h5 id="3-5-Driver-LED-c"><a href="#3-5-Driver-LED-c" class="headerlink" title="3.5 Driver_LED.c"></a>3.5 Driver_LED.c</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;Driver_LED.h&quot;</span><br><span class="line">/**</span><br><span class="line"> * @description: 对LED进行初始化</span><br><span class="line"> */</span><br><span class="line">void Driver_LED_Init(void)</span><br><span class="line">&#123;</span><br><span class="line">/* 1. 打开GPIOA的时钟 */</span><br><span class="line">RCC-&gt;APB2ENR |= RCC_APB2ENR_IOPAEN;</span><br><span class="line">/* 2. 给用到的端口的所有 PIN (PA0 PA1 PA8) 设置工作模式: 通用推挽输出 MODE:11</span><br><span class="line"> CNF:00 */</span><br><span class="line">GPIOA-&gt;CRL |= (GPIO_CRL_MODE0 | GPIO_CRL_MODE1);</span><br><span class="line">GPIOA-&gt;CRL &amp;= ~(GPIO_CRL_CNF0 | GPIO_CRL_CNF1);</span><br><span class="line">GPIOA-&gt;CRH |= GPIO_CRH_MODE8;</span><br><span class="line">GPIOA-&gt;CRH &amp;= ~GPIO_CRH_CNF8;</span><br><span class="line">/* 3. 关闭所有灯  */</span><br><span class="line">Driver_LED_Off(LED_1);</span><br><span class="line">Driver_LED_Off(LED_2);</span><br><span class="line">Driver_LED_Off(LED_3);</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line"> * @description: 点亮指定的LED</span><br><span class="line">1 2 3 4 5 6 7 8 9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line"> * @param &#123;uint32_t&#125; led 要点亮的LED</span><br><span class="line"> */</span><br><span class="line">void Driver_LED_On(uint32_t led)</span><br><span class="line">&#123;</span><br><span class="line">GPIOA-&gt;ODR &amp;= ~led;</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line"> * @description: 关闭指定的LED</span><br><span class="line"> * @param &#123;uint32_t&#125; led 要关闭的LED</span><br><span class="line"> */</span><br><span class="line">void Driver_LED_Off(uint32_t led)</span><br><span class="line">&#123;</span><br><span class="line">GPIOA-&gt;ODR |= led;</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line"> * @description: 翻转LED的状态</span><br><span class="line"> * @param &#123;uint32_t&#125; led 要翻转的LED</span><br><span class="line"> */</span><br><span class="line">void Driver_LED_Toggle(uint32_t led)</span><br><span class="line">&#123;</span><br><span class="line">/* 1. 读取引脚的电平,如果是1(目前是关闭), 打开, 否则就关闭 */</span><br><span class="line">if ((GPIOA-&gt;IDR &amp; led) == 0 )</span><br><span class="line">&#123;</span><br><span class="line">Driver_LED_Off(led);</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">Driver_LED_On(led);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line"> * @description: 打开数组中所有的灯</span><br><span class="line"> * @param &#123;uint32_t&#125; leds 所有灯</span><br><span class="line"> * @param &#123;uint8_t&#125; size 灯的个数</span><br><span class="line"> */</span><br><span class="line">void Driver_LED_OnAll(uint32_t leds[], uint8_t size)</span><br><span class="line">&#123;</span><br><span class="line">for (uint8_t i = 0 ; i &lt; size; i++)</span><br><span class="line">&#123;</span><br><span class="line">Driver_LED_On(leds[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br></pre></td></tr></table></figure><p>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> * @description: 关闭数组中所有的灯</span><br><span class="line"> * @param &#123;uint32_t&#125; leds 所有灯</span><br><span class="line"> * @param &#123;uint8_t&#125; size 灯的个数</span><br><span class="line"> */</span><br><span class="line">void Driver_LED_OffAll(uint32_t leds[], uint8_t size)</span><br><span class="line">&#123;</span><br><span class="line">for (uint8_t i = 0 ; i &lt; size; i++)</span><br><span class="line">&#123;</span><br><span class="line">Driver_LED_Off(leds[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td></tr></table></figure><h5 id="3-6-Driver-Key-h"><a href="#3-6-Driver-Key-h" class="headerlink" title="3.6 Driver_Key.h"></a>3.6 Driver_Key.h</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#ifndef __DRIVER_KEY_H</span><br><span class="line">#define __DRIVER_KEY_H</span><br><span class="line">#include &quot;stm32f10x.h&quot;</span><br><span class="line">void Driver_Key_Init(void);</span><br><span class="line">#endif</span><br><span class="line">1 2 3 4 5 6 7</span><br></pre></td></tr></table></figure><h5 id="3-7-Driver-Key-c"><a href="#3-7-Driver-Key-c" class="headerlink" title="3.7 Driver_Key.c"></a>3.7 Driver_Key.c</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;Driver_Key.&quot;</span><br><span class="line">#include &quot;Driver_LED.h&quot;</span><br><span class="line">#include &quot;Delay.h&quot;</span><br><span class="line">/**</span><br><span class="line"> * @description: 初始化按键.</span><br><span class="line"> *  1. 给按键对应的io口设置工作模式: 下拉输入</span><br><span class="line"> *  2. 配置复用为外部中断</span><br><span class="line"> *  3. 配置外部中断控制器 EXTI</span><br><span class="line"> *  4. 配置NVIC</span><br><span class="line"> */</span><br><span class="line">void Driver_Key_Init(void)</span><br><span class="line">&#123;</span><br><span class="line">/* 1. 开启时钟 */</span><br><span class="line">/* 1.1  GPIOF*/</span><br><span class="line">RCC-&gt;APB2ENR |= RCC_APB2ENR_IOPFEN;</span><br><span class="line">/* 1.2  AFIO*/</span><br><span class="line">RCC-&gt;APB2ENR |= RCC_APB2ENR_AFIOEN;</span><br><span class="line">1 2 3 4 5 6 7 8 9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">/* 2. 配置 PF10为下拉输入: MODE=00 CNF=10  ODR=0 */</span><br><span class="line">GPIOF-&gt;CRH &amp;= ~GPIO_CRH_MODE10;</span><br><span class="line">GPIOF-&gt;CRH |= GPIO_CRH_CNF10_1;</span><br><span class="line">GPIOF-&gt;CRH &amp;= ~GPIO_CRH_CNF10_0;</span><br><span class="line">GPIOF-&gt;ODR &amp;= ~GPIO_ODR_ODR10;/* ODR为 0 下拉输入 ODR为 1 上拉输入 */</span><br><span class="line">/* 3. 配置AFIO 配置PF10引脚为外部中断  EXTICR3  0101 */</span><br><span class="line">AFIO-&gt;EXTICR[ 2 ] &amp;= ~AFIO_EXTICR3_EXTI10;</span><br><span class="line">AFIO-&gt;EXTICR[ 2 ] |= AFIO_EXTICR3_EXTI10_PF;</span><br><span class="line">/* 使用AFIO配置寄存器（AFIO-&gt;EXTICR[2]）将PF10引脚映射到外部中断线 10 （EXTI10）。</span><br><span class="line">*/</span><br><span class="line">/* 4. 配置EXTI */</span><br><span class="line">/* 4.1. 配置上升沿触发 RTSR TR10=1*/</span><br><span class="line">EXTI-&gt;RTSR |= EXTI_RTSR_TR10;</span><br><span class="line">/* 4.2 开启 LINE10, 配置的中断屏蔽寄存器 */</span><br><span class="line">EXTI-&gt;IMR |= EXTI_IMR_MR10;</span><br><span class="line">/* 5. 配置 NVIC */</span><br><span class="line">/* 5.1 配置优先级组 (3-7) 配置 3 表示 4 个二进制位全部用于表示抢占优先级*/</span><br><span class="line">NVIC_SetPriorityGrouping( 3 );</span><br><span class="line">/* 5.2 配置优先级 参数1:中断号*/</span><br><span class="line">NVIC_SetPriority(EXTI15_10_IRQn, 3 );</span><br><span class="line">/* 5.3 使能Line10 */</span><br><span class="line">NVIC_EnableIRQ(EXTI15_10_IRQn);</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line"> * @description: line 15-10的中断服务函数.</span><br><span class="line"> *  一旦按键下按键1,则会执行一次这个函数</span><br><span class="line"> * @return &#123;*&#125;</span><br><span class="line"> */</span><br><span class="line">void EXTI15_10_IRQHandler(void)</span><br><span class="line">&#123;</span><br><span class="line">/* 务必一定必须要清除中断标志位 */</span><br><span class="line">EXTI-&gt;PR |= EXTI_PR_PR10;</span><br><span class="line">Delay_ms( 5 );/* 务必一定必须要清除中断标志位 */</span><br><span class="line">if ((GPIOF-&gt;IDR &amp; GPIO_IDR_IDR10) != 0 )</span><br><span class="line">&#123;</span><br><span class="line">Driver_LED_Toggle(LED_1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30</p><p>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65</p><h4 id="4-思考"><a href="#4-思考" class="headerlink" title="4. 思考"></a>4. 思考</h4><p>**为啥LED翻转电平这个函数的if条件判断必须要用if((GPIOA-&gt;IDR&amp;led)== 0 )，而不是if((GPIOA-</p><blockquote><p>IDR&amp;led)==1)？** </p></blockquote><p>举个例子：</p><p><strong>假设led是一个位掩码</strong> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#define LED1 (1 &lt;&lt; 0) // LED1对应GPIOA的第 0 位</span><br><span class="line">#define LED2 (1 &lt;&lt; 1) // LED2对应GPIOA的第 1 位</span><br><span class="line">// 可能还有其他LED定义...</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></table></figure><h4 id="🎁"><a href="#🎁" class="headerlink" title="🎁"></a>🎁</h4><h6 id="而GPIOA-gt-IDR是一个输入数据寄存器，其中的每一位对应一个特定的输入引脚的状态（通"><a href="#而GPIOA-gt-IDR是一个输入数据寄存器，其中的每一位对应一个特定的输入引脚的状态（通" class="headerlink" title="而GPIOA-&gt;IDR是一个输入数据寄存器，其中的每一位对应一个特定的输入引脚的状态（通"></a>而GPIOA-&gt;IDR是一个输入数据寄存器，其中的每一位对应一个特定的输入引脚的状态（通</h6><h6 id="常是-0-或-1-）。"><a href="#常是-0-或-1-）。" class="headerlink" title="常是 0 或 1 ）。 "></a>常是 0 或 1 ）。 </h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">现在假设GPIOA-&gt;IDR的值是0b00000011，即第 0 位和第 1 位都为 1 。如果我们使用位掩码</span><br><span class="line">led=LED1|LED2，即led=(1&lt;&lt;0)|(1&lt;&lt;1)，那么led的值将是0b00000011。 </span><br><span class="line">现在来看(GPIOA-&gt;IDR&amp;led)的计算： </span><br><span class="line">因此，(GPIOA-&gt;IDR&amp;led)的结果将是0b00000011，而不是单纯的 1 。 </span><br><span class="line">如果条件语句是if((GPIOA-&gt;IDR&amp;led)==1)，那么(GPIOA-&gt;IDR&amp;led)的值是</span><br><span class="line">0b00000011，显然不等于 1 ，因此条件将不会成立，这可能与预期的逻辑相悖。 </span><br><span class="line">因此， if((GPIOA-&gt;IDR&amp;led)== 0 )是正解！ </span><br></pre></td></tr></table></figure><h4 id="5-软件设计（HAL库）"><a href="#5-软件设计（HAL库）" class="headerlink" title="5. 软件设计（HAL库）"></a>5. 软件设计（HAL库）</h4><h5 id="1-STM32CubeMX配置"><a href="#1-STM32CubeMX配置" class="headerlink" title="1. STM32CubeMX配置"></a>1. STM32CubeMX配置</h5><h6 id="配置LED1的PA0引脚。"><a href="#配置LED1的PA0引脚。" class="headerlink" title="配置LED1的PA0引脚。"></a>配置LED1的PA0引脚。</h6><h6 id="调整滴答定时器和外部中断的优先级。否则使用延时消抖会卡死。"><a href="#调整滴答定时器和外部中断的优先级。否则使用延时消抖会卡死。" class="headerlink" title="调整滴答定时器和外部中断的优先级。否则使用延时消抖会卡死。"></a>调整滴答定时器和外部中断的优先级。否则使用延时消抖会卡死。</h6><h5 id="2-GPIO初始化代码"><a href="#2-GPIO初始化代码" class="headerlink" title="2. GPIO初始化代码"></a>2. GPIO初始化代码</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">void MX_GPIO_Init(void)</span><br><span class="line">&#123;</span><br><span class="line">GPIO_InitTypeDef GPIO_InitStruct = &#123; 0 &#125;;</span><br><span class="line">/* GPIO Ports Clock Enable */</span><br><span class="line">__HAL_RCC_GPIOE_CLK_ENABLE();</span><br><span class="line">__HAL_RCC_GPIOC_CLK_ENABLE();</span><br><span class="line">__HAL_RCC_GPIOG_CLK_ENABLE();</span><br><span class="line">__HAL_RCC_GPIOA_CLK_ENABLE();</span><br><span class="line">/*Configure GPIO pin Output Level */</span><br><span class="line">HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);</span><br><span class="line">/*Configure GPIO pin : PE3 */</span><br><span class="line">GPIO_InitStruct.Pin = GPIO_PIN_3;</span><br><span class="line">GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;</span><br><span class="line">GPIO_InitStruct.Pull = GPIO_NOPULL;</span><br><span class="line">GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;</span><br><span class="line">HAL_GPIO_Init(GPIOE, &amp;GPIO_InitStruct);</span><br><span class="line">/*Configure GPIO pin : PG6 */</span><br><span class="line">GPIO_InitStruct.Pin = GPIO_PIN_6;</span><br><span class="line">GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;</span><br><span class="line">GPIO_InitStruct.Pull = GPIO_PULLDOWN;</span><br><span class="line">HAL_GPIO_Init(GPIOG, &amp;GPIO_InitStruct);</span><br><span class="line">1 2 3 4 5 6 7 8 9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">/* EXTI interrupt init*/</span><br><span class="line">HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0 , 0 );</span><br><span class="line">HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);</span><br><span class="line">&#125;</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td></tr></table></figure><h5 id="3-添加中断处理函数"><a href="#3-添加中断处理函数" class="headerlink" title="3. 添加中断处理函数"></a>3. 添加中断处理函数</h5><p>当有按键按下的时候，检测到上升沿会执行中断服务函数：EXTI15_10_IRQHandler，内部又会调<br>用HAL库总的外部中断处理函数HAL_GPIO_EXTI_IRQHandler，然后会调用中断回调函数<br>HAL_GPIO_EXTI_Callback，它是一个 <strong>弱实现函数</strong> （用 <strong>__weak</strong> 修饰，如果有新的同名函数实现，则执<br>行时会自动调用新的实现函数），我们重新实现这个函数就可以了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">void EXTI15_10_IRQHandler(void)</span><br><span class="line">&#123;</span><br><span class="line">/* USER CODE BEGIN EXTI15_10_IRQn 0 */</span><br><span class="line">/* USER CODE END EXTI15_10_IRQn 0 */</span><br><span class="line">HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);</span><br><span class="line">/* USER CODE BEGIN EXTI15_10_IRQn 1 */</span><br><span class="line">/* USER CODE END EXTI15_10_IRQn 1 */</span><br><span class="line">&#125;</span><br><span class="line">void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)</span><br><span class="line">&#123;</span><br><span class="line">/* EXTI line interrupt detected */</span><br><span class="line">if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)</span><br><span class="line">&#123;</span><br><span class="line">__HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);</span><br><span class="line">HAL_GPIO_EXTI_Callback(GPIO_Pin);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)</span><br><span class="line">&#123;</span><br><span class="line">/* Prevent unused argument(s) compilation warning */</span><br><span class="line">UNUSED(GPIO_Pin);</span><br><span class="line">/* NOTE: This function Should not be modified, when the callback is needed,</span><br><span class="line"> the HAL_GPIO_EXTI_Callback could be implemented in the user file</span><br><span class="line">1 2 3 4 5 6 7 8 9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">*/</span><br><span class="line">&#125;</span><br><span class="line">//在gpio.c中实现中断回调函数即可。</span><br><span class="line">/* USER CODE BEGIN 2 */</span><br><span class="line">void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)</span><br><span class="line">&#123;</span><br><span class="line">if (GPIO_Pin == GPIO_PIN_10)</span><br><span class="line">&#123;</span><br><span class="line">HAL_Delay( 15 );//调整一下SYSTick的优先级，其默认是最低的！</span><br><span class="line">// 防抖： 延迟15ms之后再次检测是否仍然是高电平，</span><br><span class="line">if (HAL_GPIO_ReadPin(GPIOF, GPIO_Pin) == GPIO_PIN_SET)</span><br><span class="line">&#123;</span><br><span class="line">HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">/* USER CODE END 2 */</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td></tr></table></figure><h2 id="7-USART串口通讯"><a href="#7-USART串口通讯" class="headerlink" title="7. USART串口通讯"></a>7. USART串口通讯</h2><h3 id="1-通讯基础知识"><a href="#1-通讯基础知识" class="headerlink" title="1. 通讯基础知识"></a>1. 通讯基础知识</h3><h4 id="1-串口介绍"><a href="#1-串口介绍" class="headerlink" title="1. 串口介绍"></a>1. 串口介绍</h4><p>串口通讯（SerialCommunication）是一种设备间非常常用的串行通讯方式，因为它简单便捷，<br>因此大部分电子设备都支持该通讯方式，电子工程师在调试设备时也经常使用该通讯方式输出调试信<br>息。</p><h4 id="2-串口通讯协议"><a href="#2-串口通讯协议" class="headerlink" title="2. 串口通讯协议"></a>2. 串口通讯协议</h4><h6 id="六个重点："><a href="#六个重点：" class="headerlink" title="六个重点："></a>六个重点：</h6><h6 id="1-波特率"><a href="#1-波特率" class="headerlink" title="1. 波特率"></a>1. 波特率</h6><p><strong>”波特“（Baudrate），它表示每秒钟传输了多少个码元。在二进制的世界码元和位是等价的。<br>用每秒传输的比特数表示波特率。</strong></p><p><strong>STM32提供的是串口异步通讯，异步通讯中由于没有时钟信号，所以两个通讯设备之间需要约定好波<br>特率，即每个码元的⻓度，以便对信号进行解码。常⻅的波特率为4800、 9600 、 115200 等。</strong> </p><ol><li><strong>通讯的起始位<br>每开始一次通信时发送方先发出一个逻辑” 0 ”的信号（低电平），表示传输字符的开始。因为总<br>线空闲时为高电平所以开始一次通信时先发送一个明显区别于空闲状态的信号即低电平。</strong></li><li><strong>通讯的停止位<br>停止信号可由0.5、 1 、1.5或2个逻辑 1 的数据位表示，只要双方约定一致即可。</strong> </li><li><strong>空闲位<br>串口协议规定，当总线处于空闲状态时信号线的状态为‘ 1 ’即高电平，表示当前线路上没有数<br>据。</strong></li><li><strong>有效数据位<br>在数据包的起始位之后紧接着的就是要传输的主体数据内容，也称为有效数据，有效数据的⻓度<br>常被约定为5、 6 、7或 8 位⻓。构成一个字符（一般都是 8 位）。先发送最低位，最后发送最高位<br>（LSB-&gt;MSB），使用低电平表示’0’高电平表示’1’完成数据位的传输。</strong> </li><li><strong>校验位<br>数据位加上这一位后，使得“ 1 ”的位数应为偶数（偶校验）或奇数（奇校验），以此来校验数据<br>传送的正确性。</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">串口校验分几种方式：</span><br><span class="line">a. 无校验（noparity）。 </span><br><span class="line">b. 奇校验（oddparity）：如果数据位中“ 1 ”的数目是偶数，则校验位为“ 1 ”，如果“ 1 ”的</span><br><span class="line">数目是奇数，校验位为“ 0 ”。 </span><br><span class="line">c. 偶校验（evenparity）：如果数据为中“ 1 ”的数目是偶数，则校验位为“ 0 ”，如果为奇数，</span><br><span class="line">校验位为“ 1 ”。 </span><br></pre></td></tr></table></figure><p><strong>现在的通讯效率非常高，一般也不用奇偶校验，还有更复杂的检验算法！</strong></p><h3 id="2-USART外设"><a href="#2-USART外设" class="headerlink" title="2. USART外设"></a>2. USART外设</h3><p>STM32提供了USART（UniversalSynchronousAsynchronousReceiverandTransmitter）通用<br>同步异步收发器。是一个串行通信设备，可以灵活地与外部设备进行全双工数据交换。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">还有UART相比USART去掉了同步通讯功能。</span><br><span class="line">一共提供 5 个串口供开发者选择。</span><br></pre></td></tr></table></figure><h6 id="STM32的USART功能框图如下："><a href="#STM32的USART功能框图如下：" class="headerlink" title="STM32的USART功能框图如下："></a>STM32的USART功能框图如下：</h6><h6 id="7-功能引脚说明"><a href="#7-功能引脚说明" class="headerlink" title="7. 功能引脚说明"></a>7. 功能引脚说明</h6><ul><li><strong>TX：发送数据输出引脚。</strong> </li><li><strong>RX：接收数据输入引脚。</strong> </li><li><strong>SW_RX：数据接收引脚，只用于单线和智能卡模式，属于内部引脚，没有具体外部引脚。</strong> </li><li><p><strong>nRTS：请求以发送（RequestToSend），n表示低电平有效。如果使能RTS流控制，当USART</strong><br><strong>接收器准备好接收新数据时就会将nRTS变成低电平；当接收寄存器已满时，n RTS将被设置为高电</strong><br><strong>平。该引脚只适用于硬件流控制。</strong></p></li><li><p><strong>nCTS：清除以发送（ClearToSend），n表示低电平有效。如果使能CTS流控制，发送器在发送</strong><br><strong>下一帧数据之前会检测nCTS引脚，如果为低电平，表示可以发送数据，如果为高电平则在发送完</strong><br><strong>当前数据帧之后停止发送。该引脚只适用于硬件流控制。</strong></p></li><li><strong>SCLK：发送器时钟输出引脚。这个引脚仅适用于同步模式。</strong> </li></ul><ol><li>波特率的产生<br>发送器和接收器的波特率是一致的，都是通过设置BRR寄存器来得到。</li></ol><p>这里的是给外设的时钟（usart1在APB2上一般是72MHz，usart2， 3 ， 4 ， 5 在A PB1上一般为<br>36MHz）。</p><h6 id="假设我们需要的波特率是-115200-，则对应的分频值应该是：-39-0625-，把这个值写入到BRR寄存"><a href="#假设我们需要的波特率是-115200-，则对应的分频值应该是：-39-0625-，把这个值写入到BRR寄存" class="headerlink" title="假设我们需要的波特率是 115200 ，则对应的分频值应该是： 39.0625 ，把这个值写入到BRR寄存"></a>假设我们需要的波特率是 115200 ，则对应的分频值应该是： 39.0625 ，把这个值写入到BRR寄存</h6><p>器中。 <strong>39.0625</strong> 的小数部分： <strong>0.0625*16=1</strong> ,整数部分是： <strong>39(0x27)</strong> 。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">所以写入到BRR寄存器的值是： 0x0271 。</span><br><span class="line">9. 相关寄存器</span><br><span class="line">查阅参考手册 540 ⻚，这里就不一一列举了。</span><br></pre></td></tr></table></figure><h3 id="3-串口案例-1-：计算机和串口通讯"><a href="#3-串口案例-1-：计算机和串口通讯" class="headerlink" title="3. 串口案例 1 ：计算机和串口通讯"></a>3. 串口案例 1 ：计算机和串口通讯</h3><h4 id="1-需求描述-3"><a href="#1-需求描述-3" class="headerlink" title="1. 需求描述"></a>1. 需求描述</h4><h6 id="电脑通过串口向STM32发送数据，STM32原封不动的再发送过来。电脑可以借助串口助手来发送"><a href="#电脑通过串口向STM32发送数据，STM32原封不动的再发送过来。电脑可以借助串口助手来发送" class="headerlink" title="电脑通过串口向STM32发送数据，STM32原封不动的再发送过来。电脑可以借助串口助手来发送"></a>电脑通过串口向STM32发送数据，STM32原封不动的再发送过来。电脑可以借助串口助手来发送</h6><h6 id="或接受数据。"><a href="#或接受数据。" class="headerlink" title="或接受数据。"></a>或接受数据。</h6><h4 id="2-硬件电路设计-3"><a href="#2-硬件电路设计-3" class="headerlink" title="2. 硬件电路设计"></a>2. 硬件电路设计</h4><p>目前很多电脑已经没有串口接口了，为了使用串口，我们自制的下载器STLink2.1拥有U SB转串口<br>的功能。</p><h4 id="3-软件设计：轮询的方式接收（寄存器）"><a href="#3-软件设计：轮询的方式接收（寄存器）" class="headerlink" title="3. 软件设计：轮询的方式接收（寄存器）"></a>3. 软件设计：轮询的方式接收（寄存器）</h4><h5 id="3-1-main-c-1"><a href="#3-1-main-c-1" class="headerlink" title="3.1 main.c"></a>3.1 main.c</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;Driver_USART.h&quot;</span><br><span class="line">#include &quot;Delay.h&quot;</span><br><span class="line">#include &quot;string.h&quot;</span><br><span class="line">uint8_t buff[ 100 ] = &#123; 0 &#125;;</span><br><span class="line">uint8_t len = 0 ;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">Driver_USART1_Init();</span><br><span class="line">// Driver_USART1_SendChar(&#x27;a&#x27;);</span><br><span class="line">while ( 1 )</span><br><span class="line">&#123;</span><br><span class="line">// uint8_t *str = &quot;Hello atguigu!\r\n&quot;;</span><br><span class="line">// Driver_USART1_SendString(str, strlen((char *)str));</span><br><span class="line">/* uint8_t *str = &quot;尚硅谷\r\n&quot;;</span><br><span class="line">Driver_USART1_SendString(str, strlen((char *)str));</span><br><span class="line">Delay_s(1); */</span><br><span class="line">// uint8_t c =  Driver_USART1_ReceiveChar();</span><br><span class="line">// Driver_USART1_SendChar(c);</span><br><span class="line">Driver_USART1_ReceiveString(buff, &amp;len);</span><br><span class="line">Driver_USART1_SendString(buff, len);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">1 2 3 4 5 6 7 8 9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td></tr></table></figure><h5 id="3-2-Driver-USART-h"><a href="#3-2-Driver-USART-h" class="headerlink" title="3.2 Driver_USART.h"></a>3.2 Driver_USART.h</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#ifndef __DRVIER_USART_H</span><br><span class="line">#define __DRVIER_USART_H</span><br><span class="line">#include &quot;stm32f10x.h&quot;</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">void Driver_USART1_Init(void);</span><br><span class="line">void Driver_USART1_SendChar(uint8_t byte);</span><br><span class="line">void Driver_USART1_SendString(uint8_t *str, uint16_t len);</span><br><span class="line">uint8_t Driver_USART1_ReceiveChar(void);</span><br><span class="line">void Driver_USART1_ReceiveString(uint8_t buff[], uint8_t *len);</span><br><span class="line">#endif</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td></tr></table></figure><h5 id="3-3-Driver-USART-c"><a href="#3-3-Driver-USART-c" class="headerlink" title="3.3 Driver_USART.c"></a>3.3 Driver_USART.c</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;Driver_USART.h&quot;</span><br><span class="line">/**</span><br><span class="line"> * @description: 初始化串口 1</span><br><span class="line"> */</span><br><span class="line">void Driver_USART1_Init(void)</span><br><span class="line">&#123;</span><br><span class="line">/* 1. 开启时钟 */</span><br><span class="line">/* 1.1 串口 1 外设的时钟 */</span><br><span class="line">RCC-&gt;APB2ENR |= RCC_APB2ENR_USART1EN;</span><br><span class="line">/* 1.2 GPIO时钟 */</span><br><span class="line">RCC-&gt;APB2ENR |= RCC_APB2ENR_IOPAEN;</span><br><span class="line">/* 2. 配置GPIO引脚的工作模式  PA9=Tx(复用推挽 CNF=10 MODE=11)  PA10=Rx(浮空输入</span><br><span class="line">CNF=01 MODE=00)*/</span><br><span class="line">GPIOA-&gt;CRH |= GPIO_CRH_CNF9_1;</span><br><span class="line">GPIOA-&gt;CRH &amp;= ~GPIO_CRH_CNF9_0;</span><br><span class="line">GPIOA-&gt;CRH |= GPIO_CRH_MODE9;</span><br><span class="line">GPIOA-&gt;CRH &amp;= ~GPIO_CRH_CNF10_1;</span><br><span class="line">GPIOA-&gt;CRH |= GPIO_CRH_CNF10_0;</span><br><span class="line">GPIOA-&gt;CRH &amp;= ~GPIO_CRH_MODE10;</span><br><span class="line">/* 3. 串口的参数配置 */</span><br><span class="line">/* 3.1 配置波特率 115200 */</span><br><span class="line">USART1-&gt;BRR = 0x271;</span><br><span class="line">/* 3.2 配置一个字的⻓度 8 位 */</span><br><span class="line">USART1-&gt;CR1 &amp;= ~USART_CR1_M;</span><br><span class="line">1 2 3 4 5 6 7 8 9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">/* 3.3 配置不需要校验位 */</span><br><span class="line">USART1-&gt;CR1 &amp;= ~USART_CR1_PCE;</span><br><span class="line">/* 3.4 配置停止位的⻓度 */</span><br><span class="line">USART1-&gt;CR2 &amp;= ~USART_CR2_STOP;</span><br><span class="line">/* 3.5 使能接收和发送 */</span><br><span class="line">USART1-&gt;CR1 |= USART_CR1_TE;</span><br><span class="line">USART1-&gt;CR1 |= USART_CR1_RE;</span><br><span class="line">/* 4. 使能串口 */</span><br><span class="line">USART1-&gt;CR1 |= USART_CR1_UE;</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line"> * @description: 发送一个字节</span><br><span class="line"> * @param &#123;uint8_t&#125; byte 要发送的字节</span><br><span class="line"> */</span><br><span class="line">void Driver_USART1_SendChar(uint8_t byte)</span><br><span class="line">&#123;</span><br><span class="line">/* 1. 等待发送寄存器为空 */</span><br><span class="line">while ((USART1-&gt;SR &amp; USART_SR_TXE) == 0 );</span><br><span class="line">/* 2. 数据写出到数据寄存器 */</span><br><span class="line">USART1-&gt;DR = byte;</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line"> * @description: 发送一个字符串</span><br><span class="line"> * @param &#123;uint8_t&#125; *str 要发送的字符串</span><br><span class="line"> * @param &#123;uint16_t&#125; len 字符串中字节的⻓度</span><br><span class="line"> * @return &#123;*&#125;</span><br><span class="line"> */</span><br><span class="line">void Driver_USART1_SendString(uint8_t *str, uint16_t len)</span><br><span class="line">&#123;</span><br><span class="line">for (uint16_t i = 0 ; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line">Driver_USART1_SendChar(str[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line"> * @description: 接收一个字节的数据</span><br><span class="line"> * @return &#123;*&#125; 接收到的字节</span><br><span class="line"> */</span><br><span class="line">uint8_t Driver_USART1_ReceiveChar(void)</span><br></pre></td></tr></table></figure><p>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>76</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">/* 等待数据寄存器非空 */</span><br><span class="line">while ((USART1-&gt;SR &amp; USART_SR_RXNE) == 0 );</span><br><span class="line">return USART1-&gt;DR;</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line"> * @description: 接收变⻓数据.接收到的数据存入到 buff中</span><br><span class="line"> * @param &#123;uint8_t&#125; buff 存放接收到的数据</span><br><span class="line"> * @param &#123;uint8_t&#125; *len 存放收到的数据的字节的⻓度</span><br><span class="line"> */</span><br><span class="line">void Driver_USART1_ReceiveString(uint8_t buff[], uint8_t *len)</span><br><span class="line">&#123;</span><br><span class="line">uint8_t i = 0 ;</span><br><span class="line">while ( 1 )</span><br><span class="line">&#123;</span><br><span class="line">// 等待接收非空</span><br><span class="line">while ((USART1-&gt;SR &amp; USART_SR_RXNE) == 0 )</span><br><span class="line">&#123;</span><br><span class="line">//在等待期间, 判断是否收到空闲帧</span><br><span class="line">if (USART1-&gt;SR &amp; USART_SR_IDLE)</span><br><span class="line">&#123;</span><br><span class="line">*len = i;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">buff[i] = USART1-&gt;DR;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td></tr></table></figure><h4 id="4-软件设计：中断的方式接收（寄存器）"><a href="#4-软件设计：中断的方式接收（寄存器）" class="headerlink" title="4. 软件设计：中断的方式接收（寄存器）"></a>4. 软件设计：中断的方式接收（寄存器）</h4><h6 id="USART提供了多个中断事件。"><a href="#USART提供了多个中断事件。" class="headerlink" title="USART提供了多个中断事件。"></a>USART提供了多个中断事件。</h6><h5 id="4-1-Driver-USART-c"><a href="#4-1-Driver-USART-c" class="headerlink" title="4.1 Driver_USART.c"></a>4.1 Driver_USART.c</h5><h6 id="添加中断相关代码"><a href="#添加中断相关代码" class="headerlink" title="添加中断相关代码"></a>添加中断相关代码</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;Driver_USART.h&quot;</span><br><span class="line">/**</span><br><span class="line"> * @description: 初始化串口 1</span><br><span class="line"> */</span><br><span class="line">void Driver_USART1_Init(void)</span><br><span class="line">&#123;</span><br><span class="line">/* 1. 开启时钟 */</span><br><span class="line">/* 1.1 串口 1 外设的时钟 */</span><br><span class="line">RCC-&gt;APB2ENR |= RCC_APB2ENR_USART1EN;</span><br><span class="line">/* 1.2 GPIO时钟 */</span><br><span class="line">RCC-&gt;APB2ENR |= RCC_APB2ENR_IOPAEN;</span><br><span class="line">/* 2. 配置GPIO引脚的工作模式  PA9=Tx(复用推挽 CNF=10 MODE=11)  PA10=Rx(浮空输入</span><br><span class="line">CNF=01 MODE=00)*/</span><br><span class="line">GPIOA-&gt;CRH |= GPIO_CRH_CNF9_1;</span><br><span class="line">GPIOA-&gt;CRH &amp;= ~GPIO_CRH_CNF9_0;</span><br><span class="line">GPIOA-&gt;CRH |= GPIO_CRH_MODE9;</span><br><span class="line">GPIOA-&gt;CRH &amp;= ~GPIO_CRH_CNF10_1;</span><br><span class="line">GPIOA-&gt;CRH |= GPIO_CRH_CNF10_0;</span><br><span class="line">GPIOA-&gt;CRH &amp;= ~GPIO_CRH_MODE10;</span><br><span class="line">1 2 3 4 5 6 7 8 9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">/* 3. 串口的参数配置 */</span><br><span class="line">/* 3.1 配置波特率 115200 */</span><br><span class="line">USART1-&gt;BRR = 0x271;</span><br><span class="line">/* 3.2 配置一个字的⻓度 8 位 */</span><br><span class="line">USART1-&gt;CR1 &amp;= ~USART_CR1_M;</span><br><span class="line">/* 3.3 配置不需要校验位 */</span><br><span class="line">USART1-&gt;CR1 &amp;= ~USART_CR1_PCE;</span><br><span class="line">/* 3.4 配置停止位的⻓度 */</span><br><span class="line">USART1-&gt;CR2 &amp;= ~USART_CR2_STOP;</span><br><span class="line">/* 3.5 使能接收和发送 */</span><br><span class="line">USART1-&gt;CR1 |= USART_CR1_TE;</span><br><span class="line">USART1-&gt;CR1 |= USART_CR1_RE;</span><br><span class="line">/* 4. 使能串口 */</span><br><span class="line">USART1-&gt;CR1 |= USART_CR1_UE;</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line"> * @description: 发送一个字节</span><br><span class="line"> * @param &#123;uint8_t&#125; byte 要发送的字节</span><br><span class="line"> */</span><br><span class="line">void Driver_USART1_SendChar(uint8_t byte)</span><br><span class="line">&#123;</span><br><span class="line">/* 1. 等待发送寄存器为空 */</span><br><span class="line">while ((USART1-&gt;SR &amp; USART_SR_TXE) == 0 );</span><br><span class="line">/* 2. 数据写出到数据寄存器 */</span><br><span class="line">USART1-&gt;DR = byte;</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line"> * @description: 发送一个字符串</span><br><span class="line"> * @param &#123;uint8_t&#125; *str 要发送的字符串</span><br><span class="line"> * @param &#123;uint16_t&#125; len 字符串中字节的⻓度</span><br><span class="line"> * @return &#123;*&#125;</span><br><span class="line"> */</span><br><span class="line">void Driver_USART1_SendString(uint8_t *str, uint16_t len)</span><br><span class="line">&#123;</span><br><span class="line">for (uint16_t i = 0 ; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line">Driver_USART1_SendChar(str[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line"> * @description: 接收一个字节的数据</span><br><span class="line"> * @return &#123;*&#125; 接收到的字节</span><br><span class="line"> */</span><br><span class="line">uint8_t Driver_USART1_ReceiveChar(void)</span><br><span class="line">&#123;</span><br><span class="line">/* 等待数据寄存器非空 */</span><br><span class="line">while ((USART1-&gt;SR &amp; USART_SR_RXNE) == 0 );</span><br><span class="line">return USART1-&gt;DR;</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line"> * @description: 接收变⻓数据.接收到的数据存入到buff中</span><br><span class="line"> * @param &#123;uint8_t&#125; buff 存放接收到的数据</span><br><span class="line"> * @param &#123;uint8_t&#125; *len 存放收到的数据的字节的⻓度</span><br><span class="line"> */</span><br><span class="line">void Driver_USART1_ReceiveString(uint8_t buff[], uint8_t *len)</span><br><span class="line">&#123;</span><br><span class="line">uint8_t i = 0 ;</span><br><span class="line">while ( 1 )</span><br><span class="line">&#123;</span><br><span class="line">// 等待接收非空</span><br><span class="line">while ((USART1-&gt;SR &amp; USART_SR_RXNE) == 0 )</span><br><span class="line">&#123;</span><br><span class="line">//在等待期间, 判断是否收到空闲帧</span><br><span class="line">if (USART1-&gt;SR &amp; USART_SR_IDLE)</span><br><span class="line">&#123;</span><br><span class="line">*len = i;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">buff[i] = USART1-&gt;DR;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">/* 缓冲接收到的数据 */</span><br><span class="line">uint8_t buff[ 100 ] = &#123; 0 &#125;;</span><br><span class="line">/* 存储接收到的字节的⻓度 */</span><br><span class="line">uint8_t len = 0 ;</span><br><span class="line">uint8_t isToSend = 0 ;</span><br><span class="line">void USART1_IRQHandler(void)</span><br><span class="line">&#123;</span><br><span class="line">/* 数据接收寄存器非空 */</span><br><span class="line">if (USART1-&gt;SR &amp; USART_SR_RXNE)</span><br></pre></td></tr></table></figure><p>70<br>71<br>72<br>73<br>74<br>75<br>76<br>77<br>78<br>79<br>80<br>81<br>82<br>83<br>84<br>85<br>86<br>87<br>88<br>89<br>90<br>91<br>92<br>93<br>94<br>95<br>96<br>97<br>98<br>99<br>100<br>101<br>102<br>103<br>104<br>105<br>106<br>107<br>108<br>109<br>110<br>111<br>112<br>113<br>114<br>115<br>116</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">// 对USART_DR的读操作可以将接收非空的中断位清零。 所以不用单独清除了.</span><br><span class="line">//USART1-&gt;SR &amp;= ~USART_SR_RXNE;</span><br><span class="line">buff[len] = USART1-&gt;DR;</span><br><span class="line">len++;</span><br><span class="line">&#125;</span><br><span class="line">else if (USART1-&gt;SR &amp; USART_SR_IDLE)</span><br><span class="line">&#123;</span><br><span class="line">/* 清除空闲中断标志位: 先读sr,再读dr.就可以实现清除了 */</span><br><span class="line">USART1-&gt;SR;</span><br><span class="line">USART1-&gt;DR;</span><br><span class="line">/* 变⻓数据接收完毕 */</span><br><span class="line">//Driver_USART1_SendString(buff, len);</span><br><span class="line">isToSend = 1 ;</span><br><span class="line">/* 把接收字节的⻓度清0 */</span><br><span class="line">// len = 0;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td></tr></table></figure><h5 id="4-2-main-c"><a href="#4-2-main-c" class="headerlink" title="4.2 main.c"></a>4.2 main.c</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;Driver_USART.h&quot;</span><br><span class="line">/* 缓冲接收到的数据 */</span><br><span class="line">extern uint8_t buff[ 100 ];</span><br><span class="line">/* 存储接收到的字节的⻓度 */</span><br><span class="line">extern uint8_t len;</span><br><span class="line">extern uint8_t isToSend;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">Driver_USART1_Init();</span><br><span class="line">Driver_USART1_SendString(&quot;abc&quot;, 3 );</span><br><span class="line">while ( 1 )</span><br><span class="line">&#123;</span><br><span class="line">if(isToSend)</span><br><span class="line">&#123;</span><br><span class="line">Driver_USART1_SendString(buff, len);</span><br><span class="line">isToSend = 0 ;</span><br><span class="line">len = 0 ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">1 2 3 4 5 6 7 8 9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td></tr></table></figure><h4 id="5-软件设计（HAL库）-1"><a href="#5-软件设计（HAL库）-1" class="headerlink" title="5. 软件设计（HAL库）"></a>5. 软件设计（HAL库）</h4><h5 id="1-使用STM32CubeMx搭建工程"><a href="#1-使用STM32CubeMx搭建工程" class="headerlink" title="1. 使用STM32CubeMx搭建工程"></a>1. 使用STM32CubeMx搭建工程</h5><h6 id="1-基本配置"><a href="#1-基本配置" class="headerlink" title="1. 基本配置"></a>1. 基本配置</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">选择芯片，配置debug，配置时钟参考前面的内容。</span><br></pre></td></tr></table></figure><ol><li>配置串口</li></ol><h6 id="3-添加我们的代码"><a href="#3-添加我们的代码" class="headerlink" title="3. 添加我们的代码"></a>3. 添加我们的代码</h6><h6 id="时钟初始化，串口初始化工具已经帮我们完成了。我们可以轮询方式收发数据，也可以采用中断"><a href="#时钟初始化，串口初始化工具已经帮我们完成了。我们可以轮询方式收发数据，也可以采用中断" class="headerlink" title="时钟初始化，串口初始化工具已经帮我们完成了。我们可以轮询方式收发数据，也可以采用中断"></a>时钟初始化，串口初始化工具已经帮我们完成了。我们可以轮询方式收发数据，也可以采用中断</h6><h6 id="的方式收发数据。"><a href="#的方式收发数据。" class="headerlink" title="的方式收发数据。"></a>的方式收发数据。</h6><h5 id="2-轮询的方式收发"><a href="#2-轮询的方式收发" class="headerlink" title="2. 轮询的方式收发"></a>2. 轮询的方式收发</h5><h6 id="轮询的方式就是在循环中一直检测串口，是否有数据进来，如果有就读进来，然后再原封不动的"><a href="#轮询的方式就是在循环中一直检测串口，是否有数据进来，如果有就读进来，然后再原封不动的" class="headerlink" title="轮询的方式就是在循环中一直检测串口，是否有数据进来，如果有就读进来，然后再原封不动的"></a>轮询的方式就是在循环中一直检测串口，是否有数据进来，如果有就读进来，然后再原封不动的</h6><h6 id="发出。"><a href="#发出。" class="headerlink" title="发出。"></a>发出。</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">uint8_t buff[ 10 ];</span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">HAL_Init();</span><br><span class="line">SystemClock_Config();</span><br><span class="line">MX_GPIO_Init();</span><br><span class="line">MX_USART1_UART_Init();</span><br><span class="line">while ( 1 )</span><br><span class="line">&#123;</span><br><span class="line">/* 从串口读取数据：参数 1 指定的串口 参数 2 ：存储读取到的数据 参数 3 ：一接收多少条</span><br><span class="line">数据 */</span><br><span class="line">if (HAL_UART_Receive(&amp;huart1, buff, 10 , HAL_MAX_DELAY) == HAL_OK)</span><br><span class="line">&#123;</span><br><span class="line">// 把收到的数据原封不动的发出去</span><br><span class="line">HAL_UART_Transmit(&amp;huart1, buff, 10 , HAL_MAX_DELAY);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">1 2 3 4 5 6 7 8 9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td></tr></table></figure><h6 id="轮询方式的一些问题：轮询模式使用起来最简单，但是会占用大量的CPU时间，在等待接收和等"><a href="#轮询方式的一些问题：轮询模式使用起来最简单，但是会占用大量的CPU时间，在等待接收和等" class="headerlink" title="轮询方式的一些问题：轮询模式使用起来最简单，但是会占用大量的CPU时间，在等待接收和等"></a>轮询方式的一些问题：轮询模式使用起来最简单，但是会占用大量的CPU时间，在等待接收和等</h6><h6 id="待发送完毕时，CPU不能去做别的运算，只能在这里空等，运行的效率很低。"><a href="#待发送完毕时，CPU不能去做别的运算，只能在这里空等，运行的效率很低。" class="headerlink" title="待发送完毕时，CPU不能去做别的运算，只能在这里空等，运行的效率很低。"></a>待发送完毕时，CPU不能去做别的运算，只能在这里空等，运行的效率很低。</h6><h5 id="3-中断的方式接收：定⻓数据"><a href="#3-中断的方式接收：定⻓数据" class="headerlink" title="3. 中断的方式接收：定⻓数据"></a>3. 中断的方式接收：定⻓数据</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stm32f1xx_hal_uart.c 中关于中断回调函数的描述。</span><br></pre></td></tr></table></figure><p>这里函数用了__weak修饰，当有其他实现的时候，编译器会忽略这里的。我们只要在这个函数中<br>写收发逻辑就行了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">uint8_t buff[ 1 ]; // 接收缓冲， 一次接受一个字节的数据</span><br><span class="line">void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)</span><br><span class="line">&#123;</span><br><span class="line">if (huart1.Instance == USART1)</span><br><span class="line">&#123;</span><br><span class="line">HAL_UART_Transmit(&amp;huart1, buff, 1 ，HAL_MAX_DELAY);</span><br><span class="line">HAL_UART_Receive_IT(&amp;huart1, buff, 1 ); // 继续接收</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">HAL_Init();</span><br><span class="line">MX_GPIO_Init();</span><br><span class="line">MX_USART1_UART_Init();</span><br><span class="line">/* 用中断的方式接收一个字节的数据 */</span><br><span class="line">HAL_UART_Receive_IT(&amp;huart1, buff, 1 );</span><br><span class="line">while ( 1 )</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">1 2 3 4 5 6 7 8 9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td></tr></table></figure><h5 id="4-中断的方式接收：变⻓数据"><a href="#4-中断的方式接收：变⻓数据" class="headerlink" title="4. 中断的方式接收：变⻓数据"></a>4. 中断的方式接收：变⻓数据</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">1 uint8_t rxBuff[ 1000 ]; // 接收缓冲区</span><br><span class="line">2</span><br><span class="line">// size 实际接收的数据的⻓度</span><br><span class="line">void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)</span><br><span class="line">&#123;</span><br><span class="line">if (huart1.Instance == USART1)</span><br><span class="line">&#123;</span><br><span class="line">HAL_UART_Transmit(&amp;huart1, rxBuff, Size, 100 );</span><br><span class="line">HAL_UARTEx_ReceiveToIdle_IT(&amp;huart1, rxBuff, 1000 );</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">HAL_Init();</span><br><span class="line">SystemClock_Config();</span><br><span class="line">MX_GPIO_Init();</span><br><span class="line">MX_USART1_UART_Init();</span><br><span class="line">/* 当接收到 1000 个字符或者碰到空闲帧, 则接收结束 */</span><br><span class="line">HAL_UARTEx_ReceiveToIdle_IT(&amp;huart1, rxBuff, 1000 );</span><br><span class="line">while ( 1 )</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">3 4 5 6 7 8 9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td></tr></table></figure><h3 id="4-串口案例-2-：重定向printf"><a href="#4-串口案例-2-：重定向printf" class="headerlink" title="4. 串口案例 2 ：重定向printf"></a>4. 串口案例 2 ：重定向printf</h3><h4 id="1-需求描述-4"><a href="#1-需求描述-4" class="headerlink" title="1. 需求描述"></a>1. 需求描述</h4><p>C语言中经常使用printf来输出调试信息，打印到屏幕（控制台）。由于在单片机中没有屏幕，但<br>是我们可以重定向printf，把数据 <strong>打印到串口</strong> ，从而在电脑端接收调试信息。这是除了debug外，另外<br>一个非常有效的调试手段。</p><h4 id="2-软件设计（寄存器）"><a href="#2-软件设计（寄存器）" class="headerlink" title="2. 软件设计（寄存器）"></a>2. 软件设计（寄存器）</h4><h5 id="2-1-Driver-USART-c"><a href="#2-1-Driver-USART-c" class="headerlink" title="2.1 Driver_USART.c"></a>2.1 Driver_USART.c</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">添加 fputc 函数。</span><br><span class="line">int fputc(int c, FILE *file)</span><br><span class="line">&#123;</span><br><span class="line">Driver_USART1_SendChar(c);</span><br><span class="line">return c;</span><br><span class="line">&#125;</span><br><span class="line">// 当调用printf的时候,会自动调用这个方法来执行,只需要调用一个通过串口发送字符的函数</span><br><span class="line">1 2 3 4 5 6</span><br></pre></td></tr></table></figure><h5 id="2-2-main-c"><a href="#2-2-main-c" class="headerlink" title="2.2 main.c"></a>2.2 main.c</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;Driver_USART.h&quot;</span><br><span class="line">#include &quot;Delay.h&quot;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">Driver_USART1_Init();</span><br><span class="line">while ( 1 )</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;hello world\r\n&quot;);</span><br><span class="line">Delay_ms( 500 );</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">1 2 3 4 5 6 7 8 9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td></tr></table></figure><h5 id="2-3-Keil设置"><a href="#2-3-Keil设置" class="headerlink" title="2.3 Keil设置"></a>2.3 Keil设置</h5><h4 id="3-软件设计（HAL库）"><a href="#3-软件设计（HAL库）" class="headerlink" title="3. 软件设计（HAL库）"></a>3. 软件设计（HAL库）</h4><h5 id="3-1-usart-h代码清单"><a href="#3-1-usart-h代码清单" class="headerlink" title="3.1 usart.h代码清单"></a>3.1 usart.h代码清单</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;main.h&quot;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">extern UART_HandleTypeDef huart1;</span><br><span class="line">void MX_USART1_UART_Init(void);</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td></tr></table></figure><h5 id="3-2-usart-c代码清单"><a href="#3-2-usart-c代码清单" class="headerlink" title="3.2 usart.c代码清单"></a>3.2 usart.c代码清单</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">int fputc(int ch, FILE *f)</span><br><span class="line">&#123;</span><br><span class="line">/* 发送一个字节数据到串口DEBUG_USART */</span><br><span class="line">HAL_UART_Transmit(&amp;huart1, (uint8_t *)&amp;ch, 1 , 1000 );</span><br><span class="line">return (ch);</span><br><span class="line">&#125;</span><br><span class="line">1 2 3 4 5 6 7</span><br></pre></td></tr></table></figure><h2 id="8-I2C通讯"><a href="#8-I2C通讯" class="headerlink" title="8. I2C通讯"></a>8. I2C通讯</h2><h3 id="1-I2C基础知识"><a href="#1-I2C基础知识" class="headerlink" title="1. I2C基础知识"></a>1. I2C基础知识</h3><p>I2C通讯协议（Inter-IntegratedCircuit）是由Phiilps公司开发的，由于它引脚少，硬件实现简<br>单，可扩展性强，不需要USART、CAN等通讯协议的外部收发设备，现在被广泛地使用在系统内多个<br>集成电路（IC）间的通讯。</p><p>I2C（Inter-IntegratedCircuit）集成电路总线，是一种同步串行半双工通信总线。通信协议中，<br>SDA（串行数据线）和SCL（串行时钟线）是两个主要的信号线。因为有SCL时钟线所以当然是同步<br>的，只有一根SDA线且不可同时收发，I2C总线是一个多主设备、多从设备的总线，通常由主设备（比<br>如微控制器）发起通信，而从设备（比如EEPROM芯片）响应。</p><p>I2C总线采用开漏（open-drain）或开集电极（open-collector）驱动方式，这意味着设备只能将<br>信号线拉低，而不能主动拉高。相反，电平被拉高是通过上拉电阻实现的，是一种简单的双向两线制<br>总线协议标准，支持 <strong>同步串行半双工</strong> 通讯。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">I2C通讯设备之间的常用连接方式：</span><br></pre></td></tr></table></figure><p><a href="https://xiza3i1x6q4.feishu.cn/sync/J3r7d3lz1s5Mqjb5aGDcqo5pnFd">https://xiza3i1x6q4.feishu.cn/sync/J3r7d3lz1s5Mqjb5aGDcqo5pnFd</a></p><h4 id="🌅-在I²C通信协议中，SDA（SerialDataLine）的电平状态确实用来表示通信的控制权归"><a href="#🌅-在I²C通信协议中，SDA（SerialDataLine）的电平状态确实用来表示通信的控制权归" class="headerlink" title="🌅 在I²C通信协议中，SDA（SerialDataLine）的电平状态确实用来表示通信的控制权归"></a>🌅 在I²C通信协议中，SDA（SerialDataLine）的电平状态确实用来表示通信的控制权归</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">属。拉高（置高电平）SDA通常表示的是主设备（Master）释放了总线的控制权，让从设备</span><br><span class="line">（Slave）有机会在总线上发送数据或者响应主设备的请求。</span><br><span class="line">1.开漏结构： I²C总线通常是开漏结构 ，这意味着在不同的设备之间，SDA和SCL都会被</span><br><span class="line">外部上拉电阻拉高，而设备在通信时通过拉低SDA和SCL来进行通信。因此， 释放控制权通常</span><br><span class="line">是通过主设备放弃拉低SDA线实现的，SDA线由上拉电阻拉到高电平 。</span><br><span class="line">2.从设备响应：当主设备完成其通信操作后，它将SDA线拉高，这样从设备便能够知道主</span><br><span class="line">设备已经完成了其发送的数据或者请求。从设备此时可以在总线上发送数据回复或者等待下</span><br><span class="line">一次主设备的指令。</span><br><span class="line">3.协议规定：根据I²C协议， SDA的高电平表示空闲状态或者主设备释放总线的意图 。从</span><br><span class="line">设备检测到SDA被拉高后，会知道主设备当前没有在总线上发送数据或者请求，因此从设备</span><br><span class="line">有机会接管总线并发送数据或响应。</span><br><span class="line">总之，SDA被拉高表示主设备不再活跃地发送数据或命令，从而让从设备可以在总线上</span><br><span class="line">接管，发送数据或者响应主设备。</span><br></pre></td></tr></table></figure><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><h6 id="1-总线空闲状态："><a href="#1-总线空闲状态：" class="headerlink" title="1. 总线空闲状态："></a>1. 总线空闲状态：</h6><h3 id="◦-当总线空闲时，SDA和SCL都被上拉电阻拉高，表示没有设备在使用总线。这是总线的"><a href="#◦-当总线空闲时，SDA和SCL都被上拉电阻拉高，表示没有设备在使用总线。这是总线的" class="headerlink" title="◦ 当总线空闲时，SDA和SCL都被上拉电阻拉高，表示没有设备在使用总线。这是总线的"></a>◦ 当总线空闲时，SDA和SCL都被上拉电阻拉高，表示没有设备在使用总线。这是总线的</h3><h6 id="默认状态。"><a href="#默认状态。" class="headerlink" title="默认状态。"></a>默认状态。</h6><h6 id="2-启动和停止条件："><a href="#2-启动和停止条件：" class="headerlink" title="2. 启动和停止条件："></a>2. 启动和停止条件：</h6><h3 id="◦-I2C通信开始时，主设备会发出一个启动条件（StartCondition），这表现为S-DA从高"><a href="#◦-I2C通信开始时，主设备会发出一个启动条件（StartCondition），这表现为S-DA从高" class="headerlink" title="◦ I2C通信开始时，主设备会发出一个启动条件（StartCondition），这表现为S DA从高"></a>◦ I2C通信开始时，主设备会发出一个启动条件（StartCondition），这表现为S DA从高</h3><h6 id="到低的跳变，而SCL保持高电平。"><a href="#到低的跳变，而SCL保持高电平。" class="headerlink" title="到低的跳变，而SCL保持高电平。"></a>到低的跳变，而SCL保持高电平。</h6><h3 id="◦-通信结束时，主设备会发出一个停止条件（StopCondition），这表现为SDA从低到"><a href="#◦-通信结束时，主设备会发出一个停止条件（StopCondition），这表现为SDA从低到" class="headerlink" title="◦ 通信结束时，主设备会发出一个停止条件（StopCondition），这表现为SDA从低到"></a>◦ 通信结束时，主设备会发出一个停止条件（StopCondition），这表现为SDA从低到</h3><h6 id="高的跳变，而SCL保持高电平。"><a href="#高的跳变，而SCL保持高电平。" class="headerlink" title="高的跳变，而SCL保持高电平。"></a>高的跳变，而SCL保持高电平。</h6><h6 id="3-数据传输："><a href="#3-数据传输：" class="headerlink" title="3. 数据传输："></a>3. 数据传输：</h6><h3 id="◦-在数据传输过程中，无论是主设备还是从设备，都在SCL时钟周期内驱动SDA线进行数"><a href="#◦-在数据传输过程中，无论是主设备还是从设备，都在SCL时钟周期内驱动SDA线进行数" class="headerlink" title="◦ 在数据传输过程中，无论是主设备还是从设备，都在SCL时钟周期内驱动SDA线进行数"></a>◦ 在数据传输过程中，无论是主设备还是从设备，都在SCL时钟周期内驱动SDA线进行数</h3><h6 id="据传输。当某个设备需要发送数据时，它会控制SDA线，在SCL的上升沿之前设置好数"><a href="#据传输。当某个设备需要发送数据时，它会控制SDA线，在SCL的上升沿之前设置好数" class="headerlink" title="据传输。当某个设备需要发送数据时，它会控制SDA线，在SCL的上升沿之前设置好数"></a>据传输。当某个设备需要发送数据时，它会控制SDA线，在SCL的上升沿之前设置好数</h6><h6 id="据。"><a href="#据。" class="headerlink" title="据。"></a>据。</h6><h3 id="◦-主设备在发送完地址后，根据LSB的值（LSB是用来指示数据传输的读写方向的）继续"><a href="#◦-主设备在发送完地址后，根据LSB的值（LSB是用来指示数据传输的读写方向的）继续" class="headerlink" title="◦ 主设备在发送完地址后，根据LSB的值（LSB是用来指示数据传输的读写方向的）继续"></a>◦ 主设备在发送完地址后，根据LSB的值（LSB是用来指示数据传输的读写方向的）继续</h3><h6 id="进行数据传输。"><a href="#进行数据传输。" class="headerlink" title="进行数据传输。"></a>进行数据传输。</h6><h3 id="◦-如果是写操作，主设备会发送数据字节到从设备，然后等待从设备的确认信号。"><a href="#◦-如果是写操作，主设备会发送数据字节到从设备，然后等待从设备的确认信号。" class="headerlink" title="◦ 如果是写操作，主设备会发送数据字节到从设备，然后等待从设备的确认信号。"></a>◦ 如果是写操作，主设备会发送数据字节到从设备，然后等待从设备的确认信号。</h3><h3 id="◦-如果是读操作，从设备要响应数据。在这种情况下，主设备释放SDA线，让S-DA通过"><a href="#◦-如果是读操作，从设备要响应数据。在这种情况下，主设备释放SDA线，让S-DA通过" class="headerlink" title="◦ 如果是读操作，从设备要响应数据。在这种情况下，主设备释放SDA线，让S DA通过"></a>◦ 如果是读操作，从设备要响应数据。在这种情况下，主设备释放SDA线，让S DA通过</h3><h6 id="上拉电阻恢复到高电平，然后从设备在接下来的时钟周期内驱动SDA线，以发送数"><a href="#上拉电阻恢复到高电平，然后从设备在接下来的时钟周期内驱动SDA线，以发送数" class="headerlink" title="上拉电阻恢复到高电平，然后从设备在接下来的时钟周期内驱动SDA线，以发送数"></a>上拉电阻恢复到高电平，然后从设备在接下来的时钟周期内驱动SDA线，以发送数</h6><h6 id="据。主设备会接收从设备发送的数据，并发送确认（ACK）或非确认（NACK）信号以"><a href="#据。主设备会接收从设备发送的数据，并发送确认（ACK）或非确认（NACK）信号以" class="headerlink" title="据。主设备会接收从设备发送的数据，并发送确认（ACK）或非确认（NACK）信号以"></a>据。主设备会接收从设备发送的数据，并发送确认（ACK）或非确认（NACK）信号以</h6><h6 id="告知从设备是否需要继续发送数据。"><a href="#告知从设备是否需要继续发送数据。" class="headerlink" title="告知从设备是否需要继续发送数据。"></a>告知从设备是否需要继续发送数据。</h6><h6 id="因为SDA被设计成开漏驱动，任何设备都只能拉低SDA，而不能直接拉高，这样也避免"><a href="#因为SDA被设计成开漏驱动，任何设备都只能拉低SDA，而不能直接拉高，这样也避免" class="headerlink" title="因为SDA被设计成开漏驱动，任何设备都只能拉低SDA，而不能直接拉高，这样也避免"></a>因为SDA被设计成开漏驱动，任何设备都只能拉低SDA，而不能直接拉高，这样也避免</h6><h6 id="了多个设备同时驱动SDA线时的电平冲突，这样的一种机制保证了I2C总线上设备之间的协调"><a href="#了多个设备同时驱动SDA线时的电平冲突，这样的一种机制保证了I2C总线上设备之间的协调" class="headerlink" title="了多个设备同时驱动SDA线时的电平冲突，这样的一种机制保证了I2C总线上设备之间的协调"></a>了多个设备同时驱动SDA线时的电平冲突，这样的一种机制保证了I2C总线上设备之间的协调</h6><h6 id="和无冲突通信。"><a href="#和无冲突通信。" class="headerlink" title="和无冲突通信。"></a>和无冲突通信。</h6><h3 id="通信方向"><a href="#通信方向" class="headerlink" title="通信方向"></a>通信方向</h3><ul><li>LSB为^0 时，表示主设备要向从设备写入数据。</li><li>LSB为^1 时，表示主设备要从从设备读取数据。<br>主设备发送数据给从设备（写操作）</li><li>SDA控制：主设备控制SDA线发送地址和数据字节。</li><li>SCL控制：主设备控制SCL线产生时钟信号，确定数据传输的时序。<br>从设备发送数据给主设备（读操作）</li><li>SDA控制：从设备控制SDA线发送数据字节。</li><li>SCL控制：主设备控制SCL线产生时钟信号，确定数据传输的时序。<br>总的来说，主设备负责控制总线的时钟和发送地址/数据，而从设备负责在主设备的控制下发<br>送数据。</li></ul><h3 id="2-I2C案例-1-：软件模拟I2C"><a href="#2-I2C案例-1-：软件模拟I2C" class="headerlink" title="2. I2C案例 1 ：软件模拟I2C"></a>2. I2C案例 1 ：软件模拟I2C</h3><h6 id="EEPROM芯片最常用的通讯方式就是I2C协议。我们使用的芯片是M24C02。"><a href="#EEPROM芯片最常用的通讯方式就是I2C协议。我们使用的芯片是M24C02。" class="headerlink" title="EEPROM芯片最常用的通讯方式就是I2C协议。我们使用的芯片是M24C02。"></a>EEPROM芯片最常用的通讯方式就是I2C协议。我们使用的芯片是M24C02。</h6><h4 id="1-需求描述-5"><a href="#1-需求描述-5" class="headerlink" title="1. 需求描述"></a>1. 需求描述</h4><h6 id="我们向E2PROM写入一段数据，再读取出来，最后发送到串口，核对是否读写正确。"><a href="#我们向E2PROM写入一段数据，再读取出来，最后发送到串口，核对是否读写正确。" class="headerlink" title="我们向E2PROM写入一段数据，再读取出来，最后发送到串口，核对是否读写正确。"></a>我们向E2PROM写入一段数据，再读取出来，最后发送到串口，核对是否读写正确。</h6><h4 id="2-硬件电路设计-4"><a href="#2-硬件电路设计-4" class="headerlink" title="2. 硬件电路设计"></a>2. 硬件电路设计</h4><h5 id="1-硬件原理图"><a href="#1-硬件原理图" class="headerlink" title="1. 硬件原理图"></a>1. 硬件原理图</h5><h5 id="2-M24C02简介"><a href="#2-M24C02简介" class="headerlink" title="2. M24C02简介"></a>2. M24C02简介</h5><h6 id="1-M24C02的SCL及SDA引脚连接到了STM32对应的I2C引脚中，结合上拉电阻，构成了I2C通讯总"><a href="#1-M24C02的SCL及SDA引脚连接到了STM32对应的I2C引脚中，结合上拉电阻，构成了I2C通讯总" class="headerlink" title="1. M24C02的SCL及SDA引脚连接到了STM32对应的I2C引脚中，结合上拉电阻，构成了I2C通讯总"></a>1. M24C02的SCL及SDA引脚连接到了STM32对应的I2C引脚中，结合上拉电阻，构成了I2C通讯总</h6><h6 id="线，它们通过I2C总线交互。"><a href="#线，它们通过I2C总线交互。" class="headerlink" title="线，它们通过I2C总线交互。"></a>线，它们通过I2C总线交互。</h6><h6 id="2-E2PROM芯片的设备地址一共有-7-位，其中高-4-位固定为：-1010-，低-3-位则由E-3-E2-E1信号线的电平"><a href="#2-E2PROM芯片的设备地址一共有-7-位，其中高-4-位固定为：-1010-，低-3-位则由E-3-E2-E1信号线的电平" class="headerlink" title="2. E2PROM芯片的设备地址一共有 7 位，其中高 4 位固定为： 1010 ，低 3 位则由E 3/E2/E1信号线的电平"></a>2. E2PROM芯片的设备地址一共有 7 位，其中高 4 位固定为： 1010 ，低 3 位则由E 3/E2/E1信号线的电平</h6><h6 id="决定E2PROM设备地址。"><a href="#决定E2PROM设备地址。" class="headerlink" title="决定E2PROM设备地址。"></a>决定E2PROM设备地址。</h6><h6 id="3-R-W是读写方向控制位，与地址无关。"><a href="#3-R-W是读写方向控制位，与地址无关。" class="headerlink" title="3. R/W是读写方向控制位，与地址无关。"></a>3. R/W是读写方向控制位，与地址无关。</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在我们电路图中由于E1/E2/E3均是接的低电平，所以它的地址是 1010000 即0x50。</span><br></pre></td></tr></table></figure><h6 id="由于I2C通讯时常常是地址跟读写方向连在一起构成一个-8-位数，且当R-W位为-0-时，表示写方向，"><a href="#由于I2C通讯时常常是地址跟读写方向连在一起构成一个-8-位数，且当R-W位为-0-时，表示写方向，" class="headerlink" title="由于I2C通讯时常常是地址跟读写方向连在一起构成一个 8 位数，且当R/W位为 0 时，表示写方向，"></a>由于I2C通讯时常常是地址跟读写方向连在一起构成一个 8 位数，且当R/W位为 0 时，表示写方向，</h6><p>所以加上 7 位地址，其值为“0xA0”，常称该值为I2C设备的“写地址”。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">当R/W位为 1 时，表示读方向，加上 7 位地址，其值为“0xA1”，常称该值为“读地址”。</span><br></pre></td></tr></table></figure><h4 id="3-操作时序图整理"><a href="#3-操作时序图整理" class="headerlink" title="3. 操作时序图整理"></a>3. 操作时序图整理</h4><h5 id="1-起始和停止信号"><a href="#1-起始和停止信号" class="headerlink" title="1. 起始和停止信号"></a>1. 起始和停止信号</h5><h5 id="2-数据有效性"><a href="#2-数据有效性" class="headerlink" title="2. 数据有效性"></a>2. 数据有效性</h5><h5 id="3-响应和非响应"><a href="#3-响应和非响应" class="headerlink" title="3. 响应和非响应"></a>3. 响应和非响应</h5><h5 id="4-写入一个字节时序"><a href="#4-写入一个字节时序" class="headerlink" title="4. 写入一个字节时序"></a>4. 写入一个字节时序</h5><h5 id="5-读出一个字节时序"><a href="#5-读出一个字节时序" class="headerlink" title="5. 读出一个字节时序"></a>5. 读出一个字节时序</h5><h5 id="6-单次写入多个字节时序"><a href="#6-单次写入多个字节时序" class="headerlink" title="6. 单次写入多个字节时序"></a>6. 单次写入多个字节时序</h5><p>一次性写入多个字节，也叫⻚写入（PageWrite）。AT24C02每⻚只有 16 个字节，每次只能写入<br>单独的一个⻚中，所以一次性最多只能写入 16 个字节。当一次性写入超过 16 个字节的时候，则超过的<br>部分会重新从这⻚的首地址重新写入。</p><h5 id="7-单次读出多个字节时序"><a href="#7-单次读出多个字节时序" class="headerlink" title="7. 单次读出多个字节时序"></a>7. 单次读出多个字节时序</h5><h6 id="读出多个字节的时候没有限制，可以读出任意多个。"><a href="#读出多个字节的时候没有限制，可以读出任意多个。" class="headerlink" title="读出多个字节的时候没有限制，可以读出任意多个。"></a>读出多个字节的时候没有限制，可以读出任意多个。</h6><h4 id="4-软件设计（寄存器）"><a href="#4-软件设计（寄存器）" class="headerlink" title="4. 软件设计（寄存器）"></a>4. 软件设计（寄存器）</h4><h5 id="4-1-main-c"><a href="#4-1-main-c" class="headerlink" title="4.1 main.c"></a>4.1 main.c</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;Driver_USART.h&quot;</span><br><span class="line">#include &quot;Inf_W24C02.h&quot;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">Driver_USART1_Init();</span><br><span class="line">printf(&quot;尚硅谷 I2C 软件模式实验开始....\r\n&quot;);</span><br><span class="line">//初始化</span><br><span class="line">Inf_W24C02_Init();</span><br><span class="line">//写数据</span><br><span class="line">Inf_W24C02_WriteByte(0x00, &#x27;a&#x27;);</span><br><span class="line">Inf_W24C02_WriteByte(0x01, &#x27;b&#x27;);</span><br><span class="line">Inf_W24C02_WriteByte(0x02, &#x27;c&#x27;);</span><br><span class="line">//读数据</span><br><span class="line">uint8_t byte1 = Inf_W24C02_ReadByte(0x00);</span><br><span class="line">uint8_t byte2 = Inf_W24C02_ReadByte(0x01);</span><br><span class="line">uint8_t byte3 = Inf_W24C02_ReadByte(0x02);</span><br><span class="line">printf(&quot;%c\r\n&quot;, byte1);</span><br><span class="line">printf(&quot;%c\r\n&quot;, byte2);</span><br><span class="line">printf(&quot;%c\r\n&quot;, byte3);</span><br><span class="line">Inf_W24C02_WriteBytes(0x00, &quot;123456&quot;, 6 );</span><br><span class="line">1 2 3 4 5 6 7 8 9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">uint8_t buff[ 100 ] = &#123; 0 &#125;;</span><br><span class="line">Inf_W24C02_ReadBytes(0x00, buff, 6 );</span><br><span class="line">printf(&quot;%s\r\n&quot;, buff);</span><br><span class="line">// 清零缓冲区</span><br><span class="line">memset(buff, 0 , sizeof(buff));</span><br><span class="line">Inf_W24C02_WriteBytes(0x00, &quot;0123456789abcdefghijk&quot;, 21 );</span><br><span class="line">Inf_W24C02_ReadBytes(0x00, buff, 21 );</span><br><span class="line">printf(&quot;%s\r\n&quot;, buff);</span><br><span class="line">while ( 1 )</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td></tr></table></figure><h5 id="4-2-Driver-I2C2-h"><a href="#4-2-Driver-I2C2-h" class="headerlink" title="4.2 Driver_I2C2.h"></a>4.2 Driver_I2C2.h</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">#ifndef __DRIVER_I2C2_H</span><br><span class="line">#define __DRIVER_I2C2_H</span><br><span class="line">#include &quot;Delay.h&quot;</span><br><span class="line">#include &quot;stm32f10x.h&quot;</span><br><span class="line">#include &quot;Driver_USART.h&quot;</span><br><span class="line">#define ACK 0</span><br><span class="line">#define NACK 1</span><br><span class="line">#define SCL_HIGH  (GPIOB-&gt;ODR |= GPIO_ODR_ODR10)</span><br><span class="line">#define SCL_LOW  (GPIOB-&gt;ODR &amp;= ~GPIO_ODR_ODR10)</span><br><span class="line">#define SDA_HIGH  (GPIOB-&gt;ODR |= GPIO_ODR_ODR11)</span><br><span class="line">#define SDA_LOW  (GPIOB-&gt;ODR &amp;= ~GPIO_ODR_ODR11)</span><br><span class="line">#define READ_SDA (GPIOB-&gt;IDR &amp; GPIO_IDR_IDR11)</span><br><span class="line">void Driver_I2C2_Init(void);</span><br><span class="line">void Driver_I2C2_Start(void);</span><br><span class="line">void Driver_I2C2_Stop(void);</span><br><span class="line">void Driver_I2C2_Ack(void);</span><br><span class="line">1 2 3 4 5 6 7 8 9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">void Driver_I2C2_NAck(void);</span><br><span class="line">uint8_t Driver_I2C2_WaitAck(void);</span><br><span class="line">void Driver_I2C_SendByte(uint8_t byte);</span><br><span class="line">uint8_t Driver_I2C_ReadByte(void);</span><br><span class="line">#endif</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td></tr></table></figure><h5 id="4-3-Driver-I2C2-c"><a href="#4-3-Driver-I2C2-c" class="headerlink" title="4.3 Driver_I2C2.c"></a>4.3 Driver_I2C2.c</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;Driver_I2C2.h&quot;</span><br><span class="line">#include &quot;Delay.h&quot;</span><br><span class="line">#define I2C_DELAY Delay_us( 10 )</span><br><span class="line">/**</span><br><span class="line"> * @description: 初始化</span><br><span class="line"> * @return &#123;*&#125;</span><br><span class="line"> */</span><br><span class="line">void Driver_I2C2_Init(void)</span><br><span class="line">&#123;</span><br><span class="line">/* PB10-&gt;SCL</span><br><span class="line">PB11-&gt;SDA</span><br><span class="line">开漏输出: 既可以用于输出也可以输入. 外界要有上拉电阻.</span><br><span class="line">用于输入的时候,最好先输出一个1,把线的控制权交给外界.</span><br><span class="line">MODE=11 CNF=01 */</span><br><span class="line">RCC-&gt;APB2ENR |= RCC_APB2ENR_IOPBEN;</span><br><span class="line">GPIOB-&gt;CRH |= (GPIO_CRH_MODE10 | GPIO_CRH_MODE11 | GPIO_CRH_CNF10_0 |</span><br><span class="line">GPIO_CRH_CNF11_0);</span><br><span class="line">GPIOB-&gt;CRH &amp;= ~(GPIO_CRH_CNF10_1 | GPIO_CRH_CNF11_1);</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line"> * @description: 起始信号</span><br><span class="line"> * @return &#123;*&#125;</span><br><span class="line"> */</span><br><span class="line">void Driver_I2C2_Start(void)</span><br><span class="line">&#123;</span><br><span class="line">/* 1. 拉高sda和scl */</span><br><span class="line">SDA_HIGH;</span><br><span class="line">SCL_HIGH;</span><br><span class="line">1 2 3 4 5 6 7 8 9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">/* 2. 延时 */</span><br><span class="line">I2C_DELAY;</span><br><span class="line">/* 3. 拉低sda */</span><br><span class="line">SDA_LOW;</span><br><span class="line">/* 4. 延时 */</span><br><span class="line">I2C_DELAY;</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line"> * @description: 停止信号</span><br><span class="line"> * @return &#123;*&#125;</span><br><span class="line"> */</span><br><span class="line">void Driver_I2C2_Stop(void)</span><br><span class="line">&#123;</span><br><span class="line">/* 1. scl 拉高 sda拉低 */</span><br><span class="line">SCL_HIGH;</span><br><span class="line">SDA_LOW;</span><br><span class="line">/* 2. 延时 */</span><br><span class="line">I2C_DELAY;</span><br><span class="line">/* 3. 拉高sda */</span><br><span class="line">SDA_HIGH;</span><br><span class="line">/* 4.  延时 */</span><br><span class="line">I2C_DELAY;</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line"> * @description: 接收方产生应答信号</span><br><span class="line"> */</span><br><span class="line">void Driver_I2C2_Ack(void)</span><br><span class="line">&#123;</span><br><span class="line">/* 1. 拉高sda和拉低scl */</span><br><span class="line">SDA_HIGH;</span><br><span class="line">SCL_LOW;</span><br><span class="line">/* 2. 延时 */</span><br><span class="line">I2C_DELAY;</span><br><span class="line">/* 3. sda拉低 */</span><br><span class="line">SDA_LOW;</span><br><span class="line">/* 4. 延时 */</span><br><span class="line">I2C_DELAY;</span><br></pre></td></tr></table></figure><p>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>76<br>77<br>78<br>79</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">/* 5. scl拉高 */</span><br><span class="line">SCL_HIGH;</span><br><span class="line">/* 6. 延时 */</span><br><span class="line">I2C_DELAY;</span><br><span class="line">/* 7. scl拉低 */</span><br><span class="line">SCL_LOW;</span><br><span class="line">/* 8. 延时 */</span><br><span class="line">I2C_DELAY;</span><br><span class="line">/* 9. sda 拉高 */</span><br><span class="line">SDA_HIGH;</span><br><span class="line">/* 10. 延时 */</span><br><span class="line">I2C_DELAY;</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line"> * @description: 接收方产生非应答信号</span><br><span class="line"> */</span><br><span class="line">void Driver_I2C2_NAck(void)</span><br><span class="line">&#123;</span><br><span class="line">/* 1. 拉高sda和拉低scl */</span><br><span class="line">SDA_HIGH;</span><br><span class="line">SCL_LOW;</span><br><span class="line">/* 2. 延时 */</span><br><span class="line">I2C_DELAY;</span><br><span class="line">/* 3. scl拉高 */</span><br><span class="line">SCL_HIGH;</span><br><span class="line">/* 4. 延时 */</span><br><span class="line">I2C_DELAY;</span><br><span class="line">/* 5. scl拉低*/</span><br><span class="line">SCL_LOW;</span><br><span class="line">/* 6. 延时 */</span><br><span class="line">I2C_DELAY;</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line"> * @description: 等待接收方法的应答</span><br></pre></td></tr></table></figure><p>80<br>81<br>82<br>83<br>84<br>85<br>86<br>87<br>88<br>89<br>90<br>91<br>92<br>93<br>94<br>95<br>96<br>97<br>98<br>99<br>100<br>101<br>102<br>103<br>104<br>105<br>106<br>107<br>108<br>109<br>110<br>111<br>112<br>113<br>114<br>115<br>116<br>117<br>118<br>119<br>120<br>121<br>122<br>123<br>124<br>125<br>126</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"> * @return &#123;*&#125; 应答或非应答</span><br><span class="line"> */</span><br><span class="line">uint8_t Driver_I2C2_WaitAck(void)</span><br><span class="line">&#123;</span><br><span class="line">/* 1. 把sda拉高, sda的主动权交给对方(e2prom芯片)</span><br><span class="line">等待应答的过程是主机操作时钟线scl，因此之后就读sda</span><br><span class="line">对应引脚的ODR寄存器 获得高低电平来判断应答非应答 */</span><br><span class="line">SDA_HIGH;</span><br><span class="line">/* 2. scl拉低  */</span><br><span class="line">SCL_LOW;</span><br><span class="line">/* 3. 延时 */</span><br><span class="line">I2C_DELAY;</span><br><span class="line">/* 4. 拉高scl */</span><br><span class="line">SCL_HIGH;</span><br><span class="line">/* 5. 延时 */</span><br><span class="line">I2C_DELAY;</span><br><span class="line">/* 6. 读取sda的电平 */</span><br><span class="line">uint8_t ack = ACK;</span><br><span class="line">if (READ_SDA)</span><br><span class="line">&#123;</span><br><span class="line">ack = NACK;</span><br><span class="line">&#125;</span><br><span class="line">/* 7. 拉低scl */</span><br><span class="line">SCL_LOW;</span><br><span class="line">/* 8. 延时 */</span><br><span class="line">I2C_DELAY;</span><br><span class="line">return ack;</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line"> * @description: 发送一个字节的数据</span><br><span class="line"> * @param &#123;uint8_t&#125; byte 要发送的字节</span><br><span class="line"> */</span><br><span class="line">void Driver_I2C_SendByte(uint8_t byte)</span><br><span class="line">&#123;</span><br><span class="line">for (uint8_t i = 0 ; i &lt; 8 ; i++)</span><br><span class="line">&#123;</span><br><span class="line">/* 1. sda和scl 拉低 */</span><br><span class="line">SDA_LOW;</span><br><span class="line">SCL_LOW;</span><br></pre></td></tr></table></figure><p>127<br>128<br>129<br>130<br>131<br>132<br>133<br>134<br>135<br>136<br>137<br>138<br>139<br>140<br>141<br>142<br>143<br>144<br>145<br>146<br>147<br>148<br>149<br>150<br>151<br>152<br>153<br>154<br>155<br>156<br>157<br>158<br>159<br>160<br>161<br>162<br>163<br>164<br>165<br>166<br>167<br>168<br>169<br>170<br>171<br>172<br>173</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">I2C_DELAY;</span><br><span class="line">/* 2. 向sda写数据 */</span><br><span class="line">if (byte &amp; 0x80)</span><br><span class="line">&#123;</span><br><span class="line">SDA_HIGH;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">SDA_LOW;</span><br><span class="line">&#125;</span><br><span class="line">I2C_DELAY;</span><br><span class="line">/* 3. 时钟拉高 */</span><br><span class="line">SCL_HIGH;</span><br><span class="line">I2C_DELAY;</span><br><span class="line">/* 4. 时钟拉低 */</span><br><span class="line">SCL_LOW;</span><br><span class="line">I2C_DELAY;</span><br><span class="line">/* 5. 左移 1 位, 为下一次发送做准备 */</span><br><span class="line">byte &lt;&lt;= 1 ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line"> * @description: 读一个字节的数据</span><br><span class="line"> * @param &#123;uint8_t&#125; byte 要发送的字节</span><br><span class="line"> */</span><br><span class="line">uint8_t Driver_I2C_ReadByte(void)</span><br><span class="line">&#123;</span><br><span class="line">uint8_t data = 0 ;</span><br><span class="line">for (uint8_t i = 0 ; i &lt; 8 ; i++)</span><br><span class="line">&#123;</span><br><span class="line">SDA_HIGH;/* 也可不加 */</span><br><span class="line">/* 1. 拉低scl */</span><br><span class="line">SCL_LOW;</span><br><span class="line">/* 2. 延时 */</span><br><span class="line">I2C_DELAY;</span><br></pre></td></tr></table></figure><p>174<br>175<br>176<br>177<br>178<br>179<br>180<br>181<br>182<br>183<br>184<br>185<br>186<br>187<br>188<br>189<br>190<br>191<br>192<br>193<br>194<br>195<br>196<br>197<br>198<br>199<br>200<br>201<br>202<br>203<br>204<br>205<br>206<br>207<br>208<br>209<br>210<br>211<br>212<br>213<br>214<br>215<br>216<br>217<br>218<br>219<br>220</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">/* 3. 拉高scl */</span><br><span class="line">SCL_HIGH;</span><br><span class="line">/* 4. 延时 */</span><br><span class="line">I2C_DELAY;</span><br><span class="line">/* 5. 读取sda */</span><br><span class="line">data &lt;&lt;= 1 ; /* 一定要放前面才能实现读一个字节(八位)，最低位移位 7 次 */</span><br><span class="line">if (READ_SDA)</span><br><span class="line">&#123;</span><br><span class="line">data |= 0x01;</span><br><span class="line">&#125;</span><br><span class="line">/* 6. 拉低scl */</span><br><span class="line">SCL_LOW;</span><br><span class="line">/* 7. 延时 */</span><br><span class="line">I2C_DELAY;</span><br><span class="line">&#125;</span><br><span class="line">return data;</span><br><span class="line">&#125;</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br></pre></td></tr></table></figure><h5 id="4-4-Inf-W24C02-h"><a href="#4-4-Inf-W24C02-h" class="headerlink" title="4.4 Inf_W24C02.h"></a>4.4 Inf_W24C02.h</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#ifndef __INF_W24C02_H</span><br><span class="line">#define __INF_W24C02_H</span><br><span class="line">#include &quot;Driver_I2C2.h&quot;</span><br><span class="line">#include &quot;string.h&quot;</span><br><span class="line">#define ADDR 0xA0</span><br><span class="line">void Inf_W24C02_Init(void);</span><br><span class="line">void Inf_W24C02_WriteByte(uint8_t innerAddr, uint8_t byte);</span><br><span class="line">uint8_t Inf_W24C02_ReadByte(uint8_t innerAddr);</span><br><span class="line">void Inf_W24C02_WriteBytes(uint8_t innerAddr, uint8_t *bytes, uint8_t len);</span><br><span class="line">void Inf_W24C02_ReadBytes(uint8_t innerAddr, uint8_t *bytes, uint8_t len);</span><br><span class="line">#endif</span><br><span class="line">1 2 3 4 5 6 7 8 9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td></tr></table></figure><h5 id="4-5-Inf-W24C02-c"><a href="#4-5-Inf-W24C02-c" class="headerlink" title="4.5 Inf_W24C02.c"></a>4.5 Inf_W24C02.c</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;Inf_W24C02.h&quot;</span><br><span class="line">void Inf_W24C02_Init(void)</span><br><span class="line">&#123;</span><br><span class="line">Driver_I2C2_Init();</span><br><span class="line">&#125;</span><br><span class="line">void Inf_W24C02_WriteByte(uint8_t innerAddr, uint8_t byte)</span><br><span class="line">&#123;</span><br><span class="line">/* 1. 开始信号 */</span><br><span class="line">Driver_I2C2_Start();</span><br><span class="line">/* 2. 发送写地址 */</span><br><span class="line">Driver_I2C_SendByte(ADDR);</span><br><span class="line">/* 3. 等待响应 */</span><br><span class="line">uint8_t ack = Driver_I2C2_WaitAck();</span><br><span class="line">if (ack == ACK)</span><br><span class="line">&#123;</span><br><span class="line">/* 4. 发送内部地址 */</span><br><span class="line">Driver_I2C_SendByte(innerAddr);</span><br><span class="line">/* 5. 等待响应 */</span><br><span class="line">Driver_I2C2_WaitAck();</span><br><span class="line">/* 6. 发送具体数据 */</span><br><span class="line">Driver_I2C_SendByte(byte);</span><br><span class="line">/* 7. 等待响应 */</span><br><span class="line">Driver_I2C2_WaitAck();</span><br><span class="line">/* 8. 停止信号 */</span><br><span class="line">Driver_I2C2_Stop();</span><br><span class="line">&#125;</span><br><span class="line">Delay_ms( 5 );</span><br><span class="line">&#125;</span><br><span class="line">uint8_t Inf_W24C02_ReadByte(uint8_t innerAddr)</span><br><span class="line">&#123;</span><br><span class="line">/* 1. 起始信号 */</span><br><span class="line">Driver_I2C2_Start();</span><br><span class="line">/* 2. 发送一个写地址 假写 */</span><br><span class="line">Driver_I2C_SendByte(ADDR);</span><br><span class="line">1 2 3 4 5 6 7 8 9</span><br></pre></td></tr></table></figure><p>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">/* 3. 等待响应 */</span><br><span class="line">Driver_I2C2_WaitAck();</span><br><span class="line">/* 4. 发送内部地址 */</span><br><span class="line">Driver_I2C_SendByte(innerAddr);</span><br><span class="line">/* 5. 等待响应 */</span><br><span class="line">Driver_I2C2_WaitAck();</span><br><span class="line">/* 6. 起始信号 */</span><br><span class="line">Driver_I2C2_Start();</span><br><span class="line">/* 7. 发送读地址 真读 */</span><br><span class="line">Driver_I2C_SendByte(ADDR + 1 );</span><br><span class="line">/* 8. 等待响应 */</span><br><span class="line">Driver_I2C2_WaitAck();</span><br><span class="line">/* 9. 读取一个字节 */</span><br><span class="line">uint8_t byte = Driver_I2C_ReadByte();</span><br><span class="line">/* 10. 给对方一个非应答 */</span><br><span class="line">Driver_I2C2_NAck();</span><br><span class="line">/* 11. 停止信号 */</span><br><span class="line">Driver_I2C2_Stop();</span><br><span class="line">return byte;</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line"> * @description: ⻚写入.一次写入多个字节</span><br><span class="line"> * @param &#123;uint8_t&#125; innerAddr</span><br><span class="line"> * @param &#123;uint8_t&#125; *bytes</span><br><span class="line"> * @param &#123;uint8_t&#125; len</span><br><span class="line"> * @return &#123;*&#125;</span><br><span class="line"> */</span><br><span class="line">void Inf_W24C02_WriteBytes(uint8_t innerAddr, uint8_t *bytes, uint8_t len)</span><br><span class="line">&#123;</span><br><span class="line">/* 1. 开始信号 */</span><br><span class="line">Driver_I2C2_Start();</span><br><span class="line">/* 2. 发送写地址 */</span><br><span class="line">Driver_I2C_SendByte(ADDR);</span><br><span class="line">/* 3. 等待响应 */</span><br><span class="line">uint8_t ack = Driver_I2C2_WaitAck();</span><br><span class="line">if (ack == ACK)</span><br></pre></td></tr></table></figure><p>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>76<br>77<br>78<br>79<br>80<br>81<br>82<br>83<br>84<br>85<br>86<br>87<br>88<br>89<br>90<br>91<br>92<br>93</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">/* 4. 发送内部地址 */</span><br><span class="line">Driver_I2C_SendByte(innerAddr);</span><br><span class="line">/* 5. 等待响应 */</span><br><span class="line">Driver_I2C2_WaitAck();</span><br><span class="line">for (uint8_t i = 0 ; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line">/* 6. 发送具体数据 */</span><br><span class="line">Driver_I2C_SendByte(bytes[i]);</span><br><span class="line">/* 7. 等待响应 */</span><br><span class="line">Driver_I2C2_WaitAck();</span><br><span class="line">&#125;</span><br><span class="line">/* 8. 停止信号 */</span><br><span class="line">Driver_I2C2_Stop();</span><br><span class="line">&#125;</span><br><span class="line">Delay_ms( 5 );</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line"> * @description: 一次性读取多个字节的数据</span><br><span class="line"> * @param &#123;uint8_t&#125; innerAddr 起始位置</span><br><span class="line"> * @param &#123;uint8_t&#125; *bytes 存储读到的数据</span><br><span class="line"> * @param &#123;uint8_t&#125; len 读取的字节数</span><br><span class="line"> * @return &#123;*&#125;</span><br><span class="line"> */</span><br><span class="line">void Inf_W24C02_ReadBytes(uint8_t innerAddr, uint8_t *bytes, uint8_t len)</span><br><span class="line">&#123;</span><br><span class="line">/* 1. 起始信号 */</span><br><span class="line">Driver_I2C2_Start();</span><br><span class="line">/* 2. 发送一个写地址 假写 */</span><br><span class="line">Driver_I2C_SendByte(ADDR);</span><br><span class="line">/* 3. 等待响应 */</span><br><span class="line">Driver_I2C2_WaitAck();</span><br><span class="line">/* 4. 发送内部地址 */</span><br><span class="line">Driver_I2C_SendByte(innerAddr);</span><br><span class="line">/* 5. 等待响应 */</span><br><span class="line">Driver_I2C2_WaitAck();</span><br><span class="line">/* 6. 起始信号 */</span><br><span class="line">Driver_I2C2_Start();</span><br></pre></td></tr></table></figure><p>94<br>95<br>96<br>97<br>98<br>99<br>100<br>101<br>102<br>103<br>104<br>105<br>106<br>107<br>108<br>109<br>110<br>111<br>112<br>113<br>114<br>115<br>116<br>117<br>118<br>119<br>120<br>121<br>122<br>123<br>124<br>125<br>126<br>127<br>128<br>129<br>130<br>131<br>132<br>133<br>134<br>135<br>136<br>137<br>138<br>139<br>140</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">/* 7. 发送读地址 真读 */</span><br><span class="line">Driver_I2C_SendByte(ADDR + 1 );</span><br><span class="line">/* 8. 等待响应 */</span><br><span class="line">Driver_I2C2_WaitAck();</span><br><span class="line">for (uint8_t i = 0 ; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line">/* 9. 读取一个字节 */</span><br><span class="line">bytes[i] = Driver_I2C_ReadByte();</span><br><span class="line">if (i &lt; len - 1 )</span><br><span class="line">&#123;</span><br><span class="line">Driver_I2C2_Ack();</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">Driver_I2C2_NAck();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">/* 11. 停止信号 */</span><br><span class="line">Driver_I2C2_Stop();</span><br><span class="line">&#125;</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td></tr></table></figure><h3 id="3-I2C案例-2-：硬件实现I2C"><a href="#3-I2C案例-2-：硬件实现I2C" class="headerlink" title="3. I2C案例 2 ：硬件实现I2C"></a>3. I2C案例 2 ：硬件实现I2C</h3><h4 id="1-需求描述-6"><a href="#1-需求描述-6" class="headerlink" title="1. 需求描述"></a>1. 需求描述</h4><h6 id="使用STM32的I2C外设读写E2PROM，基于寄存器操作。不需要手动控制引脚电平的输入输出，只"><a href="#使用STM32的I2C外设读写E2PROM，基于寄存器操作。不需要手动控制引脚电平的输入输出，只" class="headerlink" title="使用STM32的I2C外设读写E2PROM，基于寄存器操作。不需要手动控制引脚电平的输入输出，只"></a>使用STM32的I2C外设读写E2PROM，基于寄存器操作。不需要手动控制引脚电平的输入输出，只</h6><h6 id="需要操作I2C外设对应的寄存器即可。"><a href="#需要操作I2C外设对应的寄存器即可。" class="headerlink" title="需要操作I2C外设对应的寄存器即可。"></a>需要操作I2C外设对应的寄存器即可。</h6><h4 id="2-硬件电路设计-5"><a href="#2-硬件电路设计-5" class="headerlink" title="2. 硬件电路设计"></a>2. 硬件电路设计</h4><h5 id="2-1-I2C外设简介"><a href="#2-1-I2C外设简介" class="headerlink" title="2.1 I2C外设简介"></a>2.1 I2C外设简介</h5><h6 id="前面我们用软件模拟I2C协议实现了通讯，代码写起来比较复杂。"><a href="#前面我们用软件模拟I2C协议实现了通讯，代码写起来比较复杂。" class="headerlink" title="前面我们用软件模拟I2C协议实现了通讯，代码写起来比较复杂。"></a>前面我们用软件模拟I2C协议实现了通讯，代码写起来比较复杂。</h6><h6 id="起始STM32有专⻔负责协议的I2C外设，只要配置好该外设，它就会自动根据协议要求产生通讯信"><a href="#起始STM32有专⻔负责协议的I2C外设，只要配置好该外设，它就会自动根据协议要求产生通讯信" class="headerlink" title="起始STM32有专⻔负责协议的I2C外设，只要配置好该外设，它就会自动根据协议要求产生通讯信"></a>起始STM32有专⻔负责协议的I2C外设，只要配置好该外设，它就会自动根据协议要求产生通讯信</h6><h6 id="号，收发数据并缓存起来，CPU只要检测该外设的状态和访问数据寄存器，就能完成数据收发。"><a href="#号，收发数据并缓存起来，CPU只要检测该外设的状态和访问数据寄存器，就能完成数据收发。" class="headerlink" title="号，收发数据并缓存起来，CPU只要检测该外设的状态和访问数据寄存器，就能完成数据收发。"></a>号，收发数据并缓存起来，CPU只要检测该外设的状态和访问数据寄存器，就能完成数据收发。</h6><h6 id="这种由硬件外设处理I2C协议的方式减轻了CPU的工作，且使软件设计更加简单。"><a href="#这种由硬件外设处理I2C协议的方式减轻了CPU的工作，且使软件设计更加简单。" class="headerlink" title="这种由硬件外设处理I2C协议的方式减轻了CPU的工作，且使软件设计更加简单。"></a>这种由硬件外设处理I2C协议的方式减轻了CPU的工作，且使软件设计更加简单。</h6><p>STM32的I2C外设可用作通讯的主机及从机，支持100Kbit/s和400Kbit/s的速率，支持 7 位、 10 位<br>设备地址，支持DMA数据传输，并具有数据校验功能。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">它的I2C外设还支持SMBus2.0协议，SMBus协议与I2C类似。</span><br></pre></td></tr></table></figure><h5 id="2-2-STM32的I2C外设的功能框图"><a href="#2-2-STM32的I2C外设的功能框图" class="headerlink" title="2.2 STM32的I2C外设的功能框图"></a>2.2 STM32的I2C外设的功能框图</h5><h6 id="I2C的所有硬件架构都是根据图中左侧SCL线和SDA线展开的（其中的SMBA线用于SMBUS的警告信"><a href="#I2C的所有硬件架构都是根据图中左侧SCL线和SDA线展开的（其中的SMBA线用于SMBUS的警告信" class="headerlink" title="I2C的所有硬件架构都是根据图中左侧SCL线和SDA线展开的（其中的SMBA线用于SMBUS的警告信"></a>I2C的所有硬件架构都是根据图中左侧SCL线和SDA线展开的（其中的SMBA线用于SMBUS的警告信</h6><h6 id="号，I2C通讯没有使用）。STM32芯片有多个I2C外设，咱们现在用的这款有-2-个I-2C外设，它们的I2C通"><a href="#号，I2C通讯没有使用）。STM32芯片有多个I2C外设，咱们现在用的这款有-2-个I-2C外设，它们的I2C通" class="headerlink" title="号，I2C通讯没有使用）。STM32芯片有多个I2C外设，咱们现在用的这款有 2 个I 2C外设，它们的I2C通"></a>号，I2C通讯没有使用）。STM32芯片有多个I2C外设，咱们现在用的这款有 2 个I 2C外设，它们的I2C通</h6><h6 id="讯信号引出到不同的GPIO引脚上，使用时必须配置到这些指定的引脚。"><a href="#讯信号引出到不同的GPIO引脚上，使用时必须配置到这些指定的引脚。" class="headerlink" title="讯信号引出到不同的GPIO引脚上，使用时必须配置到这些指定的引脚。"></a>讯信号引出到不同的GPIO引脚上，使用时必须配置到这些指定的引脚。</h6><h4 id="3-软件设计（寄存器）-2"><a href="#3-软件设计（寄存器）-2" class="headerlink" title="3. 软件设计（寄存器）"></a>3. 软件设计（寄存器）</h4><h5 id="3-1-main-c-2"><a href="#3-1-main-c-2" class="headerlink" title="3.1 main.c"></a>3.1 main.c</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;Driver_USART.h&quot;</span><br><span class="line">#include &quot;Inf_W24C02.h&quot;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">Driver_USART1_Init();</span><br><span class="line">printf(&quot;I2C 硬件 实验开始....\r\n&quot;);</span><br><span class="line">Inf_W24C02_Init();</span><br><span class="line">Inf_W24C02_WriteByte(0x00, &#x27;x&#x27;);</span><br><span class="line">Inf_W24C02_WriteByte(0x01, &#x27;y&#x27;);</span><br><span class="line">Inf_W24C02_WriteByte(0x02, &#x27;z&#x27;);</span><br><span class="line">uint8_t byte1 = Inf_W24C02_ReadByte(0x00);</span><br><span class="line">uint8_t byte2 = Inf_W24C02_ReadByte(0x01);</span><br><span class="line">uint8_t byte3 = Inf_W24C02_ReadByte(0x02);</span><br><span class="line">printf(&quot;%c\r\n&quot;, byte1);</span><br><span class="line">printf(&quot;%c\r\n&quot;, byte2);</span><br><span class="line">printf(&quot;%c\r\n&quot;, byte3);</span><br><span class="line">Inf_W24C02_WriteBytes(0x00, &quot;123456&quot;, 6 );</span><br><span class="line">uint8_t buff[ 100 ] = &#123; 0 &#125;;</span><br><span class="line">Inf_W24C02_ReadBytes(0x00, buff, 6 );</span><br><span class="line">printf(&quot;%s\r\n&quot;, buff);</span><br><span class="line">// 清零缓冲区</span><br><span class="line">memset(buff, 0 , sizeof(buff));</span><br><span class="line">Inf_W24C02_WriteBytes(0x00, &quot;0123456789abcdefghijk&quot;, 21 );</span><br><span class="line">Inf_W24C02_ReadBytes(0x00, buff, 21 );</span><br><span class="line">printf(&quot;%s\r\n&quot;, buff);</span><br><span class="line">while ( 1 )</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">1 2 3 4 5 6 7 8 9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td></tr></table></figure><h5 id="3-2-Driver-I2C2-h"><a href="#3-2-Driver-I2C2-h" class="headerlink" title="3.2 Driver_I2C2.h"></a>3.2 Driver_I2C2.h</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">#ifndef __DRIVER_I2C2_H</span><br><span class="line">#define __DRIVER_I2C2_H</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">#include &quot;Delay.h&quot;</span><br><span class="line">#include &quot;stm32f10x.h&quot;</span><br><span class="line">#include &quot;Driver_USART.h&quot;</span><br><span class="line">#define ACK 0</span><br><span class="line">#define NACK 1</span><br><span class="line">#define OK 1</span><br><span class="line">#define FAIL 0</span><br><span class="line">void Driver_I2C2_Init(void);</span><br><span class="line">uint8_t Driver_I2C2_Start(void);</span><br><span class="line">void Driver_I2C2_Stop(void);</span><br><span class="line">void Driver_I2C2_Ack(void);</span><br><span class="line">void Driver_I2C2_NAck(void);</span><br><span class="line">uint8_t Driver_I2C_SendAddr(uint8_t addr);</span><br><span class="line">uint8_t Driver_I2C_SendByte(uint8_t byte);</span><br><span class="line">uint8_t Driver_I2C_ReadByte(void);</span><br><span class="line">#endif</span><br><span class="line">3 4 5 6 7 8 9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td></tr></table></figure><h5 id="3-3-Driver-I2C2-c"><a href="#3-3-Driver-I2C2-c" class="headerlink" title="3.3 Driver_I2C2.c"></a>3.3 Driver_I2C2.c</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;Driver_I2C2.h&quot;</span><br><span class="line">#include &quot;Delay.h&quot;</span><br><span class="line">#define I2C_DELAY Delay_us( 10 )</span><br><span class="line">/**</span><br><span class="line"> * @description: 初始化</span><br><span class="line"> * @return &#123;*&#125;</span><br><span class="line"> */</span><br><span class="line">void Driver_I2C2_Init(void)</span><br><span class="line">&#123;</span><br><span class="line">/* 1. 开启时钟 */</span><br><span class="line">/* 1.1 i2c硬件的时钟 */</span><br><span class="line">1 2 3 4 5 6 7 8 9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">RCC-&gt;APB1ENR |= RCC_APB1ENR_I2C2EN;</span><br><span class="line">/* 1.2 GPIO时钟 */</span><br><span class="line">RCC-&gt;APB2ENR |= RCC_APB2ENR_IOPBEN;</span><br><span class="line">/* 2. 设置gpio的引脚的工作模式 */</span><br><span class="line">/*</span><br><span class="line">PB10-&gt;SCL</span><br><span class="line">PB11-&gt;SDA</span><br><span class="line">复用开漏输出: 既可以用于输出也可以输入. 外界要有上拉电阻.</span><br><span class="line">用于输入的时候,最好先输出一个1,把线的控制权交给外界.</span><br><span class="line">MODE=11 CNF=11</span><br><span class="line"> */</span><br><span class="line">/* 9.3.4.1 */</span><br><span class="line">GPIOB-&gt;CRH |= (GPIO_CRH_MODE10 | GPIO_CRH_MODE11 | GPIO_CRH_CNF10 |</span><br><span class="line">GPIO_CRH_CNF11);</span><br><span class="line">/* 3. 设置I2C2 */</span><br><span class="line">/* 3.1 配置硬件的工作模式  I2C  */</span><br><span class="line">I2C2-&gt;CR1 &amp;= ~I2C_CR1_SMBUS;</span><br><span class="line">/* 3.2 配置给I2C设备提供的时钟的频率 36MHz*/</span><br><span class="line">I2C2-&gt;CR2 |= 36 &lt;&lt; 0 ;</span><br><span class="line">/* 万一前面CR2低五位并不全是 0 咋办，应该还要现清 0 再写入吧，为啥这里不用呢？*/</span><br><span class="line">/* 因为数据手册清楚地写了CR2的复位值为0X0000 */</span><br><span class="line">/* 3.3 设置标准模式=0 or 快速模式=1 */</span><br><span class="line">I2C2-&gt;CCR &amp;= ~I2C_CCR_FS;</span><br><span class="line">/* 3.3 配置I2C产生时钟的频率 100K or 400K</span><br><span class="line">Thigh=CCR * Tcplk1</span><br><span class="line">ccr = Thigh/=Tcplk1 = 5us / (1/36)us = 180</span><br><span class="line">*/</span><br><span class="line">I2C2-&gt;CCR |= 180 &lt;&lt; 0 ;</span><br><span class="line">/* 3.4 时钟信号的上升沿</span><br><span class="line">100KHz的时候要求最大上升沿不超过1us(手册)。</span><br><span class="line">时钟频率是36MHz则 写入：1 /（1/36） + 1 = 37</span><br><span class="line">其实就是计算的 最大上升沿时间/时钟周期 + 1</span><br><span class="line">*/</span><br><span class="line">I2C2-&gt;TRISE |= 37 ;</span><br></pre></td></tr></table></figure><p>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31</p><p>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">/* 3.4 使能I2C */</span><br><span class="line">I2C2-&gt;CR1 |= I2C_CR1_PE;</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line"> * @description: 起始信号</span><br><span class="line"> * @return &#123;*&#125;</span><br><span class="line"> */</span><br><span class="line">uint8_t Driver_I2C2_Start(void)</span><br><span class="line">&#123;</span><br><span class="line">I2C2-&gt;CR1 |= I2C_CR1_START;</span><br><span class="line">uint16_t timeout = 0xffff;</span><br><span class="line">while (((I2C2-&gt;SR1 &amp; I2C_SR1_SB) == 0 ) &amp;&amp; timeout)</span><br><span class="line">&#123;</span><br><span class="line">timeout--;</span><br><span class="line">&#125;</span><br><span class="line">return timeout? OK : FAIL;</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line"> * @description: 停止信号</span><br><span class="line"> * @return &#123;*&#125;</span><br><span class="line"> */</span><br><span class="line">void Driver_I2C2_Stop(void)</span><br><span class="line">&#123;</span><br><span class="line">/* 产生终止条件 */</span><br><span class="line">I2C2-&gt;CR1 |= I2C_CR1_STOP;</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line"> * @description: 接收方产生应答信号</span><br><span class="line"> */</span><br><span class="line">void Driver_I2C2_Ack(void)</span><br><span class="line">&#123;</span><br><span class="line">/* 产生应答信号 */</span><br><span class="line">I2C2-&gt;CR1 |= I2C_CR1_ACK;</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line"> * @description: 接收方产生非应答信号</span><br><span class="line"> */</span><br><span class="line">void Driver_I2C2_NAck(void)</span><br><span class="line">&#123;</span><br><span class="line">I2C2-&gt;CR1 &amp;= ~I2C_CR1_ACK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>76<br>77<br>78<br>79<br>80<br>81<br>82<br>83<br>84<br>85<br>86<br>87<br>88<br>89<br>90<br>91<br>92<br>93<br>94<br>95<br>96<br>97<br>98<br>99<br>100<br>101<br>102<br>103<br>104<br>105<br>106<br>107</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @description: 发送一个设备地址</span><br><span class="line"> * @param &#123;uint8_t&#125; byte</span><br><span class="line"> */</span><br><span class="line">uint8_t Driver_I2C_SendAddr(uint8_t addr)</span><br><span class="line">&#123;</span><br><span class="line">// 把要发送的数据写入到数据寄存器，其实可以加上判断DR寄存器的TXE位，查看一下是否为空</span><br><span class="line">I2C2-&gt;DR = addr;</span><br><span class="line">timeout = 0xffff;</span><br><span class="line">// 将设备地址发送给数据寄存器后再判断SR1的ADDR位</span><br><span class="line">while (((I2C2-&gt;SR1 &amp; I2C_SR1_ADDR) == 0 ) &amp;&amp; timeout)</span><br><span class="line">&#123;</span><br><span class="line">timeout--;</span><br><span class="line">&#125;</span><br><span class="line">/* 9.3.4.2 */</span><br><span class="line">if (timeout)</span><br><span class="line">&#123;</span><br><span class="line">I2C2-&gt;SR2;/* 读取SR1寄存器后，对SR2寄存器的读操作将清除ADDR位 */</span><br><span class="line">&#125;</span><br><span class="line">return timeout? OK : FAIL;</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line"> * @description: 发送一个字节的数据（数据和内部地址适用）</span><br><span class="line"> * @param &#123;uint8_t&#125; byte 要发送的字节</span><br><span class="line"> */</span><br><span class="line">uint8_t Driver_I2C_SendByte(uint8_t byte)</span><br><span class="line">&#123;</span><br><span class="line">uint16_t timeout = 0xffff;</span><br><span class="line">//1 先判断寄存器，假如寄存器不空就要等待至空状态（在超时时间内）后写入数据</span><br><span class="line">while (((I2C2-&gt;SR1 &amp; I2C_SR1_TXE) == 0 ) &amp;&amp; timeout)</span><br><span class="line">&#123;</span><br><span class="line">timeout--;</span><br><span class="line">&#125;</span><br><span class="line">// 把要发送的数据写入到数据寄存器，由于上一次执行已经读取SR寄存器，这行代码执行完后便</span><br><span class="line">将BTF置 0</span><br><span class="line">I2C2-&gt;DR = byte;</span><br><span class="line">timeout = 0xffff;</span><br><span class="line">//2 判断寄存器，假如数据没发送完成就要等待数据发送完成</span><br></pre></td></tr></table></figure><p>108<br>109<br>110<br>111<br>112<br>113<br>114<br>115<br>116<br>117<br>118<br>119<br>120<br>121<br>122<br>123<br>124<br>125<br>126<br>127<br>128<br>129<br>130<br>131<br>132<br>133<br>134<br>135<br>136<br>137<br>138<br>139<br>140<br>141<br>142<br>143<br>144<br>145<br>146<br>147<br>148</p><p>149<br>150<br>151<br>152<br>153</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">while (((I2C2-&gt;SR1 &amp; I2C_SR1_BTF) == 0 ) &amp;&amp; timeout)</span><br><span class="line">&#123;</span><br><span class="line">timeout--;</span><br><span class="line">&#125;</span><br><span class="line">return timeout? OK : FAIL;</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line"> * @description: 读一个字节的数据</span><br><span class="line"> * @param &#123;uint8_t&#125; byte 要发送的字节</span><br><span class="line"> */</span><br><span class="line">uint8_t Driver_I2C_ReadByte(void)</span><br><span class="line">&#123;</span><br><span class="line">uint16_t timeout = 0xffff;</span><br><span class="line">// 等待SR1寄存器RXNE位，一旦非空表示收到数据（在超时时间内），可以读取数据</span><br><span class="line">while (((I2C2-&gt;SR1 &amp; I2C_SR1_RXNE) == 0 ) &amp;&amp; timeout)</span><br><span class="line">&#123;</span><br><span class="line">timeout--;</span><br><span class="line">&#125;</span><br><span class="line">// 把数据寄存器的值返回</span><br><span class="line">uint8_t data = timeout? I2C2-&gt;DR : 0 ;</span><br><span class="line">return data;</span><br><span class="line">&#125;</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td></tr></table></figure><p>你可能很好奇为啥要加个超时时间？万一有多个主机同时操作，在while循环里就要一直等待，所<br>以最好加个超时时间表示等待成功或失败！</p><h5 id="3-4-Inf-W24C02-h"><a href="#3-4-Inf-W24C02-h" class="headerlink" title="3.4 Inf_W24C02.h"></a>3.4 Inf_W24C02.h</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#ifndef __INF_W24C02_H</span><br><span class="line">#define __INF_W24C02_H</span><br><span class="line">#include &quot;Driver_I2C2.h&quot;</span><br><span class="line">#include &quot;string.h&quot;</span><br><span class="line">#define ADDR 0xA0</span><br><span class="line">void Inf_W24C02_Init(void);</span><br><span class="line">void Inf_W24C02_WriteByte(uint8_t innerAddr, uint8_t byte);</span><br><span class="line">uint8_t Inf_W24C02_ReadByte(uint8_t innerAddr);</span><br><span class="line">void Inf_W24C02_WriteBytes(uint8_t innerAddr, uint8_t *bytes, uint8_t len);</span><br><span class="line">void Inf_W24C02_ReadBytes(uint8_t innerAddr, uint8_t *bytes, uint8_t len);</span><br><span class="line">1 2 3 4 5 6 7 8 9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17 #endif</span><br></pre></td></tr></table></figure><h5 id="3-5-Inf-W24C02-c"><a href="#3-5-Inf-W24C02-c" class="headerlink" title="3.5 Inf_W24C02.c"></a>3.5 Inf_W24C02.c</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;Inf_W24C02.h&quot;</span><br><span class="line">void Inf_W24C02_Init(void)</span><br><span class="line">&#123;</span><br><span class="line">Driver_I2C2_Init();</span><br><span class="line">&#125;</span><br><span class="line">void Inf_W24C02_WriteByte(uint8_t innerAddr, uint8_t byte)</span><br><span class="line">&#123;</span><br><span class="line">uint8_t ack;/* 用来测试写字节是否成功的变量，测完就注释掉要不然影响时序 */</span><br><span class="line">/* 1. 开始信号 */</span><br><span class="line">ack = Driver_I2C2_Start();</span><br><span class="line">// printf(&quot;start_ack=%d\r\n&quot;, ack);</span><br><span class="line">/* 2. 发送写地址 */</span><br><span class="line">ack = Driver_I2C_SendAddr(ADDR);</span><br><span class="line">// printf(&quot;addr_ack=%d\r\n&quot;, ack);</span><br><span class="line">/* 4. 发送内部地址 */</span><br><span class="line">ack = Driver_I2C_SendByte(innerAddr);</span><br><span class="line">// printf(&quot;inner_ack=%d\r\n&quot;, ack);</span><br><span class="line">/* 6. 发送具体数据 */</span><br><span class="line">ack = Driver_I2C_SendByte(byte);</span><br><span class="line">// printf(&quot;byte_ack=%d\r\n&quot;, ack);</span><br><span class="line">/* 8. 停止信号 */</span><br><span class="line">Driver_I2C2_Stop();</span><br><span class="line">/* 9.3.4.3 */</span><br><span class="line">Delay_ms( 5 );</span><br><span class="line">&#125;</span><br><span class="line">uint8_t Inf_W24C02_ReadByte(uint8_t innerAddr)</span><br><span class="line">&#123;</span><br><span class="line">/* 1. 起始信号 */</span><br><span class="line">Driver_I2C2_Start();</span><br><span class="line">/* 2. 发送一个写地址 假写 */</span><br><span class="line">Driver_I2C_SendAddr(ADDR);</span><br><span class="line">/* 4. 发送内部地址 */</span><br><span class="line">Driver_I2C_SendByte(innerAddr);</span><br><span class="line">/* 6. 起始信号 */</span><br><span class="line">Driver_I2C2_Start();</span><br><span class="line">1 2 3 4 5 6 7 8 9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">/* 7. 发送读地址 真读 */</span><br><span class="line">Driver_I2C_SendAddr(ADDR + 1 );</span><br><span class="line">/* 10. 产生一个非应答信号 */</span><br><span class="line">Driver_I2C2_NAck();</span><br><span class="line">/* 11. 停止信号 */</span><br><span class="line">Driver_I2C2_Stop();</span><br><span class="line">/* 9. 读取一个字节 */</span><br><span class="line">uint8_t byte = Driver_I2C_ReadByte();</span><br><span class="line">return byte;</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line"> * @description: ⻚写入.一次写入多个字节</span><br><span class="line"> * @param &#123;uint8_t&#125; innerAddr</span><br><span class="line"> * @param &#123;uint8_t&#125; *bytes</span><br><span class="line"> * @param &#123;uint8_t&#125; len</span><br><span class="line"> * @return &#123;*&#125;</span><br><span class="line"> */</span><br><span class="line">void Inf_W24C02_WriteBytes(uint8_t innerAddr, uint8_t *bytes, uint8_t len)</span><br><span class="line">&#123;</span><br><span class="line">/* 1. 开始信号 */</span><br><span class="line">Driver_I2C2_Start();</span><br><span class="line">/* 2. 发送写地址 */</span><br><span class="line">Driver_I2C_SendAddr(ADDR);</span><br><span class="line">/* 4. 发送内部地址 */</span><br><span class="line">Driver_I2C_SendByte(innerAddr);</span><br><span class="line">for (uint8_t i = 0 ; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line">/* 6. 发送具体数据 */</span><br><span class="line">Driver_I2C_SendByte(bytes[i]);</span><br><span class="line">&#125;</span><br><span class="line">/* 8. 停止信号 */</span><br><span class="line">Driver_I2C2_Stop();</span><br><span class="line">Delay_ms( 5 );</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line"> * @description: 一次性读取多个字节的数据</span><br><span class="line"> * @param &#123;uint8_t&#125; innerAddr 起始位置</span><br></pre></td></tr></table></figure><p>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>76<br>77<br>78<br>79<br>80<br>81<br>82<br>83<br>84<br>85<br>86<br>87<br>88</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"> * @param &#123;uint8_t&#125; *bytes 存储读到的数据</span><br><span class="line"> * @param &#123;uint8_t&#125; len 读取的字节数</span><br><span class="line"> * @return &#123;*&#125;</span><br><span class="line"> */</span><br><span class="line">void Inf_W24C02_ReadBytes(uint8_t innerAddr, uint8_t *bytes, uint8_t len)</span><br><span class="line">&#123;</span><br><span class="line">/* 1. 起始信号 */</span><br><span class="line">Driver_I2C2_Start();</span><br><span class="line">/* 2. 发送一个写地址 假写 */</span><br><span class="line">Driver_I2C_SendAddr(ADDR);</span><br><span class="line">/* 4. 发送内部地址 */</span><br><span class="line">Driver_I2C_SendByte(innerAddr);</span><br><span class="line">/* 6. 起始信号 */</span><br><span class="line">Driver_I2C2_Start();</span><br><span class="line">/* 9.3.4.3 */</span><br><span class="line">/* 7. 发送读地址 真读 */</span><br><span class="line">Driver_I2C_SendAddr(ADDR + 1 );</span><br><span class="line">for (uint8_t i = 0 ; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line">/* 9. 读取一个字节 都要产生一个应答信号*/</span><br><span class="line">if (i &lt; len - 1 )</span><br><span class="line">&#123;</span><br><span class="line">Driver_I2C2_Ack();</span><br><span class="line">&#125;</span><br><span class="line">else /* EV7_1 */</span><br><span class="line">&#123;</span><br><span class="line">Driver_I2C2_NAck();</span><br><span class="line">/* 11. 停止信号 */</span><br><span class="line">Driver_I2C2_Stop();</span><br><span class="line">&#125;</span><br><span class="line">bytes[i] = Driver_I2C_ReadByte();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td></tr></table></figure><h4 id="4-注意-1"><a href="#4-注意-1" class="headerlink" title="4. 注意"></a>4. 注意</h4><h6 id="1-GPIO为复用功能"><a href="#1-GPIO为复用功能" class="headerlink" title="1. GPIO为复用功能 "></a>1. GPIO为复用功能 </h6><h6 id="涉及到寄存器的配置！注意：我们的PB10、PB11此时并不是两个普通的GPIO而是复用作IIC的"><a href="#涉及到寄存器的配置！注意：我们的PB10、PB11此时并不是两个普通的GPIO而是复用作IIC的" class="headerlink" title="涉及到寄存器的配置！注意：我们的PB10、PB11此时并不是两个普通的GPIO而是复用作IIC的"></a>涉及到寄存器的配置！注意：我们的PB10、PB11此时并不是两个普通的GPIO而是复用作IIC的</h6><h6 id="IO输出。"><a href="#IO输出。" class="headerlink" title="IO输出。 "></a>IO输出。 </h6><h6 id="2-在I²C通信中，发送完设备地址后需要清除ADDR寄存器？"><a href="#2-在I²C通信中，发送完设备地址后需要清除ADDR寄存器？" class="headerlink" title="2. 在I²C通信中，发送完设备地址后需要清除ADDR寄存器？ "></a>2. 在I²C通信中，发送完设备地址后需要清除ADDR寄存器？ </h6><h6 id="清除ADDR寄存器的目的是为了确保下一次的I²C传输或操作不会受到上一次的地址信息的干扰。"><a href="#清除ADDR寄存器的目的是为了确保下一次的I²C传输或操作不会受到上一次的地址信息的干扰。" class="headerlink" title="清除ADDR寄存器的目的是为了确保下一次的I²C传输或操作不会受到上一次的地址信息的干扰。"></a>清除ADDR寄存器的目的是为了确保下一次的I²C传输或操作不会受到上一次的地址信息的干扰。</h6><h6 id="如果不清除ADDR寄存器，可能会导致通信错误或设备不正确响应。"><a href="#如果不清除ADDR寄存器，可能会导致通信错误或设备不正确响应。" class="headerlink" title="如果不清除ADDR寄存器，可能会导致通信错误或设备不正确响应。 "></a>如果不清除ADDR寄存器，可能会导致通信错误或设备不正确响应。 </h6><h4 id="🥖-1-I²C地址传输阶段-："><a href="#🥖-1-I²C地址传输阶段-：" class="headerlink" title="🥖^1. I²C地址传输阶段 ："></a>🥖^1. I²C地址传输阶段 ：</h4><h3 id="◦-在I²C通信中，主设备（通常是微控制器）需要向从设备发送数据或者请求数据。通信"><a href="#◦-在I²C通信中，主设备（通常是微控制器）需要向从设备发送数据或者请求数据。通信" class="headerlink" title="◦ 在I²C通信中，主设备（通常是微控制器）需要向从设备发送数据或者请求数据。通信"></a>◦ 在I²C通信中，主设备（通常是微控制器）需要向从设备发送数据或者请求数据。通信</h3><h6 id="开始时，主设备首先发送一个设备地址和读写位（R-W位）给总线上的所有设备。"><a href="#开始时，主设备首先发送一个设备地址和读写位（R-W位）给总线上的所有设备。" class="headerlink" title="开始时，主设备首先发送一个设备地址和读写位（R/W位）给总线上的所有设备。"></a>开始时，主设备首先发送一个设备地址和读写位（R/W位）给总线上的所有设备。</h6><h6 id="2-ADDR寄存器的作用-："><a href="#2-ADDR寄存器的作用-：" class="headerlink" title="2. ADDR寄存器的作用 ："></a>2. ADDR寄存器的作用 ：</h6><h3 id="◦-ADDR寄存器用于存储要发送的设备地址和读写位。当主设备开始传输设备地址后，这"><a href="#◦-ADDR寄存器用于存储要发送的设备地址和读写位。当主设备开始传输设备地址后，这" class="headerlink" title="◦ ADDR寄存器用于存储要发送的设备地址和读写位。当主设备开始传输设备地址后，这"></a>◦ ADDR寄存器用于存储要发送的设备地址和读写位。当主设备开始传输设备地址后，这</h3><h6 id="些信息会被加载到ADDR寄存器中。"><a href="#些信息会被加载到ADDR寄存器中。" class="headerlink" title="些信息会被加载到ADDR寄存器中。"></a>些信息会被加载到ADDR寄存器中。</h6><h6 id="3-ADDR寄存器的清除-："><a href="#3-ADDR寄存器的清除-：" class="headerlink" title="3. ADDR寄存器的清除 ："></a>3. ADDR寄存器的清除 ：</h6><h3 id="◦-在I²C通信中，主设备发送完设备地址后，通常需要软件来清除ADDR寄存器中的地址"><a href="#◦-在I²C通信中，主设备发送完设备地址后，通常需要软件来清除ADDR寄存器中的地址" class="headerlink" title="◦ 在I²C通信中，主设备发送完设备地址后，通常需要软件来清除ADDR寄存器中的地址"></a>◦ 在I²C通信中，主设备发送完设备地址后，通常需要软件来清除ADDR寄存器中的地址</h3><h6 id="信息。这是因为I²C控制器通常不会自动清除ADDR寄存器的内容。"><a href="#信息。这是因为I²C控制器通常不会自动清除ADDR寄存器的内容。" class="headerlink" title="信息。这是因为I²C控制器通常不会自动清除ADDR寄存器的内容。 "></a>信息。这是因为I²C控制器通常不会自动清除ADDR寄存器的内容。 </h6><h6 id="4-软件操作-："><a href="#4-软件操作-：" class="headerlink" title="4. 软件操作 ："></a>4. 软件操作 ：</h6><h3 id="◦-在大多数情况下，软件需要在发送设备地址后显式地清除ADDR寄存器。这通常通过写"><a href="#◦-在大多数情况下，软件需要在发送设备地址后显式地清除ADDR寄存器。这通常通过写" class="headerlink" title="◦ 在大多数情况下，软件需要在发送设备地址后显式地清除ADDR寄存器。这通常通过写"></a>◦ 在大多数情况下，软件需要在发送设备地址后显式地清除ADDR寄存器。这通常通过写</h3><h6 id="入特定的控制位或寄存器来完成，具体的操作取决于使用的I²C控制器和微控制器。"><a href="#入特定的控制位或寄存器来完成，具体的操作取决于使用的I²C控制器和微控制器。" class="headerlink" title="入特定的控制位或寄存器来完成，具体的操作取决于使用的I²C控制器和微控制器。"></a>入特定的控制位或寄存器来完成，具体的操作取决于使用的I²C控制器和微控制器。</h6><h6 id="5-硬件实现的例外-："><a href="#5-硬件实现的例外-：" class="headerlink" title="5. 硬件实现的例外 ："></a>5. 硬件实现的例外 ：</h6><h3 id="◦-尽管大多数情况下需要软件操作来清除ADDR寄存器，有些特定的I²C控制器和微控制"><a href="#◦-尽管大多数情况下需要软件操作来清除ADDR寄存器，有些特定的I²C控制器和微控制" class="headerlink" title="◦ 尽管大多数情况下需要软件操作来清除ADDR寄存器，有些特定的I²C控制器和微控制"></a>◦ 尽管大多数情况下需要软件操作来清除ADDR寄存器，有些特定的I²C控制器和微控制</h3><h6 id="器可能提供了自动清除的功能，但这并不是通用情况。"><a href="#器可能提供了自动清除的功能，但这并不是通用情况。" class="headerlink" title="器可能提供了自动清除的功能，但这并不是通用情况。"></a>器可能提供了自动清除的功能，但这并不是通用情况。</h6><p><strong>voidInf_W24C02_ReadBytes(uint8_tinnerAddr,uint8_t*bytes,uint8_tlen)的使用</strong> <br><strong>多字节不能读取太快，不然会发生数据覆盖。</strong><br>还有就是最后为啥要先产生应答信号后再读取数据，而不是先读取数据之后产生应答信号（ <strong>无论<br>是写入数据还是读取数据，主机在发送完地址后等待从机的应答信号</strong> ）？</p><ul><li><strong>实际是用上一次的响应信号来设置这一次的响应,读完数据硬件就立即响应，如果不先产生应答，硬</strong><br><strong>件响应的是从机非应答信号，这样读取多字节数据就可以了,而且最后一个字节要注意EV7_1包括响</strong><br><strong>应和停止！</strong></li><li><strong>主要是硬件响应太快，所以要先准备好应答信号，再由硬件响应。一个字节就不用考虑（就和做一</strong><br><strong>次生意是一个意思，哈哈）！</strong></li></ul><h4 id="5-软件设计（HAL库）-2"><a href="#5-软件设计（HAL库）-2" class="headerlink" title="5. 软件设计（HAL库）"></a>5. 软件设计（HAL库）</h4><h5 id="5-1-STM32CubeMx中配置"><a href="#5-1-STM32CubeMx中配置" class="headerlink" title="5.1 STM32CubeMx中配置"></a>5.1 STM32CubeMx中配置</h5><h5 id="5-2-main-c"><a href="#5-2-main-c" class="headerlink" title="5.2 main.c"></a>5.2 main.c</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">HAL_Init();</span><br><span class="line">SystemClock_Config();</span><br><span class="line">MX_GPIO_Init();</span><br><span class="line">MX_USART1_UART_Init();</span><br><span class="line">Inf_W24C02_Init();</span><br><span class="line">Inf_W24C02_WriteByte(<span class="number">0x00</span>, <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="type">uint8_t</span> c = Inf_W24C02_ReadByte(<span class="number">0x00</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;c=%c\r\n&quot;</span>, c);</span><br><span class="line"><span class="type">uint8_t</span> wbuff[ <span class="number">10</span> ] = &#123;<span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;o&#x27;</span>&#125;;</span><br><span class="line">Inf_W24C02_WriteBytes(<span class="number">0x01</span>, wbuff, <span class="number">5</span> );</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;c=%c\r\n&quot;</span>, Inf_W24C02_ReadByte(<span class="number">0x01</span>));</span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">11</span></span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="number">13</span></span><br><span class="line"><span class="number">14</span></span><br><span class="line"><span class="number">15</span></span><br><span class="line"><span class="number">16</span></span><br><span class="line"><span class="number">17</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;c=%c\r\n&quot;</span>, Inf_W24C02_ReadByte(<span class="number">0x02</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;c=%c\r\n&quot;</span>, Inf_W24C02_ReadByte(<span class="number">0x03</span>));</span><br><span class="line"><span class="type">uint8_t</span> buff[ <span class="number">10</span> ] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">Inf_W24C02_ReadBytes(<span class="number">0x00</span>, buff, <span class="number">6</span> );</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;buff=%s\r\n&quot;</span>, buff);</span><br><span class="line"><span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">18</span></span><br><span class="line"><span class="number">19</span></span><br><span class="line"><span class="number">20</span></span><br><span class="line"><span class="number">21</span></span><br><span class="line"><span class="number">22</span></span><br><span class="line"><span class="number">23</span></span><br><span class="line"><span class="number">24</span></span><br><span class="line"><span class="number">25</span></span><br><span class="line"><span class="number">26</span></span><br><span class="line"><span class="number">27</span></span><br><span class="line"><span class="number">28</span></span><br><span class="line"><span class="number">29</span></span><br></pre></td></tr></table></figure><h5 id="5-3-Inf-W24C02-h"><a href="#5-3-Inf-W24C02-h" class="headerlink" title="5.3 Inf_W24C02.h"></a>5.3 Inf_W24C02.h</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#ifndef __INF_W24C02_H</span><br><span class="line">#define __INF_W24C02_H</span><br><span class="line">#include &quot;string.h&quot;</span><br><span class="line">#include &quot;i2c.h&quot;</span><br><span class="line">#define ADDR 0xA0</span><br><span class="line">void Inf_W24C02_Init(void);</span><br><span class="line">void Inf_W24C02_WriteByte(uint8_t innerAddr, uint8_t byte);</span><br><span class="line">uint8_t Inf_W24C02_ReadByte(uint8_t innerAddr);</span><br><span class="line">void Inf_W24C02_WriteBytes(uint8_t innerAddr, uint8_t *bytes, uint8_t len);</span><br><span class="line">void Inf_W24C02_ReadBytes(uint8_t innerAddr, uint8_t *bytes, uint8_t len);</span><br><span class="line">#endif</span><br><span class="line">1 2 3 4 5 6 7 8 9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td></tr></table></figure><h5 id="5-4-Inf-W24C02-c"><a href="#5-4-Inf-W24C02-c" class="headerlink" title="5.4 Inf_W24C02.c"></a>5.4 Inf_W24C02.c</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;Inf_W24C02.h&quot;</span><br><span class="line">#include &quot;stdio.h&quot;</span><br><span class="line">void Inf_W24C02_Init(void)</span><br><span class="line">&#123;</span><br><span class="line">MX_I2C2_Init();</span><br><span class="line">&#125;</span><br><span class="line">1 2 3 4 5 6 7 8</span><br><span class="line">void Inf_W24C02_WriteByte(uint8_t innerAddr, uint8_t byte)</span><br><span class="line">&#123;</span><br><span class="line">HAL_I2C_Mem_Write(&amp;hi2c2, ADDR, innerAddr, I2C_MEMADD_SIZE_8BIT, &amp;byte, 1 ,</span><br><span class="line">2000 );</span><br><span class="line">HAL_Delay( 5 );</span><br><span class="line">&#125;</span><br><span class="line">uint8_t Inf_W24C02_ReadByte(uint8_t innerAddr)</span><br><span class="line">&#123;</span><br><span class="line">uint8_t byte;</span><br><span class="line">HAL_I2C_Mem_Read(&amp;hi2c2, ADDR + 1 , innerAddr, I2C_MEMADD_SIZE_8BIT, &amp;byte,</span><br><span class="line">1 , 2000 );</span><br><span class="line">return byte;</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line"> * @description: ⻚写入.一次写入多个字节</span><br><span class="line"> * @param &#123;uint8_t&#125; innerAddr</span><br><span class="line"> * @param &#123;uint8_t&#125; *bytes</span><br><span class="line"> * @param &#123;uint8_t&#125; len</span><br><span class="line"> * @return &#123;*&#125;</span><br><span class="line"> */</span><br><span class="line">void Inf_W24C02_WriteBytes(uint8_t innerAddr, uint8_t *bytes, uint8_t len)</span><br><span class="line">&#123;</span><br><span class="line">HAL_I2C_Mem_Write(&amp;hi2c2, ADDR, innerAddr, I2C_MEMADD_SIZE_8BIT, bytes,</span><br><span class="line">len, 2000 );</span><br><span class="line">HAL_Delay( 5 );</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line"> * @description: 一次性读取多个字节的数据</span><br><span class="line"> * @param &#123;uint8_t&#125; innerAddr 起始位置</span><br><span class="line"> * @param &#123;uint8_t&#125; *bytes 存储读到的数据</span><br><span class="line"> * @param &#123;uint8_t&#125; len 读取的字节数</span><br><span class="line"> * @return &#123;*&#125;</span><br><span class="line"> */</span><br><span class="line">void Inf_W24C02_ReadBytes(uint8_t innerAddr, uint8_t *bytes, uint8_t len)</span><br><span class="line">&#123;</span><br><span class="line">HAL_I2C_Mem_Read(&amp;hi2c2, ADDR + 1 , innerAddr, I2C_MEMADD_SIZE_8BIT, bytes,</span><br><span class="line">len, 2000 );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
