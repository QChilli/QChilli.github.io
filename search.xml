<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2025/03/26/%E8%93%9D%E6%A1%A5%E6%9D%AF/MCU/%E6%A8%A1%E6%8B%9F%E9%A2%98/4T%E7%AC%AC%E5%8D%81%E4%BA%94%E5%B1%8A%E6%A8%A1%E6%8B%9FI/"/>
      <url>/2025/03/26/%E8%93%9D%E6%A1%A5%E6%9D%AF/MCU/%E6%A8%A1%E6%8B%9F%E9%A2%98/4T%E7%AC%AC%E5%8D%81%E4%BA%94%E5%B1%8A%E6%A8%A1%E6%8B%9FI/</url>
      
        <content type="html"><![CDATA[<h1 id="1-关于对输入数据起始时间的理解"><a href="#1-关于对输入数据起始时间的理解" class="headerlink" title="1.关于对输入数据起始时间的理解"></a>1.关于对输入数据起始时间的理解</h1><blockquote><p>输入数据起始时间是输入第一位数据（没被清空）那一刻的时间</p></blockquote><p>假设，先输入 123 ，那么输入数据起始时间是输入 “1” 那一刻的时间。若按下 S5 按键清空数据后，再输入 345 ，那么输入数据起始时间应该是输入 “3” 这一刻的时间。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h1 id="2-LED-亮后立马熄灭"><a href="#2-LED-亮后立马熄灭" class="headerlink" title="2.LED 亮后立马熄灭"></a>2.LED 亮后立马熄灭</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第十五届省赛I</title>
      <link href="/2025/03/24/%E8%93%9D%E6%A1%A5%E6%9D%AF/MCU/%E7%9C%81%E8%B5%9B/%E7%AC%AC%E5%8D%81%E4%BA%94%E5%B1%8A%E7%9C%81%E8%B5%9BI/"/>
      <url>/2025/03/24/%E8%93%9D%E6%A1%A5%E6%9D%AF/MCU/%E7%9C%81%E8%B5%9B/%E7%AC%AC%E5%8D%81%E4%BA%94%E5%B1%8A%E7%9C%81%E8%B5%9BI/</url>
      
        <content type="html"><![CDATA[<h1 id="1-数码管闪烁"><a href="#1-数码管闪烁" class="headerlink" title="1.数码管闪烁"></a>1.数码管闪烁</h1><h2 id="1-错误示范"><a href="#1-错误示范" class="headerlink" title="1.错误示范"></a>1.错误示范</h2><p>本次试题并不涉及数码管闪烁，只可能是底层和逻辑功能代码的问题。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">idata <span class="type">uint16_t</span> Freq_Current;  <span class="comment">// NE555实时采集频率值</span></span><br><span class="line">idata <span class="type">int16_t</span> Freq_Cal;  <span class="comment">// 最终校验后的频率值</span></span><br><span class="line">idata <span class="type">int16_t</span> Para_CheckOut_Proc;<span class="comment">// 校准处理参数</span></span><br><span class="line">idata bit CheckOut_Error;<span class="comment">// 频率校准失败（校准后为负数） 0-成功 1-失败</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Seg_DrvProc</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">switch</span> (Seg_Show_Mode)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 频率界面</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">Seg_Memb.Seg_Buf[<span class="number">0</span>] = <span class="number">12</span>; <span class="comment">// F</span></span><br><span class="line">Seg_Memb.Seg_Buf[<span class="number">1</span>] = <span class="number">10</span>;</span><br><span class="line">Seg_Memb.Seg_Buf[<span class="number">2</span>] = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span>(CheckOut_Error)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 校准失败 */</span> </span><br><span class="line">Seg_Memb.Seg_Buf[<span class="number">3</span>] = <span class="number">10</span>;</span><br><span class="line">Seg_Memb.Seg_Buf[<span class="number">4</span>] = <span class="number">10</span>;</span><br><span class="line">Seg_Memb.Seg_Buf[<span class="number">5</span>] = <span class="number">10</span>;</span><br><span class="line">Seg_Memb.Seg_Buf[<span class="number">6</span>] = <span class="number">16</span>;</span><br><span class="line">Seg_Memb.Seg_Buf[<span class="number">7</span>] = <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 校准成功 */</span></span><br><span class="line">Seg_Memb.Seg_Buf[<span class="number">3</span>] = (Freq_Cal &gt;= <span class="number">10000</span>) ? Freq_Cal / <span class="number">10000</span> % <span class="number">10</span> : <span class="number">10</span>;</span><br><span class="line">Seg_Memb.Seg_Buf[<span class="number">4</span>] = (Freq_Cal &gt;= <span class="number">1000</span>) ? Freq_Cal / <span class="number">1000</span> % <span class="number">10</span> : <span class="number">10</span>;</span><br><span class="line">Seg_Memb.Seg_Buf[<span class="number">5</span>] = (Freq_Cal &gt;= <span class="number">100</span>) ? Freq_Cal / <span class="number">100</span> % <span class="number">10</span> : <span class="number">10</span>;</span><br><span class="line">Seg_Memb.Seg_Buf[<span class="number">6</span>] = (Freq_Cal &gt;= <span class="number">10</span>) ? Freq_Cal / <span class="number">10</span> % <span class="number">10</span> : <span class="number">10</span>;</span><br><span class="line">Seg_Memb.Seg_Buf[<span class="number">7</span>] = (Freq_Cal &gt;= <span class="number">1</span>) ? Freq_Cal / <span class="number">1</span> % <span class="number">10</span> : <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Timer1_Isr</span><span class="params">(<span class="type">void</span>)</span> interrupt 3</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(++Freq_Tick_1s == <span class="number">1000</span>)</span><br><span class="line">&#123;</span><br><span class="line">Freq_Tick_1s = <span class="number">0</span>;</span><br><span class="line">Freq_Current = TH0 &lt;&lt; <span class="number">8</span> | TL0;</span><br><span class="line"><span class="comment">/* 计算频率 */</span></span><br><span class="line"><span class="comment">// 校准后频率为负数</span></span><br><span class="line"><span class="keyword">if</span>(Freq_Cal &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 无效直接清0</span></span><br><span class="line">Freq_Cal = <span class="number">0</span>;</span><br><span class="line">CheckOut_Error = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">Freq_Cal = Freq_Current + Para_CheckOut_Proc;</span><br><span class="line">CheckOut_Error = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">TH0 = TL0 = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>程序进入定时器中断服务函数，Freq_Cal 一开始系统默认是 0 ，此时程序执行 else 分支，这时才能检测到 Freq_Cal 为负数，而由于程序设计实物的时候，原本应该 CheckOut_Error 立刻为 1 ，现在必须先为 0 等到下一次进入中断服务函数后，才能使 CheckOut_Error 为 1 ，还要 Freq_Cal 重新被赋值为 0 ，所以才会使 CheckOut_Error  一直 0 / 1 交替，使得数码管会闪。</code></p></blockquote><h2 id="2-解决方法"><a href="#2-解决方法" class="headerlink" title="2.解决方法"></a>2.解决方法</h2><h3 id="1-先计算-Freq-Cal-再逻辑判断（错误）"><a href="#1-先计算-Freq-Cal-再逻辑判断（错误）" class="headerlink" title="1.先计算 Freq_Cal 再逻辑判断（错误）"></a>1.先计算 <code>Freq_Cal</code> 再逻辑判断（错误）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Key_DrvProc</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">switch</span> (Key_Memb.Key_Down)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">Seg_Show_Mode = (++Seg_Show_Mode) % <span class="number">4</span>;</span><br><span class="line"><span class="keyword">if</span>(Seg_Show_Mode == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 处于超限参数子界面 */</span></span><br><span class="line">Para_Change_Mode = <span class="number">0</span>;</span><br><span class="line"><span class="comment">/* 参数界面下处理值赋给控制值，方便设置参数 */</span></span><br><span class="line">Para_CheckOut_Ctrl = Para_CheckOut_Proc;</span><br><span class="line">Para_OverRun_Ctrl = Para_OverRun_Proc;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(Seg_Show_Mode == <span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 处于频率回显子界面 */</span></span><br><span class="line">Echo_Change_Mode = <span class="number">0</span>;</span><br><span class="line"><span class="comment">/* 回显界面下控制值赋给处理值，实时显示 */</span></span><br><span class="line">Para_CheckOut_Proc = Para_CheckOut_Ctrl;</span><br><span class="line">Para_OverRun_Proc = Para_OverRun_Ctrl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Timer1_Isr</span><span class="params">(<span class="type">void</span>)</span> interrupt 3</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(++Freq_Tick_1s == <span class="number">1000</span>)</span><br><span class="line">&#123;</span><br><span class="line">Freq_Tick_1s = <span class="number">0</span>;</span><br><span class="line">Freq_Current = TH0 &lt;&lt; <span class="number">8</span> | TL0;</span><br><span class="line"><span class="comment">/* 计算频率 */</span></span><br><span class="line">        Freq_Cal = Freq_Current + Para_CheckOut_Proc;</span><br><span class="line"><span class="comment">// 校准后频率为负数</span></span><br><span class="line"><span class="keyword">if</span>(Freq_Cal &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 无效直接清0</span></span><br><span class="line">Freq_Cal = <span class="number">0</span>;</span><br><span class="line">CheckOut_Error = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">CheckOut_Error = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">TH0 = TL0 = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>不可行：</strong></p><ul><li><code>Freq_Cal 最后计算的结果为负数，也没有必要保留这个负数结果，直接清 0 就好。</code></li><li><code>Freq_Cal 计算代码执行后，万一立刻改变校验值 Para_CheckOut_Proc ，且迅速切换到频率界面时，频率值会延时更新，导致数据更新实时性降低，影响系统性能。</code></li></ul></blockquote><h3 id="2-先判断-Para-CheckOut-Proc-的值是否为负数（正确）"><a href="#2-先判断-Para-CheckOut-Proc-的值是否为负数（正确）" class="headerlink" title="2.先判断 Para_CheckOut_Proc 的值是否为负数（正确）"></a>2.先判断 <code>Para_CheckOut_Proc</code> 的值是否为负数（正确）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Timer1_Isr</span><span class="params">(<span class="type">void</span>)</span> interrupt 3</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint16_t</span> Freq_Temp = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span>(++Freq_Tick_1s == <span class="number">1000</span>)</span><br><span class="line">&#123;</span><br><span class="line">Freq_Tick_1s = <span class="number">0</span>;</span><br><span class="line">Freq_Current = TH0 &lt;&lt; <span class="number">8</span> | TL0;</span><br><span class="line"><span class="comment">/* 计算频率 */</span></span><br><span class="line">        <span class="comment">// 校验值为负数</span></span><br><span class="line"><span class="keyword">if</span>(Para_CheckOut_Proc &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 最终计算值为负数</span></span><br><span class="line"><span class="keyword">if</span>(Freq_Temp &gt; Freq_Current)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 校准失败</span></span><br><span class="line">CheckOut_Error = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 清 0 </span></span><br><span class="line">Freq_Cal = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 频率数据 &lt; 超限参数</span></span><br><span class="line">Over_Error = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 校准成功</span></span><br><span class="line">CheckOut_Error = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 获取负数校验值的绝对值</span></span><br><span class="line">Freq_Temp = -Para_CheckOut_Proc;</span><br><span class="line"><span class="comment">// 计算最终值</span></span><br><span class="line">Freq_Cal = Freq_Current - Freq_Temp;</span><br><span class="line">Over_Error = (Freq_Cal &gt; Para_OverRun_Proc)? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">// 校验值为正数</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 校准成功</span></span><br><span class="line">CheckOut_Error = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 计算最终值</span></span><br><span class="line">Freq_Cal = Freq_Current + Para_CheckOut_Proc;</span><br><span class="line">Over_Error = (Freq_Cal &gt; Para_OverRun_Proc)? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">TH0 = TL0 = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-C语言数据类型的隐式转换"><a href="#2-C语言数据类型的隐式转换" class="headerlink" title="2.C语言数据类型的隐式转换"></a>2.C语言数据类型的隐式转换</h1><h2 id="1-错误示范-1"><a href="#1-错误示范-1" class="headerlink" title="1.错误示范"></a>1.错误示范</h2><p>根据 C 的<strong>整数提升规则</strong>和<strong>算术转换规则</strong>可知：</p><blockquote><ol><li><strong>整数提升</strong>：如果操作数是小于 <code>int</code> 的类型（如 <code>short</code>），会被提升为 <code>int</code>。在这个例子中，<code>Freq_Cal</code> 已经是 <code>int</code>，所以不需要提升。</li><li>类型统一：如果两个操作数的类型不同，编译器会将其中一个类型转换为另一个类型。通常：<ul><li>如果一个操作数是无符号整数 (<code>unsigned int</code>)，另一个是有符号整数 (<code>int</code>)，则有符号整数会被转换为无符号整数。</li><li>转换后，两个操作数都变成 <code>unsigned int</code>，然后进行比较。</li></ul></li></ol></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">idata <span class="type">int16_t</span> Freq_Cal;  <span class="comment">// 最终校验后的频率值</span></span><br><span class="line">idata <span class="type">uint16_t</span> Freq_Max;  <span class="comment">// 最大频率值</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Seg_DrvProc</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint16_t</span> Freq_Temp = -Para_CheckOut_Proc;</span><br><span class="line"><span class="keyword">if</span>(Freq_Cal &gt; Freq_Max)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 更新最大值 */</span></span><br><span class="line">Freq_Max = Freq_Cal;</span><br><span class="line">Read_Rtc(ucRtc_Max);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">switch</span> (Seg_Show_Mode)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 回显界面</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">Seg_Memb.Seg_Buf[<span class="number">0</span>] = <span class="number">15</span>; <span class="comment">// H</span></span><br><span class="line"><span class="keyword">if</span>(Echo_Change_Mode == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">Seg_Memb.Seg_Buf[<span class="number">1</span>] = <span class="number">12</span>;</span><br><span class="line">Seg_Memb.Seg_Buf[<span class="number">2</span>] = <span class="number">10</span>;</span><br><span class="line">Seg_Memb.Seg_Buf[<span class="number">3</span>] = (Freq_Max &gt;= <span class="number">10000</span>) ? Freq_Max / <span class="number">10000</span> % <span class="number">10</span> : <span class="number">10</span>;</span><br><span class="line">Seg_Memb.Seg_Buf[<span class="number">4</span>] = (Freq_Max &gt;= <span class="number">1000</span>) ? Freq_Max / <span class="number">1000</span> % <span class="number">10</span> : <span class="number">10</span>;</span><br><span class="line">Seg_Memb.Seg_Buf[<span class="number">5</span>] = (Freq_Max &gt;= <span class="number">100</span>) ? Freq_Max / <span class="number">100</span> % <span class="number">10</span> : <span class="number">10</span>;</span><br><span class="line">Seg_Memb.Seg_Buf[<span class="number">6</span>] = (Freq_Max &gt;= <span class="number">10</span>) ? Freq_Max / <span class="number">10</span> % <span class="number">10</span> : <span class="number">10</span>;</span><br><span class="line">Seg_Memb.Seg_Buf[<span class="number">7</span>] = (Freq_Max &gt;= <span class="number">1</span>) ? Freq_Max / <span class="number">1</span> % <span class="number">10</span> : <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">Seg_Memb.Seg_Buf[<span class="number">1</span>] = <span class="number">14</span>;</span><br><span class="line">Seg_Memb.Seg_Buf[<span class="number">2</span>] = ucRtc_Max[<span class="number">0</span>] / <span class="number">10</span> % <span class="number">10</span>;</span><br><span class="line">Seg_Memb.Seg_Buf[<span class="number">3</span>] = ucRtc_Max[<span class="number">0</span>] / <span class="number">1</span> % <span class="number">10</span>;</span><br><span class="line">Seg_Memb.Seg_Buf[<span class="number">4</span>] = ucRtc_Max[<span class="number">1</span>] / <span class="number">10</span> % <span class="number">10</span>;</span><br><span class="line">Seg_Memb.Seg_Buf[<span class="number">5</span>] = ucRtc_Max[<span class="number">1</span>] / <span class="number">1</span> % <span class="number">10</span>;</span><br><span class="line">Seg_Memb.Seg_Buf[<span class="number">6</span>] = ucRtc_Max[<span class="number">2</span>] / <span class="number">10</span> % <span class="number">10</span>;</span><br><span class="line">Seg_Memb.Seg_Buf[<span class="number">7</span>] = ucRtc_Max[<span class="number">2</span>] / <span class="number">1</span> % <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>当 <code>Freq_Cal</code> 是负数时，<code>Freq_Cal &gt; Freq_Max</code> 中<code>Freq_Cal</code>（<code>int</code> 类型）会被隐式转换为 <code>unsigned int</code>，编译器直接将其二进制位模式重新解释为无符号整数值，也就是说，<strong>负数会被“环绕”到无符号整数的上限范围</strong>。</p></blockquote><h2 id="2-解决方法-1"><a href="#2-解决方法-1" class="headerlink" title="2.解决方法"></a>2.解决方法</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">idata <span class="type">int16_t</span> Freq_Cal;  <span class="comment">// 最终校验后的频率值</span></span><br><span class="line">idata <span class="type">int16_t</span> Freq_Max;  <span class="comment">// 最大频率值</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Seg_DrvProc</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint16_t</span> Freq_Temp = -Para_CheckOut_Proc;</span><br><span class="line"><span class="keyword">if</span>(Freq_Cal &gt; Freq_Max)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 更新最大值 */</span></span><br><span class="line">Freq_Max = Freq_Cal;</span><br><span class="line">Read_Rtc(ucRtc_Max);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">switch</span> (Seg_Show_Mode)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 回显界面</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">Seg_Memb.Seg_Buf[<span class="number">0</span>] = <span class="number">15</span>; <span class="comment">// H</span></span><br><span class="line"><span class="keyword">if</span>(Echo_Change_Mode == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">Seg_Memb.Seg_Buf[<span class="number">1</span>] = <span class="number">12</span>;</span><br><span class="line">Seg_Memb.Seg_Buf[<span class="number">2</span>] = <span class="number">10</span>;</span><br><span class="line">Seg_Memb.Seg_Buf[<span class="number">3</span>] = (Freq_Max &gt;= <span class="number">10000</span>) ? Freq_Max / <span class="number">10000</span> % <span class="number">10</span> : <span class="number">10</span>;</span><br><span class="line">Seg_Memb.Seg_Buf[<span class="number">4</span>] = (Freq_Max &gt;= <span class="number">1000</span>) ? Freq_Max / <span class="number">1000</span> % <span class="number">10</span> : <span class="number">10</span>;</span><br><span class="line">Seg_Memb.Seg_Buf[<span class="number">5</span>] = (Freq_Max &gt;= <span class="number">100</span>) ? Freq_Max / <span class="number">100</span> % <span class="number">10</span> : <span class="number">10</span>;</span><br><span class="line">Seg_Memb.Seg_Buf[<span class="number">6</span>] = (Freq_Max &gt;= <span class="number">10</span>) ? Freq_Max / <span class="number">10</span> % <span class="number">10</span> : <span class="number">10</span>;</span><br><span class="line">Seg_Memb.Seg_Buf[<span class="number">7</span>] = (Freq_Max &gt;= <span class="number">1</span>) ? Freq_Max / <span class="number">1</span> % <span class="number">10</span> : <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">Seg_Memb.Seg_Buf[<span class="number">1</span>] = <span class="number">14</span>;</span><br><span class="line">Seg_Memb.Seg_Buf[<span class="number">2</span>] = ucRtc_Max[<span class="number">0</span>] / <span class="number">10</span> % <span class="number">10</span>;</span><br><span class="line">Seg_Memb.Seg_Buf[<span class="number">3</span>] = ucRtc_Max[<span class="number">0</span>] / <span class="number">1</span> % <span class="number">10</span>;</span><br><span class="line">Seg_Memb.Seg_Buf[<span class="number">4</span>] = ucRtc_Max[<span class="number">1</span>] / <span class="number">10</span> % <span class="number">10</span>;</span><br><span class="line">Seg_Memb.Seg_Buf[<span class="number">5</span>] = ucRtc_Max[<span class="number">1</span>] / <span class="number">1</span> % <span class="number">10</span>;</span><br><span class="line">Seg_Memb.Seg_Buf[<span class="number">6</span>] = ucRtc_Max[<span class="number">2</span>] / <span class="number">10</span> % <span class="number">10</span>;</span><br><span class="line">Seg_Memb.Seg_Buf[<span class="number">7</span>] = ucRtc_Max[<span class="number">2</span>] / <span class="number">1</span> % <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 蓝桥杯 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第十届国赛</title>
      <link href="/2025/03/13/%E8%93%9D%E6%A1%A5%E6%9D%AF/MCU/%E5%9B%BD%E8%B5%9B/%E7%AC%AC%E5%8D%81%E5%B1%8A%E5%9B%BD%E8%B5%9B/"/>
      <url>/2025/03/13/%E8%93%9D%E6%A1%A5%E6%9D%AF/MCU/%E5%9B%BD%E8%B5%9B/%E7%AC%AC%E5%8D%81%E5%B1%8A%E5%9B%BD%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<h1 id="长短按逻辑"><a href="#长短按逻辑" class="headerlink" title="长短按逻辑"></a>长短按逻辑</h1><h2 id="1-错误示范"><a href="#1-错误示范" class="headerlink" title="1.错误示范"></a>1.错误示范</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(KeyDown == <span class="number">12</span>)</span><br><span class="line">&#123; </span><br><span class="line"><span class="comment">/* 长按计时 */</span></span><br><span class="line">S12LPButtton = <span class="number">1</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 短按 */</span></span><br><span class="line"><span class="keyword">if</span>(KeyUp == <span class="number">12</span>)</span><br><span class="line">&#123;</span><br><span class="line">S12LPButtton = <span class="number">0</span>;</span><br><span class="line">       <span class="comment">/* 短按逻辑 */</span></span><br><span class="line">       </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 长按 */</span></span><br><span class="line"><span class="keyword">if</span>(S12LPButtton &amp;&amp; S12LPTick &gt;= <span class="number">1000</span>)</span><br><span class="line">&#123;</span><br><span class="line">       <span class="comment">/* 长按逻辑 */</span></span><br><span class="line">       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种写法大概率会使其执行长按并同时触发短按。</p><h2 id="2-解决方法"><a href="#2-解决方法" class="headerlink" title="2.解决方法"></a>2.解决方法</h2><blockquote><p><strong>增加一个标志位 S12LPFlag （表示S12已激活长按状态）</strong></p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(KeyDown == <span class="number">12</span>)</span><br><span class="line">&#123; </span><br><span class="line"><span class="comment">/* 长按计时 */</span></span><br><span class="line">S12LPButtton = <span class="number">1</span>; </span><br><span class="line"><span class="comment">/* 未进行长按操作 */</span></span><br><span class="line">S12LPFlag = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 短按 */</span></span><br><span class="line"><span class="keyword">if</span>(KeyUp == <span class="number">12</span>)</span><br><span class="line">&#123;</span><br><span class="line">S12LPButtton = <span class="number">0</span>;</span><br><span class="line"><span class="comment">/* 长按结束 */</span></span><br><span class="line">S12LPFlag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(S12LPFlag == <span class="number">0</span> &amp;&amp; S12LPTick &lt; <span class="number">1000</span>)</span><br><span class="line">&#123;</span><br><span class="line">            <span class="comment">/* 短按逻辑 */</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 长按 */</span></span><br><span class="line"><span class="keyword">if</span>(S12LPButtton &amp;&amp; S12LPTick &gt;= <span class="number">1000</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 长按已激活 */</span></span><br><span class="line">S12LPFlag = <span class="number">1</span>;</span><br><span class="line"><span class="comment">/* 停止长按计时 */</span></span><br><span class="line">S12LPButtton = <span class="number">0</span>;</span><br><span class="line">       <span class="comment">/* 长按逻辑 */</span></span><br><span class="line">       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 蓝桥杯 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第八届国赛</title>
      <link href="/2025/03/10/%E8%93%9D%E6%A1%A5%E6%9D%AF/MCU/%E5%9B%BD%E8%B5%9B/%E7%AC%AC%E5%85%AB%E5%B1%8A%E5%9B%BD%E8%B5%9B/"/>
      <url>/2025/03/10/%E8%93%9D%E6%A1%A5%E6%9D%AF/MCU/%E5%9B%BD%E8%B5%9B/%E7%AC%AC%E5%85%AB%E5%B1%8A%E5%9B%BD%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<h1 id="超声波测距"><a href="#超声波测距" class="headerlink" title="超声波测距"></a>超声波测距</h1><h2 id="1-错误示范"><a href="#1-错误示范" class="headerlink" title="1.错误示范"></a>1.错误示范</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Key_Proc</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">switch</span> (Seg_Show_Mode)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line"><span class="keyword">if</span> (Key_Down == <span class="number">4</span>) Led_Measure_Success = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">UltraSoundProc</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(Led_Measure_Success == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Distance_Value = Ut_Wave_Data();</span><br><span class="line">        <span class="comment">/* 超声波逻辑 */</span></span><br><span class="line">        Led_Measure_Success = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果超声波单独存在于处理函数中（必然要有时间片），S4 按下两次，则可能会出现特定时间下，超声波只能测距一次。</p><p>超声波处理逻辑单独放到任务函数中会导致超声波测量的实时性降低。</p><h2 id="2-解决方法"><a href="#2-解决方法" class="headerlink" title="2.解决方法"></a>2.解决方法</h2><p>由于按键处理任务函数 10ms 执行一次，因此将超声波测距放入按键逻辑中即可。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Key_Proc</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">switch</span> (Seg_Show_Mode)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line"><span class="keyword">if</span> (Key_Down == <span class="number">4</span>)</span><br><span class="line">&#123;</span><br><span class="line">Led_Measure_Success = <span class="number">1</span>;</span><br><span class="line">Distance_Value = Ut_Wave_Data();</span><br><span class="line">           <span class="comment">/* 超声波逻辑 */</span></span><br><span class="line">           <span class="comment">/************/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="EEPROM-读取失败"><a href="#EEPROM-读取失败" class="headerlink" title="EEPROM 读取失败"></a>EEPROM 读取失败</h1><h2 id="EEPROM-读取失败-1"><a href="#EEPROM-读取失败-1" class="headerlink" title="EEPROM 读取失败"></a>EEPROM 读取失败</h2><h3 id="1-错误示范-1"><a href="#1-错误示范-1" class="headerlink" title="1.错误示范"></a>1.错误示范</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint8_t</span> E2POMReadBlind = <span class="number">0</span>, E2POMReadArray = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">SystemInit();</span><br><span class="line">Timer1_Init();</span><br><span class="line">E2POMRead(&amp;E2POMReadBlind, <span class="number">17</span>, <span class="number">1</span>);</span><br><span class="line">E2POMRead(&amp;E2POMReadArray, <span class="number">16</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(E2POMReadArray == E2POMLockArray)</span><br><span class="line">&#123;</span><br><span class="line">ucLed[<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">E2POMRead(DisMeasureArray, <span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line">E2POMRead(&amp;DisStoreIndex, <span class="number">12</span>, <span class="number">1</span>);</span><br><span class="line">DisMeasureLast = DisMeasureArray[DisStoreIndex];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(E2POMReadBlind == E2POMLockBlind)</span><br><span class="line">&#123;</span><br><span class="line">E2POMRead(&amp;DisMeasureBlindProc, <span class="number">11</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">TaskSchedulerRun();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-解决方法-1"><a href="#2-解决方法-1" class="headerlink" title="2.解决方法"></a>2.解决方法</h3><blockquote><p>要在调度器开启，也就是定时器一初始化之前读取 EEPROM 数据。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint8_t</span> E2POMReadBlind = <span class="number">0</span>, E2POMReadArray = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">SystemInit();</span><br><span class="line"></span><br><span class="line">E2POMRead(&amp;E2POMReadBlind, <span class="number">17</span>, <span class="number">1</span>);</span><br><span class="line">E2POMRead(&amp;E2POMReadArray, <span class="number">16</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(E2POMReadArray == E2POMLockArray)</span><br><span class="line">&#123;</span><br><span class="line">ucLed[<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">E2POMRead(DisMeasureArray, <span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line">E2POMRead(&amp;DisStoreIndex, <span class="number">12</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="comment">/* 缓冲区第DisStoreIndex的变量是上一次的测距 */</span></span><br><span class="line">DisMeasureLast = DisMeasureArray[DisStoreIndex];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(E2POMReadBlind == E2POMLockBlind)</span><br><span class="line">&#123;</span><br><span class="line">E2POMRead(&amp;DisMeasureBlindProc, <span class="number">11</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">Timer1_Init();</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">TaskSchedulerRun();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="EEPROM-写入"><a href="#EEPROM-写入" class="headerlink" title="EEPROM 写入"></a>EEPROM 写入</h2><h3 id="1-错误示范-2"><a href="#1-错误示范-2" class="headerlink" title="1.错误示范"></a>1.错误示范</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">KeyProc</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">switch</span>(SegShowMode)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line"><span class="keyword">if</span>(KeyDown == <span class="number">6</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 切置参数页面前 控制 -&gt; 处理 */</span></span><br><span class="line">DisMeasureBlindCtrl = DisMeasureBlindProc;</span><br><span class="line">SegShowMode = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line"><span class="keyword">if</span>(KeyDown == <span class="number">6</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 切置测距显示前 处理 -&gt; 控制 */</span></span><br><span class="line">DisMeasureBlindProc = DisMeasureBlindCtrl;</span><br><span class="line">SegShowMode = <span class="number">0</span>;</span><br><span class="line"><span class="comment">/* E2POM 写入 */</span></span><br><span class="line">E2POMWrite(&amp;DisMeasureBlindCtrl, <span class="number">11</span>, <span class="number">1</span>);</span><br><span class="line">E2POMWrite(&amp;E2POMLockBlind, <span class="number">17</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-解决方法-2"><a href="#2-解决方法-2" class="headerlink" title="2.解决方法"></a>2.解决方法</h3><blockquote><p>处理值写入EEPROM ，而并不是控制值，控制值只在参数界面设置。</p><p>退出参数界面后，控制值立刻赋值给处理值，处理值是逻辑编写所用的数据，因此其存入 EEPROM 才有意义。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">KeyProc</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">switch</span>(SegShowMode)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line"><span class="keyword">if</span>(KeyDown == <span class="number">6</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 切置参数页面前 控制 -&gt; 处理 */</span></span><br><span class="line">DisMeasureBlindCtrl = DisMeasureBlindProc;</span><br><span class="line">SegShowMode = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line"><span class="keyword">if</span>(KeyDown == <span class="number">6</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 切置测距显示前 处理 -&gt; 控制 */</span></span><br><span class="line">DisMeasureBlindProc = DisMeasureBlindCtrl;</span><br><span class="line">SegShowMode = <span class="number">0</span>;</span><br><span class="line"><span class="comment">/* E2POM 写入 */</span></span><br><span class="line">E2POMWrite(&amp;DisMeasureBlindProc, <span class="number">11</span>, <span class="number">1</span>);</span><br><span class="line">E2POMWrite(&amp;E2POMLockBlind, <span class="number">17</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 蓝桥杯 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第九届国赛</title>
      <link href="/2025/03/10/%E8%93%9D%E6%A1%A5%E6%9D%AF/MCU/%E5%9B%BD%E8%B5%9B/%E7%AC%AC%E4%B9%9D%E5%B1%8A%E5%9B%BD%E8%B5%9B/"/>
      <url>/2025/03/10/%E8%93%9D%E6%A1%A5%E6%9D%AF/MCU/%E5%9B%BD%E8%B5%9B/%E7%AC%AC%E4%B9%9D%E5%B1%8A%E5%9B%BD%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<h1 id="数码管闪烁"><a href="#数码管闪烁" class="headerlink" title="数码管闪烁"></a>数码管闪烁</h1><h2 id="1-错误示范"><a href="#1-错误示范" class="headerlink" title="1.错误示范"></a>1.错误示范</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">TaskSchedulerRun</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint8_t</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; TaskNum; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 获取此时的时间戳 */</span></span><br><span class="line"><span class="type">uint32_t</span> timeNow = uwTick;</span><br><span class="line"><span class="keyword">if</span>(timeNow - g_SchedulerList[i].timeLast &gt;= g_SchedulerList[i].timeLoad)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 更新时间戳 */</span></span><br><span class="line">g_SchedulerList[i].timeLast = g_SchedulerList[i].timeLoad;</span><br><span class="line"><span class="comment">/* 调度 */</span></span><br><span class="line">g_SchedulerList[i].taskPFunc();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-解决方法"><a href="#2-解决方法" class="headerlink" title="2.解决方法"></a>2.解决方法</h2><blockquote><p>一定要注意调度器代码是否正确。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">TaskSchedulerRun</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint8_t</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; TaskNum; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 获取此时的时间戳 */</span></span><br><span class="line"><span class="type">uint32_t</span> timeNow = uwTick;</span><br><span class="line"><span class="keyword">if</span>(timeNow - g_SchedulerList[i].timeLast &gt;= g_SchedulerList[i].timeLoad)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 更新时间戳 */</span></span><br><span class="line">g_SchedulerList[i].timeLast = timeNow;</span><br><span class="line"><span class="comment">/* 调度 */</span></span><br><span class="line">g_SchedulerList[i].taskPFunc();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 蓝桥杯 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第十五届省赛II</title>
      <link href="/2025/03/05/%E8%93%9D%E6%A1%A5%E6%9D%AF/MCU/%E7%9C%81%E8%B5%9B/%E7%AC%AC%E5%8D%81%E4%BA%94%E5%B1%8A%E7%9C%81%E8%B5%9BII/"/>
      <url>/2025/03/05/%E8%93%9D%E6%A1%A5%E6%9D%AF/MCU/%E7%9C%81%E8%B5%9B/%E7%AC%AC%E5%8D%81%E4%BA%94%E5%B1%8A%E7%9C%81%E8%B5%9BII/</url>
      
        <content type="html"><![CDATA[<h1 id="1-温度变化"><a href="#1-温度变化" class="headerlink" title="1.温度变化"></a>1.温度变化</h1><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202503042041697.png" alt="QQ20250304-204048"></p><ul><li>温度上升或下降必须要用小数判断，假设温度 13.6 -&gt; 14.1 ，若使用整数判断，实则温度并没有超过 1°C ，会导致逻辑判断错误</li><li>数码管显示温度可以使用整数</li></ul><h1 id="2-报警指示灯状态"><a href="#2-报警指示灯状态" class="headerlink" title="2.报警指示灯状态"></a>2.报警指示灯状态</h1><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202503042039314.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 蓝桥杯 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第十四届省赛</title>
      <link href="/2025/03/02/%E8%93%9D%E6%A1%A5%E6%9D%AF/MCU/%E7%9C%81%E8%B5%9B/%E7%AC%AC%E5%8D%81%E5%9B%9B%E5%B1%8A%E7%9C%81%E8%B5%9B/"/>
      <url>/2025/03/02/%E8%93%9D%E6%A1%A5%E6%9D%AF/MCU/%E7%9C%81%E8%B5%9B/%E7%AC%AC%E5%8D%81%E5%9B%9B%E5%B1%8A%E7%9C%81%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<h1 id="1-温湿度采集界面"><a href="#1-温湿度采集界面" class="headerlink" title="1.温湿度采集界面"></a>1.温湿度采集界面</h1><p>根据题目要求可知：</p><ul><li>光敏电阻控制温湿度采集</li><li>触发一次温度、湿度数据采集功能</li><li>采集功能触发后，数码管立刻切换到温湿度界面，3 秒内不可再重复触发，3 秒后返回“原状态</li></ul><h2 id="1-错误示范"><a href="#1-错误示范" class="headerlink" title="1.错误示范"></a>1.错误示范</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数码管处理函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">seg_proc</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">uchar i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(seg_slow_down) <span class="keyword">return</span>;<span class="comment">//数码管减速</span></span><br><span class="line">        seg_slow_down = <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*信息采集区域*/</span></span><br><span class="line"><span class="keyword">if</span>(AD_flag)</span><br><span class="line">&#123;</span><br><span class="line">AD_flag = <span class="number">0</span>;</span><br><span class="line">Light_Temp = AD_Read(<span class="number">0x41</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//触发是否能成功</span></span><br><span class="line"><span class="keyword">if</span>(Light_Temp &lt; <span class="number">50</span> &amp;&amp; Light_Old &gt; <span class="number">50</span> &amp;&amp; trigger_flag == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">trigger_flag = <span class="number">1</span>;<span class="comment">//新状态</span></span><br><span class="line"><span class="keyword">if</span>(++trigger_count == <span class="number">100</span>)</span><br><span class="line">trigger_count = <span class="number">99</span>;<span class="comment">//触发成功 -&gt;加1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(Trigger_time_3s &gt;= <span class="number">3000</span> &amp;&amp; trigger_flag ==<span class="number">1</span>)</span><br><span class="line">trigger_flag = <span class="number">0</span>;<span class="comment">//返回原状态</span></span><br><span class="line"></span><br><span class="line"> Light_Old = Light_Temp;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 数码管逻辑显示 */</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*  ...............*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-解决方法"><a href="#2-解决方法" class="headerlink" title="2.解决方法"></a>2.解决方法</h2><ul><li>题目中没有明确说明，直接用采集的数字量处理判断逻辑即可</li><li>用标志位分别表示采集温度和采集湿度，这样做可以避免重复触发</li><li>用一个标志位控制采集，从而实现对温湿度界面实时切换，并返回原状态（触发前的界面）</li></ul><h3 id="1-温湿度触发"><a href="#1-温湿度触发" class="headerlink" title="1.温湿度触发"></a>1.温湿度触发</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">idata bit AcquisionTrig;<span class="comment">// 触发采集</span></span><br><span class="line">idata <span class="type">uint8_t</span> RD1LightLast;<span class="comment">// 光敏电阻旧值</span></span><br><span class="line">idata bit TempIsAcquisitioned = <span class="number">1</span>;<span class="comment">// 温度触发</span></span><br><span class="line">idata bit HumiIsAcquisitioned = <span class="number">1</span>;<span class="comment">// 湿度触发</span></span><br><span class="line">idata bit Entry_Data = <span class="number">0</span>;<span class="comment">// 数据录入</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 触发采集  */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">ADC_Proc</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint8_t</span> RD1LightCur = AD_Read(<span class="number">0x01</span>);</span><br><span class="line"><span class="keyword">if</span>(!AcquisionTrig)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(RD1LightLast &gt; <span class="number">80</span> &amp;&amp; RD1LightCur &lt; <span class="number">80</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 触发采集 */</span></span><br><span class="line">AcquisionTrig = <span class="number">1</span>;</span><br><span class="line"><span class="comment">/* 等待温度采集 */</span></span><br><span class="line">TempIsAcquisitioned = <span class="number">0</span>;</span><br><span class="line"><span class="comment">/* 等待湿度采集 */</span></span><br><span class="line">HumiIsAcquisitioned = <span class="number">0</span>;</span><br><span class="line"><span class="comment">/* 等待数据录入 */</span></span><br><span class="line">Entry_Data = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">RD1LightLast = RD1LightCur;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-数据处理"><a href="#2-数据处理" class="headerlink" title="2.数据处理"></a>2.数据处理</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">idata <span class="type">uint8_t</span> Trigger_Num;</span><br><span class="line">idata bit TempCurthanPara;</span><br><span class="line">idata bit HumiTempUp;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">TempHumi_Proc</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">float</span> TempCurrent = <span class="number">0.0f</span>, HumiCurrent = <span class="number">0.0f</span>;</span><br><span class="line">idata bit TempUp = <span class="number">0</span>;</span><br><span class="line"><span class="comment">/* 获取数据 */</span></span><br><span class="line">TempCurrent = Read_temperture();</span><br><span class="line">HumiCurrent = <span class="number">80.0f</span> * (<span class="type">float</span>)(Freq - <span class="number">200</span>) / <span class="number">1800.0f</span> + <span class="number">10.0f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 温度采集处理 */</span></span><br><span class="line"><span class="keyword">if</span>(TempIsAcquisitioned == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="comment">/* 采集温度大于温度参数 */</span></span><br><span class="line">TempCurthanPara = (TempCurrent &gt; Temp_Pram_Proc)? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">TempUp = (Temp_Acqui_Val &lt; TempCurrent) ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">Temp_Acqui_Val = TempCurrent;</span><br><span class="line"><span class="comment">/* 温度采集成功 */</span></span><br><span class="line">TempIsAcquisitioned = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">     <span class="comment">/* 湿度采集处理 */</span></span><br><span class="line"><span class="keyword">if</span>(HumiIsAcquisitioned == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>((Freq &lt; <span class="number">200</span>) || (Freq &gt; <span class="number">2000</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 无效采集 */</span></span><br><span class="line">AcquisionInvalid = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 有效采集 */</span></span><br><span class="line">AcquisionInvalid = <span class="number">0</span>;</span><br><span class="line">Trigger_Num = (++Trigger_Num) % <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(Trigger_Num &gt;= <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">HumiTempUp = ((Humi_Acqui_Val &lt; HumiCurrent) &amp;&amp; TempUp) ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">Humi_Acqui_Val = HumiCurrent;</span><br><span class="line">            <span class="comment">/* 湿度采集成功 */</span></span><br><span class="line">HumiIsAcquisitioned = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">/* 有效采集 */</span></span><br><span class="line"><span class="keyword">if</span>(AcquisionInvalid == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(Entry_Data == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">Read_Rtc(ucRtc_Trig);</span><br><span class="line"><span class="comment">/* 如果大于以前的最大值，那么就更新 */</span></span><br><span class="line">Temp_Max = (Temp_Acqui_Val &gt; Temp_Max) ? Temp_Acqui_Val : Temp_Max;</span><br><span class="line">Humi_Max = (Humi_Acqui_Val &gt; Humi_Max) ? Humi_Acqui_Val : Humi_Max;</span><br><span class="line">Temp_Aver_10x = (Temp_Aver_10x * (Trigger_Num - <span class="number">1</span>) + TempCurrent * <span class="number">10</span>) / Trigger_Num;</span><br><span class="line">Humi_Aver_10x = (Humi_Aver_10x * (Trigger_Num - <span class="number">1</span>) + HumiCurrent * <span class="number">10</span>) / Trigger_Num;</span><br><span class="line">Entry_Data = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Timer1_Isr</span><span class="params">(<span class="type">void</span>)</span> interrupt 3</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(++Freq_Tick_1s == <span class="number">1000</span>)</span><br><span class="line">&#123;</span><br><span class="line">Freq_Tick_1s = <span class="number">0</span>;</span><br><span class="line">Freq = TH0 &lt;&lt; <span class="number">8</span> | TL0;</span><br><span class="line">TH0 = TL0 = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 触发采集 */</span></span><br><span class="line"><span class="keyword">if</span>(AcquisionTrig)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 长按功能无效 */</span></span><br><span class="line">LongPressButton = <span class="number">0</span>;</span><br><span class="line">LongPrs_Tick_2s = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(++Trig_Tick_3s &gt;= <span class="number">3000</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 返回采集之前的界面 */</span></span><br><span class="line">AcquisionTrig = <span class="number">0</span>;</span><br><span class="line">Trig_Tick_3s = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(LongPressButton)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(++LongPrs_Tick_2s &gt;= <span class="number">2000</span>)</span><br><span class="line">&#123;</span><br><span class="line">LongPrs_Tick_2s = <span class="number">2001</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">LongPrs_Tick_2s = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思路：</p><ul><li><p>温度和湿度测量标志位由触发标志位控制</p></li><li><p>一直采集数据（不显示），每次采集完成后判断是否有效（只判断湿度）。湿度是否有效，决定了触发是否有效</p></li><li><p>采集有效，便计算数据，加入数据写入标志位可以防止在有效采集期间数据的频繁更新（题目：显示本次采集到的温度、湿度数据，我也可以理解成有效触发后计算的数据是固定的并不会随时改变知道返回原状态后下一次有效触发到来）</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 蓝桥杯 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第十三届省赛I</title>
      <link href="/2025/02/18/%E8%93%9D%E6%A1%A5%E6%9D%AF/MCU/%E7%9C%81%E8%B5%9B/%E7%AC%AC%E5%8D%81%E4%B8%89%E5%B1%8A%E7%9C%81%E8%B5%9BI/"/>
      <url>/2025/02/18/%E8%93%9D%E6%A1%A5%E6%9D%AF/MCU/%E7%9C%81%E8%B5%9B/%E7%AC%AC%E5%8D%81%E4%B8%89%E5%B1%8A%E7%9C%81%E8%B5%9BI/</url>
      
        <content type="html"><![CDATA[<h1 id="1-三目运算符导致的逻辑问题"><a href="#1-三目运算符导致的逻辑问题" class="headerlink" title="1.三目运算符导致的逻辑问题"></a>1.三目运算符导致的逻辑问题</h1><blockquote><p><code>if与三目操作符区别：if语句判断后不能再进入其内部进行其余逻辑判断，而三目操作符则一次性判断括号所有的条件。</code></p></blockquote><h2 id="1-错误示范"><a href="#1-错误示范" class="headerlink" title="1.错误示范"></a>1.错误示范</h2><p>有时三目运算符的使用要注意上下文的逻辑关系。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Led_Relay_Proc</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// RELAY</span></span><br><span class="line">Relay_Work_Button = (Relay_Ctrl_Mode == <span class="number">0</span> &amp;&amp; Temp_Current_10x &gt; Temp_Pram_Proc * <span class="number">10</span>) ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">Relay_Work_Button = (Relay_Ctrl_Mode == <span class="number">1</span> &amp;&amp; Rtc_Integral_Point == <span class="number">1</span>) ? <span class="number">1</span>: <span class="number">0</span>;</span><br><span class="line">Relay(Relay_Work_Button);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>刚执行完第一句，紧接着不满足(Relay_Ctrl_Mode == 1 &amp;&amp; Rtc_Integral_Point == 1)所以直接清0，一直这么循环下去，因此没有现象。</code></p></blockquote><h2 id="2-解决方法"><a href="#2-解决方法" class="headerlink" title="2.解决方法"></a>2.解决方法</h2><blockquote><p><strong>尽量使用嵌套三目操作符吧！</strong></p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Led_Relay_Proc</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// RELAY</span></span><br><span class="line">Relay_Work_Button = (Relay_Ctrl_Mode == <span class="number">1</span> &amp;&amp; Rtc_Integral_Point == <span class="number">1</span>) ? <span class="number">1</span>: <span class="number">0</span>;</span><br><span class="line">Relay_Work_Button = (Relay_Ctrl_Mode == <span class="number">0</span> &amp;&amp; Temp_Current_10x &gt; Temp_Pram_Proc * <span class="number">10</span>) ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">Relay(Relay_Work_Button);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Led_Relay_Proc</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// RELAY</span></span><br><span class="line">Relay_Work_Button = (Relay_Ctrl_Mode == <span class="number">0</span>) ? </span><br><span class="line">        ((Temp_Current_10x &gt; Temp_Pram_Proc * <span class="number">10</span> == <span class="number">1</span>) ? <span class="number">1</span>: <span class="number">0</span>) : Relay_Work_Button;</span><br><span class="line">Relay_Work_Button = (Relay_Ctrl_Mode == <span class="number">1</span>) ? ((Rtc_Integral_Point == <span class="number">1</span>) ? <span class="number">1</span>: <span class="number">0</span>) : Relay_Work_Button;</span><br><span class="line">Relay(Relay_Work_Button);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 蓝桥杯 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第十二届省赛II</title>
      <link href="/2025/02/16/%E8%93%9D%E6%A1%A5%E6%9D%AF/MCU/%E7%9C%81%E8%B5%9B/%E7%AC%AC%E5%8D%81%E4%BA%8C%E5%B1%8A%E7%9C%81%E8%B5%9BII/"/>
      <url>/2025/02/16/%E8%93%9D%E6%A1%A5%E6%9D%AF/MCU/%E7%9C%81%E8%B5%9B/%E7%AC%AC%E5%8D%81%E4%BA%8C%E5%B1%8A%E7%9C%81%E8%B5%9BII/</url>
      
        <content type="html"><![CDATA[<h1 id="1-变量定义失误"><a href="#1-变量定义失误" class="headerlink" title="1.变量定义失误"></a>1.变量定义失误</h1><h2 id="1-错误示范"><a href="#1-错误示范" class="headerlink" title="1.错误示范"></a>1.错误示范</h2><p>由下图需求可知：</p><p>变量定义失误引发LED亮灭的实时性</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202502111113224.png" alt="微信截图_20250211111256"></p><blockquote><p>错误示范代码烧录后，单片机上电发现LED1只有切换到通道三时才能点亮，如此，LED1亮灭的实时性就无法保证。因为只有切换到通道三，AD处理任务才能采集到通道三的电位器实时电压值。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Voltage</span></span><br><span class="line">idata <span class="type">uint8_t</span> Channel_Num;                                              <span class="comment">// 通道编号</span></span><br><span class="line">idata <span class="type">uint16_t</span> Voltage_Current_100x;                                    <span class="comment">// 实时电压采集</span></span><br><span class="line">idata <span class="type">uint16_t</span> Voltage_Store_100x;                                      <span class="comment">// 电压存储</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Led_Proc</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;   </span><br><span class="line">    <span class="keyword">if</span>(Led_Light_Button)</span><br><span class="line">    &#123;</span><br><span class="line">        ucLed[<span class="number">0</span>] = (Voltage_Store_100x &lt; Voltage_Current_100x) ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">        ucLed[<span class="number">1</span>] = (Freq_Store &lt; Freq_Current) ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">        Led_Display(ucLed);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        Led_Off();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">AD_Proc</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(Channel_Num == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Voltage_Current_100x = AD_Read(<span class="number">0x41</span>) * <span class="number">100</span> / <span class="number">51</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(Channel_Num == <span class="number">3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Voltage_Current_100x = AD_Read(<span class="number">0x43</span>) * <span class="number">100</span> / <span class="number">51</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-解决方法"><a href="#2-解决方法" class="headerlink" title="2.解决方法"></a>2.解决方法</h2><blockquote><p>定义电位器和光敏电阻的实时电压值，在AD处理任务中同时采集，即可保证实时性。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Voltage</span></span><br><span class="line">idata <span class="type">uint8_t</span> Channel_Num;                                              <span class="comment">// 通道编号</span></span><br><span class="line">idata <span class="type">uint16_t</span> Voltage_RB2_Current_100x;                                <span class="comment">// 电位器实时电压采集</span></span><br><span class="line">idata <span class="type">uint16_t</span> Voltage_RB2_Store_100x = <span class="number">500</span>;                            <span class="comment">// 电位器电压存储</span></span><br><span class="line">idata <span class="type">uint16_t</span> Voltage_RD1_Current_100x;                                <span class="comment">// 光敏电阻实时电压采集</span></span><br><span class="line">idata <span class="type">uint16_t</span> Voltage_RD1_Store_100x;                                  <span class="comment">// 光敏电阻电压存储</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Led_Proc</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;   </span><br><span class="line">    <span class="keyword">if</span>(Led_Light_Button)</span><br><span class="line">    &#123;        </span><br><span class="line">        ucLed[<span class="number">0</span>] = (Voltage_RB2_Store_100x &lt; Voltage_RB2_Current_100x) ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">        ucLed[<span class="number">1</span>] = (Freq_Store &lt; Freq_Current) ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">        Led_Display(ucLed);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        Led_Off();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">AD_Proc</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Voltage_RD1_Current_100x = AD_Read(<span class="number">0x43</span>) * <span class="number">100</span> / <span class="number">51</span>;</span><br><span class="line">    Voltage_RB2_Current_100x = AD_Read(<span class="number">0x41</span>) * <span class="number">100</span> / <span class="number">51</span>;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-ADC采集数据细节"><a href="#2-ADC采集数据细节" class="headerlink" title="2.ADC采集数据细节"></a>2.ADC采集数据细节</h1><h2 id="1-错误示范-1"><a href="#1-错误示范-1" class="headerlink" title="1.错误示范"></a>1.错误示范</h2><p>相信看完变量定义失误解决方法后，会发现ADC采集的通道和定义的变量是反过来的，这能对吗？</p><blockquote><p><strong>A/D转换周期总是在发送一个有效的读模式地址到PCF8591设备后开始：</strong></p><p><strong>意思就是说，在开始读后，读的是上一次转换的结果!</strong></p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">AD_Proc</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Voltage_RB2_Current_100x = AD_Read(<span class="number">0x43</span>) * <span class="number">100</span> / <span class="number">51</span>;</span><br><span class="line">    Voltage_RD1_Current_100x = AD_Read(<span class="number">0x41</span>) * <span class="number">100</span> / <span class="number">51</span>;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-解决方法-1"><a href="#2-解决方法-1" class="headerlink" title="2.解决方法"></a>2.解决方法</h2><blockquote><p>调换顺序即可。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">AD_Proc</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Voltage_RD1_Current_100x = AD_Read(<span class="number">0x43</span>) * <span class="number">100</span> / <span class="number">51</span>;</span><br><span class="line">    Voltage_RB2_Current_100x = AD_Read(<span class="number">0x41</span>) * <span class="number">100</span> / <span class="number">51</span>;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-按键长按"><a href="#3-按键长按" class="headerlink" title="3.按键长按"></a>3.按键长按</h1><h2 id="1-解决方法"><a href="#1-解决方法" class="headerlink" title="1.解决方法"></a>1.解决方法</h2><blockquote><p><strong>定时器中断服务函数关于长按逻辑的操作只涉及到长按时间的计时。</strong></p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">idata bit Key_Long_Press_Button;                                        <span class="comment">// KEY 长按开关</span></span><br><span class="line">idata bit Led_Light_Button = <span class="number">1</span>;                                         <span class="comment">// LED 亮灭开关</span></span><br><span class="line">idata <span class="type">uint16_t</span> Led_Light_Timer;                                         <span class="comment">// LED 亮灭计数</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Key_Proc</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;    </span><br><span class="line">    Key_Memb.Key_Val  = Key_Read();</span><br><span class="line">    Key_Memb.Key_Up   = ~Key_Memb.Key_Val &amp; (Key_Memb.Key_Val ^ Key_Memb.Key_Last);</span><br><span class="line">    Key_Memb.Key_Down = Key_Memb.Key_Val &amp; (Key_Memb.Key_Val ^ Key_Memb.Key_Last); </span><br><span class="line">    Key_Memb.Key_Last = Key_Memb.Key_Val;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span>(Key_Memb.Key_Down == <span class="number">7</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 标志长按状态</span></span><br><span class="line">        Key_Long_Press_Button = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(Key_Memb.Key_Up == <span class="number">7</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 长按结束，松手状态</span></span><br><span class="line">        Key_Long_Press_Button = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(Led_Light_Timer &gt;= <span class="number">1000</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">/* 松手后达到长按的时间，视为长按 */</span></span><br><span class="line">            <span class="comment">// 处理相关的逻辑</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Timer1_Isr</span><span class="params">(<span class="type">void</span>)</span> interrupt 3</span><br><span class="line">&#123;   </span><br><span class="line">    <span class="comment">// 如果正在进行长按检测    </span></span><br><span class="line">    <span class="keyword">if</span>(Key_Long_Press_Button)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* 按需求制订长按时间 */</span></span><br><span class="line">        <span class="keyword">if</span>(++Led_Light_Timer &gt;= <span class="number">1000</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Led_Light_Timer = <span class="number">1001</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 没有进行长按检测</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* 复位长按时间，使下一次触发长按条件正常计时 */</span></span><br><span class="line">        Led_Light_Timer = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-LED架构缓存值使用错误"><a href="#4-LED架构缓存值使用错误" class="headerlink" title="4.LED架构缓存值使用错误"></a>4.LED架构缓存值使用错误</h1><h2 id="1-错误示范-2"><a href="#1-错误示范-2" class="headerlink" title="1.错误示范"></a>1.错误示范</h2><p>由于忽略了temp与temp_Last的作用关系，导致按键只能操控LED亮灭开关一次。</p><blockquote><p><strong>正常情况下，只要<code>ucLed</code>任何一个数据发生变化，则<code>temp != temp_Last</code>，此时就可以正确设置相应LED亮灭。</strong></p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* LED 扫描显示 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Led_Display</span><span class="params">(<span class="type">uint8_t</span> *ucLed)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">uint8_t</span> temp = <span class="number">0x00</span>;</span><br><span class="line">    <span class="type">static</span> <span class="type">uint8_t</span> temp_Last = <span class="number">0xff</span>;    </span><br><span class="line"></span><br><span class="line">    temp |= (ucLed[<span class="number">0</span>] &lt;&lt; <span class="number">0</span>) | (ucLed[<span class="number">1</span>] &lt;&lt; <span class="number">1</span>) | (ucLed[<span class="number">2</span>] &lt;&lt; <span class="number">2</span>) | (ucLed[<span class="number">3</span>] &lt;&lt; <span class="number">3</span>) | </span><br><span class="line">    (ucLed[<span class="number">4</span>] &lt;&lt; <span class="number">4</span>) | (ucLed[<span class="number">5</span>] &lt;&lt; <span class="number">5</span>) | (ucLed[<span class="number">6</span>] &lt;&lt; <span class="number">6</span>) | (ucLed[<span class="number">7</span>] &lt;&lt; <span class="number">7</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(temp != temp_Last)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* 正逻辑点亮LED */</span></span><br><span class="line">        P0 = ~temp;</span><br><span class="line">        P2 = P2 &amp; <span class="number">0x1f</span> | <span class="number">0x80</span>;</span><br><span class="line">        P2 = P2 &amp; <span class="number">0x1f</span>;</span><br><span class="line">        temp_Last = temp;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Led_Off</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* LED 关闭 */</span></span><br><span class="line">    P0 = <span class="number">0xff</span>;</span><br><span class="line">    P2 = P2 &amp; <span class="number">0x1f</span> | <span class="number">0x80</span>;</span><br><span class="line">    P2 = P2 &amp; <span class="number">0x1f</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Led_Proc</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;   </span><br><span class="line">    <span class="keyword">if</span>(Led_Light_Button)</span><br><span class="line">    &#123;        </span><br><span class="line">        ucLed[<span class="number">0</span>] = (Voltage_RB2_Store_100x &lt; Voltage_RB2_Current_100x) ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">        ucLed[<span class="number">1</span>] = (Freq_Store &lt; Freq_Current) ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">        ucLed[<span class="number">2</span>] = (Seg_Show_Mode == <span class="number">0</span>) ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">        ucLed[<span class="number">3</span>] = (Seg_Show_Mode == <span class="number">1</span>) ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">        ucLed[<span class="number">4</span>] = (Seg_Show_Mode == <span class="number">2</span>) ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">        Led_Display(ucLed);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        Led_Off();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong><code>Led_Light_Button</code>经过两次取反，对应<code>ucLed</code>数组的数据赋值不变，所以仍然保持<code>Led_Light_Button</code>第一次取反的结果，即<code>temp = temp_Last</code>，因此，两次取反后无法点亮<code>LED</code>。</strong></p></blockquote><h2 id="2-解决方法-2"><a href="#2-解决方法-2" class="headerlink" title="2.解决方法"></a>2.解决方法</h2><blockquote><p><strong>在<code>Led_Off</code>关闭锁存器后，使<code>temp_Last = 0x00</code>。</strong></p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">idata <span class="type">uint8_t</span> temp = <span class="number">0x00</span>;</span><br><span class="line">idata <span class="type">uint8_t</span> temp_Last = <span class="number">0xff</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">/* LED 扫描显示 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Led_Display</span><span class="params">(<span class="type">uint8_t</span> *ucLed)</span></span><br><span class="line">&#123;</span><br><span class="line">    temp = <span class="number">0x00</span>;<span class="comment">// 不可少</span></span><br><span class="line">    temp |= (ucLed[<span class="number">0</span>] &lt;&lt; <span class="number">0</span>) | (ucLed[<span class="number">1</span>] &lt;&lt; <span class="number">1</span>) | (ucLed[<span class="number">2</span>] &lt;&lt; <span class="number">2</span>) | (ucLed[<span class="number">3</span>] &lt;&lt; <span class="number">3</span>) | </span><br><span class="line">    (ucLed[<span class="number">4</span>] &lt;&lt; <span class="number">4</span>) | (ucLed[<span class="number">5</span>] &lt;&lt; <span class="number">5</span>) | (ucLed[<span class="number">6</span>] &lt;&lt; <span class="number">6</span>) | (ucLed[<span class="number">7</span>] &lt;&lt; <span class="number">7</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(temp != temp_Last)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* 正逻辑点亮LED */</span></span><br><span class="line">        P0 = ~temp;</span><br><span class="line">        P2 = P2 &amp; <span class="number">0x1f</span> | <span class="number">0x80</span>;</span><br><span class="line">        P2 = P2 &amp; <span class="number">0x1f</span>;</span><br><span class="line">        temp_Last = temp;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Led_Off</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* LED 关闭 */</span></span><br><span class="line">    P0 = <span class="number">0xff</span>;</span><br><span class="line">    P2 = P2 &amp; <span class="number">0x1f</span> | <span class="number">0x80</span>;</span><br><span class="line">    P2 = P2 &amp; <span class="number">0x1f</span>;</span><br><span class="line">    temp_Last = <span class="number">0x00</span>;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Led_Proc</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;   </span><br><span class="line">    <span class="keyword">if</span>(Led_Light_Button)</span><br><span class="line">    &#123;        </span><br><span class="line">        ucLed[<span class="number">0</span>] = (Voltage_RB2_Store_100x &lt; Voltage_RB2_Current_100x) ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">        ucLed[<span class="number">1</span>] = (Freq_Store &lt; Freq_Current) ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">        ucLed[<span class="number">2</span>] = (Seg_Show_Mode == <span class="number">0</span>) ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">        ucLed[<span class="number">3</span>] = (Seg_Show_Mode == <span class="number">1</span>) ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">        ucLed[<span class="number">4</span>] = (Seg_Show_Mode == <span class="number">2</span>) ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">        Led_Display(ucLed);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        Led_Off();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>temp = 0x00不可忽略：temp是|上八个LED的状态，下次temp重新|上八个LED的状态前必须将八个LED全初始化熄灭，这样就不会出现界面切换后有些灯仍然亮（上次状态没清除）。</code></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 蓝桥杯 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第八届省赛</title>
      <link href="/2025/02/12/%E8%93%9D%E6%A1%A5%E6%9D%AF/MCU/%E7%9C%81%E8%B5%9B/%E7%AC%AC%E5%85%AB%E5%B1%8A%E7%9C%81%E8%B5%9B/"/>
      <url>/2025/02/12/%E8%93%9D%E6%A1%A5%E6%9D%AF/MCU/%E7%9C%81%E8%B5%9B/%E7%AC%AC%E5%85%AB%E5%B1%8A%E7%9C%81%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<h1 id="1-闹钟提示功能逻辑处理"><a href="#1-闹钟提示功能逻辑处理" class="headerlink" title="1.闹钟提示功能逻辑处理"></a>1.闹钟提示功能逻辑处理</h1><p>题目逻辑如下：</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202502151354334.png" alt="微信截图_20250215135208"></p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202502151407557.png" alt="image-20250215140740517"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Warning</span></span><br><span class="line">idata bit Alarm_Warning_button = <span class="number">0</span>;         <span class="comment">// 报警开关</span></span><br><span class="line">idata bit Alarm_Warning_Flag = <span class="number">0</span>;           <span class="comment">// 报警计数标志位</span></span><br><span class="line">idata <span class="type">uint32_t</span> Alarm_5000ms = <span class="number">0</span>;            <span class="comment">// 报警计数 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// flashing</span></span><br><span class="line">idata bit Seg_Setting_Button = <span class="number">0</span>;               <span class="comment">// SEG设置开关</span></span><br><span class="line">idata bit Seg_Light_button = <span class="number">0</span>;             <span class="comment">// SEG闪烁开关</span></span><br><span class="line">idata <span class="type">uint32_t</span> Seg_Timer_500ms = <span class="number">0</span>;         <span class="comment">// SEG闪烁计数</span></span><br><span class="line">idata bit Led_Light_button = <span class="number">0</span>;             <span class="comment">// LED闪烁开关</span></span><br><span class="line">idata <span class="type">uint32_t</span> Led_Timer_200ms = <span class="number">0</span>;         <span class="comment">// LED闪烁计数</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Led_Proc</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;   </span><br><span class="line">    ucLed[<span class="number">0</span>] = Led_Light_button ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    Led_Display(ucLed);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Key_Proc</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Key_Members.Key_Val = Key_Read();</span><br><span class="line">    Key_Members.Key_Up = ~Key_Members.Key_Val &amp; (Key_Members.Key_Val ^ Key_Members.Key_Old);</span><br><span class="line">    Key_Members.Key_Down = Key_Members.Key_Val &amp; (Key_Members.Key_Val ^ Key_Members.Key_Old);</span><br><span class="line">    Key_Members.Key_Old = Key_Members.Key_Val;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(Alarm_Warning_button)</span><br><span class="line">    &#123;</span><br><span class="line">        Alarm_Warning_button = (Key_Members.Key_Down) ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Time_Proc</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 始终用显示变量读取DS1302的时钟值 */</span></span><br><span class="line">    Read_Rtc(ucRtc);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 闹钟触发 */</span></span><br><span class="line">    <span class="keyword">if</span> ((ucRtc[<span class="number">0</span>] == ucAlarm[<span class="number">0</span>]) &amp;&amp; (ucRtc[<span class="number">1</span>] == ucAlarm[<span class="number">1</span>]) &amp;&amp; (ucRtc[<span class="number">2</span>] == ucAlarm[<span class="number">2</span>]))</span><br><span class="line">    &#123;</span><br><span class="line">        Alarm_Warning_button = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Timer1_Isr</span><span class="params">(<span class="type">void</span>)</span> interrupt 3</span><br><span class="line">&#123;       </span><br><span class="line">    <span class="comment">/* LED 闪烁 */</span></span><br><span class="line">    <span class="keyword">if</span>(Alarm_Warning_button == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 处于报警状态</span></span><br><span class="line">        <span class="keyword">if</span>(++Led_Timer_200ms == <span class="number">200</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Led_Light_button ^= <span class="number">1</span>;</span><br><span class="line">            Led_Timer_200ms = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(++Alarm_5000ms == <span class="number">5000</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Alarm_5000ms = <span class="number">0</span>;</span><br><span class="line">            Alarm_Warning_button = <span class="number">0</span>;</span><br><span class="line">            Led_Timer_200ms = <span class="number">0</span>;</span><br><span class="line">            Led_Light_button = <span class="number">0</span>;   </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line"><span class="comment">// 有关LED闪烁的参数都复位</span></span><br><span class="line">        Alarm_5000ms = <span class="number">0</span>;</span><br><span class="line">        Led_Timer_200ms = <span class="number">0</span>;</span><br><span class="line">        Led_Light_button = <span class="number">0</span>;        </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-闪烁逻辑处理"><a href="#2-闪烁逻辑处理" class="headerlink" title="2.闪烁逻辑处理"></a>2.闪烁逻辑处理</h1><h2 id="1-LED"><a href="#1-LED" class="headerlink" title="1.LED"></a>1.LED</h2><blockquote><p><strong>闪烁开关变量（标志位）：Led_Light_button</strong></p><p><strong>计数变量：Led_Timer_200ms</strong></p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">idata bit Led_Light_button = <span class="number">0</span>;             <span class="comment">// LED闪烁开关</span></span><br><span class="line">idata <span class="type">uint32_t</span> Led_Timer_200ms = <span class="number">0</span>;         <span class="comment">// LED闪烁计数</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Led_Proc</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;   </span><br><span class="line">    ucLed[<span class="number">0</span>] = Led_Light_button ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    Led_Display(ucLed);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Timer1_Isr</span><span class="params">(<span class="type">void</span>)</span> interrupt 3</span><br><span class="line">&#123;   </span><br><span class="line">    <span class="comment">/* LED 闪烁 */</span></span><br><span class="line">    <span class="keyword">if</span>(Alarm_Warning_button == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 处于报警状态</span></span><br><span class="line">        <span class="keyword">if</span>(++Led_Timer_200ms == <span class="number">200</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Led_Light_button ^= <span class="number">1</span>;</span><br><span class="line">            Led_Timer_200ms = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(++Alarm_5000ms == <span class="number">5000</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Alarm_5000ms = <span class="number">0</span>;</span><br><span class="line">            Alarm_Warning_button = <span class="number">0</span>;</span><br><span class="line">            Led_Timer_200ms = <span class="number">0</span>;</span><br><span class="line">            Led_Light_button = <span class="number">0</span>;   </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line"><span class="comment">// 有关LED闪烁的参数都复位</span></span><br><span class="line">        Alarm_5000ms = <span class="number">0</span>;</span><br><span class="line">        Led_Timer_200ms = <span class="number">0</span>;</span><br><span class="line">        Led_Light_button = <span class="number">0</span>;        </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>LED闪烁只需两个变量，而闪烁的条件是由其他的变量（逻辑）控制！</strong></p></blockquote><h2 id="2-SEG"><a href="#2-SEG" class="headerlink" title="2.SEG"></a>2.SEG</h2><blockquote><p><strong>界面设置开关变量：<code>Seg_Setting_Button</code></strong></p><p><strong>闪烁开关变量（标志位）：<code>Seg_Light_button</code></strong></p><p><strong>计数变量：<code>Seg_Timer_500ms</code></strong></p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">idata bit Seg_Setting_Button = <span class="number">0</span>;               <span class="comment">// SEG界面设置开关</span></span><br><span class="line">idata bit Seg_Light_button = <span class="number">0</span>;             <span class="comment">// SEG闪烁开关</span></span><br><span class="line">idata <span class="type">uint32_t</span> Seg_Timer_500ms = <span class="number">0</span>;         <span class="comment">// SEG闪烁计数</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Led_Proc</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1ms 读取一次 设置模式有效 */</span></span><br><span class="line">    Seg_Setting_Button = (Seg_Show_Mode == <span class="number">1</span> || Seg_Show_Mode == <span class="number">2</span>) ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    Led_Display(ucLed);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Timer1_Isr</span><span class="params">(<span class="type">void</span>)</span> interrupt 3</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 系统计时 */</span></span><br><span class="line">    uwTick++;</span><br><span class="line">    <span class="comment">/* 更新数码管扫描位置 */</span></span><br><span class="line">    Seg_Members.Seg_Pos = (++Seg_Members.Seg_Pos) % <span class="number">8</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(Seg_Members.Seg_Buf[Seg_Members.Seg_Pos] &gt; <span class="number">20</span>)</span><br><span class="line">        Seg_Display(Seg_Members.Seg_Pos, Seg_Members.Seg_Buf[Seg_Members.Seg_Pos] - <span class="string">&#x27;,&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        Seg_Display(Seg_Members.Seg_Pos, Seg_Members.Seg_Buf[Seg_Members.Seg_Pos], <span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* SEG 闪烁 */</span></span><br><span class="line">    <span class="keyword">if</span>(Seg_Setting_Button == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(++Seg_Timer_500ms == <span class="number">500</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Seg_Light_button ^= <span class="number">1</span>;</span><br><span class="line">            Seg_Timer_500ms = <span class="number">0</span>;</span><br><span class="line">        &#125;       </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        Seg_Timer_500ms = <span class="number">0</span>;</span><br><span class="line">        Seg_Light_button = <span class="number">1</span>;        </span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>与LED闪烁不同，SEG闪烁需要先确定是那些界面下以及那些数据需要闪烁。</strong></p></blockquote><p>以后<code>Seg_Setting_Button</code>这一类的变亮都可以放到<code>Led_Proc</code>里。</p>]]></content>
      
      
      <categories>
          
          <category> 蓝桥杯 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第十一届省赛I</title>
      <link href="/2025/02/11/%E8%93%9D%E6%A1%A5%E6%9D%AF/MCU/%E7%9C%81%E8%B5%9B/%E7%AC%AC%E5%8D%81%E4%B8%80%E5%B1%8A%E7%9C%81%E8%B5%9BI/"/>
      <url>/2025/02/11/%E8%93%9D%E6%A1%A5%E6%9D%AF/MCU/%E7%9C%81%E8%B5%9B/%E7%AC%AC%E5%8D%81%E4%B8%80%E5%B1%8A%E7%9C%81%E8%B5%9BI/</url>
      
        <content type="html"><![CDATA[<h1 id="1-数码管显示"><a href="#1-数码管显示" class="headerlink" title="1.数码管显示"></a>1.数码管显示</h1><h2 id="1-错误示范："><a href="#1-错误示范：" class="headerlink" title="1.错误示范："></a>1.错误示范：</h2><p>由于读取变量的错误导致，参数界面显示之前，参数值被修改为0，从而误认为EEPROM读写错误（实际上正确）。</p><blockquote><p>在<strong>参数设置界面</strong>下，设置值在显示值（处理值）的基础上修改，所以一般都是将<strong>显示值（处理值）</strong>赋值给<strong>设置值</strong>。</p><p>在<strong>显示页面（可无）或其他不相关页面</strong>下，设置值需要生效， 所以一般都是将<strong>设置值</strong>赋值给显示值（处理值）。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Key_Proc</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;    </span><br><span class="line">    Key_Memb.Key_Val  = Key_Read();</span><br><span class="line">    Key_Memb.Key_Up   = ~Key_Memb.Key_Val &amp; (Key_Memb.Key_Val ^ Key_Memb.Key_Last);</span><br><span class="line">    Key_Memb.Key_Down = Key_Memb.Key_Val &amp; (Key_Memb.Key_Val ^ Key_Memb.Key_Last); </span><br><span class="line">    Key_Memb.Key_Last = Key_Memb.Key_Val;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">switch</span> (Key_Memb.Key_Down)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">12</span>:                        </span><br><span class="line">            <span class="keyword">if</span>(Seg_Show_Mode == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Voltage_Digital_Ctrl = Voltage_Digital_Proc;</span><br><span class="line">            &#125;                     </span><br><span class="line">            <span class="keyword">if</span>(Seg_Show_Mode == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Voltage_Digital_Proc = Voltage_Digital_Ctrl;</span><br><span class="line">                EEPROM_Write(&amp;Voltage_Digital_Proc, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">                EEPROM_Write(&amp;EEPROM_Lock, <span class="number">8</span>, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            Seg_Show_Mode = (++Seg_Show_Mode) % <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">break</span>;      </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;   </span><br><span class="line">    <span class="type">uint8_t</span> EEPROM_Temp;</span><br><span class="line">    EEPROM_Read(&amp;EEPROM_Temp, <span class="number">8</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(EEPROM_Temp == EEPROM_Lock)</span><br><span class="line">    &#123;</span><br><span class="line">        EEPROM_Read(&amp;Voltage_Digital_Ctrl, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-解决方法："><a href="#2-解决方法：" class="headerlink" title="2.解决方法："></a>2.解决方法：</h2><blockquote><p><code>界面切换：</code>先切换界面，再判断。</p><p><code>EEPROM读写:</code> <code>EEPROM_Read</code>函数的接受值应该是显示值（处理值），这样在界面切换时 <strong>显示值（处理值）</strong>赋值给<strong>设置值</strong>，<strong>才使得参数界面下设置值不为零</strong>。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Key_Proc</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;    </span><br><span class="line">    Key_Memb.Key_Val  = Key_Read();</span><br><span class="line">    Key_Memb.Key_Up   = ~Key_Memb.Key_Val &amp; (Key_Memb.Key_Val ^ Key_Memb.Key_Last);</span><br><span class="line">    Key_Memb.Key_Down = Key_Memb.Key_Val &amp; (Key_Memb.Key_Val ^ Key_Memb.Key_Last); </span><br><span class="line">    Key_Memb.Key_Last = Key_Memb.Key_Val;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">switch</span> (Key_Memb.Key_Down)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">            Seg_Show_Mode = (++Seg_Show_Mode) % <span class="number">3</span>;            </span><br><span class="line">            <span class="keyword">if</span>(Seg_Show_Mode == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Voltage_Digital_Ctrl = Voltage_Digital_Proc;</span><br><span class="line">            &#125;                     </span><br><span class="line">            <span class="keyword">if</span>(Seg_Show_Mode == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Voltage_Digital_Proc = Voltage_Digital_Ctrl;</span><br><span class="line">                EEPROM_Write(&amp;Voltage_Digital_Proc, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">                EEPROM_Write(&amp;EEPROM_Lock, <span class="number">8</span>, <span class="number">1</span>);</span><br><span class="line">            &#125;            </span><br><span class="line">            <span class="keyword">break</span>;           </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;   </span><br><span class="line">    <span class="type">uint8_t</span> EEPROM_Temp;</span><br><span class="line">    EEPROM_Read(&amp;EEPROM_Temp, <span class="number">8</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(EEPROM_Temp == EEPROM_Lock)</span><br><span class="line">    &#123;</span><br><span class="line">        EEPROM_Read(&amp;Voltage_Digital_Proc, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-自增运算符"><a href="#2-自增运算符" class="headerlink" title="2.自增运算符"></a>2.自增运算符</h1><h2 id="1-错误示范"><a href="#1-错误示范" class="headerlink" title="1.错误示范"></a>1.错误示范</h2><p>使用前置++的前提下，错误地使用了后置++。</p><blockquote><p><strong><code>Key_Error_Count++</code></strong>：这是后缀自增运算符。它先返回当前值，然后将变量自增 1。例如，若 <code>Key_Error_Count</code> 为 5，<code>Key_Error_Count++</code> 会返回 5，然后 <code>Key_Error_Count</code> 变为 6。</p><p><strong><code>++Key_Error_Count</code></strong>：这是前缀自增运算符。它先将变量自增 1，然后返回自增后的值。例如，若 <code>Key_Error_Count</code> 为 5，<code>++Key_Error_Count</code> 会先将 <code>Key_Error_Count</code> 变为 6，然后返回 6。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Key_Error_Count = (Key_Memb.Key_Down != <span class="number">0</span>) ? Key_Error_Count++ : Key_Error_Count;</span><br></pre></td></tr></table></figure><blockquote><p>在这个三元运算符中，如果 <code>Key_Memb.Key_Down != 0</code> 为真，<code>Key_Error_Count++</code> 的结果会是递增前的 <code>Key_Error_Count</code>（也就是它没有被递增），然后将这个值赋回 <code>Key_Error_Count</code>，这样递增操作会失效。</p></blockquote><h2 id="2-解决方法"><a href="#2-解决方法" class="headerlink" title="2.解决方法"></a>2.解决方法</h2><blockquote><p>一定要自己脑动模拟一遍前置++与后置++的值变化区别。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Key_Error_Count = (Key_Memb.Key_Down != <span class="number">0</span>) ? ++Key_Error_Count : Key_Error_Count;</span><br></pre></td></tr></table></figure><h1 id="3-任务处理函数时间片设置"><a href="#3-任务处理函数时间片设置" class="headerlink" title="3.任务处理函数时间片设置"></a>3.任务处理函数时间片设置</h1><h2 id="1-解决方法"><a href="#1-解决方法" class="headerlink" title="1.解决方法"></a>1.解决方法</h2><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202502101430475.png" alt="微信截图_20250210142303"></p><p>这些参数决定了相应任务时间片设置。</p><h1 id="4-变量类型"><a href="#4-变量类型" class="headerlink" title="4.变量类型"></a>4.变量类型</h1><h2 id="1-解决办法"><a href="#1-解决办法" class="headerlink" title="1.解决办法"></a>1.解决办法</h2><blockquote><p><strong>意识到数码管显示不对，赶紧去查看变量类型定义对否。</strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 蓝桥杯 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第九届省赛</title>
      <link href="/2025/02/07/%E8%93%9D%E6%A1%A5%E6%9D%AF/MCU/%E7%9C%81%E8%B5%9B/%E7%AC%AC%E4%B9%9D%E5%B1%8A%E7%9C%81%E8%B5%9B/"/>
      <url>/2025/02/07/%E8%93%9D%E6%A1%A5%E6%9D%AF/MCU/%E7%9C%81%E8%B5%9B/%E7%AC%AC%E4%B9%9D%E5%B1%8A%E7%9C%81%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<h1 id="1-按键制约"><a href="#1-按键制约" class="headerlink" title="1.按键制约"></a>1.按键制约</h1><p>S6按下后要进入<strong>设置界面</strong>（主）；S6可切换<strong>运行模式</strong>和<strong>流转间隔</strong>（子），故需要<code>Seg_Show_Mode</code>控制主需求、<code>Setting_Mode</code>控制子需求。因此，复杂的界面形式可能会使界面制约按键的操作！</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202502062228809.png" alt="微信截图_20250206220611"></p><blockquote><p>用<strong>switch</strong>语句制约按键操作：<code>case 1</code>，没有S6按键按下的制约条件，则会导致进入<strong>设置界面</strong>时，<code>Setting_Mode</code> 为 0，则走 <code>else</code> 值为 1 ，后又进入 <code>case 1</code> ，<code>Setting_Mode</code> 为 1，则走 <code>if</code> 值为 0，一直重复循环，数码管几乎都是熄灭状态，只显示一瞬间设置界面参数。</p></blockquote><h2 id="1-错误示范："><a href="#1-错误示范：" class="headerlink" title="1.错误示范："></a>1.错误示范：</h2><blockquote><p>在<code>switch (Seg_Show_Mode)</code>语句中的每一个<code>case</code>语句都加上按键制约。可以理解为，某按键在一个界面切换到另一界面时，其操作”无法保留“！</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (Seg_Show_Mode)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 待机界面</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">if</span> (Key_Memb.Key_Down == <span class="number">6</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Seg_Show_Mode = <span class="number">1</span>;      <span class="comment">// 切至间隔设置界面</span></span><br><span class="line">        Setting_Mode = <span class="number">0</span>;<span class="comment">// 保证进入设置界面后会进入运行模式界面                </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="comment">// 流转间隔设置界面</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">if</span> (Setting_Mode)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/*** 流转间隔 ***/</span></span><br><span class="line">        <span class="comment">// 完成设置 </span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 保存参数 </span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 退出</span></span><br><span class="line">        Setting_Mode = <span class="number">0</span>;</span><br><span class="line">        Seg_Show_Mode = <span class="number">0</span>;  <span class="comment">// 切回待机界面</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*** 运行编号  ***/</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        Setting_Mode = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-解决方法："><a href="#2-解决方法：" class="headerlink" title="2.解决方法："></a>2.解决方法：</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (Seg_Show_Mode)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 待机界面</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">if</span> (Key_Memb.Key_Down == <span class="number">6</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Seg_Show_Mode = <span class="number">1</span>; <span class="comment">// 切至间隔设置界面</span></span><br><span class="line">        Setting_Mode = <span class="number">0</span>;  <span class="comment">// 保证进入设置界面后会进入运行模式界面</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="comment">// 流转间隔设置界面</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">switch</span> (Key_Memb.Key_Down) <span class="comment">// 加入S6按下操作</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">        <span class="keyword">if</span> (Setting_Mode)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">/*** 流转间隔 ***/</span></span><br><span class="line">            <span class="comment">// 完成设置</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 保存参数</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 退出</span></span><br><span class="line">            Setting_Mode = <span class="number">0</span>;</span><br><span class="line">            Seg_Show_Mode = <span class="number">0</span>; <span class="comment">// 切回待机界面</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*** 运行编号  ***/</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            Setting_Mode = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-EEPROM存储"><a href="#2-EEPROM存储" class="headerlink" title="2.EEPROM存储"></a>2.EEPROM存储</h1><p>数据写入EEPROM后，单片机上电将EEPROM数据读取出来可能会使数码管的某一位数据发生错误。</p><blockquote><p><strong>比如，我将400的百位4写入EEPROM，之后读取其百位 * 100 显示到数码管上并不是400。</strong></p></blockquote><h2 id="1-错误示范：-1"><a href="#1-错误示范：-1" class="headerlink" title="1.错误示范："></a>1.错误示范：</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">pdata <span class="type">uint8_t</span> EEPROM_DataBuf[<span class="number">4</span>]; <span class="comment">// EEPROM 缓冲区</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Key_Proc</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">switch</span> (Seg_Show_Mode)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 流转间隔设置界面</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">switch</span> (Key_Memb.Key_Down)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">            <span class="keyword">if</span> (Setting_Mode)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">/*** 流转间隔 ***/</span></span><br><span class="line">                <span class="comment">// 完成设置</span></span><br><span class="line">                <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 设置参数</span></span><br><span class="line">                    Led_RunTimeBuf_Proc[i] = Led_RunTimeBuf_Ctrl[i];</span><br><span class="line">                    EEPROM_DataBuf[i] = Led_RunTimeBuf_Proc[i] / <span class="number">100</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 保存参数</span></span><br><span class="line">                EEPROM_Write(EEPROM_DataBuf, <span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 退出</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/*** 运行编号  ***/</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                Setting_Mode = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> i;</span><br><span class="line">    <span class="comment">/* EEPROM 正常 */</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        EEPROM_Read(EEPROM_DataBuf, <span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">        Led_RunTimeBuf_Proc[i] = EEPROM_DataBuf[i] * <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-解决方法：-1"><a href="#2-解决方法：-1" class="headerlink" title="2.解决方法："></a>2.解决方法：</h2><blockquote><p><strong>定义一个校验值变量（值随便定）</strong>，写入数据时同样将这个校验值写入EEPROM中（二者写入的起始地址不能相同），定义缓存值将校验值读取出来。若二者一致，说明EEPROM写入的数据能正确地读出来。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">pdata <span class="type">uint8_t</span> EEPROM_DataBuf[<span class="number">4</span>]; <span class="comment">// EEPROM 缓冲区</span></span><br><span class="line">idata <span class="type">uint8_t</span> EEPROM_Lock = <span class="number">6</span>;   <span class="comment">// EEPROM 校验值</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Key_Proc</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">switch</span> (Seg_Show_Mode)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 流转间隔设置界面</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">switch</span> (Key_Memb.Key_Down)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">            <span class="keyword">if</span> (Setting_Mode)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">/*** 流转间隔 ***/</span></span><br><span class="line">                <span class="comment">// 完成设置</span></span><br><span class="line">                <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 设置参数</span></span><br><span class="line">                    Led_RunTimeBuf_Proc[i] = Led_RunTimeBuf_Ctrl[i];</span><br><span class="line">                    EEPROM_DataBuf[i] = Led_RunTimeBuf_Proc[i] / <span class="number">100</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 保存参数</span></span><br><span class="line">                EEPROM_Write(EEPROM_DataBuf, <span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">                </span><br><span class="line">                <span class="comment">//</span></span><br><span class="line">                EEPROM_Write(&amp;EEPROM_Lock, <span class="number">8</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 退出</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/*** 运行编号  ***/</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                Setting_Mode = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> i;</span><br><span class="line">    </span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> EEPROM_Temp;</span><br><span class="line">    EEPROM_Read(&amp;EEPROM_Temp, <span class="number">8</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 写入的校验值与读出的值一致 */</span></span><br><span class="line">    <span class="keyword">if</span> (EEPROM_Lock == EEPROM_Temp)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* EEPROM 正常 */</span></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            EEPROM_Read(EEPROM_DataBuf, <span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">            Led_RunTimeBuf_Proc[i] = EEPROM_DataBuf[i] * <span class="number">100</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-流水灯逻辑"><a href="#3-流水灯逻辑" class="headerlink" title="3.流水灯逻辑"></a>3.流水灯逻辑</h1><p>没有正确梳理思路，由于LED底层的原因，此流水灯架构确实比普通的要麻烦。</p><blockquote><p><code>Led_Pos：</code>某一模式下的流水灯传递变量。</p><p><code>Led_Tick：</code>记录灯的流转间隔。</p><p>当某一个模式的某一只LED灯的间隔时间<strong>大于等于</strong>所设置的流转间隔时，<code>Led_Pos</code>才能<strong>递增</strong>！</p><p>如果 变成 <code>ucLed[3 + i]、 ucLed[4 - i]</code> ：</p><ul><li><code>当i = 0，ucLed[3] = ucLed[4] 会有为0 的时刻。</code></li><li><code>当i = 1，ucLed[4] = ucLed[3] 不光会有为0 的时刻，同样重复赋值了 ucLed[3] 和 ucLed[4] 。</code></li></ul><p>因此必须是 <code>ucLed[3 - i] ucLed[4 + i]</code>。</p></blockquote><h2 id="1-错误示范：-2"><a href="#1-错误示范：-2" class="headerlink" title="1.错误示范："></a>1.错误示范：</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">idata bit Led_Running_Button; <span class="comment">// LED 流转开关</span></span><br><span class="line">idata <span class="type">uint16_t</span> Led_Tick;      <span class="comment">// LED 流转间隔计数</span></span><br><span class="line">idata <span class="type">uint8_t</span> Led_Pos;        <span class="comment">// LED 计数器</span></span><br><span class="line">idata <span class="type">uint8_t</span> Running_Mode_Real; <span class="comment">// 实时记录模式编号</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Led_Proc</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint8_t</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (Led_Running_Button)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">switch</span> (Running_Mode_Real)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                ucLed[i] = (i == Led_Pos) ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Running_Mode_Real += <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                ucLed[<span class="number">7</span> - i] = (i == Led_Pos) ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Running_Mode_Real += <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                ucLed[i] = (i == Led_Pos) ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">                ucLed[<span class="number">7</span> - i] = (i == Led_Pos) ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Running_Mode_Real += <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                ucLed[<span class="number">3</span> + i] = (i == Led_Pos) ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">                ucLed[<span class="number">4</span> - i] = (i == Led_Pos) ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Running_Mode_Real = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Timer1_Isr</span><span class="params">(<span class="type">void</span>)</span> interrupt 3</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (Led_Running_Button)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* LED 计数变量超过设置的流转间隔  */</span></span><br><span class="line">        <span class="keyword">if</span> (++Led_Tick &gt;= Led_RunTimeBuf_Proc[Running_Mode_Real])</span><br><span class="line">        &#123;</span><br><span class="line">            Led_Tick = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (Running_Mode_Real == <span class="number">0</span> || Running_Mode_Real == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Led_Pos = (++Led_Pos) % <span class="number">8</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                Led_Pos = (++Led_Pos) % <span class="number">4</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* LED 不流转则无需计数 */</span></span><br><span class="line">        Led_Tick = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-解决方法：-2"><a href="#2-解决方法：-2" class="headerlink" title="2.解决方法："></a>2.解决方法：</h2><blockquote><ol><li><code>Led_Proc</code>函数：流水灯框架必须要搭建出。</li><li><code>Timer1_Isr</code>函数：通过<code>Led_Tick</code>每毫秒计数。<ul><li><code>Running_Mode_Real</code>随着四个模式一直循环往复。</li><li><code>Led_Pos</code>要超过流转间隔递增。</li></ul></li></ol></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">idata bit Led_Running_Button; <span class="comment">// LED 流转开关</span></span><br><span class="line">idata <span class="type">uint16_t</span> Led_Tick;      <span class="comment">// LED 流转间隔计数</span></span><br><span class="line">idata <span class="type">uint8_t</span> Led_Pos;        <span class="comment">// LED 计数器</span></span><br><span class="line">idata <span class="type">uint8_t</span> Running_Mode_Real; <span class="comment">// 实时记录模式编号</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Led_Proc</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint8_t</span> i = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(Led_Running_Button)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">switch</span> (Running_Mode_Real)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    ucLed[i] = (i == Led_Pos)? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">                &#125;           </span><br><span class="line">                <span class="keyword">break</span>;                </span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    ucLed[<span class="number">7</span> - i] = (i == Led_Pos)? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">                &#125;           </span><br><span class="line">                <span class="keyword">break</span>;        </span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    ucLed[i] = (i == Led_Pos)? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">                    ucLed[<span class="number">7</span> - i] = (i == Led_Pos)? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//Running_Mode_Real += 1;                </span></span><br><span class="line">                <span class="keyword">break</span>;        </span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">/*  */</span></span><br><span class="line">                    ucLed[<span class="number">3</span> - i] = (i == Led_Pos)? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">                    ucLed[<span class="number">4</span> + i] = (i == Led_Pos)? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">                &#125;                </span><br><span class="line">                <span class="keyword">break</span>;        </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Timer1_Isr</span><span class="params">(<span class="type">void</span>)</span> interrupt 3</span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">if</span>(Led_Running_Button)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* LED 计数变量超过设置的流转间隔  */</span></span><br><span class="line">        <span class="keyword">if</span>(++Led_Tick &gt;= Led_RunTimeBuf_Proc[Running_Mode_Real])</span><br><span class="line">        &#123;</span><br><span class="line">            Led_Tick = <span class="number">0</span>;          </span><br><span class="line">            <span class="keyword">if</span>(Running_Mode_Real == <span class="number">0</span> || Running_Mode_Real == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(++Led_Pos == <span class="number">8</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    Led_Pos = <span class="number">0</span>;</span><br><span class="line">                    Running_Mode_Real++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(Running_Mode_Real == <span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(++Led_Pos == <span class="number">4</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    Led_Pos = <span class="number">0</span>;</span><br><span class="line">                    Running_Mode_Real++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;                </span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(++Led_Pos == <span class="number">4</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    Led_Pos = <span class="number">0</span>;</span><br><span class="line">                    Running_Mode_Real = <span class="number">0</span>;</span><br><span class="line">                &#125;                </span><br><span class="line">            &#125;     </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* LED 不流转则无需计数 */</span></span><br><span class="line">        Led_Tick = <span class="number">0</span>;     </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-闪烁"><a href="#4-闪烁" class="headerlink" title="4.闪烁"></a>4.闪烁</h1><h2 id="1-错误示范"><a href="#1-错误示范" class="headerlink" title="1.错误示范"></a>1.错误示范</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Timer1_Isr</span><span class="params">(<span class="type">void</span>)</span> interrupt 3</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 计数有效</span></span><br><span class="line">    <span class="keyword">if</span> (++Led_Time_400ms == <span class="number">400</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Led_Light_Button ^= <span class="number">1</span>;</span><br><span class="line">        Led_Time_400ms = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-解决方法"><a href="#2-解决方法" class="headerlink" title="2.解决方法"></a>2.解决方法</h2><blockquote><p>注意闪烁前提条件：明确每个闪烁计数器和闪烁开关都能找到其对应的界面。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Timer1_Isr</span><span class="params">(<span class="type">void</span>)</span> interrupt 3</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 处于设置模式内 */</span></span><br><span class="line">    <span class="keyword">if</span> (Seg_Show_Mode == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 计数有效</span></span><br><span class="line">        <span class="keyword">if</span> (++Led_Time_400ms == <span class="number">400</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Led_Light_Button ^= <span class="number">1</span>;</span><br><span class="line">            Led_Time_400ms = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 处于非设置模式内 */</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 计数无效</span></span><br><span class="line">        Led_Light_Button = <span class="number">0</span>;</span><br><span class="line">        Led_Time_400ms = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-PWM调制"><a href="#5-PWM调制" class="headerlink" title="5.PWM调制"></a>5.PWM调制</h1><h2 id="1-解决方法"><a href="#1-解决方法" class="headerlink" title="1.解决方法"></a>1.解决方法</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// PWM</span></span><br><span class="line">idata <span class="type">uint8_t</span> Led_Pwm_Period = <span class="number">12</span>; <span class="comment">// LED Pwm 周期</span></span><br><span class="line">idata <span class="type">uint8_t</span> Led_Pwm_Compare = <span class="number">3</span>; <span class="comment">// LED Pwm 高电平的周期</span></span><br><span class="line"></span><br><span class="line">idata <span class="type">uint8_t</span> Led_Light_Level; <span class="comment">// 亮度等级 </span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">AD_Proc</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint8_t</span> temp = AD_Read(<span class="number">0x43</span>);</span><br><span class="line">    Led_Light_Level = temp / <span class="number">64</span>;</span><br><span class="line">    Led_Pwm_Compare = Led_Light_Level * <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Timer1_Isr</span><span class="params">(<span class="type">void</span>)</span> interrupt 3</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* PWM */</span></span><br><span class="line">    Led_Pwm_Period = (++Led_Pwm_Period) % <span class="number">13</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (Led_Pwm_Period &lt;= Led_Pwm_Compare)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* 4 * 8 种灯的PWM 调制 */</span></span><br><span class="line">        Led_Display(ucLed);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        Led_Off(); <span class="comment">// 直接复制Init代码即可</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 蓝桥杯 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>LVGL移植</title>
      <link href="/2025/02/03/%E5%B5%8C%E5%85%A5%E5%BC%8F/LVGL%E7%A7%BB%E6%A4%8D/"/>
      <url>/2025/02/03/%E5%B5%8C%E5%85%A5%E5%BC%8F/LVGL%E7%A7%BB%E6%A4%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="1-硬件需求"><a href="#1-硬件需求" class="headerlink" title="1.硬件需求"></a>1.硬件需求</h1><blockquote><p><strong>主频 &gt; 16Mhz</strong></p><p><strong>Flash/ROM &gt; 64kb</strong></p><p><strong>RAM &gt; 8kb</strong></p></blockquote><h1 id="2-移植"><a href="#2-移植" class="headerlink" title="2.移植"></a>2.移植</h1><h2 id="1-源代码剪裁"><a href="#1-源代码剪裁" class="headerlink" title="1.源代码剪裁"></a>1.源代码剪裁</h2><ul><li>保留下图文件，更改<code>lv_conf_template.h</code>文件名为<code>lv_conf.h</code>：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202502021339458.png" alt="微信截图_20250202133628"></p><ul><li>其中，<code>example</code>文件夹里只保留<code>porting</code>文件夹：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202502021341946.png" alt="微信截图_20250202134118"></p><ul><li>打开<code>lv_conf.h</code>文件，条件编译改为1，启用相关代码：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202502021344179.png" alt="微信截图_20250202134453"></p><h2 id="2-添加工程文件夹"><a href="#2-添加工程文件夹" class="headerlink" title="2.添加工程文件夹"></a>2.添加工程文件夹</h2><p>打开工程并添加<code>midware</code>文件夹；在此文件夹里面添加<code>lvgl</code>文件夹；将源代码除<code>demos</code>的四个文件，放到<code>midware\lvgl</code>文件夹里；源代码<code>demos</code>文件夹，放到<code>midware</code>文件夹里。</p><p>在 <strong>地址栏</strong>输入<code>cmd</code>此时会跳转<code>cmd.exe</code>，然后输入<code>tree</code>便可查看文件分布图：</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202502021352936.png" alt="微信截图_20250202115124"></p><h3 id="1-代码分组"><a href="#1-代码分组" class="headerlink" title="1.代码分组"></a>1.代码分组</h3><blockquote><ul><li><strong><code>midware\lvgl\examples\porting</code>:</strong> <code>porting</code>文件夹下的<code>lv_port_disp_template.c</code>和<code>lv_port_indev_template.c</code>。</li><li><code>midware\lvgl\src\core</code><strong>:</strong> <code>core</code>文件夹下的全部.c文件。</li><li><code>midware\lvgl\src\draw</code><strong>:</strong> <code>draw</code>和<code>draw/sw</code>文件夹下的全部.c文件。</li><li><code>midware\lvgl\src\gpu</code><strong>:</strong> <code>draw/stm32_dma2d</code>和<code>draw/sdl</code>文件夹下的全部.c文件。</li><li><code>midware\lvgl\src\extra</code><strong>:</strong> <code>extra</code>文件夹下全部c文件（包括所有子文件夹的全部c文件）。</li><li><code>midware\lvgl\src\font</code><strong>:</strong> <code>font</code>文件夹下全部c文件。</li><li><code>midware\lvgl\src\hal</code><strong>:</strong> <code>hal</code>文件夹下全部c文件。</li><li><code>midware\lvgl\src\misc</code><strong>:</strong> <code>misc</code>文件夹下全部c文件。</li><li><code>midware\lvgl\src\widgets</code><strong>:</strong> <code>widgets</code>文件夹下全部c文件。</li></ul></blockquote><h3 id="2-头文件路径"><a href="#2-头文件路径" class="headerlink" title="2.头文件路径"></a>2.头文件路径</h3><blockquote><ul><li><code>\midware</code>：必须添加，否则<code>#include &quot;lvgl/lvgl.h&quot;</code>无法跳转，或直接改成<code>lvgl.h</code>。</li><li><code>\midware\lvgl</code></li><li><code>\midware\lvgl\src</code></li><li><code>\midware\lvgl\examples\porting</code></li></ul></blockquote><p>最后，切记开启C99模式！</p><h2 id="3-代码修改"><a href="#3-代码修改" class="headerlink" title="3.代码修改"></a>3.代码修改</h2><h3 id="1-显示demo"><a href="#1-显示demo" class="headerlink" title="1.显示demo"></a>1.显示demo</h3><h4 id="1-屏幕输出"><a href="#1-屏幕输出" class="headerlink" title="1.屏幕输出"></a>1.屏幕输出</h4><ul><li><code>lv_port_disp_template.c</code>和<code>lv_port_disp_template.h</code>条件编译改为<strong>1</strong>：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202502021420188.png" alt="微信截图_20250202141927"></p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202502021420529.png" alt="微信截图_20250202141949"></p><ul><li><code>lv_port_disp_template.c</code>添加<code>LCD_Init()</code>和<code>lcd_init.h</code>：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202502021418073.png" alt="微信截图_20250202141829"></p><ul><li><code>lcd_init.h</code>设置横屏模式：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202502021423823.png" alt="微信截图_20250202142252"></p><ul><li><code>lv_port_disp_template.c</code>选择图形缓冲模式：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202502021423432.png" alt="微信截图_20250202142354"></p><ul><li><code>lv_port_disp_template.c</code>配置<code>lvgl</code>屏幕分辨率：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202502021426187.png" alt="微信截图_20250202142559"></p><ul><li><code>lv_port_disp_template.c</code>修改配置显示函数：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202502021554382.png" alt="微信截图_20250202155406"></p><p>LCD_Color_Fill的写法看此文章：</p><p><a href="https://blog.csdn.net/zbz159357/article/details/125311469?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=f103%20%20lvgl%20%E4%B8%AD%E6%99%AF%E5%9B%AD3.5&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-1-125311469.142">https://blog.csdn.net/zbz159357/article/details/125311469?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=f103%20%20lvgl%20%E4%B8%AD%E6%99%AF%E5%9B%AD3.5&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-1-125311469.142</a></p><h4 id="2-时基配置"><a href="#2-时基配置" class="headerlink" title="2.时基配置"></a>2.时基配置</h4><ul><li>初始化定时器<code>TIM6</code>并使能中断：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202502021558854.png" alt="微信截图_20250202155804"></p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202502021558317.png" alt="微信截图_20250202155812"></p><ul><li>增加 LVGL 系统的“tick”计时器：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202502021606765.png" alt="微信截图_20250202160621"></p><ul><li>主函数使能TIM6计数器和更新中断标志位：<code>HAL_TIM_Base_Start_IT(&amp;htim6);</code>。</li></ul><h4 id="3-demo测试"><a href="#3-demo测试" class="headerlink" title="3.demo测试"></a>3.demo测试</h4><ul><li><code>main.h</code>包含<code>lvgl.h</code>和l<code>v_port_disp_template.h</code>：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202502021620849.png" alt="微信截图_20250202161946"></p><ul><li><p>主函数初始化LVGL代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lv_init();</span><br><span class="line"></span><br><span class="line">lv_port_disp_init();</span><br></pre></td></tr></table></figure></li><li><p><code>while(1)</code>中每隔5ms调用一次：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">    lv_timer_handler();</span><br><span class="line">    HAL_Delay(<span class="number">5</span>);</span><br><span class="line">  <span class="comment">/* USER CODE END WHILE */</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* USER CODE BEGIN 3 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试demo移植：</p><ul><li><p>添加头文件路径：</p><blockquote><p><code>midware\demos</code></p><p><code>midware\demos\stress</code></p></blockquote></li><li><p>修改<code>lv_conf.h</code>头文件，将<code>LV_USE_DEMO_STRESS</code>改为1：</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202502021700717.png" alt="微信截图_20250202165835"></p></li><li><p>新建代码组：<code>midware\demo</code>并添加<code>lv_demo_stress.c</code>到工程。</p></li><li><p>main.c添加头文件：<code>&quot;lv_demo_stress.h&quot;</code>。</p></li><li><p>main.c调用相关API接口：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lv_demo_stress();</span><br></pre></td></tr></table></figure></li></ul></li><li><p>修改栈大小：</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202502021706422.png" alt="微信截图_20250202163811"></p><p>如果遇到LVGL卡死的情况，有极大的概率是由于栈空间不足所导致。</p><h3 id="2-触摸demo"><a href="#2-触摸demo" class="headerlink" title="2.触摸demo"></a>2.触摸demo</h3><h4 id="1-触摸输入"><a href="#1-触摸输入" class="headerlink" title="1.触摸输入"></a>1.触摸输入</h4><ul><li><code>lv_port_indev_template.c</code>和<code>lv_port_indev_template.h</code>条件编译由0改为<strong>1</strong>，并且只保留<code>touchpad</code>相关的函数：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202502031143728.png" alt="QQ20250203-114246"></p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202502031144989.png" alt="QQ20250203-114137"></p><ul><li>补充相关触摸函数：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202502031149656.png" alt="微信截图_20250203114718"></p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202502031149336.png" alt="微信截图_20250203114748"></p><h4 id="2-demo测试"><a href="#2-demo测试" class="headerlink" title="2.demo测试"></a>2.demo测试</h4><ul><li>添加头文件路径：</li></ul><blockquote><p><code>midware\demos</code></p><p><code>midware\demos\widgets</code></p></blockquote><ul><li>修改<code>lv_conf.h</code>头文件，将<code>#define LV_USE_DEMO_WIDGETS</code>改为1：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202502031156593.png" alt="微信截图_20250203114611"></p><ul><li>代码组<code>midware\demo</code>添加c文件：</li></ul><blockquote><p><code>lv_demo_stress.c</code></p><p><code>assets:</code></p><p>​    <code>img_clothes.c</code></p><p>​    <code>img_demo_widgets_avatar.c</code></p><p>​    <code>img_lvgl_logo.c</code></p></blockquote><ul><li><code>main.h</code>添加相关头文件：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202502031213460.png" alt="微信截图_20250203120829"></p><ul><li><code>main.c</code>调用相关API接口：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lv_port_indev_init();</span><br><span class="line"></span><br><span class="line">lv_demo_widgets();</span><br></pre></td></tr></table></figure><h3 id="3-显示帧率"><a href="#3-显示帧率" class="headerlink" title="3.显示帧率"></a>3.显示帧率</h3><ul><li>修改<code>lv_conf.h</code>头文件，将<code>#define LV_USE_PERF_MONITOR</code>和<code>LV_USE_MEM_MONITOR</code>改为1：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202502031219459.png" alt="微信截图_20250203121858"></p><h3 id="4-优化帧率"><a href="#4-优化帧率" class="headerlink" title="4.优化帧率"></a>4.优化帧率</h3><p>提高 SPI LCD 帧率的方法是加快SPI传输数据的效率。</p><h4 id="1-LCD-Color-Fill"><a href="#1-LCD-Color-Fill" class="headerlink" title="1.LCD_Color_Fill"></a>1.LCD_Color_Fill</h4><ul><li><p>优化<code>LCD_Address_Set</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">LCD_Address_Set</span><span class="params">(u16 x1,u16 y1,u16 x2,u16 y2)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint8_t</span> XY_Buffer[<span class="number">8</span>];</span><br><span class="line">    XY_Buffer[<span class="number">0</span>] = (x1 &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xff</span>;</span><br><span class="line">    XY_Buffer[<span class="number">1</span>] = x1 &amp; <span class="number">0xff</span>;</span><br><span class="line">    XY_Buffer[<span class="number">2</span>] = (x2 &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xff</span>;</span><br><span class="line">    XY_Buffer[<span class="number">3</span>] = x2 &amp; <span class="number">0xff</span>;</span><br><span class="line">    XY_Buffer[<span class="number">4</span>] = (y1 &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xff</span>;</span><br><span class="line">    XY_Buffer[<span class="number">5</span>] = y1 &amp; <span class="number">0xff</span>;</span><br><span class="line">    XY_Buffer[<span class="number">6</span>] = (y2 &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xff</span>;</span><br><span class="line">    XY_Buffer[<span class="number">7</span>] = y2 &amp; <span class="number">0xff</span>;</span><br><span class="line">    </span><br><span class="line">LCD_WR_REG(<span class="number">0x2a</span>);<span class="comment">//列地址设置</span></span><br><span class="line"><span class="comment">//LCD_WR_DATA(x1);</span></span><br><span class="line"><span class="comment">//LCD_WR_DATA(x2);</span></span><br><span class="line">    LCD_Writ_Bus_LEN(XY_Buffer, <span class="number">4</span>);</span><br><span class="line">    </span><br><span class="line">LCD_WR_REG(<span class="number">0x2b</span>);<span class="comment">//行地址设置</span></span><br><span class="line"><span class="comment">//LCD_WR_DATA(y1);</span></span><br><span class="line"><span class="comment">//LCD_WR_DATA(y2);</span></span><br><span class="line">    LCD_Writ_Bus_LEN(XY_Buffer + <span class="number">4</span>, <span class="number">4</span>);</span><br><span class="line">LCD_WR_REG(<span class="number">0x2c</span>);<span class="comment">//储存器写</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 新添函数 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">LCD_Writ_Bus_LEN</span><span class="params">(u8 *dat, <span class="type">uint32_t</span> len)</span> </span><br><span class="line">&#123;</span><br><span class="line">LCD_CS_Clr();</span><br><span class="line">HAL_SPI_Transmit(&amp;hspi1, dat, len, <span class="number">10</span>);</span><br><span class="line">LCD_CS_Set();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">LCD_Writ_Bus</span><span class="params">(u8 dat)</span> </span><br><span class="line">&#123;</span><br><span class="line">LCD_CS_Clr();</span><br><span class="line">HAL_SPI_Transmit(&amp;hspi1, &amp;dat, <span class="number">1</span>, <span class="number">100</span>);</span><br><span class="line">LCD_CS_Set();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">LCD_WR_DATA</span><span class="params">(u16 dat)</span></span><br><span class="line">&#123;</span><br><span class="line">LCD_Writ_Bus(dat &gt;&gt; <span class="number">8</span>);</span><br><span class="line">LCD_Writ_Bus(dat);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">LCD_WR_REG</span><span class="params">(u8 dat)</span></span><br><span class="line">&#123;</span><br><span class="line">LCD_DC_Clr();<span class="comment">//写命令</span></span><br><span class="line">LCD_Writ_Bus(dat);</span><br><span class="line">LCD_DC_Set();<span class="comment">//写数据</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原本<code>LCD_WR_DATA</code>函数作用是先写入所传入变量的低八位，后再写入其高八位。而这里改为一次性传输所有SPI数据。</p></li><li><p>优化大量数据处理：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">LCD_Color_Fill</span><span class="params">(u16 sx, u16 sy, u16 ex, u16 ey, <span class="type">lv_color_t</span> *color)</span></span><br><span class="line">&#123;</span><br><span class="line">u16 i,j;</span><br><span class="line">u32 k=<span class="number">0</span>;</span><br><span class="line"><span class="type">uint32_t</span> x=<span class="number">0</span>,y=<span class="number">0</span>; </span><br><span class="line">u16 height, width;</span><br><span class="line">width = ex - sx + <span class="number">1</span>;            <span class="comment">//得到填充的宽度</span></span><br><span class="line">    height = ey - sy + <span class="number">1</span>;           <span class="comment">//高度</span></span><br><span class="line"></span><br><span class="line">LCD_Address_Set(sx,sy,ex,ey);</span><br><span class="line"></span><br><span class="line">    LCD_Writ_Bus_LEN((<span class="type">uint8_t</span> *)color, width * height * <span class="number">2</span>);</span><br><span class="line">    </span><br><span class="line"><span class="comment">//for(y = 0; y &lt;width*height; y++) </span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//LCD_WR_DATA(color-&gt;full);</span></span><br><span class="line"><span class="comment">//color++;</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202502041330188.png" alt="微信截图_20250204115625"></p><p>注意：函数<code>LCD_WR_DATA</code>传入数据的长度为16位。因此，传输数据长度为<code>width * height * 2</code>。</p></li><li><p>修改<code>lv_conf.h</code>头文件，将<code>LV_COLOR_16_SWAP</code>改为1：</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202502041340024.png" alt="微信截图_20250203235423"></p><p>如不修改则界面失真：</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202502041343839.jpg" alt="微信图片_20250204134339"></p></li><li><p>提高优化等级</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202502041340415.png" alt="微信截图_20250204125157"></p><p>最终界面显示稳定在33帧左右。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LVGL移植 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CAN总线</title>
      <link href="/2025/01/19/%E5%B5%8C%E5%85%A5%E5%BC%8F/CAN%E6%80%BB%E7%BA%BF/"/>
      <url>/2025/01/19/%E5%B5%8C%E5%85%A5%E5%BC%8F/CAN%E6%80%BB%E7%BA%BF/</url>
      
        <content type="html"><![CDATA[<h1 id="1-帧类型"><a href="#1-帧类型" class="headerlink" title="1.帧类型"></a>1.帧类型</h1><p>通信是通过以下 5 种类型的帧进行的：数据帧、遥控帧、错误帧、过载帧、帧间隔。</p><blockquote><ul><li><p>数据帧（Data Frame）：</p><p>数据帧是CAN总线上用于传输用户数据的帧，包括必要的帧头、标识符、控 制位、数据长度代码、数据域、CRC校验码和应答域等部分，是CAN通信中最基本和最重要的帧类型。</p></li><li><p>遥控帧（Remote Frame）：</p><p>遥控帧用于向总线上的其他节点请求发送具有相同标识符的数据帧，它 没有数据域，仅通过标识符来指定所需的数据。遥控帧的帧结构与数据帧相似，但缺少数据部分。</p></li><li><p>错误帧（Error Frame）：</p><p>当CAN总线上的任何节点检测到通信错误时，会发送错误帧来通知其他节 点。错误帧包含错误标志和错误界定符，用于指示错误的存在和类型。</p></li><li><p>过载帧（Overload Frame）：</p><p>过载帧用于在连续的数据帧或远程帧之间提供额外的延时，以指示接收 节点尚未准备好接收下一个帧。当接收节点因内部条件限制而无法立即接收数据时，会发送过载帧来请 求发送节点暂停发送。</p></li><li><p>帧间隔（Interframe Space）：</p><p>帧间隔用于隔离数据帧与前面的帧，确保它们之间的时间间隔足够 长，以避免总线上的冲突和数据丢失。帧间隔包括连续三个隐性位（间隔段）和可能存在的空闲段，用 于将数据帧或远程帧与前面的帧分隔开来。</p></li></ul></blockquote><h2 id="1-数据帧"><a href="#1-数据帧" class="headerlink" title="1.数据帧"></a>1.数据帧</h2><h3 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h3><blockquote><p>数据帧框图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501121258975.png" alt="img"></p><ol><li><strong>帧起始（Start of Frame, SOF）</strong><ul><li><strong>作用：</strong> 帧起始标志用来同步总线上的所有节点。</li><li><strong>比喻：</strong> 好比课堂上老师敲黑板或拍桌子，“现在开始上课了！”大家听到这个信号就准备集中注意力。</li><li><strong>示例：</strong> 帧起始是一个单独的 <strong>显性位（0）</strong>，在总线上所有设备都能看到。</li></ul></li><li><strong>仲裁段（Arbitration Field）</strong><ul><li><strong>作用：</strong> CAN总线是一个共享网络，多台设备可能同时工作，这段信息通过ID来决定谁的优先级高。</li><li><strong>比喻：</strong> 想象你在排队买奶茶，每个人手里都有一个号码牌（ID）。号码牌越小，优先级越高，可以先买奶茶。</li><li><strong>组成：</strong><ul><li><strong>格式：</strong><ul><li><strong>标准格式：</strong> 11位ID。</li><li><strong>扩展格式：</strong> 29位ID。</li></ul></li><li><strong>RTR位：</strong> 区分是数据帧还是请求帧<strong>（如果是数据帧，RTR=0；如果是请求帧（只请求数据，不发送数据），RTR=1）</strong>。</li></ul></li><li><strong>示例：</strong> CAN总线使用“显性位（0）优先于隐性位（1）”的逻辑，因此ID的值越小，仲裁时胜出的可能性越大，如果设备A的ID是101，设备B的ID是100，则设备B优先发送数据。</li><li><strong>补充：</strong><ul><li>CAN总线使用的是<strong>线与逻辑</strong>（Wired-AND）。总线上连接的所有节点都会驱动同一个总线信号。在这种物理设计下，如果一个节点发送显性位（0），另一个节点发送隐性位（1），总线上的电平会被拉低（即显性位占优）。这使得显性位具有<strong>更高优先级</strong>。</li><li>扩展数据帧中，还包含SRR位（Substituted Remote Request，替代的远程请求）和IDE位 （Identifier Extension，标识符扩展）。SRR位用于指示发送方是否发送了远程请求帧，IDE 位用于指示标识符字段是否使用了扩展格式（29位）。</li></ul></li></ul></li><li><strong>控制段（Control Field）</strong><ul><li><strong>作用：</strong> 指示即将发送的数据长度，同时为整个数据帧提供一些额外的控制信息。</li><li><strong>比喻：</strong> 奶茶店服务员告诉你这杯奶茶是中杯（4字节数据）还是大杯（8字节数据），提前打个招呼。</li><li><strong>组成：</strong><ul><li><strong>IDE位：</strong> 仲裁段ID格式通过IDE位区分<strong>（0为标准，1为扩展）</strong>。</li><li><strong>空闲位r0：</strong> 值恒为0。</li><li><strong>DLC位：</strong> 作为数据长度码用来指明数据段包含几个字节，用4位表示数据段的长度。</li></ul></li><li><strong>示例：</strong> <code>DLC=4</code>表示接下来的数据段会有4个字节数据。</li><li><strong>补充：</strong> DLC字段的4位最大值为15，但实际有效数据段长度限制为8字节，<code>DLC&gt;8</code>的情况被保留而不使用</li></ul></li><li><strong>数据段（Data Field）</strong><ul><li><strong>作用：</strong> 真正承载有用信息的部分，最多包含8个字节（64位）。</li><li><strong>比喻：</strong> 奶茶的实际内容，比如你的订单是“珍珠奶茶，去冰，半糖”。</li><li><strong>组成：</strong> 数据段可以承载车辆速度、发动机转速、温度等重要信息。</li><li><strong>示例：</strong>数据段可能是汽车发动机控制单元传来的速度数据：<strong><code>0x00 0x3C 0x00 0x00</code></strong>，表示车辆的速度是60公里/小时。</li></ul></li><li><strong>CRC段（Cyclic Redundancy Check）</strong><ul><li><strong>作用：</strong> 用于检查传输过程中数据是否出现错误，相当于数据的“校验码”。</li><li><strong>比喻：</strong> 就像外卖小哥送奶茶时，店员会在杯盖上写上你的订单内容，方便你核对“这杯是我的奶茶吗？”。</li><li><strong>组成：</strong><ul><li><strong>CRC值：</strong>CRC值是基于<strong>仲裁段</strong>、<strong>控制段</strong>和<strong>数据段</strong>的<strong>所有位</strong>计算得出的，值由CAN控制器的硬件外设自动计算，并附加在数据帧中发送（不包括<strong>帧起始</strong>、<strong>CRC段</strong>和<strong>ACK段</strong>，因为这些字段不是数据本身或校验的一部分）。</li><li><strong>CRC定界符：</strong>值为1，用于分隔校验码和后续的字段。</li></ul></li><li><strong>示例：</strong> 如果数据段是<code>0x00 0x3C 0x00 0x00</code>，计算得到CRC码为<code>0xABCD</code>，总线上的节点会用这个值验证数据是否正确。</li></ul></li><li><strong>ACK段（Acknowledge Field）</strong><ul><li><strong>作用：</strong> 确认接收方是否正确接收到数据。如果成功接收到，接收方会发送一个显性位（0）作为确认。</li><li><strong>比喻：</strong> 就像外卖小哥把奶茶递给你时，你点点头或者说“谢谢”，表示你收到了奶茶。</li><li><strong>组成：</strong><ul><li><strong>ACK槽位：</strong>由接收方操作，用于反馈数据帧是否成功接收<strong>（发送数据端ACK值为1；当接收方收到数据帧且校验成功时，接收方会拉低ACK槽位（将其设置为显性位0））</strong>。</li><li><strong>ACK定界符：</strong>值为1，用于标志确认结束发送数据端。</li></ul></li><li><strong>示例：</strong> 如果接收方没有拉低ACK，发送端会认为传输失败，并重发此帧。</li></ul></li><li><strong>帧结束（End of Frame, EOF）</strong><ul><li><strong>作用：</strong> 表示数据帧已经完成，告诉总线上其他设备“我的话说完了”。</li><li><strong>比喻：</strong> 就像奶茶小哥说“谢谢，欢迎下次光临！”后，奶茶交接完成。</li><li><strong>组成：</strong>一串连续的显性位（1），用于标志帧结束。</li><li><strong>示例：</strong> CAN帧结束用 <strong>7个位（全为1）</strong> 表示，所有设备知道当前帧已发送完毕，可以开始新的帧传输。</li></ul></li></ol></blockquote><h3 id="2-示例"><a href="#2-示例" class="headerlink" title="2.示例"></a>2.<strong>示例</strong></h3><blockquote><p>假设一个车辆的控制系统发送一帧数据，表示车辆当前速度：</p><ol><li><strong>帧起始</strong>：0</li><li>仲裁段：<ul><li>ID：100（表示速度信息优先级）</li></ul></li><li>控制段：<ul><li>DLC：4（4字节数据）</li></ul></li><li>数据段：<ul><li>数据：0x00 0x3C 0x00 0x00（表示速度为60 km/h）</li></ul></li><li>CRC段：<ul><li>CRC值：0xABCD（假设的校验码）</li></ul></li><li>ACK段：<ul><li>ACK槽位：0（接收方确认收到数据）</li></ul></li><li><strong>帧结束</strong>：1111111</li></ol><p>总线上的节点解析到这一帧后，会将速度数据显示在仪表盘上。</p></blockquote><h2 id="2-错误帧"><a href="#2-错误帧" class="headerlink" title="2.错误帧"></a>2.错误帧</h2><h3 id="1-介绍-1"><a href="#1-介绍-1" class="headerlink" title="1.介绍"></a>1.介绍</h3><p>CAN总线上的每个节点都可以仲裁，假如某一个节点发送的数据有误，那么总线上的其他节点可以检测到该错误，并发送错误帧，防止其他节点对各个节点尽心干扰。</p><h1 id="2-硬件结构"><a href="#2-硬件结构" class="headerlink" title="2.硬件结构"></a>2.硬件结构</h1><h2 id="1-时钟频率"><a href="#1-时钟频率" class="headerlink" title="1.时钟频率"></a>1.时钟频率</h2><p><strong>CAN 时钟频率</strong>是指控制 CAN 总线通信的时钟信号，用于驱动 CAN 控制器和生成 CAN 总线波特率。</p><blockquote><p>CAN 外设挂载在高速总线 APB1 上，因此时钟频率为 36 MHz，CAN 控制器以该频率为基础输入时钟频率。</p><p>CAN 通讯，反映到总线介质上，是将 <code>1010</code> 这样的数据位（即高低电平序列）从发送节点传递给接收节点。由于CAN通讯属于异步通讯，没有时钟信号线，因此其可靠通讯需借助统一的位时序进行。</p><p>位时序，即CAN控制器对总线上的每一个数据位进行接收时（时间为<code>Tbit</code>），其内部又细分为4个时序段，分别为：</p><ul><li>同步段（SS）</li><li>传播时间段（PTS）</li><li>相位缓冲段1（PBS1）</li><li>相位缓冲段2（PBS2）</li></ul><p>就STM32而言，传播时间段与相位缓冲段1合并为一个时间段，则原来的4个时序段，变为3个时序段，分别为：</p><ul><li>同步段（SS）</li><li>时间段1（BS1）</li><li>时间段2（BS2）</li></ul><p>其每个时序段对应的时间分别为：<code>Tss、Tbs1 、Tbs2</code>，则<code>Tbit = Tss + Tbs1 + Tbs2</code> 。</p><p>对应关系框图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501121655137.png" alt="微信截图_20250112165457"></p><p>每个时序段又由若干个最小时间量子<code>Tq</code>组成。其中，同步段有且仅有1个最小时间元。</p></blockquote><h2 id="2-CAN控制器"><a href="#2-CAN控制器" class="headerlink" title="2.CAN控制器"></a>2.CAN控制器</h2><p><strong><code>bxCAN</code></strong>，即基本扩展CAN<code>（Basic Extend CAN）</code>是 STM32 微控制器系列中集成的 CAN 控制器模块。</p><p>STM32F103ZET6包含<strong>1个CAN控制器</strong>，其配备<strong>14个接收滤波器</strong>、<strong>3个邮箱</strong>和<strong>2个接收FIFO缓冲区</strong>，支持多种滤波模式（如掩码模式和列表模式），可以灵活配置不同的ID匹配规则，用于高效处理CAN通信。</p><blockquote><ul><li>协议支持：支持CAN协议2.0A和2.0B的主动模式。</li><li>高波特率：波特率最高可达1兆位/秒。 </li><li><p>时间触发通信：支持时间触发通信功能，CAN的硬件内部定时器可以在TX/RX的帧起始位的采样点位置 生成时间戳。</p></li><li><p>发送功能： 具有3个发送邮箱，发送报文的优先级特性可软件配置。 记录发送SOF（Start Of Frame，帧起始）时刻的时间。</p></li><li><p>接收功能： 具有3级深度的2个FIFO（First In First Out，先进先出队列），每个FIFO都可以存放3个完整的报文，完全由硬件管理。 共有14个位宽可变的过滤器组（部分STM32型号可能支持更多），由整个CAN共享，用于筛选有效报文。 记录接收SOF时刻的时间。 支持禁止自动重传模式。</p></li></ul><p>主设备模式框图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501121411954.png" alt="微信截图_20250112130304"></p><p><strong>邮箱的作用：</strong></p><p>邮箱用于<strong>暂存需要发送或接收的数据帧</strong>，邮箱可以存放待发送的数据帧，并在硬件控制下根据优先级调度进行发送：接收的数据帧经过滤波器筛选后，符合条件的帧会被放入邮箱中，并最终进入接收缓冲区（FIFO）。</p><p>每个邮箱可以存储一个数据帧，因此STM32F103的3个邮箱可以并行存储3个不同的帧。</p><p><strong>滤波器的作用：</strong></p><p>滤波器用于根据数据帧仲裁段的<strong><code>ID</code></strong>筛选接收到的CAN帧，过滤掉不符合要求的帧，从而减轻CPU处理不必要数据的负担。</p><p>接收到的数据帧先通过滤波器进行检查，匹配滤波规则；如果数据帧的<code>ID</code>符合设定的滤波条件，则该帧会被接受并放入<strong>接收缓冲区</strong><code>（FIFO）</code>；不符合滤波条件的帧则会被丢弃，不会占用资源。</p><p><strong>FIFO的作用：</strong></p><p>FIFO是数据帧的<strong>缓冲区</strong>，用于存储接收到的数据帧，防止其因处理速度慢而丢失。</p><p><strong>邮箱、过滤器和FIFO存在的意义：</strong></p><p>当CAN总线通信速度高、数据量大时，STM32的硬件滤波器、邮箱和FIFO协同工作，分担CPU负载，确保数据完整性和实时性。好比串口传输速率低，也就没有硬件协助。</p></blockquote><h3 id="1-滤波器"><a href="#1-滤波器" class="headerlink" title="1.滤波器"></a>1.滤波器</h3><p>滤波器模式分为掩码模式和列表模式。其作用是选择性地接收有效报文，减少单片机软件部分负担！每个过滤器有两个32位寄存器<code>FxR1</code>和<code>FxR2</code>，每个过滤器可以保存两个或者四个16位数据，一个或者两个32位数据，用于过滤。过滤器工作模式不同，作用也不相同！</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501180002626.png" alt="image-20250118000202552"></p><p>如上图所述的映像结合代码可知：ID并不占整个寄存器，写代码尤为注意不可直接复制。</p><blockquote><p><strong><code>FilterIdHigh</code></strong> 和 <strong><code>FilterIdLow</code></strong>：分别用于设置过滤器的 <strong>标准ID</strong> 或 <strong>扩展ID</strong>。</p><p><strong><code>FilterMaskIdHigh</code></strong> 和 <strong><code>FilterMaskIdLow</code></strong>：用于设置 <strong>掩码</strong>，即哪些位需要匹配，哪些位可以忽略<strong>（列表模式下掩码无效，不使用即可）</strong>。</p></blockquote><h4 id="1-掩码模式："><a href="#1-掩码模式：" class="headerlink" title="1.掩码模式："></a><strong>1.掩码模式：</strong></h4><blockquote><p>掩码模式下，滤波器根据一个<strong>标准ID</strong>和一个<strong>掩码</strong>来决定哪些消息符合接收条件。掩码是一个与标准ID相对应的值，用于指示标准ID的哪些位需要匹配，哪些可以忽略。</p><p>掩码中的每一位决定了过滤过程：</p><ul><li>如果掩码位为 <code>1</code>，则对应的标准ID位必须匹配。</li><li>如果掩码位为 <code>0</code>，则对应的标准ID位可以是任意值，不需要匹配。</li></ul></blockquote><p><strong>示例：</strong>假设我们有以下设置：</p><blockquote><h3 id="1-掩码为-0x000"><a href="#1-掩码为-0x000" class="headerlink" title="1. 掩码为 0x000"></a>1. <strong>掩码为 <code>0x000</code></strong></h3><ul><li><strong>配置ID</strong>：<code>0x200</code></li><li><strong>掩码</strong>：<code>0x000</code></li><li><strong>结果</strong>：所有ID都能够通过。</li></ul><p><strong>解释</strong>：掩码为 <code>0x000</code>，表示掩码的每一位都是 <code>0</code>，即对标准ID的每一位都没有限制，可以是任意值。因此，无论接收到什么标准ID，都能通过过滤器。简单来说，掩码的 <code>0</code> 表示没有任何匹配要求，所以所有的 ID 都能通过。</p><h3 id="2-掩码为-0x700"><a href="#2-掩码为-0x700" class="headerlink" title="2. 掩码为 0x700"></a>2. <strong>掩码为 <code>0x700</code></strong></h3><ul><li><strong>配置ID</strong>：<code>0x200</code></li><li><strong>掩码</strong>：<code>0x700</code></li><li><strong>结果</strong>：标准ID 为 <code>0x200</code> 到 <code>0x2FF</code> 的消息都能通过。</li></ul><p><strong>解释</strong>：掩码为 <code>0x700</code>，其二进制形式是 <code>0111 0000 0000</code>，表示：掩码的前 3 位需要与标准ID的前 3 位匹配。后 8 位可以是任意值（即这些位不要求匹配，可以变化）。</p><p>由于配置的 ID 为 <code>0x200</code>（二进制：<code>0010 0000 0000</code>），所以标准ID的前 3 位是 <code>001</code>。掩码 <code>0x700</code> 的前 3 位是 <code>011</code>，要求前 3 位的匹配，而后 8 位可以自由变化。因此，ID 范围是从 <code>0x200</code> 到 <code>0x2FF</code>（即二进制：<code>0010 0000 0000</code> 到 <code>0010 1111 1111</code>），符合条件的标准ID都会被接收。</p><h3 id="3-掩码为-0x7FF"><a href="#3-掩码为-0x7FF" class="headerlink" title="3. 掩码为 0x7FF"></a>3. <strong>掩码为 <code>0x7FF</code></strong></h3><ul><li><strong>配置ID</strong>：<code>0x200</code></li><li><strong>掩码</strong>：<code>0x7FF</code></li><li><strong>结果</strong>：只有标准ID为 <code>0x200</code> 的消息能够通过。</li></ul><p><strong>解释</strong>：掩码为 <code>0x7FF</code>，即二进制 <code>1111 1111 1111</code>，表示掩码的每一位都要求与标准ID的相应位完全匹配。也就是说，所有的 11 位都必须一致。</p><p>配置的标准ID是 <code>0x200</code>（二进制：<code>0010 0000 0000</code>）。由于掩码的每一位都要求匹配，所以只有标准ID恰好是 <code>0x200</code> 时才能通过过滤器，其他任何ID都会被过滤掉。</p></blockquote><h4 id="2-列表模式："><a href="#2-列表模式：" class="headerlink" title="2.列表模式："></a><strong>2.列表模式：</strong></h4><blockquote><p>列表模式下，滤波器直接列出允许接收的标准ID。每个ID都有一个对应的过滤器，当接收到匹配的ID时，消息会被接收。</p><p><strong>在标识符列表模式下，屏蔽寄存器也被当作标识符寄存器用。</strong></p></blockquote><p><strong>示例：</strong>假设我们有以下设置：</p><blockquote><p>我们希望接收标准ID为<code>0x123</code>和<code>0x456</code>的消息：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">CAN_FilterTypeDef sFilterConfig;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置第一个过滤器，接收标准ID 0x123的消息</span></span><br><span class="line">sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;  <span class="comment">// 设置为列表模式</span></span><br><span class="line">sFilterConfig.FilterIdHigh = <span class="number">0x123</span> &lt;&lt; <span class="number">5</span>;           <span class="comment">// 设置标准ID 0x123（高16位）</span></span><br><span class="line">sFilterConfig.FilterIdLow = <span class="number">0x0000</span>;                <span class="comment">// 设置标准ID 0x123（低16位）</span></span><br><span class="line">HAL_CAN_ConfigFilter(&amp;hcan, &amp;sFilterConfig);       <span class="comment">// 配置CAN过滤器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置第二个过滤器，接收标准ID 0x456的消息</span></span><br><span class="line">sFilterConfig.FilterMaskIdHigh = <span class="number">0x456</span> &lt;&lt; <span class="number">5</span>;       <span class="comment">// 设置标准ID 0x456（高16位）</span></span><br><span class="line">sFilterConfig.FilterMaskIdLow = <span class="number">0x0000</span>;            <span class="comment">// 设置标准ID 0x456（低16位）</span></span><br><span class="line">HAL_CAN_ConfigFilter(&amp;hcan, &amp;sFilterConfig);       <span class="comment">// 配置CAN过滤器</span></span><br></pre></td></tr></table></figure></blockquote><h1 id="3-配置"><a href="#3-配置" class="headerlink" title="3.配置"></a>3.配置</h1><p><a href="D:\Software\Embedded\Blog\source\_posts\杂谈\HAL源码解析">CAN参数配置</a></p>]]></content>
      
      
      <categories>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STM32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2025/01/11/%E7%9F%A5%E8%AF%86%E7%82%B9/%E6%96%B9%E6%B3%95/"/>
      <url>/2025/01/11/%E7%9F%A5%E8%AF%86%E7%82%B9/%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>是的，<strong>对于长时间不用的 STM32 知识，复习笔记通常是足够的</strong>，尤其是你之前学过并有一定理解的内容，不需要从头再敲一遍代码。如果能够通过看笔记快速回忆起原理和应用方式，并能够在项目中正确使用，就已经达到了实际需求。</p><hr><h3 id="几点具体建议"><a href="#几点具体建议" class="headerlink" title="几点具体建议"></a><strong>几点具体建议</strong></h3><h4 id="1-看笔记复习核心概念"><a href="#1-看笔记复习核心概念" class="headerlink" title="1. 看笔记复习核心概念"></a>1. <strong>看笔记复习核心概念</strong></h4><ul><li><p>笔记是复习的高效方式，尤其是整理得清晰的笔记。</p></li><li><p>重点内容：</p><ul><li>常用外设的初始化流程（如 GPIO、USART、I2C、SPI、ADC 等）。</li><li>HAL 库或寄存器操作的关键 API 或配置方法。</li><li>STM32CubeMX 的使用步骤（如引脚配置和时钟设置）。</li><li>常见问题和解决方法（例如某些外设的配置注意事项）。</li></ul></li></ul><h4 id="2-以项目需求为导向"><a href="#2-以项目需求为导向" class="headerlink" title="2. 以项目需求为导向"></a>2. <strong>以项目需求为导向</strong></h4><ul><li>如果你要做的项目中用到某个外设（比如串口通信），直接从项目需求出发，看对应的笔记和代码例子：<ul><li>如果笔记清晰并包含相关配置和代码，复用这些知识即可。</li><li>如果笔记中没有记录详细代码，但记下了原理，结合 STM32CubeMX 和 HAL 库的函数手册查找 API，快速应用即可。</li></ul></li></ul><h4 id="3-避免从零开始"><a href="#3-避免从零开始" class="headerlink" title="3. 避免从零开始"></a>3. <strong>避免从零开始</strong></h4><ul><li>如果之前已经写过类似的代码，没必要再从 0 到 1 敲一遍（除非是核心知识完全遗忘）。</li><li>比如，串口初始化和发送数据，你只需要理解 <strong>初始化时的配置逻辑</strong> 和 <strong>API 的用法</strong>，完全没必要再重复敲基础代码。</li></ul><h4 id="4-实践项目时再深入"><a href="#4-实践项目时再深入" class="headerlink" title="4. 实践项目时再深入"></a>4. <strong>实践项目时再深入</strong></h4><ul><li>如果有项目需求，优先复用笔记中的知识。遇到问题再针对性深入研究，不用全面复习所有外设。</li><li>比如做一个数据采集项目，需要用到 ADC 和 DMA，只需要重点复习这两个模块，而 GPIO 或串口可以根据需求快速回顾或直接复用以前的代码。</li></ul><hr><h3 id="为什么不用从-0-到-1-重头敲？"><a href="#为什么不用从-0-到-1-重头敲？" class="headerlink" title="为什么不用从 0 到 1 重头敲？"></a><strong>为什么不用从 0 到 1 重头敲？</strong></h3><ol><li><strong>已有基础</strong>：<ul><li>你之前已经学过 STM32，只是需要复习。看笔记能够快速回忆起核心知识点和方法，重头开始会浪费时间。</li></ul></li><li><strong>复用代码更高效</strong>：<ul><li>实际项目中，STM32 开发很多时候都是基于以前的代码模板或已有的库实现。如果你的笔记和代码记录清晰，可以直接复用。</li></ul></li><li><strong>以需求为中心</strong>：<ul><li>长时间不用的知识只需要根据项目需求进行针对性复习，不用复习所有内容。比如，当前项目只需要用 GPIO 和定时器，你就只复习这两部分即可。</li></ul></li><li><strong>重点是理解和应用</strong>：<ul><li>项目开发中，重要的是理解 STM32 的外设配置原理和应用逻辑，而不是重新熟悉所有代码细节。</li></ul></li></ol><hr><h3 id="但以下情况需要敲代码"><a href="#但以下情况需要敲代码" class="headerlink" title="但以下情况需要敲代码"></a><strong>但以下情况需要敲代码</strong></h3><ol><li><strong>遗忘严重</strong>： 如果长时间不用，已经忘记了某些外设的基本原理或配置方法（比如串口的波特率设置、时钟配置等），可以尝试简单敲一下代码来巩固记忆。</li><li><strong>复杂模块或新功能</strong>： 如果项目中需要用到以前没有学过或很复杂的功能（如 DMA、USB、CAN 总线等），建议从头掌握，熟悉配置方法并实际敲代码。</li><li><strong>提高熟练度</strong>： 如果觉得自己对某些外设的操作还不够熟练，比如 STM32 的中断处理或 HAL 库 API 的应用，可以通过敲代码来强化记忆。</li></ol><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><ul><li>对于长时间不用的 STM32 知识，看笔记回顾原理和流程通常就足够，没必要从头敲代码。</li><li>如果能通过笔记快速理解并应用到项目中，完全可以直接复用笔记和以前的代码。</li><li>只有在遗忘严重或项目需要复杂功能时，才需要重新动手敲代码。最终的目标是以需求为中心，能高效完成项目为主。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2025/01/11/%E5%B5%8C%E5%85%A5%E5%BC%8F/%E6%96%B9%E6%B3%95/"/>
      <url>/2025/01/11/%E5%B5%8C%E5%85%A5%E5%BC%8F/%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>是的，<strong>对于长时间不用的 STM32 知识，复习笔记通常是足够的</strong>，尤其是你之前学过并有一定理解的内容，不需要从头再敲一遍代码。如果能够通过看笔记快速回忆起原理和应用方式，并能够在项目中正确使用，就已经达到了实际需求。</p><hr><h3 id="几点具体建议"><a href="#几点具体建议" class="headerlink" title="几点具体建议"></a><strong>几点具体建议</strong></h3><h4 id="1-看笔记复习核心概念"><a href="#1-看笔记复习核心概念" class="headerlink" title="1. 看笔记复习核心概念"></a>1. <strong>看笔记复习核心概念</strong></h4><ul><li><p>笔记是复习的高效方式，尤其是整理得清晰的笔记。</p></li><li><p>重点内容：</p><ul><li>常用外设的初始化流程（如 GPIO、USART、I2C、SPI、ADC 等）。</li><li>HAL 库或寄存器操作的关键 API 或配置方法。</li><li>STM32CubeMX 的使用步骤（如引脚配置和时钟设置）。</li><li>常见问题和解决方法（例如某些外设的配置注意事项）。</li></ul></li></ul><h4 id="2-以项目需求为导向"><a href="#2-以项目需求为导向" class="headerlink" title="2. 以项目需求为导向"></a>2. <strong>以项目需求为导向</strong></h4><ul><li>如果你要做的项目中用到某个外设（比如串口通信），直接从项目需求出发，看对应的笔记和代码例子：<ul><li>如果笔记清晰并包含相关配置和代码，复用这些知识即可。</li><li>如果笔记中没有记录详细代码，但记下了原理，结合 STM32CubeMX 和 HAL 库的函数手册查找 API，快速应用即可。</li></ul></li></ul><h4 id="3-避免从零开始"><a href="#3-避免从零开始" class="headerlink" title="3. 避免从零开始"></a>3. <strong>避免从零开始</strong></h4><ul><li>如果之前已经写过类似的代码，没必要再从 0 到 1 敲一遍（除非是核心知识完全遗忘）。</li><li>比如，串口初始化和发送数据，你只需要理解 <strong>初始化时的配置逻辑</strong> 和 <strong>API 的用法</strong>，完全没必要再重复敲基础代码。</li></ul><h4 id="4-实践项目时再深入"><a href="#4-实践项目时再深入" class="headerlink" title="4. 实践项目时再深入"></a>4. <strong>实践项目时再深入</strong></h4><ul><li>如果有项目需求，优先复用笔记中的知识。遇到问题再针对性深入研究，不用全面复习所有外设。</li><li>比如做一个数据采集项目，需要用到 ADC 和 DMA，只需要重点复习这两个模块，而 GPIO 或串口可以根据需求快速回顾或直接复用以前的代码。</li></ul><hr><h3 id="为什么不用从-0-到-1-重头敲？"><a href="#为什么不用从-0-到-1-重头敲？" class="headerlink" title="为什么不用从 0 到 1 重头敲？"></a><strong>为什么不用从 0 到 1 重头敲？</strong></h3><ol><li><strong>已有基础</strong>：<ul><li>你之前已经学过 STM32，只是需要复习。看笔记能够快速回忆起核心知识点和方法，重头开始会浪费时间。</li></ul></li><li><strong>复用代码更高效</strong>：<ul><li>实际项目中，STM32 开发很多时候都是基于以前的代码模板或已有的库实现。如果你的笔记和代码记录清晰，可以直接复用。</li></ul></li><li><strong>以需求为中心</strong>：<ul><li>长时间不用的知识只需要根据项目需求进行针对性复习，不用复习所有内容。比如，当前项目只需要用 GPIO 和定时器，你就只复习这两部分即可。</li></ul></li><li><strong>重点是理解和应用</strong>：<ul><li>项目开发中，重要的是理解 STM32 的外设配置原理和应用逻辑，而不是重新熟悉所有代码细节。</li></ul></li></ol><hr><h3 id="但以下情况需要敲代码"><a href="#但以下情况需要敲代码" class="headerlink" title="但以下情况需要敲代码"></a><strong>但以下情况需要敲代码</strong></h3><ol><li><strong>遗忘严重</strong>： 如果长时间不用，已经忘记了某些外设的基本原理或配置方法（比如串口的波特率设置、时钟配置等），可以尝试简单敲一下代码来巩固记忆。</li><li><strong>复杂模块或新功能</strong>： 如果项目中需要用到以前没有学过或很复杂的功能（如 DMA、USB、CAN 总线等），建议从头掌握，熟悉配置方法并实际敲代码。</li><li><strong>提高熟练度</strong>： 如果觉得自己对某些外设的操作还不够熟练，比如 STM32 的中断处理或 HAL 库 API 的应用，可以通过敲代码来强化记忆。</li></ol><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><ul><li>对于长时间不用的 STM32 知识，看笔记回顾原理和流程通常就足够，没必要从头敲代码。</li><li>如果能通过笔记快速理解并应用到项目中，完全可以直接复用笔记和以前的代码。</li><li>只有在遗忘严重或项目需要复杂功能时，才需要重新动手敲代码。最终的目标是以需求为中心，能高效完成项目为主。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2024/12/01/%E7%9F%A5%E8%AF%86%E7%82%B9/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>/2024/12/01/%E7%9F%A5%E8%AF%86%E7%82%B9/%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="报文"><a href="#报文" class="headerlink" title="报文"></a>报文</h1><h3 id="嵌入式行业中“报文”的定义与本质"><a href="#嵌入式行业中“报文”的定义与本质" class="headerlink" title="嵌入式行业中“报文”的定义与本质"></a><strong>嵌入式行业中“报文”的定义与本质</strong></h3><p>在嵌入式行业中，<strong>“报文”</strong>（Message）是一个常见的术语，指在通信系统中传递信息的一种<strong>结构化数据单元</strong>。报文是设备之间通信的最小传输单位，由通信协议定义其格式和内容。它是一种有组织的、结构化的数据，能够在发送方和接收方之间可靠地传递信息。</p><hr><h3 id="报文的本质"><a href="#报文的本质" class="headerlink" title="报文的本质"></a><strong>报文的本质</strong></h3><h4 id="1-数据载体"><a href="#1-数据载体" class="headerlink" title="1. 数据载体"></a><strong>1. 数据载体</strong></h4><p>报文是<strong>数据的承载单元</strong>，用于传递发送方希望传达的信息。无论是控制命令（如打开设备、设置参数）还是状态数据（如温度、速度、位置等），都会被封装在报文中进行传输。</p><h4 id="2-结构化的数据"><a href="#2-结构化的数据" class="headerlink" title="2. 结构化的数据"></a><strong>2. 结构化的数据</strong></h4><p>报文并不是一堆“无序”的数据，而是按照特定通信协议的规则进行组织。它包含若干字段，每个字段有明确的功能和意义。</p><ul><li>通过这种结构化，发送方和接收方能够以标准化方式解析并理解报文内容。</li></ul><hr><h3 id="报文的组成"><a href="#报文的组成" class="headerlink" title="报文的组成"></a><strong>报文的组成</strong></h3><p>报文的组成根据通信协议的不同可能有所变化，但一般包含以下部分：</p><ol><li><strong>头部（Header）：</strong><ul><li>包含标识信息，例如来源地址、目标地址、优先级等。</li><li>描述这条报文的基本特征。</li></ul></li><li><strong>数据段（Payload）：</strong><ul><li>实际传递的数据内容，例如设备的状态值、传感器测量值。</li><li>数据长度和格式由协议定义，例如CAN总线数据段最多为8字节。</li></ul></li><li><strong>校验段（Checksum/CRC）：</strong><ul><li>用于确保报文在传输过程中未被篡改或损坏。</li><li>校验字段通常由硬件根据报文内容自动计算。</li></ul></li><li><strong>结束段：</strong><ul><li>标志报文的结束，使接收方能够识别报文边界。</li></ul></li></ol><hr><h3 id="报文的作用"><a href="#报文的作用" class="headerlink" title="报文的作用"></a><strong>报文的作用</strong></h3><ol><li><strong>数据传递：</strong><ul><li>报文是设备之间传递信息的载体，例如命令信息、传感器状态或配置数据。</li></ul></li><li><strong>通信协调：</strong><ul><li>报文的格式化结构确保发送端与接收端能够按照协议理解报文的内容，避免歧义。</li></ul></li><li><strong>错误检测：</strong><ul><li>报文通常包含校验字段（如CRC），用于检测在传输过程中是否发生了错误。</li></ul></li></ol><hr><h3 id="为什么报文不仅仅是一堆普通数据？"><a href="#为什么报文不仅仅是一堆普通数据？" class="headerlink" title="为什么报文不仅仅是一堆普通数据？"></a><strong>为什么报文不仅仅是一堆普通数据？</strong></h3><p>虽然报文从本质上来说是一堆数据，但它相比普通数据有以下特点：</p><ol><li><strong>有特定的格式：</strong><ul><li>报文必须符合协议规定的格式，通常包括：<ul><li><strong>标识信息：</strong> 发送方、接收方的ID。</li><li><strong>控制信息：</strong> 数据长度、帧类型等。</li><li><strong>数据内容：</strong> 实际传递的消息或命令。</li><li><strong>校验字段：</strong> 用于检查完整性。</li></ul></li></ul></li><li><strong>具有明确的意义：</strong><ul><li>报文中的每个字段都包含特定的信息，例如：<ul><li>仲裁段ID可能代表设备的功能（如发动机转速）。</li><li>数据段可能表示具体值（如3000 RPM）。</li></ul></li></ul></li><li><strong>支持自动解析与处理：</strong><ul><li>报文是结构化的，因此设备的硬件或软件能够自动解析字段内容，并执行对应的任务（如操作指令、数据存储等）。</li></ul></li></ol><hr><h3 id="报文在不同通信协议中的示例"><a href="#报文在不同通信协议中的示例" class="headerlink" title="报文在不同通信协议中的示例"></a><strong>报文在不同通信协议中的示例</strong></h3><h4 id="1-CAN总线报文"><a href="#1-CAN总线报文" class="headerlink" title="1. CAN总线报文"></a><strong>1. CAN总线报文</strong></h4><p>CAN总线报文是嵌入式行业中常见的报文形式，其典型结构包括：</p><ul><li><strong>帧起始位（SOF）：</strong> 标志帧的开始。</li><li><strong>仲裁段（ID）：</strong> 用于仲裁优先级和标识报文内容。</li><li><strong>控制段：</strong> 包括数据长度码（DLC）等信息。</li><li><strong>数据段：</strong> 实际传递的数据，最大长度为8字节。</li><li><strong>CRC段：</strong> 校验字段，用于验证数据完整性。</li><li><strong>ACK段：</strong> 接收确认。</li><li><strong>帧结束位（EOF）：</strong> 标志帧的结束。</li></ul><p><strong>示例：</strong><br> 一条CAN报文传递车速信息，其数据段内容为60 km/h：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ID: <span class="number">0x123</span></span><br><span class="line">DLC: <span class="number">4</span></span><br><span class="line">DATA: <span class="number">0x00</span> <span class="number">0x3C</span> <span class="number">0x00</span> <span class="number">0x00</span></span><br><span class="line">CRC: <span class="number">0xABCD</span></span><br></pre></td></tr></table></figure><h4 id="2-UART报文"><a href="#2-UART报文" class="headerlink" title="2. UART报文"></a><strong>2. UART报文</strong></h4><p>串口通信（UART）的报文结构较为简单，一般包括：</p><ul><li>起始位</li><li>数据位（传输内容）</li><li>校验位（可选）</li><li>停止位</li></ul><p><strong>示例：</strong><br> 通过UART传输ASCII字符<code>A</code>的报文：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Start Bit: <span class="number">0</span></span><br><span class="line">Data Bits: <span class="number">01000001</span> (ASCII <span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">Parity Bit: <span class="number">0</span> (无校验)</span><br><span class="line">Stop Bit: <span class="number">1</span></span><br></pre></td></tr></table></figure><hr><h3 id="报文与帧的关系"><a href="#报文与帧的关系" class="headerlink" title="报文与帧的关系"></a><strong>报文与帧的关系</strong></h3><ol><li><strong>报文（Message）：</strong><ul><li>是一种逻辑上的信息单位，强调数据的内容和意义。</li><li>一条报文可以由多个帧组成。</li></ul></li><li><strong>帧（Frame）：</strong><ul><li>是更底层的传输单位，强调数据的物理传输。</li><li>每个帧通常对应一次传输，封装了报文的一部分数据。</li></ul></li></ol><hr><h3 id="简单比喻"><a href="#简单比喻" class="headerlink" title="简单比喻"></a><strong>简单比喻</strong></h3><p>报文可以比喻成一封信：</p><ul><li><strong>信封（头部）：</strong> 写明了寄件人、收件人地址。</li><li><strong>信件内容（数据段）：</strong> 信中真正传递的信息。</li><li><strong>签名（校验段）：</strong> 用于确认信件的完整性。</li><li><strong>结尾（结束段）：</strong> 标志信件结束。</li></ul><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><ul><li><strong>报文的本质：</strong> 是一组按照协议定义的数据结构，是设备之间通信的最小信息单元。</li><li>关键特点：<ul><li>有特定的格式和结构化规则。</li><li>具备明确的意义，支持自动解析。</li><li>是数据通信的核心单位。</li></ul></li><li><strong>意义：</strong> 报文通过标准化的结构，在设备之间实现可靠、高效的信息传递。</li></ul><hr><blockquote><p><strong>报文 = 通信协议定义的结构化数据集合</strong></p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2024/11/29/%E5%B5%8C%E5%85%A5%E5%BC%8F/GD32/"/>
      <url>/2024/11/29/%E5%B5%8C%E5%85%A5%E5%BC%8F/GD32/</url>
      
        <content type="html"><![CDATA[<p>title: GD32<br>date: 2024 11-29 20:45:56<br>type: “嵌入式”<br>categories: 嵌入式<br>tag: GD32</p><h1 id="GPIO"><a href="#GPIO" class="headerlink" title="GPIO"></a>GPIO</h1><h2 id="1-硬件结构"><a href="#1-硬件结构" class="headerlink" title="1.硬件结构"></a>1.硬件结构</h2><h3 id="1-工作原理"><a href="#1-工作原理" class="headerlink" title="1.工作原理"></a>1.工作原理</h3><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501182330703.png" alt></p><p>​    单片机内部主要包括 CPU、Flash 存储器、RAM 内存和片上的外设。我们可以简单地将工作过程划分为四个步骤：</p><ul><li>单片机上电后，CPU 从 Flash 中读取并响应代码指令。</li><li>根据指令，从片上的外设（例如光照强度传感器）获取数据。这些数据需要先保存在 RAM 内存中，然后进行进一步的数据处理。</li><li>经过加减乘除的运算，根据运算结果控制片上的外设（GPIO）来点亮或熄灭 LED 灯。</li><li>CPU 负责执行和响应代码指令，进行数学运算，往 RAM 内存里读写数据；Flash 存储器（ ROM 的一种实现方式）负责保存代码指令；RAM 内存负责在程序运行过程中保存变量数据；而片上外设则用来控制单片机外部的器件。</li></ul><h3 id="2-概念理解"><a href="#2-概念理解" class="headerlink" title="2.概念理解"></a>2.概念理解</h3><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501191128046.png" alt></p><p>​    GPIO 是指芯片的通用输入输出管脚可将 GPIO 配置为输出模式，控制点亮发光二极管（LED）。也可作为输出控制打开或关闭继电器，配    置为输入模式来检测外部按键，甚至配置为模拟输入模式来检测热敏电阻，以获取温度数据。</p><p>​    因此，GPIO 既可以作为普通的 IO 口，也可以作为模拟输入，甚至作为 I²C 、SPI 、USART 的管脚。</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501182340597.png" alt="-17328844853232"></p><p>​    CPU 是基于总线来进行工作，总线可以理解为高速公路，CPU 通过它与片上外设通信。外设内部会有寄存器，CPU 可以向寄存器写入或    读取数据，从而控制片上外设的状态。根据寄存器中的数据，GPIO 会相应地输出高低电平。</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501182341051.png" alt="-17328844853233"></p><p>​    一个 GPIO 口的内部硬件结构可以分为两部分：上半部分对应输出，下半部分对应输入。</p><p>​    <strong>输出可以配置为四种模式：</strong></p><ul><li><p>推挽输出</p></li><li><p>开漏输出</p></li><li><p>推挽复用输出</p></li><li><p>开漏复用输出</p><p><strong>输入可以配置为四种模式：</strong></p></li><li><p>模拟输入</p></li><li><p>浮空输入</p></li><li><p>上拉输入</p></li><li><p>下拉输入</p></li></ul><h2 id="2-输出模式"><a href="#2-输出模式" class="headerlink" title="2.输出模式"></a>2.输出模式</h2><h3 id="1-输出结构"><a href="#1-输出结构" class="headerlink" title="1.输出结构"></a>1.输出结构</h3><p>数据来源有两种：<strong>普通的 GPIO 寄存器数据或备用功能寄存器的数据</strong>（即复用功能，例如 I²C、SPI 等）。</p><p>推挽输出和推挽复用输出的输出控制部分相同，只是数据来源可能不同。经过输出控制后，会有一个取反的效果后面是两个 MOS管，上面是 PMOS 管，下面是 NMOS 管。这两个 MOS 组成的电路就是推挽输出电路。</p><h4 id="1-推挽输出"><a href="#1-推挽输出" class="headerlink" title="1.推挽输出"></a>1.推挽输出</h4><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501182341913.png" alt="-17328844853234"></p><p>​    假设寄存器的数据输出高电平，取反后为低电平。此时，NMOS 管截止，PMOS 管导通，连接到 VCC。输出高电平，LED 熄灭。</p><p>​    假设寄存器的数据输出低电平，取反后为高电平。此时， PMOS 管截止，NMOS 管导通，电流流向地，输出低电平，LED 亮。</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501182341597.png" alt="-17328844853235"></p><p>​    假设寄存器输出高电平，取反后为低电平，PMOS 管导通，输出为高电平，LED 灯亮。此时电流由外部流向单片机的内部，再到 GND 。</p><p>​    假设寄存器输出低电平，取反后为高电平， NMOS 管导通，输出为低电平，LED 灯熄灭。</p><blockquote><p>​    对于 ARM 32 位单片机，GPIO 能够输出的最大电流为 25 毫安，因此驱动发光二极管是绰绰有余的。一般发光二极管需要的电流    约为 5 毫安左右。需要注意的是，并不是所有 GPIO 口都能输出 25 毫安电流，因为单片机本身也需要考虑功耗。对于单片机整体    输出电流一般在 200 毫安左右。</p></blockquote><h4 id="2-开漏输出"><a href="#2-开漏输出" class="headerlink" title="2.开漏输出"></a>2.开漏输出</h4><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501182345744.png" alt="-17328844853236"></p><p>​    开漏输出的电路设计与推挽输出不同。在开漏输出中，去掉了上面的 PMOS 管，只留下 NMOS 管。这种设计称为开漏输出。</p><p>​    当寄存器输出为高电平，取反后为低电平，此时 NMOS 管截止，状态为高阻态，LED 灯熄灭。</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501182346077.png" alt="-17328844853237"></p><p>​    当寄存器输出低电平，经过取反后为高电平，NMOS 导通，电流从 Vcc 流过，LED 灯被点亮。</p><p>​    因此，开漏输出的特点是只能提供低电平，而不能提供高电平。</p><h5 id="1-开漏输出优点"><a href="#1-开漏输出优点" class="headerlink" title="1.开漏输出优点"></a>1.开漏输出优点</h5><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501182346951.png" alt="-17328844853238"></p><p>​    由开漏输出的特点可知，要提供高电平，必须在单片机的外部增加一个上拉电阻。</p><p>​    开漏输出的主要优点在于可以实现电平转换和线与功能。我们先来分析电平转换的过程：</p><p>​    假设负载需要 5V 供电，而单片机系统为 3.3V 时，可以将 Vcc 直接连接到 5V。如果单片机输出高电平，变为低电平，此时 NMOS 管截</p><p>​    止，Vcc 的电流通过上拉电阻拉高，输出为高电平。</p><h5 id="2-线与功能"><a href="#2-线与功能" class="headerlink" title="2.线与功能"></a>2.线与功能</h5><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501182347799.png" alt="-17328844853239"></p><p>​    对于 I²C 协议，可以挂载多个 I²C 设备，如 EEPROM、触摸屏驱动芯片等。I²C 总线要求实现线与功能。根据逻辑，同一线上只要有一个设    备输出低电平，整个总线电平就会变为低。</p><p>​    <strong>推挽输出的结构无法实现线与功能，因其可能造成短路。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501182347796.png" alt="-173288448532310"></p><p>​    <strong>相反，开漏输出可以实现线与功能。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501182347805.png" alt="-173288448532311"></p><p>​    <strong>假设单片机输出高电平，取反后变为低电平，NMOS 管截止，此时总线电平为高电平。如果任何一个设备输出低电平，NMOS 管导通，</strong></p><p>​    <strong>电流流入地，整个总线电平则变为低电平。</strong></p><h3 id="3-地址分配"><a href="#3-地址分配" class="headerlink" title="3.地址分配"></a>3.地址分配</h3><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501182352964.png" alt="-173288448532312"></p><p>​    这是寄存器的地址范围，以及 ARM 32 位单片机（如 STM32、GD32）的片上外设寄存器的基本信息。</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501182348454.png" alt="-173288448532313"></p><p>​    对于 GPIO，有配置寄存器、数据寄存器和复用寄存器。配置寄存器用于设置 GPIO 口为输入或输出模式，数据寄存器用于在输入</p><p>​    模式下获取电平，在输出模式下控制电平。</p><h2 id="3-输入模式"><a href="#3-输入模式" class="headerlink" title="3.输入模式"></a>3.输入模式</h2><h3 id="1-硬件框架"><a href="#1-硬件框架" class="headerlink" title="1.硬件框架"></a>1.硬件框架</h3><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501182349584.png" alt="-173288448532315"></p><ul><li>模拟输入：模拟输入是将外部的模拟信号通过 ADC 转换为数字量。</li><li>浮空输入</li><li>下拉输入</li><li>上拉输入</li></ul><h3 id="2-输入结构"><a href="#2-输入结构" class="headerlink" title="2.输入结构"></a>2.输入结构</h3><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501182349542.png" alt="-173288448532316"></p><p>​    这三种输入模式可以将外部的数字信号转换为数字量 0 和 1。在输入驱动单元中包含上拉电阻、下拉电阻和施密特触发器。其中，施密特    触发器用于将外部的数字信号转换为 0 和 1。</p><p>​    转换后的信号有两个输出方向：</p><ul><li>可以输出给复用功能，比如串口的 RX 引脚。</li><li>可以输出给普通 GPIO 口的输入状态寄存器，通过读取寄存器中的数据来获取高低电平状态。</li></ul><blockquote><h6 id="对于-ARM-Cortex-M3-单片机，在转换过程中有以下特性："><a href="#对于-ARM-Cortex-M3-单片机，在转换过程中有以下特性：" class="headerlink" title="对于 ARM Cortex-M3 单片机，在转换过程中有以下特性："></a>对于 ARM Cortex-M3 单片机，在转换过程中有以下特性：</h6><ul><li>当外部信号电压大于等于 0.7 倍 VDD 时，认为是高电平（逻辑 1）。</li><li>当外部信号电压小于等于 0.3 倍 VDD 时，认为是低电平（逻辑 0）。</li></ul></blockquote><h4 id="1-浮空输入"><a href="#1-浮空输入" class="headerlink" title="1.浮空输入"></a>1.浮空输入</h4><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202502212149653.png" alt="image-20250221214958597"></p><p>​    浮空输入模式下，输入驱动单元中的上拉电阻和下拉电阻是关闭的（没有使能），此时端口在单片机内部呈现为高阻态。这种模式的应用    场景，比如 GPIO 作为单片机串口的 RX 引脚时，就需要配置为浮空输入模式，外部连接其他器件的 TX 引脚。这样，端口的电平状态完全    取决于外部器件的 TX 引脚。</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501182353305.png" alt="-173288448532318"></p><p>​    如果使用浮空输入模式来检测一个按键，假设按键的一端连接到 IO 口，另一端连接到地。当按键按下时，端口被拉低，通过施密特触发    器转换为数字量 0，输入状态寄存器通过读取寄存器数据判断为低电平，进而执行业务逻辑，这部分没有问题。但是当按键没有被按下</p><p>​    时，端口是悬空的，此时电平状态不确定，可能因为外部干扰而被误判为低电平，从而错误地执行业务逻辑。</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501182354524.png" alt="-173288448532321"></p><p>​    上拉输入和下拉输入模式的使用频率相对较低，更多时候使用浮空输入模式。</p><p>​    采用浮空输入检测按键，需要在单片机外部额外加上上拉或下拉电阻，以确保在悬空时有明确的电平状态。通常，上拉电阻选择 2kΩ 到 </p><p>​    10kΩ 之间。</p><p>​    例如，开发板上使用浮空输入模式并在外部加上了上拉电阻来稳定电平。此外，有时在端口处串联一个限流电阻来保护端口。</p><h4 id="2-上拉输入"><a href="#2-上拉输入" class="headerlink" title="2.上拉输入"></a>2.上拉输入</h4><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501182354019.png" alt="-173288448532319"></p><p>​    针对上述问题，可以采用上拉输入模式，将输入驱动单元的上拉电阻打开，使能。当按键没有按下时，端口通过上拉电阻被拉为高电平，    这样可以避免浮空输入模式下电平不确定的问题。</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501182354019.png" alt="-173288448532319"></p><p>​    针对上述问题，可以采用上拉输入模式，将输入驱动单元的上拉电阻打开，使能。当按键没有按下时，端口通过上拉电阻被拉为高电平，    这样可以避免浮空输入模式下电平不确定的问题。</p><ul><li><strong>开关或按钮输入</strong>：当按钮未被按下时，输入状态为高电平。当按钮被按下时，输入状态被直接连接到地，变为低电平。</li><li><strong>防止悬空状态</strong>：在没有其他信号源时，上拉电阻确保输入端始终有一个已定义的高电平状态。</li><li><strong>开漏输出</strong>：在使用开漏（open-drain）输出的设备中，需要通过上拉电阻将信号拉高。</li></ul><h4 id="3-下拉输入"><a href="#3-下拉输入" class="headerlink" title="3.下拉输入"></a>3.下拉输入</h4><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501182359434.png" alt="-173288448532320"></p><p>​    另一种按键驱动电路是按键连接到限流电阻，再连接到 VCC。对于这种电路，需使用下拉输入模式，也就是打开驱动单元中的下拉电阻，    使能。当按键没有按下时，端口通过下拉电阻被拉到低电平；当按键按下时，电流从外部流入单片机内部，端口电平被拉高。</p><ul><li><strong>开关或按钮输入</strong>：当按钮未被按下时，输入状态为低电平。当按钮被按下时，输入状态被直接连接到电源，变为高电平。</li><li><strong>防止悬空状态</strong>：在没有其他信号源时，下拉电阻确保输入端始终有一个已定义的低电平状态。</li><li><strong>反相输入</strong>：当输入信号需要反转时，使用下拉电阻可使高电平输入对应低电平输出。</li></ul><blockquote><p>单片机内部的上拉和下拉电阻，典型值为 40 kΩ ，而限流电阻通常选择 1kΩ 。</p></blockquote><h2 id="4-输出速度"><a href="#4-输出速度" class="headerlink" title="4.输出速度"></a>4.输出速度</h2><h3 id="1-输出速度定义"><a href="#1-输出速度定义" class="headerlink" title="1.输出速度定义"></a>1.输出速度定义</h3><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501182355812.png" alt="-173288448532322"></p><p>​    如果用<code>t</code>来表示周期，那么<code>f = 1/t</code>。假设我们将输出速度设置为10MHz，那么周期<code>t</code>就等于：十的九次方除以10M，也就是十的七    次方纳秒，即100纳秒。</p><h3 id="2-输出速度影响"><a href="#2-输出速度影响" class="headerlink" title="2.输出速度影响"></a>2.输出速度影响</h3><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501182355364.png" alt="-173288448532323"></p><p>​    理想情况下，单片机输出高低电平应该是一个方波，但实际上这个过程是有上升时间（<code>tr</code>）和下降时间（<code>tf</code>）过程的。在单片机的</p><p>​    手册中明确说明了，为了保证输出有效的高低电平，<code>tr + tf</code>必须小于等于周期<code>t</code>的三分之二。</p><ul><li>输出速度设置输出速度为10MHz，那么周期<code>t</code>是100纳秒，则：<code>tr + tf &lt;  2 * t / 3 = 67</code>。</li></ul><p>​    所以，<code>tr</code>和<code>tf</code>的总和需要小于67纳秒，通常每个时间段大约是 33 ~ 34 纳秒。</p><ul><li>输出速度设置为50MHz，那么周期<code>t</code>是20纳秒，则：<code>tr + tf &lt; 2 * t / 3 = 13</code>。</li></ul><p>​    这样，<code>tr</code>和<code>tf</code>每个大约是6-7纳秒左右。因此，设置GPIO口的输出速度越高，<code>tr</code>和<code>tf</code>就要控制得越小，上升和下降的过程    越陡峭。</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501182356110.png" alt="-173288448532324"></p><p>​    单片机的GPIO口输出信号去控制一个外设负载，这个负载可以等效为一个电容<code>CL</code>，因为电容会影响电压变化的速率。</p><p>​    输出高低电平的过程，其实就是对电容的充放电过程，我们可以用电容充电公式来表示：</p><p>​    其中，<code>dv/dt</code>表示电压变化的速率。因此，在负载电容值<code>CL</code>一定的情况下，电压变化速率越快，所需电流<code>I</code>越大，电流越大</p><p>​    就会导致单片机的功耗增加。此外，输出频率越高，还会涉及到EMI（电磁干扰）的问题。</p><p>​    </p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501182356278.png" alt="-173288448532325"></p><ul><li>当输出速度为 2MHz ，负载电容<code>Cl</code>为 50pF 时，通过输出一定电流，<code>tr</code>和<code>tf</code>可以控制在 125 纳秒以下。</li><li>当输出速度为 10MHz ，负载电容<code>Cl</code>为 50pF 时，通过输出一定电流，<code>tr</code>和<code>tf</code>可以控制在 25 纳秒以下。</li><li>当输出速度为 50MHz ，负载电容<code>Cl</code>为 30pF 时，<code>tr</code>和<code>tf</code>大约是 5纳秒；而当<code>Cl</code>为 50pF 时，<code>tr</code>和<code>tf</code>大约是 8 纳秒。</li></ul><blockquote><ul><li>如果我们要控制一个简单的发光二极管，配置成 2MHz 的输出速度即可。</li><li>如果我们要驱动 SD 卡，则需要配置 50MHz 的输出速度。</li></ul></blockquote><h1 id="CLOCKTREE"><a href="#CLOCKTREE" class="headerlink" title="CLOCKTREE"></a>CLOCKTREE</h1><p>时钟对于单片机来说就像是人的心脏，非常重要。时钟为单片机提供心跳节拍，<strong>CPU 根据时钟的跳动来执行代码指令</strong>。</p><p>时钟频率越高，代码指令执行得越快，系统性能也越高；反之，时钟越慢，执行也越慢。</p><h2 id="1-单片机架构"><a href="#1-单片机架构" class="headerlink" title="1.单片机架构"></a>1.单片机架构</h2><h3 id="1-51-单片机"><a href="#1-51-单片机" class="headerlink" title="1. 51 单片机"></a>1. 51 单片机</h3><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501190003993.png" alt="-173288448532426"></p><p>​    单片机内部有很多组件，包 CPU 、片上外设 (如 Flash、RAM、定时器、串口等)。CPU 通过总线访问这些片上外设。</p><h3 id="2-32-单片机"><a href="#2-32-单片机" class="headerlink" title="2. 32 单片机"></a>2. 32 单片机</h3><h4 id="1-架构设计"><a href="#1-架构设计" class="headerlink" title="1.架构设计"></a>1.架构设计</h4><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501190003699.png" alt="-173288448532427"></p><p>​    ARM Cortex M4 有三个总线接口，即 ICode 总线、DCode 总线和系统总线接口。</p><ul><li>ICode 总线接口用于连接并访问 Flash 获取代码指令</li><li>DCode 总线接口连接并访问 Flash 获取数据</li><li>系统总线接口则用于连接并访问 RAM 和片上外设。</li></ul><h4 id="2-外设分布"><a href="#2-外设分布" class="headerlink" title="2.外设分布"></a>2.外设分布</h4><p>ICode 和 DCode 总线对应的分别是 IBus 和 DBus，它们从 Flash 中获取代码指令和数据。系统总线接口对应的是 AHB 总线，用于连接访问片上外设，如 FMC、SDIO、CRC、RCU 等。</p><p>基于 AHB 总线，派生出两个 APB 总线：APB1 和 APB2。APB1 总线连接看门狗、定时器、串口、SPI 等外设， APB2 总线连接串口 0、SPI 0、ADC 等外设。</p><h2 id="2-时钟系统架构"><a href="#2-时钟系统架构" class="headerlink" title="2.时钟系统架构"></a>2.时钟系统架构</h2><blockquote><h6 id="时钟树简易框图如下："><a href="#时钟树简易框图如下：" class="headerlink" title="时钟树简易框图如下："></a>时钟树简易框图如下：</h6><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501190004761.png" alt="-173288448532429"></p><ul><li>振荡器 (黄色)：内部有 3 个振荡器，外部有 2 个。</li><li>锁相环 (PLL)：对输入时钟进行倍频。</li><li>分频器 (绿色)：对输入时钟进行分频。</li><li>片上外设 (蓝色)：例如 USB、SDIO、FMC 等。</li></ul></blockquote><h2 id="3-时钟系统分布"><a href="#3-时钟系统分布" class="headerlink" title="3.时钟系统分布"></a>3.时钟系统分布</h2><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501190004165.png" alt="-173288448532430"></p><ul><li><strong>系统时钟：</strong>对于 GD32F303 MCU，其主频最高为 120MHz，经过 AHB 分频器后，生成 AHB 时钟，供给 AHB 外设，如 EXMC、SDIO 等。</li><li><strong>APB 时钟：</strong>经过 APB1 分频器，生成 APB1 时钟，最大为 60MHz，供给 APB1 外设。类似地，APB2 时钟最大为 120MHz，供给 APB2 外设。</li><li><strong>USB 外设：</strong>USB 是一种高速串行接口，需要精确的时钟。其时钟来源可以是 PLL 输出的时钟，也可以是内部的 IRC 48MHz 振荡器，经过分频器生成固定的 48MHz 时钟，供给 USB 外设。</li><li><strong>PLL 锁相环：</strong>其输入时钟来源可以是内部的 IRC 8MHz 振荡器，也可以是外部的高速晶振。内部的 IRC 8MHz 振荡器精度较低，适用于一些简单的控制任务，而对通信有要求的应用通常使用外部晶振以提高精度。</li><li><strong>RTC 实时时钟：</strong>输入来源有 3 个：外部高速晶振（需分频）、外部低速晶振（32.768kHz）以及内部的 IRC 40kHz 振荡器。通常选择低速晶振，以降低功耗。内部的 40kHz 振荡器则用于独立看门狗提供时钟。</li></ul><h2 id="4-内核-DWT-延时"><a href="#4-内核-DWT-延时" class="headerlink" title="4.内核 DWT 延时"></a>4.内核 DWT 延时</h2><h3 id="1-延时原理"><a href="#1-延时原理" class="headerlink" title="1.延时原理"></a>1.延时原理</h3><h3 id="2-代码实现"><a href="#2-代码实现" class="headerlink" title="2.代码实现"></a>2.代码实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NVIC"><a href="#NVIC" class="headerlink" title="NVIC"></a>NVIC</h1><h2 id="1-中断系统"><a href="#1-中断系统" class="headerlink" title="1.中断系统"></a>1.中断系统</h2><h3 id="1-概念理解"><a href="#1-概念理解" class="headerlink" title="1.概念理解"></a>1.概念理解</h3><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501190009507.png" alt="-173288448532431"></p><p>​    假设我正在看书，突然有人敲门，那么我需要放下书去开门查看情况，处理完后再回到座位继续看书。过一会儿，水烧开了，我又需要放    下书去关火、倒水。在这个过程中，敲门声和水开了的提示都会打断我正在执行的任务（看书），去处理更紧急、更高优先级的事情（开    门、关火倒水）。</p><p>​    <strong>类比单片机中断系统：</strong></p><ul><li>看书是单片机系统执行的主流程任务。</li><li>敲门声、水开了是中断触发源。</li><li>开门、关火倒水是中断服务函数。</li><li>中断处理之所以发生，是因为这些事件的优先级比当前任务（看书）更高。</li></ul><h3 id="2-单片机中断概念"><a href="#2-单片机中断概念" class="headerlink" title="2.单片机中断概念"></a>2.单片机中断概念</h3><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501190010567.png" alt="-173288448532432"></p><p>​    在 ARM 单片机中，中断的统称是异常，中断只是异常的一个子集。</p><ul><li>系统异常：由内核产生，比如系统复位异常、总线访问异常、硬错误异常、SysTick（滴答定时器）异常等。</li><li>中断：由片上外设产生，比如串口中断、定时器中断、ADC 中断、GPIO 引脚对应的 EXTI 外部中断等。</li></ul><h4 id="1-异常触发源"><a href="#1-异常触发源" class="headerlink" title="1.异常触发源"></a>1.异常触发源</h4><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501190010635.png" alt="-173288448532433"></p><ul><li>系统复位异常：比如手动复位或掉电都会触发系统复位异常。</li><li>硬件故障异常（HardFault）：比如代码中存在除数为零的错误就会触发硬错误异常。</li><li>总线访问异常：例如访问内存时没有按 4 字节对齐，就会触发总线访问异常。</li><li>SysTick 异常：滴答定时器的异常。</li><li>外设中断：比如 ADC、串口、定时器、EXTI 等。</li></ul><h4 id="2-异常空间分配"><a href="#2-异常空间分配" class="headerlink" title="2.异常空间分配"></a>2.异常空间分配</h4><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501190010313.png" alt="-173288448532434"></p><p>​    这些异常触发源在 Flash 中需要分配存储空间，每个触发源对应 4 个字节的存储空间。</p><p>​    <strong>例如：</strong></p><ul><li>系统复位异常的存储空间是 0x04 到 0x07。</li><li>NMI（非屏蔽中断）的存储空间是 0x08 到 0x0B。</li><li>SysTick 的存储空间是 0x3C 到 0x3F。</li></ul><p>​    <strong>例如：</strong></p><ul><li>系统复位异常的编号是 1，它的起始地址就是 1 × 4 = 0x04。</li><li>SysTick 的编号是 15，起始地址是 15 × 4 = 0x3C。</li></ul><blockquote><p><strong>存储器映射将 Flash 的地址空间从 0x00000000 映射到 0x08000000，目的是实现 ARM 单片机的几种启动模式：从 Flash 启动、从 RAM 启动、以及从预置的 Bootloader 启动。不同的启动模式下地址映射不同。</strong></p></blockquote><h4 id="3-中断执行流程"><a href="#3-中断执行流程" class="headerlink" title="3.中断执行流程"></a>3.中断执行流程</h4><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501190010261.png" alt="-173288448532435"></p><ul><li>当我们手动复位或单片机掉电，会触发系统复位异常。</li><li>NVIC 首先通过系统复位异常的编号（1），计算出其对应的存储空间（0x04 到 0x07），然后从该存储空间中获取中断服务函数的地址，最终调用该中断服务函数。</li></ul><h2 id="2-EXTI-中断"><a href="#2-EXTI-中断" class="headerlink" title="2. EXTI 中断"></a>2. EXTI 中断</h2><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501190012522.png" alt="-173288448532436"></p><p>​    EXTI 可以用来检测 GPIO 口作为输入模式时的高低电平变化，进而触发上升沿或下降沿中断。</p><p>​    <strong>例如：</strong></p><p>​    利用它来检测按键按下动作。当按键未按下时是高电平，按下时发生跳变为低电平，这是一个下降沿，可以触发 EXTI 中断。环境传感器     AP3216C ，可感知是否有物体靠近，当达到一定阈值时会从高电平跳变到低电平，这也是一个下降沿，同样可以产生 EXTI 中断。</p><blockquote><p><strong>GPIO 并不是直接连接到 NVIC 中断控制器的，而是通过 EXTI 控制器中转。EXTI 控制器和 NVIC 都包含了一些寄存器，用于控制中断触发和管理。</strong></p></blockquote><h3 id="1-硬件连接结构"><a href="#1-硬件连接结构" class="headerlink" title="1.硬件连接结构"></a>1.硬件连接结构</h3><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501190012593.png" alt="-173288448532437"></p><p>​    EXTI 控制器位于 GPIO 和 NVIC 之间。以 EXTI 线 0 为例，它可以连接到 PA0 到 PG0 中的任意一个 GPIO 口。在 EXTI 控制器中有一个选择    器，用于选择哪个 GPIO 口连接到 EXTI 线。可以配置为上升沿、下降沿或上升沿和下降沿同时触发中断。</p><p>​    <strong>同一时刻 EXTI 线只能连接一个 GPIO 。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501190012880.png" alt="-173288448532438"></p><p>​    <strong>如果配置 PA0 连接到 EXTI 线 0，随后再配置 PB0 连接到 EXTI 线 0，那么 PA0 的连接会失效。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501190012231.png" alt="-173288448532439"></p><p>​    EXTI 线 9-5 和 15-10 的中断源与前面的 EXTI 线 0-4 不同，前者共用一个中断触发源和中断服务函数。</p><h3 id="2-中断优先级"><a href="#2-中断优先级" class="headerlink" title="2.中断优先级"></a>2.中断优先级</h3><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501190013120.png" alt="-173288448532440"></p><p>​    优先级主要应用在两个场景中：</p><ul><li>多个中断同时触发时，决定先处理哪个中断。 例如，我正在看书，同时听到敲门声和水烧开的声音，我需要决定是先去开门还是先关火。</li><li>中断抢占：当一个中断服务函数正在执行时，另一个中断到来，决定是否打断当前中断去处理新的中断。</li></ul><blockquote><p>在 ARM 单片机中，通过配置 NVIC 控制器的寄存器来实现中断优先级控制。涉及的寄存器有两个：IP 和 AIRCR。</p><ul><li>IP 寄存器：每个中断源对应一个 8 位宽度的 IP 寄存器，单片机只使用高 4 位（Bit 4 到 Bit 7），数值范围是 0 到 15。</li><li>AIRCR 寄存器：用于配置优先级分组，一共有 5 组（0 到 4），通过配置 AIRCR 的第 8 到第 10 位实现。</li></ul></blockquote><h4 id="1-优先级分组"><a href="#1-优先级分组" class="headerlink" title="1.优先级分组"></a>1.优先级分组</h4><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501190013253.png" alt="-173288448532441"></p><ul><li>第 0 组：0 位用于抢占优先级，4 位用于子优先级。</li><li>第 4 组：4 位用于抢占优先级，0 位用于子优先级。</li></ul><p>​    目的是为了灵活设置优先级，使得不同场景下的中断处理更为有效。</p><blockquote><p><strong>有些异常中断的优先级是固定的，例如复位、NMI（非屏蔽中断）、硬件错误中断等，它们的优先级分别为 -3、-2、-1，复位中断的优先级最高。其他异常中断则可以根据需要进行优先级配置。</strong></p></blockquote><h4 id="2-执行顺序"><a href="#2-执行顺序" class="headerlink" title="2.执行顺序"></a>2.执行顺序</h4><blockquote><p>实际开发中，通常<strong>先配置优先级分组</strong>，<strong>再设置抢占优先级和子优先级</strong>。</p><ul><li>如果两个中断同时发生，首先判断抢占优先级，数值越小优先级越高。如果抢占优先级相同，则判断子优先级，数值越小优先级越高。</li><li>如果一个中断正在执行，另一个中断到来，是否抢占取决于抢占优先级。</li><li>例如，如果中断 A 正在执行，中断 B 到来，B 的抢占优先级高（数值小于）于 A，则 B 会打断 A。</li><li>例如，如果中断 A 正在执行，中断 B 到来，B 的抢占优先级与 A相同，则 B 不会打断 A。</li></ul><p>优先级的配置会影响中断的嵌套关系，例如分组为 2 时支持 4 级中断嵌套，分组为 4 时支持 16 级中断嵌套。</p></blockquote><h2 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h2><p>​    通过 EXTI 中断方式检测 K1 按键。对应的引脚是 PA0，与 EXTI 线 0 相连接。</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501190014548.png" alt="-173288448532443"></p><p>​    <strong>配置和初始化过程</strong>可以分为两部分：</p><ul><li>第一部分是初始化 GPIO，包括使能 GPIO 的时钟，并配置为输入模式。</li><li>第二部分是初始化 EXTI，分为五个步骤：<ul><li>使能 EXTI 外设的时钟。</li><li>配置引脚连接到 EXTI 线，并设置上升沿或下降沿触发。</li><li>清除中断标志位。</li><li>使能中断。</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;gd32f30x.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;led_drv.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">GPIOInit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">rcu_periph_clock_enable(RCU_GPIOA);</span><br><span class="line">gpio_init(GPIOA, GPIO_MODE_IN_FLOATING, GPIO_OSPEED_2MHZ, GPIO_PIN_0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">EXTIInit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 使能EXTI时钟 */</span></span><br><span class="line">rcu_periph_clock_enable(RCU_AF);</span><br><span class="line"><span class="comment">/* I/O连接到EXTI线 */</span></span><br><span class="line">gpio_exti_source_select(GPIO_PORT_SOURCE_GPIOA, GPIO_PIN_SOURCE_0);</span><br><span class="line"><span class="comment">/* 配置下降沿 */</span></span><br><span class="line">exti_init(EXTI_0, EXTI_INTERRUPT, EXTI_TRIG_FALLING);</span><br><span class="line"><span class="comment">/* 清除标志 */</span></span><br><span class="line">exti_interrupt_flag_clear(EXTI_0);</span><br><span class="line"><span class="comment">/* 使能中断 */</span></span><br><span class="line">nvic_irq_enable(EXTI0_IRQn, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">* @brief 按键硬件初始化</span></span><br><span class="line"><span class="comment">* @param</span></span><br><span class="line"><span class="comment">* @return </span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">KeyInit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">GPIOInit();</span><br><span class="line">EXTIInit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在实现使能中断时，使用 NVIC 的接口函数 <code>nvic_irq_enable</code>，其参数为中断源、抢占优先级和子优先级。默认情况下，优先级分组设置为抢占优先级 2 位，子优先级 2 位，范围为 0 到 3。</p><p>仿真调试时，可以通过 J-Link 连接进行单步跟踪，了解 NVIC IRQ Enable 函数的执行过程。在寄存器中，可以看到优先级分组的配置和变化。</p><blockquote><p><strong>初始化外部中断时，清除 EXTI 中断标志位就是清除对应 EXTI 中断线的标志位。</strong></p><p>清除对应的中断线原因：</p><ul><li><strong>避免中断干扰</strong></li></ul><p>在中断控制器配置期间，如果不清除先前的中断状态，可能会导致意外的中断触发。这会影响系统的稳定性和可靠性，甚至可能导致错误的处理流程。因此，清除中断线可以确保在配置新中断时，不会被之前未处理的中断干扰。</p><ul><li><strong>保证中断服务程序的正确执行</strong></li></ul><p>如果不清除中断线，系统可能会在配置过程中立即响应旧的中断信号，从而触发中断服务例程（ISR）。这可能导致中断服务例程执行时，硬件资源尚未正确配置，进而引发不可预期的错误。因此，清除中断线可以确保只有在配置完成后，新的中断才会被响应。</p><ul><li><strong>提高中断处理的效率</strong></li></ul><p>通过清除中断线，系统能够更快速地识别和响应新的中断信号。当中断控制器检测到一个中断请求时，它将检查相应的中断线状态。如果这些中断线在配置期间被清除，系统可以在收到新的中断请求时更加高效地进行处理。</p><ul><li><strong>避免误判和重复触发</strong></li></ul><p>如果中断线未被清除，可能导致系统误判当前的中断状态，重复触发同一个中断。这不仅浪费了处理资源，还可能导致数据损坏或系统崩溃。因此，清除中断线是一种防范机制，可以帮助确保中断处理的准确性。</p></blockquote><h3 id="1-问题一：没有中断服务函数"><a href="#1-问题一：没有中断服务函数" class="headerlink" title="1.问题一：没有中断服务函数"></a><strong>1.问题一：没有中断服务函数</strong></h3><h4 id="1-问题一：有主循环"><a href="#1-问题一：有主循环" class="headerlink" title="1.问题一：有主循环"></a>1.问题一：有主循环</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;gd32f30x.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;key_drv.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">DelayInit();</span><br><span class="line">LedInit();</span><br><span class="line">KeyInit();</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/11/29/%E5%B5%8C%E5%85%A5%E5%BC%8F/GD32/Users/Administrator/Desktop/202412121521569.png" alt="QQ20241212-151901"></p><p><strong>如果此时运行程序，由于初始化了 EXTI 并使能了中断，但没有实现中断服务函数，会导致程序进入汇编代码里面默认的中断服务函数，即死循环。</strong></p><h4 id="2-问题二：没有主函数循环"><a href="#2-问题二：没有主函数循环" class="headerlink" title="2.问题二：没有主函数循环"></a><strong>2.问题二：没有主函数循环</strong></h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;gd32f30x.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;led_drv.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;key_drv.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">DelayInit();</span><br><span class="line">LedInit();</span><br><span class="line">KeyInit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/11/29/%E5%B5%8C%E5%85%A5%E5%BC%8F/GD32/Users/Administrator/Desktop/202412121527992.png" alt="QQ20241212-152728"></p><p>在程序执行完 <code>main()</code> 后，如果没有 <code>while(1)</code> 并且刚好触发了外部中断，程序的行为和有 <code>while(1)</code> 的情况是类似的，都会进入汇编启动文件的 <code>B .</code> 死循环，而不会直接执行硬件错误中断。</p><blockquote><p>如果没有 <code>while(1)</code>，并且程序执行完 <code>main()</code> 后，控制流会进入未定义区域。若此时发生外部中断，处理器会尝试跳转到 ISR，但如果 ISR 未定义或中断处理机制不完善，可能导致错误（如程序跳转到非法地址），从而触发 <code>HardFault</code>中断。</p><p><strong>没有为外部中断编写相应的服务函数（ISR）</strong> 是导致 <strong>HardFault</strong> 的 <strong>主要原因</strong>，而 <strong>while(1)</strong> 只是一个 <strong>次要原因</strong>。</p></blockquote><h3 id="2-问题二：未清除标志位"><a href="#2-问题二：未清除标志位" class="headerlink" title="2.问题二：未清除标志位"></a>2.问题二：未清除标志位</h3><p>验证一个问题：GPIO 口连接到 EXTI 线时，同一时刻只能有一个 IO 口连接。</p><blockquote><p><strong>现在连接的是 PA0，如果再配置 PC0 连接到 EXTI 线：</strong></p><p>复位后按下 K1 没有反应，去掉 PC0 配置后，按下 K1，LED 灯亮，再按下灭。</p></blockquote><p>如果在 EXTI 中断服务函数中不清除标志位会发生什么情况。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">* @brief EXTI0中断服务函数，对应PA0</span></span><br><span class="line"><span class="comment">* @param</span></span><br><span class="line"><span class="comment">* @return </span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">EXTI0_IRQHandler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (exti_interrupt_flag_get(EXTI_0) != RESET)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 清除外部中断线 */</span></span><br><span class="line"><span class="comment">//exti_interrupt_flag_clear(EXTI_0);</span></span><br><span class="line">ToggleLed(LED1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在中断服务函数中设置一个断点，全速运行，按下 K1。</p><p><img src="/2024/11/29/%E5%B5%8C%E5%85%A5%E5%BC%8F/GD32/Users/Administrator/Desktop/202412121826256.png" alt="QQ20241212-182625"></p><p>可以看到程序停在断点处，再次全速执行并按下K1，程序不断进入中断服务函数。</p><p><strong>因此，对于 EXTI 中断服务函数，必须清除中断标志位。</strong></p><blockquote><p>编写中断服务函数之前，加入管理所有中断的<code>gd32f30x_it.c</code>文件。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;gd32f30x.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;led_drv.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">GPIOInit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">rcu_periph_clock_enable(RCU_GPIOA);</span><br><span class="line">gpio_init(GPIOA, GPIO_MODE_IN_FLOATING, GPIO_OSPEED_2MHZ, GPIO_PIN_0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">EXTIInit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 使能EXTI时钟 */</span></span><br><span class="line">rcu_periph_clock_enable(RCU_AF);</span><br><span class="line"><span class="comment">/* I/O连接到EXTI线 */</span></span><br><span class="line">gpio_exti_source_select(GPIO_PORT_SOURCE_GPIOA, GPIO_PIN_SOURCE_0);</span><br><span class="line"><span class="comment">/* 配置下降沿 */</span></span><br><span class="line">exti_init(EXTI_0, EXTI_INTERRUPT, EXTI_TRIG_FALLING);</span><br><span class="line"><span class="comment">/* 清除标志 */</span></span><br><span class="line">exti_interrupt_flag_clear(EXTI_0);</span><br><span class="line"><span class="comment">/* 使能中断 */</span></span><br><span class="line">nvic_irq_enable(EXTI0_IRQn, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">* @brief 按键硬件初始化</span></span><br><span class="line"><span class="comment">* @param</span></span><br><span class="line"><span class="comment">* @return </span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">KeyInit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">GPIOInit();</span><br><span class="line">EXTIInit();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">* @brief EXTI0中断服务函数，对应PA0</span></span><br><span class="line"><span class="comment">* @param</span></span><br><span class="line"><span class="comment">* @return </span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">EXTI0_IRQHandler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (exti_interrupt_flag_get(EXTI_0) != RESET)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 清除外部中断线 */</span></span><br><span class="line">exti_interrupt_flag_clear(EXTI_0);</span><br><span class="line">ToggleLed(LED1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h3 id="3-问题三：中断抢占优先级"><a href="#3-问题三：中断抢占优先级" class="headerlink" title="3.问题三：中断抢占优先级"></a>3.问题三：中断抢占优先级</h3><p>在EXTI0的中断服务函数中加上一个无限循环：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;gd32f30x.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;led_drv.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">GPIOInit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">rcu_periph_clock_enable(RCU_GPIOA);</span><br><span class="line">gpio_init(GPIOA, GPIO_MODE_IPU, GPIO_OSPEED_2MHZ, GPIO_PIN_0);</span><br><span class="line"></span><br><span class="line">rcu_periph_clock_enable(RCU_GPIOG);</span><br><span class="line">gpio_init(GPIOG, GPIO_MODE_IN_FLOATING, GPIO_OSPEED_2MHZ, GPIO_PIN_13);</span><br><span class="line">gpio_init(GPIOG, GPIO_MODE_IN_FLOATING, GPIO_OSPEED_2MHZ, GPIO_PIN_14);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">EXTIInit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 使能EXTI时钟 */</span></span><br><span class="line">rcu_periph_clock_enable(RCU_AF);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* I/O连接到EXTI线 */</span></span><br><span class="line">gpio_exti_source_select(GPIO_PORT_SOURCE_GPIOA, GPIO_PIN_SOURCE_0);</span><br><span class="line"><span class="comment">/* 配置下降沿 */</span></span><br><span class="line">exti_init(EXTI_0, EXTI_INTERRUPT, EXTI_TRIG_FALLING);</span><br><span class="line"><span class="comment">/* 清除标志 */</span></span><br><span class="line">exti_interrupt_flag_clear(EXTI_0);</span><br><span class="line"><span class="comment">/* 使能中断 */</span></span><br><span class="line">nvic_irq_enable(EXTI0_IRQn, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* I/O连接到EXTI线 */</span></span><br><span class="line">gpio_exti_source_select(GPIO_PORT_SOURCE_GPIOG, GPIO_PIN_SOURCE_13);</span><br><span class="line"><span class="comment">/* 下降沿 */</span></span><br><span class="line">exti_init(EXTI_13, EXTI_INTERRUPT, EXTI_TRIG_FALLING);</span><br><span class="line"><span class="comment">/* 清除标志 */</span></span><br><span class="line">exti_interrupt_flag_clear(EXTI_13);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* I/O连接到EXTI线 */</span></span><br><span class="line">gpio_exti_source_select(GPIO_PORT_SOURCE_GPIOG, GPIO_PIN_SOURCE_14);</span><br><span class="line"><span class="comment">/* 下降沿 */</span></span><br><span class="line">exti_init(EXTI_14, EXTI_INTERRUPT, EXTI_TRIG_FALLING);</span><br><span class="line"><span class="comment">/* 清除标志 */</span></span><br><span class="line">exti_interrupt_flag_clear(EXTI_14);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使能中断 */</span></span><br><span class="line">nvic_irq_enable(EXTI10_15_IRQn, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">* @brief 按键硬件初始化</span></span><br><span class="line"><span class="comment">* @param</span></span><br><span class="line"><span class="comment">* @return </span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">KeyInit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">GPIOInit();</span><br><span class="line">EXTIInit();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">* @brief EXTI0中断服务函数，对应PA0</span></span><br><span class="line"><span class="comment">* @param</span></span><br><span class="line"><span class="comment">* @return </span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">EXTI0_IRQHandler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (exti_interrupt_flag_get(EXTI_0) != RESET)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 清除外部中断线 */</span></span><br><span class="line">exti_interrupt_flag_clear(EXTI_0);</span><br><span class="line">ToggleLed(LED1);</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">* @brief EXTI10_15中断服务函数，对应PG13 PG14</span></span><br><span class="line"><span class="comment">* @param</span></span><br><span class="line"><span class="comment">* @return </span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">EXTI10_15_IRQHandler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (exti_interrupt_flag_get(EXTI_13) != RESET)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 清除外部中断线 */</span></span><br><span class="line">exti_interrupt_flag_clear(EXTI_13);</span><br><span class="line">ToggleLed(LED2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (exti_interrupt_flag_get(EXTI_14) != RESET)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 清除外部中断线 */</span></span><br><span class="line">exti_interrupt_flag_clear(EXTI_14);</span><br><span class="line">ToggleLed(LED3);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译后，按下k1、k2和k3按键，验证LED灯是否正常亮灭。按下k1时，LED1亮灭；按下k2时，LED2亮灭；按下k3时，LED3亮灭。</p><h4 id="1-验证抢占优先级"><a href="#1-验证抢占优先级" class="headerlink" title="1.验证抢占优先级"></a>1.验证抢占优先级</h4><blockquote><p>设置EXTI15的抢占优先级为0，即高优先级。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 使能中断 */</span></span><br><span class="line">nvic_irq_enable(EXTI0_IRQn, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="comment">/* 使能中断 */</span></span><br><span class="line">nvic_irq_enable(EXTI10_15_IRQn, <span class="number">0</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>按下k1按键，进入EXTI0的中断服务函数，点亮LED并停留在<code>while(1)</code>位置。此时，再按下k1按键，LED无法熄灭，因为EXTI0的中断服务函数没有结束，无法响应新的中断。</p><p><strong>如果此时按下k2或k3，LED2或LED3亮，说明本来程序停留在EXTI0的服务函数循环中，当EXTI15的中断发生时，由于EXTI15的抢占优先级较高，它会打断EXTI0的执行，先执行EXTI15的中断服务函数。</strong></p></blockquote><h4 id="2-验证子优先级"><a href="#2-验证子优先级" class="headerlink" title="2.验证子优先级"></a>2.验证子优先级</h4><blockquote><p>设置抢占优先级都为相同数值，并将子优先级设置为更高。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 使能中断 */</span></span><br><span class="line">nvic_irq_enable(EXTI0_IRQn, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="comment">/* 使能中断 */</span></span><br><span class="line">nvic_irq_enable(EXTI10_15_IRQn, <span class="number">1</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>按下k1按键，进入EXTI0的中断服务函数，点亮LED并停留在<code>while(1)</code>位置。此时再按下k1后，LED1不会熄灭，因为EXTI0的中断服务函数没有结束，无法响应新的中断。</p><p><strong>如果此时按下k2或k3，也没有反应，说明抢占优先级相同，无法打断当前的中断服务函数，即发生不会发送抢占中断。</strong></p></blockquote><h1 id="USART"><a href="#USART" class="headerlink" title="USART"></a>USART</h1><h2 id="1-基础知识"><a href="#1-基础知识" class="headerlink" title="1.基础知识"></a>1.基础知识</h2><h3 id="1-通信方式"><a href="#1-通信方式" class="headerlink" title="1.通信方式"></a>1.通信方式</h3><blockquote><h6 id="并行通信："><a href="#并行通信：" class="headerlink" title="并行通信："></a>并行通信：</h6><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202502221048584.png" alt="image-20250222104812511"></p><p>​    同一时刻可传输多个二进制位（如 8 / 16 / 32 位）。    </p><p>​    典型应用：51 单片机的 P0 并口；GD32F303 / STM32 的 EXMC / FSMC接口（驱动 SRAM、NAND Flash 等）。</p><p>​    特点：效率高但占用引脚资源多。</p><h6 id="串行通信："><a href="#串行通信：" class="headerlink" title="串行通信："></a>串行通信：</h6><p>​    同一时刻只能传输一个二进制位。</p><p>​    特点：逐位传输数据，抗干扰能力更强。</p></blockquote><h3 id="2-常见标准"><a href="#2-常见标准" class="headerlink" title="2.常见标准"></a>2.常见标准</h3><blockquote><h6 id="通信接口："><a href="#通信接口：" class="headerlink" title="通信接口："></a>通信接口：</h6><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202502221103239.png" alt="image-20250222110349177"></p><p>​    <strong>UART、I²C、SPI、CAN、USB</strong> 等。</p></blockquote><h3 id="3-通信机制"><a href="#3-通信机制" class="headerlink" title="3.通信机制"></a><strong>3.通信机制</strong></h3><blockquote><h6 id="同步通信："><a href="#同步通信：" class="headerlink" title="同步通信："></a>同步通信：</h6><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202502221106888.png" alt="image-20250222110635837"></p><p>​    依赖时钟信号（如I²C的SCL、SPI的SCLK），接收端按时钟采样数据。</p><h6 id="异步通信："><a href="#异步通信：" class="headerlink" title="异步通信："></a>异步通信：</h6><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202502221116770.png" alt="image-20250222111651713"></p><p>​    无时钟信号（如 UART、CAN 、USB ），通过预设波特率与数据格式解析信号。</p><p>​    <strong>数据帧结构：</strong></p><ul><li><strong>空闲态</strong>：高电平</li><li><strong>起始位</strong>：高→低跳变</li><li><strong>数据位</strong>：8 位（普遍）</li><li><strong>停止位</strong>：恢复高电平</li></ul><p>​    收发双方需预设相同波特率（单位：bps ），确保时序同步。标准UART协议<strong>仅在位的中心点采样一次</strong>。</p><h6 id="双工模式"><a href="#双工模式" class="headerlink" title="双工模式:"></a>双工模式:</h6><p>​    <strong>全双工</strong>：设备能同时收发数据（如 UART 、SPI ）</p><p>​    <strong>半双工</strong>：设备同一时刻只能发送或接收（如I²C 、RS-485 、CAN 总线）</p><p>​    <strong>CAN总线</strong>虽然有两条数据线，但仍属于半双工（采用差分信号）；而<strong>SPI</strong>有两条独立数据线（MOSI/MISO），支持全双工。</p></blockquote><p><strong>三、常见串口电气标准</strong></p><blockquote><h6 id="TTL："><a href="#TTL：" class="headerlink" title="TTL："></a>TTL：</h6><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202502221126252.png" alt="image-20250222112639189"></p><h6 id="RS-232："><a href="#RS-232：" class="headerlink" title="RS-232："></a>RS-232：</h6><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202502221126331.png" alt="image-20250222112654276"></p><h6 id="RS-485"><a href="#RS-485" class="headerlink" title="RS-485:"></a>RS-485:</h6><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202502221127812.png" alt="image-20250222112716763"></p><p>​    <strong>RS-485优势</strong>：差分信号抵消共模干扰（如雷击脉冲），适合工业环境。</p><p>​    <strong>USART扩展</strong>：ARM单片机串口支持同步模式（含 CLK 引脚），但异步模式更常用。</p></blockquote><h2 id="2-结构"><a href="#2-结构" class="headerlink" title="2.结构"></a>2.结构</h2><h3 id="1-硬件结构-1"><a href="#1-硬件结构-1" class="headerlink" title="1.硬件结构"></a>1.硬件结构</h3><blockquote><h6 id="结构框图："><a href="#结构框图：" class="headerlink" title="结构框图："></a>结构框图：</h6><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202502221135730.png" alt="image-20250222113506663"></p><h6 id="其中："><a href="#其中：" class="headerlink" title="其中："></a>其中：</h6><p>​    <strong>数据寄存器（DR）：</strong>32位寄存器<strong>（仅低9位有效）</strong>。<strong>读操作访问接收缓冲区，写操作加载发送缓冲区</strong>。</p><p>​    <strong>移位寄存器：</strong>发送时自动将并行数据转为串行位流（TX引脚），接收时重组串行数据为并行格式（RX引脚）。</p><div class="table-container"><table><thead><tr><th>标志位</th><th>功能描述</th><th>应用场景</th></tr></thead><tbody><tr><td>TBE</td><td>发送缓冲区空</td><td>允许加载新数据（数据寄存器）</td></tr><tr><td>TC</td><td>发送完成</td><td>检测帧结束（移位寄存器）</td></tr><tr><td>RBNE</td><td>接收缓冲区非空</td><td>读取接收数据（数据寄存器）</td></tr><tr><td>IDLE</td><td>总线空闲</td><td>检测通信超时</td></tr></tbody></table></div><p>单片机向数据寄存器写入（发送）数据，数据会从数据寄存器搬移到发送移位寄存器。若<strong>数据寄存器空</strong>，<code>TBE</code> 就会置位为 <code>1</code> 。</p><p>移位寄存器没有数据时，<code>TC</code> 就会置位为 <code>1</code>；移位寄存器有数据时，<code>TC</code> 就会置位为 <code>0</code>。</p></blockquote><h3 id="2-数据帧结构"><a href="#2-数据帧结构" class="headerlink" title="2.数据帧结构"></a>2.数据帧结构</h3><blockquote><h6 id="结构框图：-1"><a href="#结构框图：-1" class="headerlink" title="结构框图："></a>结构框图：</h6><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202502221145756.png" alt="image-20250222114504692"></p><p>​    <strong>典型配置：1 起始位 + 8 数据位 + 1 停止位（无校验）</strong>。</p><h6 id="奇偶校验："><a href="#奇偶校验：" class="headerlink" title="奇偶校验："></a>奇偶校验：</h6><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202502221156268.png" alt="image-20250222115651205"></p><h6 id="异或校验："><a href="#异或校验：" class="headerlink" title="异或校验："></a>异或校验：</h6><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202502221157371.png" alt="image-20250222115751300"></p><h6 id="冗余校验："><a href="#冗余校验：" class="headerlink" title="冗余校验："></a>冗余校验：</h6><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202502221158781.png" alt="image-20250222115826729"></p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202502221145315.png" alt="image-20250222114522249"></p></blockquote><h3 id="3-板载设备"><a href="#3-板载设备" class="headerlink" title="3.板载设备"></a>3.板载设备</h3><blockquote><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202502221154909.png" alt="image-20250222115423847"></p></blockquote><h2 id="3-代码实现-1"><a href="#3-代码实现-1" class="headerlink" title="3.代码实现"></a>3.代码实现</h2><h3 id="1-串口普通输出"><a href="#1-串口普通输出" class="headerlink" title="1.串口普通输出"></a>1.串口普通输出</h3><h4 id="1-初始化"><a href="#1-初始化" class="headerlink" title="1.初始化"></a>1.初始化</h4><h5 id="1-串口软件信息结构体："><a href="#1-串口软件信息结构体：" class="headerlink" title="1.串口软件信息结构体："></a>1.串口软件信息结构体：</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">uint32_t</span> uartNo;<span class="comment">// 串口号</span></span><br><span class="line">rcu_periph_enum rcuUart;<span class="comment">// 串口外设时钟</span></span><br><span class="line">rcu_periph_enum rcuGpio;<span class="comment">// 串口GPIO时钟</span></span><br><span class="line"><span class="type">uint32_t</span> gpio;<span class="comment">// GPIO组号</span></span><br><span class="line"><span class="type">uint32_t</span> txPin;<span class="comment">// Tx对应Pin</span></span><br><span class="line"><span class="type">uint32_t</span> rxPin;<span class="comment">// Rx对应Pin</span></span><br><span class="line">&#125; UartHwInfo_t;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> UartHwInfo_t g_uartHwInfo = &#123;USART0, RCU_USART0, RCU_GPIOA, GPIOA, GPIO_PIN_9, GPIO_PIN_10&#125;;</span><br></pre></td></tr></table></figure><h5 id="2-串口-GPIO-配置："><a href="#2-串口-GPIO-配置：" class="headerlink" title="2.串口 GPIO 配置："></a>2.串口 GPIO 配置：</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">Usb2ComGpioInit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 使能 GPIO 时钟 */</span></span><br><span class="line">rcu_periph_clock_enable(g_uartHwInfo.rcuGpio);</span><br><span class="line"><span class="comment">/* 配置 TX 对应管脚为推挽输出模式 */</span></span><br><span class="line">gpio_init(g_uartHwInfo.gpio, GPIO_MODE_AF_PP, GPIO_OSPEED_10MHZ, g_uartHwInfo.txPin);</span><br><span class="line"><span class="comment">/* 配置 RX 对应管脚为浮空输入/上拉输入模式（串口信号线空闲时为高电平） */</span></span><br><span class="line">gpio_init(g_uartHwInfo.gpio, GPIO_MODE_IPU, GPIO_OSPEED_10MHZ, g_uartHwInfo.rxPin);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-串口外设配置："><a href="#3-串口外设配置：" class="headerlink" title="3.串口外设配置："></a>3.串口外设配置：</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">Usb2ComUartInit</span><span class="params">(<span class="type">uint32_t</span> baudRate)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 使能 UART 时钟 */</span></span><br><span class="line">rcu_periph_clock_enable(g_uartHwInfo.rcuUart);</span><br><span class="line"><span class="comment">/* 复位 UART 外设 */</span></span><br><span class="line">usart_deinit (g_uartHwInfo.uartNo);</span><br><span class="line"><span class="comment">/* 通过 USART_CTL0 寄存器的 WL 设置字长( 8 位) */</span> </span><br><span class="line">usart_word_length_set(g_uartHwInfo.uartNo, USART_WL_8BIT);</span><br><span class="line"><span class="comment">/* 通过 USART_CTL0 寄存器的 PCEN 设置校验位（ 0 位） */</span> </span><br><span class="line">usart_parity_config(g_uartHwInfo.uartNo, USART_PM_NONE);</span><br><span class="line"><span class="comment">/* 在 USART_CTL1 寄存器中写 STB[1:0] 位来设置停止位的长度 */</span> </span><br><span class="line">usart_stop_bit_set(g_uartHwInfo.uartNo, USART_STB_1BIT);</span><br><span class="line"><span class="comment">/* 在 USART_BAUD 寄存器中设置波特率 */</span> </span><br><span class="line">usart_baudrate_set(g_uartHwInfo.uartNo, baudRate);</span><br><span class="line"><span class="comment">/* 在 USART_CTL0 寄存器中设置 TEN 位，使能发送功能 */</span></span><br><span class="line">usart_transmit_config(g_uartHwInfo.uartNo, USART_TRANSMIT_ENABLE);</span><br><span class="line"><span class="comment">/* 在 USART_CTL0 寄存器中置位 UEN 位，使能 UART 外设 */</span> </span><br><span class="line">usart_enable(g_uartHwInfo.uartNo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-逻辑编写"><a href="#2-逻辑编写" class="headerlink" title="2.逻辑编写"></a>2.逻辑编写</h4><h5 id="1-输出数据："><a href="#1-输出数据：" class="headerlink" title="1.输出数据："></a>1.输出数据：</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Usb2ComTest</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">uint8_t</span> i = <span class="number">0</span>; i &lt;= <span class="number">250</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">usart_data_transmit(g_uartHwInfo.uartNo, i);</span><br><span class="line"><span class="keyword">while</span> (RESET == usart_flag_get(g_uartHwInfo.uartNo, USART_FLAG_TBE));</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 只有移位寄存器为空才说明数据发送完毕</span></span><br><span class="line"><span class="keyword">while</span> (RESET == usart_flag_get(g_uartHwInfo.uartNo, USART_FLAG_TC));</span><br><span class="line">   <span class="comment">// 关闭串口发送</span></span><br><span class="line">usart_transmit_config(g_uartHwInfo.uartNo, USART_TRANSMIT_DISABLE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>如果代码里面不需要关闭串口发送，则没必要去判断 TC 标志位状态。</strong></p></blockquote><h5 id="2-Printf-发送："><a href="#2-Printf-发送：" class="headerlink" title="2. Printf 发送："></a>2. Printf 发送：</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">* @brief printf函数默认打印输出到显示器，如果要输出到串口，</span></span><br><span class="line"><span class="comment"> 必须重新实现fputc函数，将输出指向串口，称为重定向</span></span><br><span class="line"><span class="comment">* @param</span></span><br><span class="line"><span class="comment">* @return </span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">fputc</span><span class="params">(<span class="type">int</span> ch, FILE *f)</span></span><br><span class="line">&#123;</span><br><span class="line">usart_data_transmit(g_uartHwInfo.uartNo, (<span class="type">uint8_t</span>)ch);</span><br><span class="line"><span class="keyword">while</span> (RESET == usart_flag_get(g_uartHwInfo.uartNo, USART_FLAG_TBE));</span><br><span class="line"><span class="keyword">return</span> ch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Printf 默认将数据打印到 <strong>标准输出（stdout）</strong>，通常是终端或控制台窗口（如Windows 的 CMD、Linux 的 Shell ）。</p></blockquote><h3 id="2-串口中断接收"><a href="#2-串口中断接收" class="headerlink" title="2.串口中断接收"></a>2.串口中断接收</h3><blockquote><h6 id="串口交互数据："><a href="#串口交互数据：" class="headerlink" title="串口交互数据："></a>串口交互数据：</h6><ul><li>MCU 只发送不接收：printf 输出 。</li><li>MCU 只接收不发送：传感器周期性主动发送数据 。</li><li>MCU 发送命令并接收响应 ：AT 指令驱动WIFI模组 。</li><li>MCU 接收命令并发送响应：MODBUS RTU 。</li></ul><h6 id="串口接收数据处理复杂："><a href="#串口接收数据处理复杂：" class="headerlink" title="串口接收数据处理复杂："></a>串口接收数据处理复杂：</h6><ul><li>不知道什么时候接收到数据。</li><li>数据包的长度有时候是不定长的。</li><li>接收到的数据频率很快，有时候可能来不及处理，引入问题。</li></ul><p>处理串口接收数据时，都会采用串口中断来实现，再配合DMA、环形队列、定时器等方法来解决上面的问题。</p></blockquote><h4 id="1-初始化-1"><a href="#1-初始化-1" class="headerlink" title="1.初始化"></a>1.初始化</h4><h5 id="1-串口软件信息结构体：-1"><a href="#1-串口软件信息结构体：-1" class="headerlink" title="1.串口软件信息结构体："></a>1.串口软件信息结构体：</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">uint32_t</span> uartNo;<span class="comment">// 串口号</span></span><br><span class="line">rcu_periph_enum rcuUart;<span class="comment">// 串口外设时钟</span></span><br><span class="line">rcu_periph_enum rcuGpio;<span class="comment">// 串口GPIO时钟</span></span><br><span class="line"><span class="type">uint32_t</span> gpio;<span class="comment">// GPIO组号</span></span><br><span class="line"><span class="type">uint32_t</span> txPin;<span class="comment">// Tx对应Pin</span></span><br><span class="line"><span class="type">uint32_t</span> rxPin;<span class="comment">// Rx对应Pin</span></span><br><span class="line">    <span class="type">uint8_t</span> irq;<span class="comment">// 串口中断号</span></span><br><span class="line">&#125; UartHwInfo_t;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> UartHwInfo_t g_uartHwInfo = &#123;USART0, RCU_USART0, RCU_GPIOA, GPIOA, GPIO_PIN_9, GPIO_PIN_10, USART0_IRQn&#125;;</span><br></pre></td></tr></table></figure><h5 id="2-串口-GPIO-配置：-1"><a href="#2-串口-GPIO-配置：-1" class="headerlink" title="2.串口 GPIO 配置："></a>2.串口 GPIO 配置：</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">Usb2ComGpioInit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 使能 GPIO 时钟; */</span></span><br><span class="line">rcu_periph_clock_enable(g_uartHwInfo.rcuGpio);</span><br><span class="line"><span class="comment">/* 配置 TX 对应管脚为推挽输出模式; */</span></span><br><span class="line">gpio_init(g_uartHwInfo.gpio, GPIO_MODE_AF_PP, GPIO_OSPEED_10MHZ, g_uartHwInfo.txPin);</span><br><span class="line"><span class="comment">/* 配置 RX 对应管脚为浮空输入/上拉输入模式（串口信号线空闲时为高电平）; */</span></span><br><span class="line">gpio_init(g_uartHwInfo.gpio, GPIO_MODE_IPU, GPIO_OSPEED_10MHZ, g_uartHwInfo.rxPin);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-串口外设配置：-1"><a href="#3-串口外设配置：-1" class="headerlink" title="3.串口外设配置："></a>3.串口外设配置：</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">Usb2ComUartInit</span><span class="params">(<span class="type">uint32_t</span> baudRate)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 使能 UART 时钟 */</span></span><br><span class="line">rcu_periph_clock_enable(g_uartHwInfo.rcuUart);</span><br><span class="line"><span class="comment">/* 复位 UART 外设 */</span></span><br><span class="line">usart_deinit (g_uartHwInfo.uartNo);</span><br><span class="line"><span class="comment">/* 通过 USART_CTL0 寄存器的 WL 设置字长( 8 位) */</span> </span><br><span class="line">usart_word_length_set(g_uartHwInfo.uartNo, USART_WL_8BIT);</span><br><span class="line"><span class="comment">/* 通过 USART_CTL0 寄存器的 PCEN 设置校验位（ 0 位） */</span> </span><br><span class="line">usart_parity_config(g_uartHwInfo.uartNo, USART_PM_NONE);</span><br><span class="line"><span class="comment">/* 在 USART_CTL1 寄存器中写 STB[1:0] 位来设置停止位的长度 */</span> </span><br><span class="line">usart_stop_bit_set(g_uartHwInfo.uartNo, USART_STB_1BIT);</span><br><span class="line"><span class="comment">/* 在 USART_BAUD 寄存器中设置波特率 */</span> </span><br><span class="line">usart_baudrate_set(g_uartHwInfo.uartNo, baudRate);</span><br><span class="line"><span class="comment">/* 在 USART_CTL0 寄存器中设置 TEN 位，使能发送功能 */</span></span><br><span class="line">usart_transmit_config(g_uartHwInfo.uartNo, USART_TRANSMIT_ENABLE);</span><br><span class="line">    <span class="comment">/* 在 USART_CTL0 寄存器中设置 TEN 位，使能接收功能 */</span></span><br><span class="line">usart_receive_config(g_uartHwInfo.uartNo, USART_RECEIVE_ENABLE);</span><br><span class="line">    </span><br><span class="line"><span class="comment">/* 使能串口接收空闲中断 */</span></span><br><span class="line">usart_interrupt_enable(g_uartHwInfo.uartNo, USART_INT_IDLE);</span><br><span class="line">    </span><br><span class="line"><span class="comment">/* 使能串口中断 */</span></span><br><span class="line">nvic_irq_enable(g_uartHwInfo.irq, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="comment">/* 在 USART_CTL0 寄存器中置位 UEN 位，使能 UART 外设 */</span> </span><br><span class="line">usart_enable(g_uartHwInfo.uartNo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-逻辑编写-1"><a href="#2-逻辑编写-1" class="headerlink" title="2.逻辑编写"></a>2.逻辑编写</h4><p>代码全放入 usb2com_drv.c 里！</p><h5 id="1-中断服务函数"><a href="#1-中断服务函数" class="headerlink" title="1.中断服务函数"></a>1.中断服务函数</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">USART0_IRQHandler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (usart_interrupt_flag_get(g_uartHwInfo.uartNo, USART_INT_FLAG_RBNE) != RESET)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="comment">/* 软件清除中断标志位 */</span></span><br><span class="line">usart_interrupt_flag_clear(g_uartHwInfo.uartNo, USART_INT_FLAG_RBNE);</span><br><span class="line"><span class="type">uint8_t</span> uData = (<span class="type">uint8_t</span>)usart_data_receive(g_uartHwInfo.uartNo);</span><br><span class="line">ProcUartData(uData);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-数据解析"><a href="#2-数据解析" class="headerlink" title="2.数据解析"></a>2.数据解析</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_BUF_SIZE 20</span></span><br><span class="line"><span class="type">static</span> <span class="type">uint8_t</span> g_rcvDataBuf[MAX_BUF_SIZE];</span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="type">static</span> <span class="type">bool</span> g_pktRcvd = <span class="literal">false</span>;<span class="comment">//pkt Packet（数据包）的缩写</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">***********************************************************************</span></span><br><span class="line"><span class="comment">包格式： 帧头0   帧头1   数据长度    功能字   LED编号   亮/灭   异或校验数据</span></span><br><span class="line"><span class="comment">        0x55   0xAA    0x03      0x06     0x00     0x01      0xFB</span></span><br><span class="line"><span class="comment">***********************************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FRAME_HEAD_0        0x55  </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FRAME_HEAD_1        0xAA</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CTRL_DATA_LEN       3     <span class="comment">// 数据域长度</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PACKET_DATA_LEN     (CTRL_DATA_LEN + 4)  <span class="comment">// 包长度</span></span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED_CTRL_CODE       0x06  <span class="comment">// 功能字</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FUNC_DATA_IDX       3     <span class="comment">// 功能字数组下标</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">ProcUartData</span><span class="params">(<span class="type">uint8_t</span> data)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 1</span></span><br><span class="line"><span class="type">static</span> <span class="type">uint8_t</span> index = <span class="number">0</span>;</span><br><span class="line">g_rcvDataBuf[index++] = data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (index)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="keyword">if</span> (g_rcvDataBuf[<span class="number">0</span>] != FRAME_HEAD_0)</span><br><span class="line">&#123;</span><br><span class="line">index = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line"><span class="keyword">if</span> (g_rcvDataBuf[<span class="number">1</span>] != FRAME_HEAD_1)</span><br><span class="line">&#123;</span><br><span class="line">index = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">// 2</span></span><br><span class="line"><span class="keyword">case</span> PACKET_DATA_LEN: </span><br><span class="line">            <span class="comment">/* 成功接收数据 */</span></span><br><span class="line">g_pktRcvd = <span class="literal">true</span>;</span><br><span class="line">index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-校验数据"><a href="#3-校验数据" class="headerlink" title="3.校验数据"></a>3.校验数据</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="type">static</span> <span class="type">uint8_t</span> <span class="title function_">CalXorSum</span><span class="params">(<span class="type">const</span> <span class="type">uint8_t</span> *data, <span class="type">uint32_t</span> len)</span><span class="comment">// Xor 异或 缩写</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint8_t</span> xorSum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">uint32_t</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line">xorSum ^= data[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> xorSum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-控制逻辑"><a href="#4-控制逻辑" class="headerlink" title="4.控制逻辑"></a>4.控制逻辑</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 4</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">uint8_t</span> ledNo;</span><br><span class="line"><span class="type">uint8_t</span> ledState;</span><br><span class="line">&#125; LedCtrlInfo_t;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">CtrlLed</span><span class="params">(LedCtrlInfo_t *ctrlData)</span></span><br><span class="line">&#123;</span><br><span class="line">ctrlData-&gt;ledState != <span class="number">0</span> ? TurnOnLed(ctrlData-&gt;ledNo) : TurnOffLed(ctrlData-&gt;ledNo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Usb2ComTask</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 2</span></span><br><span class="line"><span class="keyword">if</span> (!g_pktRcvd)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="comment">/* 数据接收失败 */</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">g_pktRcvd = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3</span></span><br><span class="line"><span class="keyword">if</span> (CalXorSum(g_rcvDataBuf, PACKET_DATA_LEN - <span class="number">1</span>) != g_rcvDataBuf[PACKET_DATA_LEN - <span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line">        <span class="comment">/* 校验失败 */</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> (g_rcvDataBuf[FUNC_DATA_IDX] == LED_CTRL_CODE)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="comment">// 4</span></span><br><span class="line">        <span class="comment">/* 传入LED编号地址，同时也是LED控制结构体的首地址 */</span></span><br><span class="line">CtrlLed((LedCtrlInfo_t *)(&amp;g_rcvDataBuf[FUNC_DATA_IDX + <span class="number">1</span>]));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-逻辑优化"><a href="#3-逻辑优化" class="headerlink" title="3.逻辑优化"></a>3.逻辑优化</h4><blockquote><p>凡是与业务相关的逻辑代码，放到 App.c 中。</p><p>上层调用下层，不可反之。</p></blockquote><h5 id="1-usb2com-drv-c"><a href="#1-usb2com-drv-c" class="headerlink" title="1.usb2com_drv.c"></a>1.usb2com_drv.c</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="title function_">void</span> <span class="params">(*pProcUartDataFunc)</span><span class="params">(<span class="type">uint8_t</span> data)</span>;   <span class="comment">//函数指针变量，保存应用层回调函数地址</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">regUsb2ComCb</span><span class="params">(<span class="type">void</span> (*pFunc)(<span class="type">uint8_t</span> data))</span></span><br><span class="line">&#123;</span><br><span class="line">pProcUartDataFunc = pFunc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 函数指针变量，接收传入的回调函数地址 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">regUsb2ComCb</span><span class="params">(<span class="type">void</span> (*pFunc)(<span class="type">uint8_t</span> data))</span></span><br><span class="line">&#123;</span><br><span class="line">pProcUartDataFunc = pFunc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-usb2com-app-c"><a href="#2-usb2com-app-c" class="headerlink" title="2.usb2com_app.c"></a>2.usb2com_app.c</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* USB转串口应用初始化函数 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Usb2ComAppInit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">regUsb2ComCb(ProcUartData);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-main-c"><a href="#3-main-c" class="headerlink" title="3.main.c"></a>3.main.c</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">AppInit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">Usb2ComAppInit();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">AppInit();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">Usb2ComTask();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-环形队列收发"><a href="#3-环形队列收发" class="headerlink" title="3.环形队列收发"></a>3.环形队列收发</h3><h3 id="4-IDLE-DMA"><a href="#4-IDLE-DMA" class="headerlink" title="4. IDLE + DMA"></a>4. IDLE + DMA</h3><p><strong>数据包长度越大，每次进入串口中断的次数越多，CPU 被打断越频繁，因此，配合 DMA 一次性接收数据包，再解析，方为正解。</strong></p><blockquote><h6 id="产生空闲中断："><a href="#产生空闲中断：" class="headerlink" title="产生空闲中断："></a>产生空闲中断：</h6><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202502221507487.png" alt="image-20250222150706403"></p><p>​    同一个数据包内的数据之间空闲几乎不计，上一个字节的停止位后紧跟着下一个字节的起始位。</p><p>​    数据包与数据包之间的空闲时间不可忽略！</p><h6 id="DMA-能一次性将一包数据放入内存中："><a href="#DMA-能一次性将一包数据放入内存中：" class="headerlink" title="DMA 能一次性将一包数据放入内存中："></a>DMA 能一次性将一包数据放入内存中：</h6><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202502221514110.png" alt="image-20250222151432048"></p><p>​    DMA 框图：</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202502221515914.png" alt="image-20250222151534853"></p></blockquote><h4 id="1-初始化-2"><a href="#1-初始化-2" class="headerlink" title="1.初始化"></a>1.初始化</h4><h5 id="1-串口软件信息结构体：-2"><a href="#1-串口软件信息结构体：-2" class="headerlink" title="1.串口软件信息结构体："></a>1.串口软件信息结构体：</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">uint32_t</span> uartNo;<span class="comment">// 串口编号</span></span><br><span class="line">rcu_periph_enum rcuUart;<span class="comment">// 串口外设时钟</span></span><br><span class="line">rcu_periph_enum rcuGpio;<span class="comment">// 串口GPIO时钟</span></span><br><span class="line"><span class="type">uint32_t</span> gpio;<span class="comment">// GPIO组号</span></span><br><span class="line"><span class="type">uint32_t</span> txPin;<span class="comment">// Tx对应Pin</span></span><br><span class="line"><span class="type">uint32_t</span> rxPin;<span class="comment">// Rx对应Pin</span></span><br><span class="line">    <span class="type">uint8_t</span> irq;<span class="comment">// 串口中断号</span></span><br><span class="line">    <span class="type">uint32_t</span> dmaNo;<span class="comment">// DMA编号</span></span><br><span class="line">rcu_periph_enum rcuDma;<span class="comment">// DMA时钟</span></span><br><span class="line">dma_channel_enum dmaCh;     <span class="comment">// DMA通道号</span></span><br><span class="line">&#125; UartHwInfo_t;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> UartHwInfo_t g_uartHwInfo = &#123;USART0, RCU_USART0, RCU_GPIOA, GPIOA, GPIO_PIN_9, GPIO_PIN_10, USART0_IRQn DMA0, RCU_DMA0, DMA_CH4&#125;;</span><br></pre></td></tr></table></figure><h5 id="2-串口外设配置："><a href="#2-串口外设配置：" class="headerlink" title="2.串口外设配置："></a>2.串口外设配置：</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">Usb2ComUartInit</span><span class="params">(<span class="type">uint32_t</span> baudRate)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 使能UART时钟；*/</span></span><br><span class="line">rcu_periph_clock_enable(g_uartHwInfo.rcuUart);</span><br><span class="line"><span class="comment">/* 复位UART；*/</span></span><br><span class="line">usart_deinit (g_uartHwInfo.uartNo);</span><br><span class="line"><span class="comment">/* 通过USART_CTL0寄存器的WL设置字长；*/</span> </span><br><span class="line"><span class="comment">//usart_word_length_set(g_uartHwInfo.uartNo, USART_WL_8BIT);</span></span><br><span class="line"><span class="comment">/* 通过USART_CTL0寄存器的PCEN设置校验位；*/</span> </span><br><span class="line"><span class="comment">//usart_parity_config(g_uartHwInfo.uartNo, USART_PM_NONE);</span></span><br><span class="line"><span class="comment">/* 在USART_CTL1寄存器中写STB[1:0]位来设置停止位的长度；*/</span> </span><br><span class="line"><span class="comment">//usart_stop_bit_set(g_uartHwInfo.uartNo, USART_STB_1BIT);</span></span><br><span class="line"><span class="comment">/* 在USART_BAUD寄存器中设置波特率；*/</span> </span><br><span class="line">usart_baudrate_set(g_uartHwInfo.uartNo, baudRate);</span><br><span class="line"><span class="comment">/* 在USART_CTL0寄存器中设置TEN位，使能发送功能；*/</span></span><br><span class="line">usart_transmit_config(g_uartHwInfo.uartNo, USART_TRANSMIT_ENABLE);</span><br><span class="line"><span class="comment">/* 在USART_CTL0寄存器中设置TEN位，使能接收功能；*/</span></span><br><span class="line">usart_receive_config(g_uartHwInfo.uartNo, USART_RECEIVE_ENABLE);</span><br><span class="line"><span class="comment">/* 使能串口接收空闲中断；*/</span></span><br><span class="line">usart_interrupt_enable(g_uartHwInfo.uartNo, USART_INT_IDLE);</span><br><span class="line"><span class="comment">/* 使能串口中断；*/</span></span><br><span class="line">nvic_irq_enable(g_uartHwInfo.irq, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="comment">/* 在USART_CTL0寄存器中置位UEN位，使能UART；*/</span> </span><br><span class="line">usart_enable(g_uartHwInfo.uartNo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-串口-DMA-配置："><a href="#3-串口-DMA-配置：" class="headerlink" title="3.串口 DMA 配置："></a>3.串口 DMA 配置：</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_BUF_SIZE 20</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> USART0_DATA_ADDR      (USART0 + 0x04)   <span class="comment">//串口 0 数据寄存器十六进制地址值</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">Usb2ComDmaInit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 使能 DMA 时钟 */</span></span><br><span class="line">rcu_periph_clock_enable(g_uartHwInfo.rcuDma);</span><br><span class="line"><span class="comment">/* 复位 DMA 通道 */</span></span><br><span class="line">dma_deinit(g_uartHwInfo.dmaNo, g_uartHwInfo.dmaCh);</span><br><span class="line">dma_parameter_struct dmaStruct;</span><br><span class="line"><span class="comment">/* 配置传输方向 */</span> </span><br><span class="line">dmaStruct.direction = DMA_PERIPHERAL_TO_MEMORY;</span><br><span class="line"><span class="comment">/* 配置数据源地址 */</span> </span><br><span class="line">dmaStruct.periph_addr = USART0_DATA_ADDR; <span class="comment">// 基地址 + 偏移量 </span></span><br><span class="line"><span class="comment">/* 配置源地址 固定 Or 增长 */</span> </span><br><span class="line">dmaStruct.periph_inc = DMA_PERIPH_INCREASE_DISABLE;</span><br><span class="line"><span class="comment">/* 配置源数据传输位宽 */</span> </span><br><span class="line">dmaStruct.periph_width = DMA_PERIPHERAL_WIDTH_8BIT;</span><br><span class="line">    </span><br><span class="line"><span class="comment">/* 配置数据目的地址 */</span></span><br><span class="line">dmaStruct.memory_addr = (<span class="type">uint32_t</span>)g_rcvDataBuf;<span class="comment">// 定义的存储数组地址</span></span><br><span class="line"><span class="comment">/* 配置目的地址 固定 Or 增长 */</span> </span><br><span class="line">dmaStruct.memory_inc = DMA_MEMORY_INCREASE_ENABLE;</span><br><span class="line"><span class="comment">/* 配置目的数据传输位宽 */</span> </span><br><span class="line">dmaStruct.memory_width = DMA_MEMORY_WIDTH_8BIT;</span><br><span class="line">    </span><br><span class="line"><span class="comment">/* 配置数据传输最大次数 */</span> </span><br><span class="line">dmaStruct.number = MAX_BUF_SIZE; <span class="comment">// MAX：65536 次</span></span><br><span class="line"><span class="comment">/* 配置DMA通道优先级 */</span> </span><br><span class="line">dmaStruct.priority = DMA_PRIORITY_HIGH;</span><br><span class="line">dma_init(g_uartHwInfo.dmaNo, g_uartHwInfo.dmaCh, &amp;dmaStruct);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使能UART接收数据使用DMA */</span> </span><br><span class="line">usart_dma_receive_config(g_uartHwInfo.uartNo, USART_RECEIVE_DMA_ENABLE);</span><br><span class="line"><span class="comment">/* 使能DMA通道 */</span> </span><br><span class="line">dma_channel_enable(g_uartHwInfo.dmaNo, g_uartHwInfo.dmaCh);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-逻辑编写-2"><a href="#2-逻辑编写-2" class="headerlink" title="2.逻辑编写"></a>2.逻辑编写</h4><h5 id="1-中断服务函数-1"><a href="#1-中断服务函数-1" class="headerlink" title="1.中断服务函数"></a>1.中断服务函数</h5><blockquote><h6 id="清除空闲中断标志位："><a href="#清除空闲中断标志位：" class="headerlink" title="清除空闲中断标志位："></a>清除空闲中断标志位：</h6><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202502221534849.png" alt="image-20250222153434770"></p><h6 id="计算-DMA-搬运数据量（dma-transfer-number-get）："><a href="#计算-DMA-搬运数据量（dma-transfer-number-get）：" class="headerlink" title="计算 DMA 搬运数据量（dma_transfer_number_get）："></a>计算 DMA 搬运数据量（dma_transfer_number_get）：</h6><p>​    功能描述：获取 <strong>DMAx</strong> <strong>通道 y</strong> 还有多少数据要传输，即获取<strong>剩余</strong>数据长度。</p><p>​    内部实现：读取 <strong>CNT</strong> 寄存器里的数值。</p><h6 id="通道-x-计数寄存器-DMA-CHxCNT-："><a href="#通道-x-计数寄存器-DMA-CHxCNT-：" class="headerlink" title="通道 x 计数寄存器 (DMA_CHxCNT)："></a>通道 x 计数寄存器 (DMA_CHxCNT)：</h6><p>​    该寄存器表明还有多少数据等待被传输。一旦通道使能，<strong>该寄存器为只读的，并在每个DMA传输之后值减 1</strong> 。如果该寄存器的值    为 0，无论通道开启与否，都不会有数据传输。如果该通道工作在循环模式下，一旦通道的传输任务完成，该寄存器会被自动</p><p>​    重装载为初始设置值。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_BUF_SIZE 20</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">USART0_IRQHandler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (usart_interrupt_flag_get(g_uartHwInfo.uartNo, USART_INT_FLAG_IDLE) != RESET)</span><br><span class="line">&#123;</span><br><span class="line">usart_interrupt_flag_clear(g_uartHwInfo.uartNo, USART_INT_FLAG_IDLE);  <span class="comment">//第一步，读取stat0寄存器，清除IDLE标志位</span></span><br><span class="line">usart_data_receive(g_uartHwInfo.uartNo);                               <span class="comment">//第二步，读取数据寄存器，清除IDLE标志位</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (PACKET_DATA_LEN == (MAX_BUF_SIZE - dma_transfer_number_get(g_uartHwInfo.dmaNo, g_uartHwInfo.dmaCh)))</span><br><span class="line">&#123;</span><br><span class="line">            <span class="comment">/* 成功获取一包数据 */</span></span><br><span class="line">g_pktRcvd = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">/* 必须关闭DMA，否则设置 CNT 无法生效 */</span></span><br><span class="line">dma_channel_disable(g_uartHwInfo.dmaNo, g_uartHwInfo.dmaCh);</span><br><span class="line">        <span class="comment">/* 重新设置 DMA通道 x 计数寄存器 */</span></span><br><span class="line">dma_transfer_number_config(g_uartHwInfo.dmaNo, g_uartHwInfo.dmaCh, MAX_BUF_SIZE);</span><br><span class="line">        <span class="comment">/* 使能 DMA 相应通道 */</span></span><br><span class="line">dma_channel_enable(g_uartHwInfo.dmaNo, g_uartHwInfo.dmaCh);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-数据解析-1"><a href="#2-数据解析-1" class="headerlink" title="2.数据解析"></a>2.数据解析</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Usb2ComTask</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!g_pktRcvd)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">g_pktRcvd = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (g_rcvDataBuf[<span class="number">0</span>] != FRAME_HEAD_0 || g_rcvDataBuf[<span class="number">1</span>] != FRAME_HEAD_1)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> (CalXorSum(g_rcvDataBuf, PACKET_DATA_LEN - <span class="number">1</span>) != g_rcvDataBuf[PACKET_DATA_LEN - <span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 逻辑功能 */</span></span><br><span class="line"><span class="keyword">if</span> (g_rcvDataBuf[FUNC_DATA_IDX] == LED_CTRL_CODE)</span><br><span class="line">&#123;</span><br><span class="line">CtrlLed((LedCtrlInfo_t *)(&amp;g_rcvDataBuf[FUNC_DATA_IDX + <span class="number">1</span>]));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="RTC"><a href="#RTC" class="headerlink" title="RTC"></a>RTC</h1><h2 id="1-RTC-amp-BKP"><a href="#1-RTC-amp-BKP" class="headerlink" title="1. RTC &amp; BKP"></a>1. RTC &amp; BKP</h2><h3 id="1-RTC"><a href="#1-RTC" class="headerlink" title="1.RTC"></a>1.RTC</h3><blockquote><h6 id="RTC-简易硬件结构框图如下："><a href="#RTC-简易硬件结构框图如下：" class="headerlink" title="RTC 简易硬件结构框图如下："></a>RTC 简易硬件结构框图如下：</h6><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501190016858.png" alt="image-20241130123025264"></p><p>​    GD32F303 单片机的 RTC 硬件结构与 STM32F103 相同，RTC 有三个时钟源：</p><ul><li>外部高速时钟：4~32 MHz（如开发板上的 8 MHz，可进行 128 分频），主电源掉电后将停止工作。</li><li>外部低速时钟：32.768 kHz，通常选用此时钟，因为在主电源掉电后，它可由纽扣电池供电，RTC 仍能持续计时。</li><li>内部时钟：单片机内部的 40 kHz 时钟，主电源掉电后将停止工作。</li></ul><h6 id="原理框图如下："><a href="#原理框图如下：" class="headerlink" title="原理框图如下："></a>原理框图如下：</h6><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501190018504.png" alt="QQ20241130-123121"></p><p>​    供电部分使用 BAT54C，它里面有两个二极管，阴极相连。当主电源有电且电压高于纽扣电池电压时，主电源侧的二极管导通，</p><p>​    主电源供电。当主电源掉电后，主电源电压下降，纽扣电池侧的二极管导通，由纽扣电池供电。这样实现了供电的自动切换。</p><h6 id="原理框图如下：-1"><a href="#原理框图如下：-1" class="headerlink" title="原理框图如下："></a>原理框图如下：</h6><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501190018726.png" alt="QQ20241130-123457"></p><p>​    晶振部分使用 32.768 kHz 晶振和两个起振电容。</p><h6 id="RTC硬件结构框图如下："><a href="#RTC硬件结构框图如下：" class="headerlink" title="RTC硬件结构框图如下："></a>RTC硬件结构框图如下：</h6><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501190019024.png" alt="image-20241130123542930"></p><p>​    RTC输入通过预分频器（PRL 和 DIV 寄存器）实现分频。将预分频值 32767 写入 PRL，对 32.768 kHz 的时钟进行分频，DIV 寄存</p><p>​    器作为向下递减计数器，生成 1 Hz 的时钟信号，用于计数器 CNT，每记一个数值，也就是一秒钟。</p><p>​    RTC 还有闹钟寄存器 RTC_Alarm，可产生秒中断、计数溢出中断、闹钟中断等。APB1 时钟（PCLK）用于提供 APB1 读写接口。    </p><p>​    当主电源掉电时，PCLK 1停止工作，但 RTCCLK 可继续工作。因为外部有这个纽扣电池。当然，如果没有纽扣电池，它也就没办</p><p>​    法工作了。</p></blockquote><h3 id="2-BKP"><a href="#2-BKP" class="headerlink" title="2.BKP"></a>2.BKP</h3><blockquote><h6 id="RTC简易硬件结构框图如下："><a href="#RTC简易硬件结构框图如下：" class="headerlink" title="RTC简易硬件结构框图如下："></a>RTC简易硬件结构框图如下：</h6><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202502221751308.png" alt="image-20250222175109230"></p><p>​    RTC 寄存器位于备份区域（后备区），涉及片上外设 BKP（备份寄存器）。VDD 主电源掉电后，可由 Vbat（如纽扣电池）供电。    BKP 内除了 RTC 的寄存器外，还有 42 个 16 位的寄存器（DR1~DR42），可用于存储用户数据。需要注意：如果没有纽扣电池供    电，掉电后数据将丢失。这些寄存器和内存一样，在完全掉电时数据会丢失，并不像 Flash 那样是非易失性的存储器。如果没有</p><p>​    主电源供电，必须要有纽扣电池供电才可以保持数据。当设备从待机模式唤醒或者是复位后，只要有纽扣电池供电，BKP 寄存器    中的数据就不会丢失。</p></blockquote><h4 id="1-信号校准"><a href="#1-信号校准" class="headerlink" title="1.信号校准"></a>1.信号校准</h4><blockquote><h6 id="信号校准寄存器："><a href="#信号校准寄存器：" class="headerlink" title="信号校准寄存器："></a>信号校准寄存器：</h6><p>可配置，将RTC的时钟通过一个管脚，此管脚是PC13是复用的，通过这个管脚将信号输出。然后去监测，如果发现这个时钟偏差比较大，我们可以去配置这个校准寄存器用来校准，就是这个功能。</p></blockquote><h4 id="2-侵入检测"><a href="#2-侵入检测" class="headerlink" title="2.侵入检测"></a>2.侵入检测</h4><blockquote><h6 id="侵入检测寄存器："><a href="#侵入检测寄存器：" class="headerlink" title="侵入检测寄存器："></a>侵入检测寄存器：</h6><p>比如说我们的产品啊，这个安全性要求比较高，不想让别人去分析，我们就可以使用侵入检测。它使用的这个PC13引脚的复用功能。要想实现侵入检测，我们可以对这个管脚，比如说加上一个上拉电阻。然后可以再通过一个导线连接一个开关，这个开关再连接到外壳上，外壳是接地的。当有人拆卸外壳时，会触发开关状态改变，PC13 引脚的电平从高电平变为低电平，检测到这种电平变化后，产生侵入检测事件。这个事件又会进一步地触发去清除BKP寄存器里面的数据。我们可以在这个寄存器里面保存一些核心的关键的参数。这样的话，别人就没有办法去完整地分析整个系统了。另外，即使设备的主电源断电了，因为有纽扣电池，通过Vbat还可以给它供电。这样的话，侵入检测的功能还是可以继续工作的。</p></blockquote><h3 id="3-Init-Config"><a href="#3-Init-Config" class="headerlink" title="3. Init Config"></a>3. Init Config</h3><blockquote><p>​    RTC配置框图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501190021394.png" alt="image-20241130125614864"></p><p><strong>使能对RTC的访问，使能PMU和BKP：</strong></p><p>即后备区域的时钟，还有电源管理的时钟。</p><p><strong>使能对后备寄存器和RTC的写权限：</strong></p><p>来看一下用户手册。这个功能是在PMU电源管理这个章节，PMU_CTL这个寄存器第八位，在这儿BKPWEN写使能。设置为1的时候，允许对这个寄存器啊进行写访问，也包括对RTC写访问。</p><p><strong>复位后备寄存器：</strong></p><p>通过这个操作可以对后备区域的这些寄存器的数据啊，全部给它复位清零。这是我们首次初始化配置的时候啊，可以去做的一个操作。</p><p><strong>使能外部低速时钟LXTAL，然后等待稳定：</strong></p><p><strong>设置RTC的时钟输入源为LXTAL：</strong></p><p>使能外部低速时钟并等待其稳定，设置 RTC 的时钟源为外部低速时钟（32.768 kHz）。</p><p><strong>使能 RTC 时钟并等待APB1和RTC时钟同步：</strong></p><p>涉及到了两个时钟：一个是PCLK，这就是APB1时钟，然后还有一个RTC的时钟。那么，这两个时钟在系统复位或者是待机唤醒以后，可能会存在着不同步的问题，因此我们在代码里面，要等待两个时钟同步。</p><p><strong>等待上次对RTC寄存器写操作完成：</strong></p><p>我们要去查询一个标志位，然后才能去写一些寄存器，包括分频寄存器，包括设置计数值。</p><p>来看一下用户手册。在RTC配置这里面，当写操作完成以后RTC_CTL寄存器当中的RWOF位会变为1。那么，下一次写操作之前，必须要等待上次写操作完成之后才能进行，就是通过查询这个标志来判断的，判断它为1后才能去进行写操作。每一次写操作都要去判断。</p><p>在这个描述里面还看到，说是要将RTC设置为配置模式，才能对寄存器进行写操作。对应的是RTC_CTL的CMF位。但是，通过实际写代码验证啊，发现即使没有对这个寄存器的CMF位进行配置，也是可以写操作的。这个是RWOF，判断上次RTC写操作是否已经完成。然后这个CMF用来退出配置，或者是进入配置。那么，在代码当中啊，我们发现，只需要实现这个环节就可以了，使能对后备寄存器RTC的写权限就可以了。不配置这个CMF也没问题。</p><p><strong>设置预分频值：</strong></p><p>例如32767。这样的话，分频以后生成的这个时钟信号就是1Hz，一秒钟。</p><p><strong>等待上次对RTC寄存器写操作完成：</strong></p><p><strong>设置计数值：</strong></p><p>在初始化的时候，我们也可以设置一个初始的计数值假设为0，那么对应的这个日历时间就是1970年1月1号零点零分零秒。</p></blockquote><h2 id="2-代码实现-1"><a href="#2-代码实现-1" class="headerlink" title="2.代码实现"></a>2.代码实现</h2><h3 id="1-初始化-3"><a href="#1-初始化-3" class="headerlink" title="1.初始化"></a>1.初始化</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">RtcDrvInit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (bkp_read_data(BKP_DATA_0) != MAGIC_CODE)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 使能对RTC的访问，使能PMU和BKP时钟 */</span></span><br><span class="line">rcu_periph_clock_enable(RCU_PMU);</span><br><span class="line">rcu_periph_clock_enable(RCU_BKPI);</span><br><span class="line">        </span><br><span class="line"><span class="comment">/* 使能对后备寄存器和RTC的写权限 */</span></span><br><span class="line">pmu_backup_write_enable();</span><br><span class="line">        </span><br><span class="line"><span class="comment">/* 复位后备寄存器 */</span></span><br><span class="line">bkp_deinit();</span><br><span class="line">        </span><br><span class="line"><span class="comment">/* 使能LXTAL，并等待其稳定 */</span></span><br><span class="line">rcu_osci_on(RCU_LXTAL);</span><br><span class="line">rcu_osci_stab_wait(RCU_LXTAL);</span><br><span class="line">        </span><br><span class="line"><span class="comment">/* 设置RTC时钟源为LXTAL */</span></span><br><span class="line">rcu_rtc_clock_config(RCU_RTCSRC_LXTAL);</span><br><span class="line">        </span><br><span class="line"><span class="comment">/* 使能RTC时钟 */</span></span><br><span class="line">rcu_periph_clock_enable(RCU_RTC);</span><br><span class="line">        </span><br><span class="line"><span class="comment">/* 等待APB1接口时钟和RTC时钟同步 */</span></span><br><span class="line">rtc_register_sync_wait();</span><br><span class="line">        </span><br><span class="line"><span class="comment">/* 等待上次对 RTC 寄存器写操作完成 */</span></span><br><span class="line">rtc_lwoff_wait();</span><br><span class="line">        </span><br><span class="line"><span class="comment">/* 设置分频值32767 */</span></span><br><span class="line">rtc_prescaler_set(<span class="number">32767</span>);</span><br><span class="line">        </span><br><span class="line"><span class="comment">/* 等待上次对 RTC 寄存器写操作完成 */</span></span><br><span class="line">rtc_lwoff_wait();</span><br><span class="line">        </span><br><span class="line"><span class="comment">/* 设置时间2023-02-28 23:59:50 */</span></span><br><span class="line">rtc_counter_set(<span class="number">1677599990</span>);</span><br><span class="line">bkp_write_data(BKP_DATA_0, MAGIC_CODE);</span><br><span class="line">        </span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 使能对RTC的访问，使能PMU和BKP时钟 */</span></span><br><span class="line">rcu_periph_clock_enable(RCU_PMU);</span><br><span class="line">rcu_periph_clock_enable(RCU_BKPI);</span><br><span class="line">    </span><br><span class="line"><span class="comment">/* 使能对后备寄存器和RTC的写权限 */</span></span><br><span class="line">pmu_backup_write_enable();</span><br><span class="line">    </span><br><span class="line"><span class="comment">/* 等待APB1接口时钟和RTC时钟同步 */</span></span><br><span class="line">rtc_register_sync_wait();</span><br><span class="line">    </span><br><span class="line"><span class="comment">/* 等待上次对 RTC 寄存器写操作完成 */</span></span><br><span class="line">rtc_lwoff_wait();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-设置时间"><a href="#2-设置时间" class="headerlink" title="2.设置时间"></a>2.设置时间</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">SetRtcTime</span><span class="params">(RtcTime_t *time)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">time_t</span> timeStamp;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tm</span> <span class="title">tmInfo</span>;</span></span><br><span class="line">    <span class="built_in">memset</span>(&amp;tmInfo, <span class="number">0</span>, <span class="keyword">sizeof</span>(tmInfo));</span><br><span class="line"></span><br><span class="line">tmInfo.tm_year = time-&gt;year - <span class="number">1900</span>;</span><br><span class="line">tmInfo.tm_mon = time-&gt;month - <span class="number">1</span>;</span><br><span class="line">tmInfo.tm_mday = time-&gt;day;</span><br><span class="line">tmInfo.tm_hour = time-&gt;hour;</span><br><span class="line">tmInfo.tm_min = time-&gt;minute;</span><br><span class="line">tmInfo.tm_sec = time-&gt;second;</span><br><span class="line"></span><br><span class="line">timeStamp = mktime(&amp;tmInfo) - <span class="number">8</span> * <span class="number">60</span> * <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">rtc_lwoff_wait();</span><br><span class="line">rtc_counter_set(timeStamp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>SetRtcTime</code> 函数用于设置 RTC 的当前时间。</p><ul><li><p><strong>步骤解析：</strong></p><ul><li><p>创建一个 <code>tm</code> 结构体 (<code>struct tm tmInfo</code>) 用于存储时间信息。</p></li><li><p>将输入的结构体 <code>RtcTime_t</code> 中的年、月、日、小时、分钟、秒分别赋值给 <code>tmInfo</code>。</p></li><li><p>将年、月的值进行偏移，<code>tm_year</code> 是从 1900 年开始计数，而 <code>tm_mon</code> 是从 0 开始计数，所以分别做了对应的减法处理：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tmInfo.tm_year = time-&gt;year - <span class="number">1900</span>;</span><br><span class="line">tmInfo.tm_mon = time-&gt;month - <span class="number">1</span>;</span><br></pre></td></tr></table></figure></li><li><p>调用 <code>mktime()</code> 将时间转换为 Unix 时间戳（自 1970-01-01 00:00:00 以来的秒数），并减去 8 小时的偏移量，这是为了调整为 UTC 时间：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">timeStamp = mktime(&amp;tmInfo) - <span class="number">8</span> * <span class="number">60</span> * <span class="number">60</span>;</span><br></pre></td></tr></table></figure><p>因为 <code>mktime()</code> 返回的是本地时间戳，假设本地时区为 UTC+8，所以这里需要减去 8 小时，将其转换为 UTC 时间。</p></li><li><p>等待 RTC 寄存器解锁，然后将时间戳设置到 RTC计数器：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rtc_lwoff_wait();</span><br><span class="line">rtc_counter_set(timeStamp);</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="3-获取时间"><a href="#3-获取时间" class="headerlink" title="3.获取时间"></a>3.获取时间</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">GetRtcTime</span><span class="params">(RtcTime_t *time)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">time_t</span> timeStamp;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tm</span> *<span class="title">tmInfo</span>;</span></span><br><span class="line"></span><br><span class="line">timeStamp = rtc_counter_get() + <span class="number">8</span> * <span class="number">60</span> * <span class="number">60</span>;</span><br><span class="line">tmInfo = localtime(&amp;timeStamp);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">time-&gt;year = tmInfo-&gt;tm_year + <span class="number">1900</span>;</span><br><span class="line">time-&gt;month = tmInfo-&gt;tm_mon + <span class="number">1</span>;</span><br><span class="line">time-&gt;day = tmInfo-&gt;tm_mday;</span><br><span class="line">time-&gt;hour = tmInfo-&gt;tm_hour;</span><br><span class="line">time-&gt;minute = tmInfo-&gt;tm_min;</span><br><span class="line">time-&gt;second = tmInfo-&gt;tm_sec;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>GetRtcTime</code> 函数用于从 RTC 中获取当前时间并将其转换为日历时间。</p><ul><li><p><strong>步骤解析：</strong></p><ul><li><p>从 RTC 中读取当前计数器的值，即获取 Unix 时间戳：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">timeStamp = rtc_counter_get() + <span class="number">8</span> * <span class="number">60</span> * <span class="number">60</span>;</span><br></pre></td></tr></table></figure><p>读取到的时间是 UTC 时间，所以这里加上 8 小时的偏移量，将其转换为本地时间<strong>（UTC+8）</strong>。</p></li><li><p>调用 <code>localtime()</code> 将时间戳转换为 <code>struct tm</code> 结构体。</p></li><li><p>将 <code>struct tm</code> 结构体中的值赋回到 <code>RtcTime_t</code> 结构体中。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">time-&gt;year = tmInfo-&gt;tm_year + <span class="number">1900</span>;</span><br><span class="line">time-&gt;month = tmInfo-&gt;tm_mon + <span class="number">1</span>;</span><br><span class="line">time-&gt;day = tmInfo-&gt;tm_mday;</span><br><span class="line">time-&gt;hour = tmInfo-&gt;tm_hour;</span><br><span class="line">time-&gt;minute = tmInfo-&gt;tm_min;</span><br><span class="line">time-&gt;second = tmInfo-&gt;tm_sec;</span><br></pre></td></tr></table></figure><p>对年和月的值做了相应的调整，<code>tm_year</code> 需要加上 1900，<code>tm_mon</code> 需要加上 1。</p></li></ul></li></ul><h1 id="ADC"><a href="#ADC" class="headerlink" title="ADC"></a>ADC</h1><h2 id="1-工作原理-1"><a href="#1-工作原理-1" class="headerlink" title="1.工作原理"></a>1.工作原理</h2><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501190026875.png" alt="image-20241130132029534"></p><p>GT32F303ZET6 MCU 内置三个 ADC 模块，分别是 ADC0 、ADC1 和 ADC2 。这些 ADC 的分辨率是可以配置的，支持 12 位、10 位、8 位或 6 位。此外，ADC 还支持自校准功能，以提高采样的精度。采样时间和周期是可编程的，包括 1.5 个周期、7.5 个周期等选项，转换结果可以配置为左对齐或右对齐的方式。</p><p>对于规则组数据转换，可以使用 DMA 配合搬移数据，从而减轻 CPU 的负担。ADC0 和 ADC1 各自拥有 16 路外部模拟输入通道，而 ADC2 的通道数较少。ADC0 还集成了一个内部温度传感器输入通道和一个内部参考电压输入通道。需要注意的是，内部温度传感器只能测量 MCU芯片的温度，无法测量环境温度。</p><p><strong>ADC支持多种转换模式，包括单次模式、连续模式、扫描模式、间断模式和同步模式。</strong></p><p><strong>ADC转换完成后，会产生EOC（End Of Conversion）标志</strong>，这一标志可以进一步触发NVIC中断。ADC的供电电源为VDD_A和VSSA，支持2.6V到3.6V，通常直接使用板子上的主电源3.3V。参考电源VREFP和VREFN通常将VREFP连接到VDD_A上，因此模拟输入通道的信号源输入电压范围为0V到3.3V。</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501190026005.png" alt="image-20241130132207744"></p><p>​    ADC 硬件结构包括 16 个外部模拟信号输入通道（通过 GPIO 复用）、一路温度传感器输入通道和一路参考电压输入通道，共18个 ADC </p><p>​    通道。</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501190028408.png" alt="image-20241130133726461"></p><p>在ADC转换之前，需要外部触发源进行触发，触发源包括<strong>定时器触发</strong>（如每秒或几百毫秒）、<strong>EXTI外部中断触发</strong>、<strong>软件触发</strong>（通过代码控制）。</p><p>GT32F303 MCU的ADC时钟频率最高为40MHz，由120MHz主时钟分频得到。在ADC转换器中，有规则组和注入组两种数据处理方式。规则组类似于程序的主流程，通常满足大部分需求，而注入组类似于程序中的中断，可以打断规则组的转换，优先执行注入组的任务，完成后再继续规则组的转换。转换完成的结果会存放在ADC数据寄存器中，规则组的16个通道共用一个数据寄存器，而注入组有四个独立的数据寄存器。</p><p>关于中断，使能ADC中断需要在初始化配置时分为两部分：</p><ul><li>单片机片上外设中打开中断输出控制。</li><li>内核（NVIC）中打开相应的中断开关，例如定时器的更新溢出中断。</li></ul><p>ADC通道框图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501190029343.png" alt="image-20241130132431616"></p><p>ADC0、ADC1和ADC2的外部模拟输入通道通过GPIO口连接。ADC0和ADC1各有16个外部输入通道，分别对应PA0到PA7、PB0和PB1、PC0到PC5；而ADC2的通道数较少。</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501190029829.png" alt="image-20241130132504351"></p><p>转换模式包括</p><ul><li><p>单次模式：</p><p>每次ADC转换都需要外部触发源触发。</p></li><li><p>连续模式：</p><p>只需第一次触发，ADC将自动连续进行转换。</p></li><li><p>扫描模式：</p><p>针对单个ADC的多个通道，将通道号按序列放入转换序列寄存器，适用于多通道数据采集。</p></li><li><p>同步模式：</p><p>用于多个ADC模块同时使用的场景，如交替触发ADC0和ADC1，实现多个ADC的协同工作。相比之下，独立模式则仅单独使用某一个ADC模块，无需与其他ADC配合，适用于无需复杂协同的应用场景。常用的部分主要基于独立模式，结合单次、连续和扫描模式。</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501190030614.png" alt="image-20241130132727258"></p><p>单次转换模式对应规则组，通过转换序列寄存器配置要转换的通道号。</p><p>例如，将PA2对应的通道2放在序列1中，由外部触发源触发ADC开始采集、量化和编码转换。转换完成后产生EOC标志位，下一次转换需再次触发源触发。</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501190030216.png" alt="image-20241130132748339"></p><p>连续转换模式则只需首次触发一次，ADC会自动进行后续转换，产生标志位后可读取数据寄存器内容。</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501190030883.png" alt="image-20241130132820364"></p><p>扫描模式适用于单个ADC的多通道转换，将多个通道号按序列寄存器配置后，外部触发源一次触发后，ADC依次转换各通道，完成后产生EOC标志位。</p><p>由于规则组只有一个数据寄存器，且每转换一个通道后数据都会移入数据寄存器中，多个通道的数据可能会被覆盖，因此需要配合DMA自动搬移数据到内存数组中，以防数据丢失。</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501190031476.png" alt="image-20241130133154078"></p><p>规则组与注入组的关系类似于程序主流程与中断。规则组按序列执行转换任务，注入组可以打断规则组的转换，优先处理注入组的转换任务，完成后再继续规则组的转换。通常项目中只需使用规则组即可，注入组的使用较为少见，具体可参考芯片用户手册和官方示例程序。</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501190031706.png" alt="image-20241130133740418"></p><p>ADC的数据对齐支持右对齐和左对齐。右对齐（默认）高位填充0，左对齐低位填充0。以12位分辨率为例，参考电压为3.3伏，对应数值范围为0到4095，每步最小电压变化约为0.8mV。</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501190032952.png" alt="image-20241130133843955"></p><p>ADC转换时间包括采样和保持、量化和编码两个步骤。转换时间等于采样时间加上固定的12.5个ADC周期。采样时间可配置，根据信号源的输出阻抗（RAIN）调整。例如，ADC时钟为30MHz，采样周期设置为1.5个周期，则转换时间为14个ADC周期，即0.467微秒。</p><p>ADC采集原理包括信号源通过输出阻抗<strong>R_AIN</strong>连接到采样电阻<strong>R_ADC</strong>和采样电容<strong>C_ADC</strong>。外部触发源触发转换后，采集开关SW闭合，通过<strong>R_AIN</strong>和<strong>R_ADC</strong>对<strong>C_ADC</strong>进行充电，电压达到信号源当前电压后采集开关SW抬起，保持电容两端的电压进行量化和编码转换。开关SW闭合断开的间隔时间即为采样时间周期（采样+保持）。</p><p>采样时间的设置依据电容充电公式：</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501190032982.png" alt="image-20241130135112526"></p><p>不同信号源的输出阻抗不同，需根据实际情况配置采样时间。</p><p>案例分析：</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501190032993.png" alt="image-20241130135347841"></p><p>校准与硬件滤波：</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501190032742.png" alt="image-20241130135759180"></p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501190033927.png" alt="image-20241130135810508"></p><h2 id="2-单通道采集"><a href="#2-单通道采集" class="headerlink" title="2.单通道采集"></a>2.单通道采集</h2><p>开发板上有三个器件使用到了ADC（模数转换器）：</p><ul><li>可调电阻</li><li>热敏电阻</li><li>湿敏电阻</li></ul><p>本次重点使用可调电阻，并对应使用ADC的通道。</p><h3 id="1-硬件连接"><a href="#1-硬件连接" class="headerlink" title="1.硬件连接"></a><strong>1.硬件连接</strong></h3><blockquote><p>原理框图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501190036162.png" alt="QQ20241201-173522"></p><p><strong>通道选择：</strong></p><ul><li>使用的通道：ADC0</li><li>对应GPIO口：PC2</li><li>通道编号：12</li></ul><p><strong>电源与电压范围：</strong></p><ul><li>供电电压：3.3V</li><li>电压范围：0V 到 3.3V</li></ul><p><strong>限流电阻说明：</strong></p><p>限流电阻不会用于分压。<strong>当GPIO口配置为模拟输入模式时，GPIO口呈现高阻态，因此限流电阻不会分压。</strong></p><p><strong>可调电阻调节：</strong></p><ul><li>调节到最上面时，采集到的电压为3.3V，对应数字量为4095。</li><li>调节到最下面时，采集到的电压为0V，对应数字量为0。</li></ul></blockquote><h3 id="2-代码实现-2"><a href="#2-代码实现-2" class="headerlink" title="2.代码实现"></a><strong>2.代码实现</strong></h3><h4 id="1-ADC-初始化配置"><a href="#1-ADC-初始化配置" class="headerlink" title="1.ADC 初始化配置"></a><strong>1.ADC 初始化配置</strong></h4><p><strong>初始化步骤：</strong></p><ol><li><p><strong>使能GPIO时钟并配置GPIO口：</strong></p><ul><li>使能GPIOC的时钟。</li><li>将PC2配置为模拟输入模式，速度为10MHz。</li></ul></li><li><p><strong>配置ADC部分：</strong></p><ul><li>使能ADC0的时钟。</li><li>设置ADC时钟分频系数为6分频，得到20MHz的ADC时钟。</li><li>设置ADC为独立模式，不与其他ADC协同工作。</li><li>配置ADC为单次转换模式，每次转换需要外部触发。</li><li>设置数据对齐为右对齐。</li><li>设置转换通道的个数为1。</li><li>配置转换通道为12，并放在序列寄存器的第0序列位置，采样时间为239.5个周期。</li><li>选择软件触发作为外部触发源，并使能外部触发。</li><li>使能ADC。</li><li>进行内部校准，延时50微秒后启动校准。</li></ul></li></ol><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501190036385.png" alt="image-20241201173325251"></p><p>以下是参考代码，用于初始化GPIO和ADC，并实现获取ADC值及测试函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;gd32f30x.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;delay.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* GPIO初始化 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">GPIOInit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    rcu_periph_clock_enable(RCU_GPIOC);</span><br><span class="line">    gpio_init(GPIOC, GPIO_MODE_AIN, GPIO_OSPEED_10MHZ, GPIO_PIN_2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ADC初始化 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">ADCInit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 使能ADC时钟 */</span></span><br><span class="line">    rcu_periph_clock_enable(RCU_ADC0);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 设置ADC时钟分频系数为6分频（120MHz / 6 = 20MHz） */</span></span><br><span class="line">    rcu_adc_clock_config(RCU_CKADC_CKAPB2_DIV6);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 设置ADC为独立模式 */</span></span><br><span class="line">    adc_mode_config(ADC_MODE_FREE);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 设置ADC为单次转换模式 */</span></span><br><span class="line">    adc_special_function_config(ADC0, ADC_CONTINUOUS_MODE, DISABLE);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 设置数据对齐为右对齐 */</span></span><br><span class="line">    adc_data_alignment_config(ADC0, ADC_DATAALIGN_RIGHT);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 设置转换通道个数为1 */</span></span><br><span class="line">    adc_channel_length_config(ADC0, ADC_REGULAR_CHANNEL, <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 配置转换通道12，放在序列寄存器的第0序列，采样时间239.5个周期 */</span></span><br><span class="line">    adc_regular_channel_config(ADC0, <span class="number">0</span>, ADC_CHANNEL_12, ADC_SAMPLETIME_239POINT5);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 选择软件触发作为外部触发源 */</span></span><br><span class="line">    adc_external_trigger_source_config(ADC0, ADC_REGULAR_CHANNEL, ADC0_1_2_EXTTRIG_REGULAR_NONE);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 使能外部触发 */</span></span><br><span class="line">    adc_external_trigger_config(ADC0, ADC_REGULAR_CHANNEL, ENABLE);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 使能ADC */</span></span><br><span class="line">    adc_enable(ADC0);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 内部校准 */</span></span><br><span class="line">    DelayNus(<span class="number">50</span>);</span><br><span class="line">    adc_calibration_enable(ADC0);</span><br><span class="line">    adc_software_trigger_enable(ADC0, ADC_REGULAR_CHANNEL);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">* @brief ADC硬件初始化</span></span><br><span class="line"><span class="comment">* @param</span></span><br><span class="line"><span class="comment">* @return </span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">VresInit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    GPIOInit();</span><br><span class="line">    ADCInit();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 获取ADC值 */</span></span><br><span class="line"><span class="type">uint16_t</span> <span class="title function_">GetAdcVal</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (!adc_flag_get(ADC0, ADC_FLAG_EOC));</span><br><span class="line">    <span class="keyword">return</span> adc_regular_data_read(ADC0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ADC测试函数 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">VresTest</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint16_t</span> AdcVal = GetAdcVal();</span><br><span class="line">    <span class="type">float</span> Voltage = (<span class="type">float</span>)AdcVal / <span class="number">4095</span> * <span class="number">3.3f</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;AdcVal = %d, Voltage = %.1f V.\n&quot;</span>, AdcVal, Voltage);</span><br><span class="line">    DelayNms(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-调试与问题解决"><a href="#2-调试与问题解决" class="headerlink" title="2.调试与问题解决"></a><strong>2.调试与问题解决</strong></h4><p>在编写和调试代码过程中，可能会遇到以下问题：</p><ol><li><p><strong>程序复位后只打印一次数据：</strong></p><ul><li>可能是因为没有正确调用回调函数或中断处理。</li><li>检查<code>system.c</code>中的定时器中断处理，确保回调函数指针不为空。</li></ul></li><li><p><strong>硬错误（Hard Fault）：</strong></p><ul><li>发生空指针引用，通常由于回调函数未正确初始化。</li><li>解决方法是在调用回调前加入空指针判断，例如：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (callback_ptr != <span class="literal">NULL</span>) </span><br><span class="line">&#123;</span><br><span class="line">    callback_ptr();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>转换模式的调整：</strong></p><ul><li>初始实现为单次转换模式，每次获取ADC值都需要软件触发。</li><li>可扩展为连续转换模式，使得只需一次触发即可连续获取ADC值。</li></ul></li></ol><h4 id="3-实验与测试"><a href="#3-实验与测试" class="headerlink" title="3.实验与测试"></a><strong>3.实验与测试</strong></h4><p>​    将代码下载到开发板后，复位设备并观察串口打印的数据。</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501190037805.png" alt="QQ20241201-173721"></p><p>​    通过调节可调电阻的位置，可以看到ADC值和对应的电压值在0到3.3V之间变化。</p><h2 id="3-多通道采集"><a href="#3-多通道采集" class="headerlink" title="3.多通道采集"></a>3.多通道采集</h2><p>使用<strong>连续扫描模式</strong>，配合<strong>DMA</strong>（直接存储器访问）实现<strong>多通道的ADC转换</strong>。</p><h3 id="1-硬件连接-1"><a href="#1-硬件连接-1" class="headerlink" title="1.硬件连接"></a><strong>1.硬件连接</strong></h3><p>原理框图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501190038454.png" alt="QQ20241201-174601"></p><blockquote><p><strong>转换通道选择：</strong></p><ul><li><p><strong>可调电阻</strong></p><ul><li>对应GPIO口：PC2</li><li>ADC通道编号：12</li></ul></li><li><p><strong>热敏电阻</strong></p><ul><li>对应GPIO口：PC3</li><li>ADC通道编号：13</li></ul></li></ul><p><strong>电源与电压范围：</strong></p><ul><li>供电电压：3.3V</li><li>电压范围：0V 到 3.3V</li></ul><p><strong>限流电阻说明：</strong></p><p>限流电阻不会用于分压。当将GPIO口配置为模拟输入模式时，GPIO口呈现高阻态，因此限流电阻不会分压。</p></blockquote><h3 id="2-代码实现-3"><a href="#2-代码实现-3" class="headerlink" title="2.代码实现"></a><strong>2.代码实现</strong></h3><h4 id="1-ADC-初始化配置-1"><a href="#1-ADC-初始化配置-1" class="headerlink" title="1.ADC 初始化配置"></a><strong>1.ADC 初始化配置</strong></h4><blockquote><p>与单次转换模式相比，连续扫描模式需要进行以下配置：</p><ol><li><p><strong>使能连续模式和扫描模式：</strong></p><ul><li>设置ADC为连续转换模式。</li><li>启用扫描模式，以支持多通道转换。</li></ul></li><li><p><strong>使能ADC的DMA功能：</strong></p><ul><li>通过DMA将转换结果自动搬移到内存数组中，减少CPU负担。</li></ul></li><li><p><strong>配置转换通道：</strong></p><ul><li>设置转换通道数量为2，分别为通道12和通道13。</li><li>配置每个通道在转换序列中的位置。</li></ul></li></ol></blockquote><h4 id="2-DMA-初始化配置"><a href="#2-DMA-初始化配置" class="headerlink" title="2.DMA 初始化配置"></a><strong>2.DMA 初始化配置</strong></h4><blockquote><p>DMA的初始化配置与之前讲解的串口配合DMA的方法基本相同，主要步骤如下：</p><ol><li><p><strong>使能DMA时钟并复位DMA通道：</strong></p><ul><li>使能对应DMA控制器的时钟。</li><li>复位DMA通道以确保配置的正确性。</li></ul></li><li><p><strong>配置DMA传输参数：</strong></p><ul><li><strong>传输方向：</strong> 外设到内存。</li><li><strong>源地址：</strong> ADC的数据寄存器地址。</li><li><strong>目的地址：</strong> 存放ADC转换结果的数组。</li><li><strong>数据传输位宽：</strong> 16位（由于ADC使用12位分辨率）。</li><li><strong>传输次数：</strong> 2次（对应两个通道）。</li><li><strong>循环模式：</strong> 使能循环模式，实现数据的循环搬移。</li></ul></li><li><p><strong>使能DMA通道：</strong></p><ul><li>启动DMA通道，使其开始工作。</li></ul></li></ol></blockquote><p>ADC多通道配合DMA转换配置框图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501190037859.png" alt="image-20241201174501329"></p><p>以下是参考代码，用于初始化GPIO、ADC和DMA，并实现获取多通道ADC值及测试函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;gd32f30x.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;delay.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* GPIO初始化 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">GPIOInit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    rcu_periph_clock_enable(RCU_GPIOC);</span><br><span class="line">    gpio_init(GPIOC, GPIO_MODE_AIN, GPIO_OSPEED_10MHZ, GPIO_PIN_2);</span><br><span class="line">    gpio_init(GPIOC, GPIO_MODE_AIN, GPIO_OSPEED_10MHZ, GPIO_PIN_3);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ADC初始化 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">ADCInit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 使能ADC时钟 */</span></span><br><span class="line">    rcu_periph_clock_enable(RCU_ADC0);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 设置ADC时钟分频系数为6分频（120MHz / 6 = 20MHz） */</span></span><br><span class="line">    rcu_adc_clock_config(RCU_CKADC_CKAPB2_DIV6);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 设置ADC为独立模式 */</span></span><br><span class="line">    adc_mode_config(ADC_MODE_FREE);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 设置ADC为连续转换模式 */</span></span><br><span class="line">    adc_special_function_config(ADC0, ADC_CONTINUOUS_MODE, ENABLE);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 设置扫描模式 */</span></span><br><span class="line">    adc_special_function_config(ADC0, ADC_SCAN_MODE, ENABLE);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 设置数据对齐为右对齐 */</span></span><br><span class="line">    adc_data_alignment_config(ADC0, ADC_DATAALIGN_RIGHT);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 设置转换通道个数为2 */</span></span><br><span class="line">    adc_channel_length_config(ADC0, ADC_REGULAR_CHANNEL, <span class="number">2</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 配置转换通道12，放在序列寄存器的第0序列，采样时间239.5个周期 */</span></span><br><span class="line">    adc_regular_channel_config(ADC0, <span class="number">0</span>, ADC_CHANNEL_12, ADC_SAMPLETIME_239POINT5);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 配置转换通道13，放在序列寄存器的第1序列，采样时间239.5个周期 */</span></span><br><span class="line">    adc_regular_channel_config(ADC0, <span class="number">1</span>, ADC_CHANNEL_13, ADC_SAMPLETIME_239POINT5);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 选择软件触发作为外部触发源 */</span></span><br><span class="line">    adc_external_trigger_source_config(ADC0, ADC_REGULAR_CHANNEL, ADC0_1_2_EXTTRIG_REGULAR_NONE);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 使能外部触发 */</span></span><br><span class="line">    adc_external_trigger_config(ADC0, ADC_REGULAR_CHANNEL, ENABLE);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 使能ADC的DMA功能 */</span></span><br><span class="line">    adc_dma_mode_enable(ADC0);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 使能ADC */</span></span><br><span class="line">    adc_enable(ADC0);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 内部校准 */</span></span><br><span class="line">    DelayNus(<span class="number">50</span>);</span><br><span class="line">    adc_calibration_enable(ADC0);</span><br><span class="line">    adc_software_trigger_enable(ADC0, ADC_REGULAR_CHANNEL);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ADC0_RDATA_ADDR    (ADC0 + 0x4C)</span></span><br><span class="line"><span class="type">static</span> <span class="type">uint16_t</span> g_adcVal[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">/* DMA初始化 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">DMAInit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 使能DMA时钟 */</span></span><br><span class="line">    rcu_periph_clock_enable(RCU_DMA0);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 复位DMA通道 */</span></span><br><span class="line">    dma_deinit(DMA0, DMA_CH0);</span><br><span class="line">    </span><br><span class="line">    dma_parameter_struct dmaStruct;</span><br><span class="line">    dma_struct_para_init(&amp;dmaStruct);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 配置传输方向：外设到内存 */</span></span><br><span class="line">    dmaStruct.direction = DMA_PERIPHERAL_TO_MEMORY;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 配置数据源地址 */</span></span><br><span class="line">    dmaStruct.periph_addr = ADC0_RDATA_ADDR;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 配置源地址不递增 */</span></span><br><span class="line">    dmaStruct.periph_inc = DMA_PERIPH_INCREASE_DISABLE;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 配置源数据传输位宽为16位 */</span></span><br><span class="line">    dmaStruct.periph_width = DMA_PERIPHERAL_WIDTH_16BIT;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 配置数据目的地址 */</span></span><br><span class="line">    dmaStruct.memory_addr = (<span class="type">uint32_t</span>)g_adcVal;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 配置目的地址递增 */</span></span><br><span class="line">    dmaStruct.memory_inc = DMA_MEMORY_INCREASE_ENABLE;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 配置目的数据传输位宽为16位 */</span></span><br><span class="line">    dmaStruct.memory_width = DMA_MEMORY_WIDTH_16BIT;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 配置数据传输最大次数为2 */</span></span><br><span class="line">    dmaStruct.number = <span class="number">2</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 配置DMA通道优先级为高 */</span></span><br><span class="line">    dmaStruct.priority = DMA_PRIORITY_HIGH;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 初始化DMA通道 */</span></span><br><span class="line">    dma_init(DMA0, DMA_CH0, &amp;dmaStruct);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 使能DMA循环模式搬移数据 */</span></span><br><span class="line">    dma_circulation_enable(DMA0, DMA_CH0);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 使能DMA通道 */</span></span><br><span class="line">    dma_channel_enable(DMA0, DMA_CH0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">* @brief ADC硬件初始化</span></span><br><span class="line"><span class="comment">* @param</span></span><br><span class="line"><span class="comment">* @return </span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">VresInit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    GPIOInit();</span><br><span class="line">    ADCInit();</span><br><span class="line">    DMAInit();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ADC测试函数 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">VresTest</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;CH12 AdcVal = %d.\n&quot;</span>, g_adcVal[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;CH13 AdcVal = %d.\n&quot;</span>, g_adcVal[<span class="number">1</span>]);</span><br><span class="line">    DelayNms(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-调试与问题解决"><a href="#3-调试与问题解决" class="headerlink" title="3.调试与问题解决"></a><strong>3.调试与问题解决</strong></h4><blockquote><p>在编写和调试代码过程中，可能会遇到以下问题：</p><ol><li><p><strong>数据未正确搬移到内存数组：</strong></p><ul><li><strong>原因：</strong> DMA配置不正确或DMA未使能。</li><li><strong>解决方法：</strong> 检查DMA初始化配置，确保DMA通道已使能并配置为循环模式。</li></ul></li><li><p><strong>硬错误（Hard Fault）：</strong></p><ul><li><strong>原因：</strong> DMA传输地址配置错误，导致访问非法内存。</li><li><strong>解决方法：</strong> 确认DMA源地址和目的地址配置正确，确保目的数组已正确声明并分配足够内存。</li></ul></li><li><p><strong>ADC数据不更新或保持不变：</strong></p><ul><li><strong>原因：</strong> ADC未正确启动或DMA未正确配置。</li><li><strong>解决方法：</strong> 确认ADC已使能并开始转换，检查DMA是否正常工作。</li></ul></li><li><p><strong>CPU负担过重或系统响应缓慢：</strong></p><ul><li><strong>原因：</strong> 未使用DMA，手动读取ADC数据导致CPU负担增加。</li><li><strong>解决方法：</strong>使用DMA搬移数据，减少CPU的中断处理次数。</li></ul></li></ol></blockquote><h2 id="4-滤波处理"><a href="#4-滤波处理" class="headerlink" title="4.滤波处理"></a>4.滤波处理</h2><h3 id="1-硬件滤波"><a href="#1-硬件滤波" class="headerlink" title="1.硬件滤波"></a><strong>1.硬件滤波</strong></h3><blockquote><p><strong>过采样滤波原理：</strong></p><ul><li><strong>过采样单元</strong>通过多次采样并求和，随后进行右移操作，实现数据的平均滤波。</li><li><strong>配置参数：</strong><ul><li><strong>n</strong>：代表将多少次的结果求和。</li><li><strong>m</strong>：对应的是除法系数，即右移的次数。右移一次相当于除以二，右移两次相当于除以四，依此类推。</li></ul></li></ul><p><strong>实例配置：</strong></p><ul><li>配置为取16次的结果求和（n = 16）。</li><li>进行右移4次（m = 4），相当于除以16。</li></ul><p><strong>硬件滤波的优势：</strong></p><ul><li>减少CPU的负担，提升系统效率。</li><li>实现快速的硬件滤波，提升数据处理速度。</li></ul><p><strong>ADC 硬件滤波初始化配置：</strong></p><p>与之前的连续扫描模式和DMA配置相比，硬件滤波模式需要进行以下额外配置：</p><ol><li><p><strong>配置ADC为连续模式：</strong></p><ul><li>设置ADC为连续转换模式，只需一次触发即可连续进行转换。</li></ul></li><li><p><strong>配置硬件滤波参数：</strong></p><ul><li>设置过采样次数（n）和右移次数（m）。</li><li>例如，配置为16次求和，右移4次。</li></ul></li><li><p><strong>使能ADC的过采样模式：</strong></p><ul><li>启用ADC的过采样功能，以实现硬件滤波。</li></ul></li></ol></blockquote><h3 id="2-软件滤波"><a href="#2-软件滤波" class="headerlink" title="2.软件滤波"></a><strong>2.软件滤波</strong></h3><blockquote><p>在项目开发中，软件滤波算法常用于处理ADC采集的数据。以下介绍几种常用的软件滤波算法：</p><ol><li><p><strong>算术平均滤波法（Arithmetic Average Filter）：</strong></p><ul><li>取n个采样值进行算术平均运算。</li><li>简单易实现，但对极端值敏感。</li></ul></li><li><p><strong>中位值滤波法（Median Filter）：</strong></p><ul><li>连续采样n次，将n次采样值按大小排序，取中间值作为有效值。</li><li>对极端值有较好的抑制效果，适用于去除脉冲干扰。</li></ul></li><li><p><strong>中位值平均滤波法（Median Average Filter）：</strong></p><ul><li>连续采样n个数据，去掉一个最大值和一个最小值，然后计算剩余n-2个数据的算术平均值。</li><li>兼具算术平均和中位值滤波的优点，既能去除极端值，又能平滑数据。</li></ul></li></ol></blockquote><h3 id="3-代码实现-2"><a href="#3-代码实现-2" class="headerlink" title="3.代码实现"></a><strong>3.代码实现</strong></h3><p>以下是参考代码，用于初始化GPIO和ADC，并实现ADC硬件滤波功能及测试函数：</p><h4 id="1-硬件滤波代码"><a href="#1-硬件滤波代码" class="headerlink" title="1.硬件滤波代码"></a><strong>1.硬件滤波代码</strong></h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;gd32f30x.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;delay.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* GPIO初始化 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">GPIOInit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    rcu_periph_clock_enable(RCU_GPIOC);</span><br><span class="line">    gpio_init(GPIOC, GPIO_MODE_AIN, GPIO_OSPEED_10MHZ, GPIO_PIN_2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ADC初始化 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">ADCInit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 使能ADC时钟 */</span></span><br><span class="line">    rcu_periph_clock_enable(RCU_ADC0);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 设置ADC时钟分频系数为6分频（120MHz / 6 = 20MHz） */</span></span><br><span class="line">    rcu_adc_clock_config(RCU_CKADC_CKAPB2_DIV6);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 设置ADC为独立模式 */</span></span><br><span class="line">    adc_mode_config(ADC_MODE_FREE);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 设置连续转换模式 */</span></span><br><span class="line">    adc_special_function_config(ADC0, ADC_CONTINUOUS_MODE, ENABLE);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 设置数据对齐为右对齐 */</span></span><br><span class="line">    adc_data_alignment_config(ADC0, ADC_DATAALIGN_RIGHT);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 设置转换通道个数为1 */</span></span><br><span class="line">    adc_channel_length_config(ADC0, ADC_REGULAR_CHANNEL, <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 配置转换通道12，放在序列寄存器的第0序列，采样时间239.5个周期 */</span></span><br><span class="line">    adc_regular_channel_config(ADC0, <span class="number">0</span>, ADC_CHANNEL_12, ADC_SAMPLETIME_239POINT5);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 选择软件触发作为外部触发源 */</span></span><br><span class="line">    adc_external_trigger_source_config(ADC0, ADC_REGULAR_CHANNEL, ADC0_1_2_EXTTRIG_REGULAR_NONE);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 使能外部触发 */</span></span><br><span class="line">    adc_external_trigger_config(ADC0, ADC_REGULAR_CHANNEL, ENABLE);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 设置硬件滤波 */</span></span><br><span class="line">    adc_oversample_mode_config(ADC0, ADC_OVERSAMPLING_ALL_CONVERT, ADC_OVERSAMPLING_SHIFT_4B, ADC_OVERSAMPLING_RATIO_MUL16);</span><br><span class="line">    adc_oversample_mode_enable(ADC0);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 使能ADC */</span></span><br><span class="line">    adc_enable(ADC0);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 内部校准 */</span></span><br><span class="line">    DelayNus(<span class="number">50</span>);</span><br><span class="line">    adc_calibration_enable(ADC0);</span><br><span class="line">    adc_software_trigger_enable(ADC0, ADC_REGULAR_CHANNEL);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">* @brief ADC硬件初始化</span></span><br><span class="line"><span class="comment">* @param</span></span><br><span class="line"><span class="comment">* @return </span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">VresInit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    GPIOInit();</span><br><span class="line">    ADCInit();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint16_t</span> <span class="title function_">GetAdcVal</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (!adc_flag_get(ADC0, ADC_FLAG_EOC));</span><br><span class="line">    <span class="keyword">return</span> adc_regular_data_read(ADC0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">VresTest</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint16_t</span> AdcVal = GetAdcVal();</span><br><span class="line">    <span class="type">float</span> Voltage = (<span class="type">float</span>)AdcVal / <span class="number">4095</span> * <span class="number">3.3f</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;AdcVal = %d, Voltage = %.1f V.\n&quot;</span>, AdcVal, Voltage);</span><br><span class="line">    DelayNms(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-软件滤波代码："><a href="#2-软件滤波代码：" class="headerlink" title="2.软件滤波代码："></a><strong>2.软件滤波代码：</strong></h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;gd32f30x.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;delay.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ADC0_RDATA_ADDR    (ADC0 + 0x4C)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_BUF_SIZE        10</span></span><br><span class="line"><span class="type">static</span> <span class="type">uint16_t</span> g_adcVal[MAX_BUF_SIZE];</span><br><span class="line"></span><br><span class="line"><span class="comment">/* GPIO初始化 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">GPIOInit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    rcu_periph_clock_enable(RCU_GPIOC);</span><br><span class="line">    gpio_init(GPIOC, GPIO_MODE_AIN, GPIO_OSPEED_10MHZ, GPIO_PIN_2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ADC初始化 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">ADCInit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 使能ADC时钟 */</span></span><br><span class="line">    rcu_periph_clock_enable(RCU_ADC0);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 设置ADC时钟分频系数为6分频（120MHz / 6 = 20MHz） */</span></span><br><span class="line">    rcu_adc_clock_config(RCU_CKADC_CKAPB2_DIV6);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 设置ADC为独立模式 */</span></span><br><span class="line">    adc_mode_config(ADC_MODE_FREE);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 设置连续转换模式 */</span></span><br><span class="line">    adc_special_function_config(ADC0, ADC_CONTINUOUS_MODE, ENABLE);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 设置扫描模式 */</span></span><br><span class="line">    adc_special_function_config(ADC0, ADC_SCAN_MODE, ENABLE);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 设置数据对齐为右对齐 */</span></span><br><span class="line">    adc_data_alignment_config(ADC0, ADC_DATAALIGN_RIGHT);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 设置转换通道个数为1 */</span></span><br><span class="line">    adc_channel_length_config(ADC0, ADC_REGULAR_CHANNEL, <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 配置转换通道12，放在序列寄存器的第0序列，采样时间239.5个周期 */</span></span><br><span class="line">    adc_regular_channel_config(ADC0, <span class="number">0</span>, ADC_CHANNEL_12, ADC_SAMPLETIME_239POINT5);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 选择软件触发作为外部触发源 */</span></span><br><span class="line">    adc_external_trigger_source_config(ADC0, ADC_REGULAR_CHANNEL, ADC0_1_2_EXTTRIG_REGULAR_NONE);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 使能外部触发 */</span></span><br><span class="line">    adc_external_trigger_config(ADC0, ADC_REGULAR_CHANNEL, ENABLE);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 使能ADC的DMA功能 */</span></span><br><span class="line">    adc_dma_mode_enable(ADC0);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 使能ADC */</span></span><br><span class="line">    adc_enable(ADC0);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 内部校准 */</span></span><br><span class="line">    DelayNus(<span class="number">50</span>);</span><br><span class="line">    adc_calibration_enable(ADC0);</span><br><span class="line">    adc_software_trigger_enable(ADC0, ADC_REGULAR_CHANNEL);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* DMA初始化 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">DMAInit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 使能DMA时钟 */</span></span><br><span class="line">    rcu_periph_clock_enable(RCU_DMA0);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 复位DMA通道 */</span></span><br><span class="line">    dma_deinit(DMA0, DMA_CH0);</span><br><span class="line">    </span><br><span class="line">    dma_parameter_struct dmaStruct;</span><br><span class="line">    dma_struct_para_init(&amp;dmaStruct);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 配置传输方向：外设到内存 */</span></span><br><span class="line">    dmaStruct.direction = DMA_PERIPHERAL_TO_MEMORY;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 配置数据源地址 */</span></span><br><span class="line">    dmaStruct.periph_addr = ADC0_RDATA_ADDR;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 配置源地址不递增 */</span></span><br><span class="line">    dmaStruct.periph_inc = DMA_PERIPH_INCREASE_DISABLE;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 配置源数据传输位宽为16位 */</span></span><br><span class="line">    dmaStruct.periph_width = DMA_PERIPHERAL_WIDTH_16BIT;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 配置数据目的地址 */</span></span><br><span class="line">    dmaStruct.memory_addr = (<span class="type">uint32_t</span>)g_adcVal;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 配置目的地址递增 */</span></span><br><span class="line">    dmaStruct.memory_inc = DMA_MEMORY_INCREASE_ENABLE;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 配置目的数据传输位宽为16位 */</span></span><br><span class="line">    dmaStruct.memory_width = DMA_MEMORY_WIDTH_16BIT;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 配置数据传输最大次数为MAX_BUF_SIZE */</span></span><br><span class="line">    dmaStruct.number = MAX_BUF_SIZE;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 配置DMA通道优先级为高 */</span></span><br><span class="line">    dmaStruct.priority = DMA_PRIORITY_HIGH;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 初始化DMA通道 */</span></span><br><span class="line">    dma_init(DMA0, DMA_CH0, &amp;dmaStruct);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 使能DMA循环模式搬移数据 */</span></span><br><span class="line">    dma_circulation_enable(DMA0, DMA_CH0);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 使能DMA通道 */</span></span><br><span class="line">    dma_channel_enable(DMA0, DMA_CH0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">* @brief ADC硬件初始化</span></span><br><span class="line"><span class="comment">* @param</span></span><br><span class="line"><span class="comment">* @return </span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">VresInit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    GPIOInit();</span><br><span class="line">    ADCInit();</span><br><span class="line">    DMAInit();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 算术平均滤波函数 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">uint16_t</span> <span class="title function_">ArithAvgFltr</span><span class="params">(<span class="type">uint16_t</span> *arr, <span class="type">uint32_t</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint32_t</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint32_t</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum += arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">uint16_t</span>)(sum / len);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">VresTest</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint16_t</span> buf[MAX_BUF_SIZE];</span><br><span class="line">    <span class="built_in">memcpy</span>(buf, g_adcVal, <span class="keyword">sizeof</span>(<span class="type">uint16_t</span>) * MAX_BUF_SIZE);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint8_t</span> i = <span class="number">0</span>; i &lt; MAX_BUF_SIZE; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;AdcVal[%d] = %d.\n&quot;</span>, i, buf[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint16_t</span> res = ArithAvgFltr(buf, MAX_BUF_SIZE);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;res = %d.\n&quot;</span>, res);</span><br><span class="line">    DelayNms(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-调试与问题解决-1"><a href="#3-调试与问题解决-1" class="headerlink" title="3.调试与问题解决"></a><strong>3.调试与问题解决</strong></h4><blockquote><p>在实现和调试ADC滤波功能时，可能会遇到以下问题：</p><ol><li><p><strong>ADC数据不更新或保持不变：</strong></p><ul><li><strong>原因：</strong> ADC未正确启动或DMA未正确配置。</li><li><strong>解决方法：</strong> 确认ADC已使能并开始转换，检查DMA配置是否正确，确保DMA通道已使能。</li></ul></li><li><p><strong>硬错误（Hard Fault）：</strong></p><ul><li><strong>原因：</strong> DMA传输地址配置错误，导致访问非法内存。</li><li><strong>解决方法：</strong> 确认DMA源地址和目的地址配置正确，确保目的数组已正确声明并分配足够内存。</li></ul></li><li><p><strong>滤波结果不准确：</strong></p><ul><li><strong>原因：</strong> 过采样参数配置不当，或滤波算法实现有误。</li><li><strong>解决方法：</strong> 检查过采样次数和右移次数的配置，确保滤波算法逻辑正确。</li></ul></li><li><p><strong>CPU负担过重或系统响应缓慢：</strong></p><ul><li><strong>原因：</strong> 未使用DMA，手动读取ADC数据导致CPU负担增加。</li><li><strong>解决方法：</strong> 使用DMA搬移数据，减少CPU的中断处理次数。</li></ul></li></ol></blockquote><h2 id="5-快速排序"><a href="#5-快速排序" class="headerlink" title="5.快速排序"></a>5.快速排序</h2><h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a><strong>1.概述</strong></h3><blockquote><p><strong>快速排序（Quick Sort）</strong>是一种高效的排序算法，采用分治策略，通过一个基准元素将数组分成两部分，递归地排序这两部分。相比<strong>冒泡排序法</strong>，快速排序具有以下优势：</p><ul><li><strong>更高的性能</strong>：平均时间复杂度为O(n log n)，而冒泡排序为O(n²)。</li><li><strong>更灵活</strong>：C标准库提供了快速排序的接口函数<code>qsort</code>，简化了排序过程。</li></ul><p><strong>快速排序优点</strong></p><ul><li><strong>灵活性</strong>：<code>qsort</code>函数允许用户自定义排序规则，通过函数指针实现升序或降序排序。</li><li><strong>性能优越</strong>：快速排序在大多数情况下比冒泡排序更快，适用于需要高效排序的应用场景。</li></ul></blockquote><h3 id="2-qsort函数"><a href="#2-qsort函数" class="headerlink" title="2.qsort函数"></a><strong>2.<code>qsort</code>函数</strong></h3><blockquote><p>在C标准库中，<code>qsort</code>函数用于对数组进行排序。其函数原型如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">qsort</span><span class="params">(<span class="type">void</span> *base, <span class="type">size_t</span> nmemb, <span class="type">size_t</span> size, <span class="type">int</span> (*compar)(<span class="type">const</span> <span class="type">void</span> *, <span class="type">const</span> <span class="type">void</span> *))</span>;</span><br></pre></td></tr></table></figure><p><strong>参数说明：</strong></p><ol><li><strong><code>base</code></strong>：指向要排序的数组的首地址。</li><li><strong><code>nmemb</code></strong>：数组中元素的个数。</li><li><strong><code>size</code></strong>：数组中每个元素所占用的内存空间大小（通常使用<code>sizeof</code>运算符计算）。</li><li><strong><code>compar</code></strong>：指向比较函数的指针，用于定义排序规则（升序或降序）。</li></ol><p><strong>比较函数的定义：</strong></p><p>比较函数必须符合以下签名：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">compar</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *a, <span class="type">const</span> <span class="type">void</span> *b)</span>;</span><br></pre></td></tr></table></figure><p><strong>返回值：</strong></p><ul><li><strong>负值</strong>：如果<code>*a</code>小于<code>*b</code>。</li><li><strong>零</strong>：如果<code>*a</code>等于<code>*b</code>。</li><li><strong>正值</strong>：如果<code>*a</code>大于<code>*b</code>（升序）。</li></ul><p>通过调整比较函数的返回值，可以实现升序或降序排序。</p></blockquote><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a><strong>代码实现</strong></h3><p>以下是一个使用<code>qsort</code>对<code>uint16_t</code>类型数组和结构体数组进行排序的示例代码。</p><h4 id="1-排序整数数组"><a href="#1-排序整数数组" class="headerlink" title="1. 排序整数数组"></a><strong>1. 排序整数数组</strong></h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;led_drv.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;key_drv.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;systick.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;usb2com_drv.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;rtc_drv.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;vres_drv.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;usb2com_app.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;hmi_app.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">DrvInit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    DelayInit();</span><br><span class="line">    LedInit();</span><br><span class="line">    KeyInit();</span><br><span class="line">    Usb2ComInit();</span><br><span class="line">    RtcInit();</span><br><span class="line">    VresInit();</span><br><span class="line">    SystickInit();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">uint16_t</span> id;</span><br><span class="line">    <span class="type">uint8_t</span> score;</span><br><span class="line">&#125; StuInfo_t;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 整数数组比较函数（降序） */</span></span><br><span class="line"><span class="type">int32_t</span> <span class="title function_">CmpCb</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *_a, <span class="type">const</span> <span class="type">void</span> *_b)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint16_t</span> *a = (<span class="type">uint16_t</span> *)_a;</span><br><span class="line">    <span class="type">uint16_t</span> *b = (<span class="type">uint16_t</span> *)_b;</span><br><span class="line">    <span class="keyword">if</span> (*a &gt; *b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (*a &lt; *b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 结构体数组比较函数（降序） */</span></span><br><span class="line"><span class="type">int32_t</span> <span class="title function_">StuCmpCb</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *_a, <span class="type">const</span> <span class="type">void</span> *_b)</span></span><br><span class="line">&#123;</span><br><span class="line">    StuInfo_t *a = (StuInfo_t *)_a;</span><br><span class="line">    StuInfo_t *b = (StuInfo_t *)_b;</span><br><span class="line">    <span class="keyword">if</span> (a-&gt;score &gt; b-&gt;score)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (a-&gt;score &lt; b-&gt;score)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    DrvInit();</span><br><span class="line">    <span class="type">uint16_t</span> num[<span class="number">10</span>] = &#123;<span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">26</span>, <span class="number">52</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">14</span>, <span class="number">56</span>&#125;;</span><br><span class="line">    <span class="type">uint16_t</span> sz = <span class="keyword">sizeof</span>(num) / <span class="keyword">sizeof</span>(num[<span class="number">0</span>]);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 使用qsort对整数数组进行降序排序 */</span></span><br><span class="line">    qsort(num, sz, <span class="keyword">sizeof</span>(num[<span class="number">0</span>]), CmpCb);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint8_t</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;num[%d] = %d.\n&quot;</span>, i, num[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 定义并初始化结构体数组 */</span></span><br><span class="line">    StuInfo_t stuInfo[<span class="number">5</span>] = &#123;</span><br><span class="line">        &#123;<span class="number">1</span>, <span class="number">90</span>&#125;,</span><br><span class="line">        &#123;<span class="number">2</span>, <span class="number">65</span>&#125;,</span><br><span class="line">        &#123;<span class="number">3</span>, <span class="number">80</span>&#125;,</span><br><span class="line">        &#123;<span class="number">4</span>, <span class="number">75</span>&#125;,</span><br><span class="line">        &#123;<span class="number">5</span>, <span class="number">70</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 使用qsort对结构体数组进行降序排序 */</span></span><br><span class="line">    qsort(stuInfo, <span class="number">5</span>, <span class="keyword">sizeof</span>(stuInfo[<span class="number">0</span>]), StuCmpCb);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint8_t</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;student id = %d, score = %d.\n&quot;</span>, stuInfo[i].id, stuInfo[i].score);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-排序结构体数组"><a href="#2-排序结构体数组" class="headerlink" title="2. 排序结构体数组"></a><strong>2. 排序结构体数组</strong></h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;systick.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;usb2com_drv.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;rtc_drv.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;vres_drv.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;usb2com_app.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">DrvInit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    DelayInit();</span><br><span class="line">    LedInit();</span><br><span class="line">    KeyInit();</span><br><span class="line">    Usb2ComInit();</span><br><span class="line">    RtcInit();</span><br><span class="line">    VresInit();</span><br><span class="line">    SystickInit();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">uint16_t</span> id;</span><br><span class="line">    <span class="type">uint8_t</span> score;</span><br><span class="line">&#125; StuInfo_t;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 结构体数组比较函数（降序） */</span></span><br><span class="line"><span class="type">int32_t</span> <span class="title function_">StuCmpCb</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *_a, <span class="type">const</span> <span class="type">void</span> *_b)</span></span><br><span class="line">&#123;</span><br><span class="line">    StuInfo_t *a = (StuInfo_t *)_a;</span><br><span class="line">    StuInfo_t *b = (StuInfo_t *)_b;</span><br><span class="line">    <span class="keyword">if</span> (a-&gt;score &gt; b-&gt;score)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (a-&gt;score &lt; b-&gt;score)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    DrvInit();</span><br><span class="line">    <span class="type">uint16_t</span> num[<span class="number">10</span>] = &#123;<span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">26</span>, <span class="number">52</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">14</span>, <span class="number">56</span>&#125;;</span><br><span class="line">    <span class="type">uint16_t</span> sz = <span class="keyword">sizeof</span>(num) / <span class="keyword">sizeof</span>(num[<span class="number">0</span>]);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 使用qsort对整数数组进行降序排序 */</span></span><br><span class="line">    qsort(num, sz, <span class="keyword">sizeof</span>(num[<span class="number">0</span>]), CmpCb);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint8_t</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;num[%d] = %d.\n&quot;</span>, i, num[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 定义并初始化结构体数组 */</span></span><br><span class="line">    StuInfo_t stuInfo[<span class="number">5</span>] = &#123;</span><br><span class="line">        &#123;<span class="number">1</span>, <span class="number">90</span>&#125;,</span><br><span class="line">        &#123;<span class="number">2</span>, <span class="number">65</span>&#125;,</span><br><span class="line">        &#123;<span class="number">3</span>, <span class="number">80</span>&#125;,</span><br><span class="line">        &#123;<span class="number">4</span>, <span class="number">75</span>&#125;,</span><br><span class="line">        &#123;<span class="number">5</span>, <span class="number">70</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 使用qsort对结构体数组进行降序排序 */</span></span><br><span class="line">    qsort(stuInfo, <span class="number">5</span>, <span class="keyword">sizeof</span>(stuInfo[<span class="number">0</span>]), StuCmpCb);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint8_t</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;student id = %d, score = %d.\n&quot;</span>, stuInfo[i].id, stuInfo[i].score);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码讲解"><a href="#代码讲解" class="headerlink" title="代码讲解"></a><strong>代码讲解</strong></h3><h4 id="1-排序整数数组-1"><a href="#1-排序整数数组-1" class="headerlink" title="1. 排序整数数组"></a><strong>1. 排序整数数组</strong></h4><blockquote><p>在本例中，我们定义了一个<code>uint16_t</code>类型的数组<code>num</code>，包含10个元素。通过调用<code>qsort</code>函数，对该数组进行降序排序。</p><p><strong>关键步骤：</strong></p><ol><li><p><strong>定义比较函数<code>CmpCb</code></strong>：</p><ul><li>接受两个<code>const void *</code>类型的指针，分别指向数组中的两个元素。</li><li>将其转换为<code>uint16_t *</code>类型。</li><li>比较两个数的大小，返回<code>-1</code>（如果第一个数大于第二个数）、<code>1</code>（如果第一个数小于第二个数）或<code>0</code>（相等）。</li><li>该实现实现了<strong>降序排序</strong>。</li></ul></li><li><p><strong>调用<code>qsort</code>函数</strong>：</p><ul><li><strong>第一个参数</strong>：数组<code>num</code>的首地址。</li><li><strong>第二个参数</strong>：数组元素的个数（10）。</li><li><strong>第三个参数</strong>：数组元素所占用的内存空间大小（<code>sizeof(num[0])</code>）。</li><li><strong>第四个参数</strong>：比较函数的指针（<code>CmpCb</code>）。</li></ul></li><li><p><strong>打印排序后的数组</strong>：</p><ul><li>使用<code>for</code>循环遍历数组，并通过<code>printf</code>函数打印每个元素的值。</li></ul></li></ol><p><strong>输出结果示例</strong>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">num[<span class="number">0</span>] = <span class="number">56.</span></span><br><span class="line">num[<span class="number">1</span>] = <span class="number">52.</span></span><br><span class="line">num[<span class="number">2</span>] = <span class="number">26.</span></span><br><span class="line">num[<span class="number">3</span>] = <span class="number">14.</span></span><br><span class="line">num[<span class="number">4</span>] = <span class="number">9.</span></span><br><span class="line">num[<span class="number">5</span>] = <span class="number">8.</span></span><br><span class="line">num[<span class="number">6</span>] = <span class="number">7.</span></span><br><span class="line">num[<span class="number">7</span>] = <span class="number">5.</span></span><br><span class="line">num[<span class="number">8</span>] = <span class="number">3.</span></span><br><span class="line">num[<span class="number">9</span>] = <span class="number">1.</span></span><br></pre></td></tr></table></figure></blockquote><h4 id="2-排序结构体数组-1"><a href="#2-排序结构体数组-1" class="headerlink" title="2. 排序结构体数组"></a><strong>2. 排序结构体数组</strong></h4><blockquote><p>我们定义了一个结构体<code>StuInfo_t</code>，包含<code>id</code>和<code>score</code>两个成员，用于表示学生的相关信息。通过<code>qsort</code>函数，对结构体数组<code>stuInfo</code>进行降序排序，基于学生的分数。</p><p><strong>关键步骤：</strong></p><ol><li><p><strong>定义比较函数<code>StuCmpCb</code></strong>：</p><ul><li>接受两个<code>const void *</code>类型的指针，分别指向结构体数组中的两个元素。</li><li>将其转换为<code>StuInfo_t *</code>类型。</li><li>比较两个学生的分数，返回<code>-1</code>（如果第一个学生的分数高于第二个学生）、<code>1</code>（如果第一个学生的分数低于第二个学生）或<code>0</code>（相等）。</li><li>该实现实现了<strong>基于分数的降序排序</strong>。</li></ul></li><li><p><strong>调用<code>qsort</code>函数</strong>：</p><ul><li><strong>第一个参数</strong>：结构体数组<code>stuInfo</code>的首地址。</li><li><strong>第二个参数</strong>：结构体数组元素的个数（5）。</li><li><strong>第三个参数</strong>：结构体数组元素所占用的内存空间大小（<code>sizeof(stuInfo[0])</code>）。</li><li><strong>第四个参数</strong>：比较函数的指针（<code>StuCmpCb</code>）。</li></ul></li><li><p><strong>打印排序后的结构体数组</strong>：</p><ul><li>使用<code>for</code>循环遍历结构体数组，并通过<code>printf</code>函数打印每个学生的<code>id</code>和<code>score</code>。</li></ul></li></ol><p><strong>输出结果示例</strong>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">student id = <span class="number">1</span>, score = <span class="number">90.</span></span><br><span class="line">student id = <span class="number">3</span>, score = <span class="number">80.</span></span><br><span class="line">student id = <span class="number">4</span>, score = <span class="number">75.</span></span><br><span class="line">student id = <span class="number">5</span>, score = <span class="number">70.</span></span><br><span class="line">student id = <span class="number">2</span>, score = <span class="number">65.</span></span><br></pre></td></tr></table></figure></blockquote><h2 id="6-二分查找"><a href="#6-二分查找" class="headerlink" title="6.二分查找"></a>6.二分查找</h2><h3 id="1-概述-1"><a href="#1-概述-1" class="headerlink" title="1.概述"></a><strong>1.概述</strong></h3><p><strong>二分查找法</strong>，也称为<strong>折半查找法</strong>，是一种在有序数组中查找某个目标值是否存在的算法。其主要优势在于相较于<strong>顺序查找</strong>（线性查找），二分查找法能够显著降低查找的时间复杂度。</p><p><strong>时间复杂度:</strong></p><ul><li><strong>顺序查找</strong>的时间复杂度为O(n)，其中n是数组的元素个数。</li><li><strong>二分查找法</strong>的时间复杂度为O(log₂n)，大大提高了查找效率。</li></ul><p><strong>示例</strong>：</p><p>假设数组中有8个元素：</p><ul><li>顺序查找最多需要8次比较。</li><li>二分查找只需要3次比较（因为2³ = 8）。</li></ul><h4 id="2-应用场景"><a href="#2-应用场景" class="headerlink" title="2. 应用场景"></a><strong>2. 应用场景</strong></h4><ul><li>适用于<strong>有序数组</strong>。</li><li>需要快速查找元素的场景，如查找温度传感器的校准值、配置表等。</li></ul><h3 id="2-基本原理"><a href="#2-基本原理" class="headerlink" title="2.基本原理"></a><strong>2.基本原理</strong></h3><p>二分查找法通过不断将查找范围分成两半，逐步缩小查找区间，直至找到目标值或确定目标值不存在。</p><p><strong>步骤</strong>：</p><ol><li><strong>初始化</strong>：<ul><li><strong>左下标（left）</strong>：指向数组的起始位置，通常为0。</li><li><strong>右下标（right）</strong>：指向数组的末尾位置，通常为数组长度减1。</li></ul></li><li><strong>循环查找</strong>：<ul><li><strong>计算中间下标（middle）</strong></li><li><strong>比较目标值与中间元素</strong></li></ul></li><li><strong>终止条件</strong>：<ul><li>当左下标超过右下标时，查找结束，目标值不存在于数组中。</li></ul></li></ol><h3 id="实现细节"><a href="#实现细节" class="headerlink" title="实现细节"></a><strong>实现细节</strong></h3><blockquote><p>在实现二分查找法时，需要注意以下几个关键点：</p><ol><li><p><strong>防止溢出</strong>：</p><ul><li>在计算中间下标时，使用 <code>mid = left + (right - left) / 2</code> 而不是 <code>mid = left + right  / 2</code>，以避免当 <code>left</code>和 <code>right</code> 都很大时发生整型溢出。</li></ul></li><li><p><strong>变量类型</strong>：</p><ul><li><code>left</code>、<code>right</code> 和 <code>middle</code> 应定义为<strong>有符号整型</strong>，如 <code>int</code> 或 <code>int32_t</code>，以处理可能出现的负值。</li></ul></li><li><p><strong>升序与降序</strong>：</p><ul><li>根据数组的排序顺序（升序或降序），调整比较逻辑以确保正确缩小查找范围。</li></ul></li><li><p><strong>查找接近目标值的元素</strong>：</p><ul><li>除了查找目标值是否存在，二分查找法还可用于查找最接近目标值的元素下标。</li></ul></li></ol></blockquote><h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a><strong>代码实现</strong></h3><p>以下是二分查找法在C语言中的实现，包括<strong>升序查找</strong>和<strong>降序查找</strong>，以及查找最接近目标值的函数。</p><h4 id="1-升序二分查找"><a href="#1-升序二分查找" class="headerlink" title="1. 升序二分查找"></a><strong>1. 升序二分查找</strong></h4><p><strong>函数说明</strong>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief 升序数组的二分查找函数</span></span><br><span class="line"><span class="comment"> * @param arr 有序数组的首地址</span></span><br><span class="line"><span class="comment"> * @param size 数组的大小</span></span><br><span class="line"><span class="comment"> * @param key 目标值</span></span><br><span class="line"><span class="comment"> * @return 目标值的下标，若未找到返回-1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int32_t</span> <span class="title function_">AscBinarySearch</span><span class="params">(<span class="type">int32_t</span> *arr, <span class="type">int32_t</span> size, <span class="type">int32_t</span> key)</span> &#123;</span><br><span class="line">    <span class="type">int32_t</span> left = <span class="number">0</span>;               <span class="comment">// 左下标</span></span><br><span class="line">    <span class="type">int32_t</span> right = size - <span class="number">1</span>;       <span class="comment">// 右下标</span></span><br><span class="line">    <span class="type">int32_t</span> mid;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;         <span class="comment">// 循环条件</span></span><br><span class="line">        mid = left + (right - left) / <span class="number">2</span>;   <span class="comment">// 计算中间下标</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (key &lt; arr[mid]) &#123;</span><br><span class="line">            right = mid - <span class="number">1</span>;        <span class="comment">// 目标值在左半部分</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key &gt; arr[mid]) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;         <span class="comment">// 目标值在右半部分</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> mid;             <span class="comment">// 找到目标值</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;                        <span class="comment">// 未找到目标值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-降序二分查找"><a href="#2-降序二分查找" class="headerlink" title="2. 降序二分查找"></a><strong>2. 降序二分查找</strong></h4><p><strong>函数说明</strong>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief 降序数组的二分查找函数</span></span><br><span class="line"><span class="comment"> * @param arr 有序数组的首地址</span></span><br><span class="line"><span class="comment"> * @param size 数组的大小</span></span><br><span class="line"><span class="comment"> * @param key 目标值</span></span><br><span class="line"><span class="comment"> * @return 目标值的下标，若未找到返回-1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int32_t</span> <span class="title function_">DescBinarySearch</span><span class="params">(<span class="type">int32_t</span> *arr, <span class="type">int32_t</span> size, <span class="type">int32_t</span> key)</span> &#123;</span><br><span class="line">    <span class="type">int32_t</span> left = <span class="number">0</span>;               <span class="comment">// 左下标</span></span><br><span class="line">    <span class="type">int32_t</span> right = size - <span class="number">1</span>;       <span class="comment">// 右下标</span></span><br><span class="line">    <span class="type">int32_t</span> mid;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;         <span class="comment">// 循环条件</span></span><br><span class="line">        mid = left + (right - left) / <span class="number">2</span>;   <span class="comment">// 计算中间下标</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (key &gt; arr[mid]) &#123;</span><br><span class="line">            right = mid - <span class="number">1</span>;        <span class="comment">// 目标值在左半部分</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key &lt; arr[mid]) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;         <span class="comment">// 目标值在右半部分</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> mid;             <span class="comment">// 找到目标值</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;                        <span class="comment">// 未找到目标值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-升序查找最接近目标值的元素下标"><a href="#3-升序查找最接近目标值的元素下标" class="headerlink" title="3. 升序查找最接近目标值的元素下标"></a><strong>3. 升序查找最接近目标值的元素下标</strong></h4><p><strong>函数说明</strong>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief 升序数组中查找最接近目标值的元素下标</span></span><br><span class="line"><span class="comment"> * @param arr 有序数组的首地址</span></span><br><span class="line"><span class="comment"> * @param size 数组的大小</span></span><br><span class="line"><span class="comment"> * @param key 目标值</span></span><br><span class="line"><span class="comment"> * @return 最接近目标值的元素下标</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int32_t</span> <span class="title function_">AscNear</span><span class="params">(<span class="type">int32_t</span> *arr, <span class="type">int32_t</span> size, <span class="type">int32_t</span> key)</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int32_t</span> left = <span class="number">0</span>;               <span class="comment">// 左下标</span></span><br><span class="line">    <span class="type">int32_t</span> right = size - <span class="number">1</span>;       <span class="comment">// 右下标</span></span><br><span class="line">    <span class="type">int32_t</span> mid;</span><br><span class="line">    <span class="type">int32_t</span> index = size - <span class="number">1</span>;       <span class="comment">// 初始假设为最后一个元素</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;          <span class="comment">// 循环条件</span></span><br><span class="line">        mid = left + (right - left) / <span class="number">2</span>;   <span class="comment">// 计算中间下标</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (key &lt;= arr[mid]) &#123;</span><br><span class="line">            index = mid;             <span class="comment">// 记录当前中间下标</span></span><br><span class="line">            right = mid - <span class="number">1</span>;         <span class="comment">// 目标值在左半部分</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;          <span class="comment">// 目标值在右半部分</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> index;                     <span class="comment">// 返回最接近目标值的元素下标</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-降序查找最接近目标值的元素下标"><a href="#4-降序查找最接近目标值的元素下标" class="headerlink" title="4. 降序查找最接近目标值的元素下标"></a><strong>4. 降序查找最接近目标值的元素下标</strong></h4><p><strong>函数说明</strong>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief 降序数组中查找最接近目标值的元素下标</span></span><br><span class="line"><span class="comment"> * @param arr 有序数组的首地址</span></span><br><span class="line"><span class="comment"> * @param size 数组的大小</span></span><br><span class="line"><span class="comment"> * @param key 目标值</span></span><br><span class="line"><span class="comment"> * @return 最接近目标值的元素下标</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int32_t</span> <span class="title function_">DescNear</span><span class="params">(<span class="type">int32_t</span> *arr, <span class="type">int32_t</span> size, <span class="type">int32_t</span> key)</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int32_t</span> left = <span class="number">0</span>;               <span class="comment">// 左下标</span></span><br><span class="line">    <span class="type">int32_t</span> right = size - <span class="number">1</span>;       <span class="comment">// 右下标</span></span><br><span class="line">    <span class="type">int32_t</span> mid;</span><br><span class="line">    <span class="type">int32_t</span> index = size - <span class="number">1</span>;       <span class="comment">// 初始假设为最后一个元素</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;          <span class="comment">// 循环条件</span></span><br><span class="line">        mid = left + (right - left) / <span class="number">2</span>;   <span class="comment">// 计算中间下标</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (key &gt;= arr[mid]) &#123;</span><br><span class="line">            index = mid;             <span class="comment">// 记录当前中间下标</span></span><br><span class="line">            right = mid - <span class="number">1</span>;         <span class="comment">// 目标值在左半部分</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;          <span class="comment">// 目标值在右半部分</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> index;                     <span class="comment">// 返回最接近目标值的元素下标</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-传感器框架"><a href="#7-传感器框架" class="headerlink" title="7.传感器框架"></a>7.传感器框架</h2><h3 id="1-分层架构概述"><a href="#1-分层架构概述" class="headerlink" title="1. 分层架构概述"></a><strong>1. 分层架构概述</strong></h3><p>在本节课中，我们将实现一个<strong>两层分层的应用层和驱动层</strong>的软件架构。这种架构的主要优势在于：</p><ul><li><strong>代码可复用</strong>：不同传感器的驱动可以在不修改应用层代码的情况下进行替换。</li><li><strong>代码可移植</strong>：通过统一的接口设计，软件架构可以适应不同的硬件平台。</li></ul><h3 id="2-驱动层的设计"><a href="#2-驱动层的设计" class="headerlink" title="2. 驱动层的设计"></a><strong>2. 驱动层的设计</strong></h3><p>在驱动层，我们实现一个<strong>统一的传感器框架</strong>。具体步骤如下：</p><ul><li><strong>驱动文件</strong>：创建一个驱动文件<code>driver.c</code>，由驱动层对外提供接口，供应用层调用。</li><li><strong>暴露函数</strong>：驱动层暴露获取传感器数据的函数，供外部应用层使用。</li></ul><h3 id="3-数据结构设计"><a href="#3-数据结构设计" class="headerlink" title="3. 数据结构设计"></a><strong>3. 数据结构设计</strong></h3><p>我们设计一个结构体来存储传感器的数据，结构体成员包括各类传感器的数据，如湿度、温度等。为了未来的扩展，还可以添加PM2.5、甲醛等传感器的数据。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _SENSOR_DRV_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _SENSOR_DRV_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">float</span> temp;   <span class="comment">// 温度，单位：摄氏度</span></span><br><span class="line">    <span class="type">uint8_t</span> humi; <span class="comment">// 湿度，单位：%</span></span><br><span class="line">&#125; SensorData_t;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">* @brief 传感器驱动初始化</span></span><br><span class="line"><span class="comment">* @param</span></span><br><span class="line"><span class="comment">* @return </span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SensorDrvInit</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">* @brief 获取传感器数据</span></span><br><span class="line"><span class="comment">* @param sensorData, 输出，传感器数据回写地址</span></span><br><span class="line"><span class="comment">* @return </span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">GetSensorData</span><span class="params">(SensorData_t *sensorData)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">* @brief 触发驱动转换传感器数据</span></span><br><span class="line"><span class="comment">* @param</span></span><br><span class="line"><span class="comment">* @return </span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SensorDrvProc</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><h3 id="4-驱动层实现"><a href="#4-驱动层实现" class="headerlink" title="4. 驱动层实现"></a><strong>4. 驱动层实现</strong></h3><p>在驱动层的源文件<code>sensor_drv.c</code>中，实现传感器驱动的初始化、数据转换和数据获取功能。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;gd32f30x.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;sensor_drv.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">* @brief 传感器驱动初始化</span></span><br><span class="line"><span class="comment">* @param</span></span><br><span class="line"><span class="comment">* @return </span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SensorDrvInit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 初始化相关硬件，如GPIO、ADC等</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">* @brief 触发驱动转换传感器数据</span></span><br><span class="line"><span class="comment">* @param</span></span><br><span class="line"><span class="comment">* @return </span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SensorDrvProc</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 触发ADC转换，读取传感器数据</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">* @brief 获取传感器数据</span></span><br><span class="line"><span class="comment">* @param sensorData, 输出，传感器数据回写地址</span></span><br><span class="line"><span class="comment">* @return </span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">GetSensorData</span><span class="params">(SensorData_t *sensorData)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 从ADC读取数据并转换为温度和湿度</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">* @brief 传感器任务处理函数</span></span><br><span class="line"><span class="comment">* @param </span></span><br><span class="line"><span class="comment">* @return </span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SensorTask</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    SensorDrvProc();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-应用层的设计与实现"><a href="#5-应用层的设计与实现" class="headerlink" title="5. 应用层的设计与实现"></a><strong>5. 应用层的设计与实现</strong></h3><p>在应用层，我们实现一个<code>app.c</code>文件，负责任务调度和传感器数据的获取与处理。</p><h4 id="5-1-任务调度结构体"><a href="#5-1-任务调度结构体" class="headerlink" title="5.1 任务调度结构体"></a><strong>5.1 任务调度结构体</strong></h4><p>首先，定义一个任务调度结构体，用于管理任务的执行状态和时间片。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 任务调度结构体 */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">uint8_t</span> run;                <span class="comment">// 调度标志，1：调度，0：挂起</span></span><br><span class="line">    <span class="type">uint16_t</span> timCount;          <span class="comment">// 时间片计数值</span></span><br><span class="line">    <span class="type">uint16_t</span> timRload;          <span class="comment">// 时间片重载值</span></span><br><span class="line">    <span class="type">void</span> (*pTaskFuncCb)(<span class="type">void</span>);  <span class="comment">// 函数指针变量，用来保存业务功能模块函数地址</span></span><br><span class="line">&#125; TaskComps_t;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> TaskComps_t g_taskComps[] = </span><br><span class="line">&#123;</span><br><span class="line">    &#123;<span class="number">0</span>, <span class="number">1000</span>, <span class="number">1000</span>,  HmiTask&#125;,</span><br><span class="line">    &#123;<span class="number">0</span>, <span class="number">1000</span>, <span class="number">1000</span>,  SensorTask&#125;</span><br><span class="line">    <span class="comment">/* 添加业务功能模块 */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TASK_NUM_MAX   (sizeof(g_taskComps) / sizeof(g_taskComps[0]))</span></span><br></pre></td></tr></table></figure><h4 id="5-2-任务处理与调度函数"><a href="#5-2-任务处理与调度函数" class="headerlink" title="5.2 任务处理与调度函数"></a><strong>5.2 任务处理与调度函数</strong></h4><p>实现任务处理函数<code>TaskHandler</code>和任务调度回调函数<code>TaskScheduleCb</code>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 任务处理函数 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">TaskHandler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint8_t</span> i = <span class="number">0</span>; i &lt; TASK_NUM_MAX; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (g_taskComps[i].run)                  <span class="comment">// 判断时间片标志</span></span><br><span class="line">        &#123;</span><br><span class="line">            g_taskComps[i].run = <span class="number">0</span>;              <span class="comment">// 标志清零</span></span><br><span class="line">            g_taskComps[i].pTaskFuncCb();        <span class="comment">// 执行调度业务功能模块</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">* @brief 在定时器中断服务函数中被间接调用，设置时间片标记，</span></span><br><span class="line"><span class="comment">         需要定时器1ms产生1次中断</span></span><br><span class="line"><span class="comment">* @param</span></span><br><span class="line"><span class="comment">* @return </span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">TaskScheduleCb</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint8_t</span> i = <span class="number">0</span>; i &lt; TASK_NUM_MAX; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (g_taskComps[i].timCount)</span><br><span class="line">        &#123;</span><br><span class="line">            g_taskComps[i].timCount--;</span><br><span class="line">            <span class="keyword">if</span> (g_taskComps[i].timCount == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                g_taskComps[i].run = <span class="number">1</span>;</span><br><span class="line">                g_taskComps[i].timCount = g_taskComps[i].timRload;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-热敏电阻"><a href="#8-热敏电阻" class="headerlink" title="8.热敏电阻"></a><strong>8.热敏电阻</strong></h2><h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a><strong>1. 简介</strong></h3><blockquote><p><strong>热敏电阻（Thermistor）</strong>是一种电阻值随温度变化而显著变化的电阻器件，主要分为：</p><ul><li><strong>负温度系数（NTC）</strong>：温度升高，阻值减小。</li><li><strong>正温度系数（PTC）</strong>：温度升高，阻值增大。</li></ul><p>我们使用的是<strong>负温度系数（NTC）</strong>热敏电阻，其阻值随温度升高而减小，反之亦然。</p></blockquote><h4 id="1-工作原理-2"><a href="#1-工作原理-2" class="headerlink" title="1. 工作原理"></a><strong>1. 工作原理</strong></h4><blockquote><h4 id="2-1-电路设计"><a href="#2-1-电路设计" class="headerlink" title="2.1 电路设计"></a><strong>2.1 电路设计</strong></h4><ul><li><strong>分压电路</strong>：热敏电阻与一个限流电阻（通常为1kΩ）串联，形成分压电路。</li><li><strong>ADC采集</strong>：通过ADC采集热敏电阻两端的电压值，转换为数字信号。</li></ul><h4 id="2-2-温度与阻值关系"><a href="#2-2-温度与阻值关系" class="headerlink" title="2.2 温度与阻值关系"></a><strong>2.2 温度与阻值关系</strong></h4><ul><li><strong>25摄氏度时</strong>：NTC热敏电阻的阻值为10kΩ。</li><li><strong>阻值变化</strong>：温度升高，阻值下降；温度降低，阻值上升。</li><li><strong>测量范围</strong>：-55°C到100°C，分辨率为1°C，精度为±1%。</li></ul></blockquote><h4 id="2-电压转换"><a href="#2-电压转换" class="headerlink" title="2. 电压转换"></a><strong>2. 电压转换</strong></h4><blockquote><h4 id="3-1-分压公式"><a href="#3-1-分压公式" class="headerlink" title="3.1 分压公式"></a><strong>3.1 分压公式</strong></h4><script type="math/tex; mode=display">V_{\text{adc}} = V_{\text{cc}} \times \frac{R_{\text{therm}}}{R_{\text{fixed}} + R_{\text{therm}}}</script><p>其中：</p><ul><li><code>R_therm</code>是热敏电阻的阻值。</li><li><code>R_fixed</code>是固定限流电阻。</li></ul><h4 id="3-2-示例计算"><a href="#3-2-示例计算" class="headerlink" title="3.2 示例计算"></a><strong>3.2 示例计算</strong></h4><ul><li><p><strong>25°C时</strong>：</p><script type="math/tex; mode=display">R_{\text{therm}} = 10kΩ</script><script type="math/tex; mode=display">V_{\text{adc}} = 3.3V \times \frac{10k}{10k + 10k} = 1.65V</script></li></ul><ul><li><p><strong>温度升高至较高温度（例如5kΩ）</strong>：</p><script type="math/tex; mode=display">R_{\text{therm}} = 5kΩ</script><script type="math/tex; mode=display">V_{\text{adc}} = 3.3V \times \frac{5k}{10k + 5k} = 1.1V</script></li></ul></blockquote><h4 id="3-温度计算"><a href="#3-温度计算" class="headerlink" title="3. 温度计算"></a><strong>3. 温度计算</strong></h4><blockquote><h4 id="4-1-直接映射"><a href="#4-1-直接映射" class="headerlink" title="4.1 直接映射"></a><strong>4.1 直接映射</strong></h4><ul><li><strong>阻值与温度表</strong>：通过预先测量不同温度下的阻值，建立阻值与温度的对应关系表。</li><li><strong>代码实现</strong>：在代码中直接将ADC读取的数值映射到相应的温度值，避免实时计算，节省CPU资源。</li></ul><h4 id="4-2-精度提升"><a href="#4-2-精度提升" class="headerlink" title="4.2 精度提升"></a><strong>4.2 精度提升</strong></h4><ul><li><p><strong>线性插值</strong>：为了实现更高的温度精度（如0.1°C），在相邻温度区间内进行线性插值计算。</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501190041723.png" alt="image-20241201203039214"></p><p>已知：</p><ul><li>28°C 对应 ADC 值 1913</li><li>29°C 对应 ADC 值 1869</li></ul><p>目标 ADC 值为 1889（写代码会用到此公式）：</p><script type="math/tex; mode=display">\text{温度} = 28 + \frac{(1889 - 1869)}{(1913 - 1869)} \times 1 \approx 28.45°C</script></li></ul></blockquote><h3 id="2-代码实现-4"><a href="#2-代码实现-4" class="headerlink" title="2. 代码实现"></a>2. 代码实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;gd32f30x.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;delay.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// NTC 热敏电阻 ADC 值查找表</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">uint16_t</span> g_ntcAdcTable[] = </span><br><span class="line">&#123;</span><br><span class="line"><span class="number">3123</span>, <span class="number">3089</span>, <span class="number">3051</span>, <span class="number">3013</span>, <span class="number">2973</span>, <span class="number">2933</span>, <span class="number">2893</span>, <span class="number">2852</span>, <span class="number">2810</span>, <span class="number">2767</span>,     <span class="comment">//0   ~   9℃</span></span><br><span class="line"><span class="number">2720</span>, <span class="number">2681</span>, <span class="number">2637</span>, <span class="number">2593</span>, <span class="number">2548</span>, <span class="number">2503</span>, <span class="number">2458</span>, <span class="number">2412</span>, <span class="number">2367</span>, <span class="number">2321</span>,     <span class="comment">//10  ~  19℃</span></span><br><span class="line"><span class="number">2275</span>, <span class="number">2230</span>, <span class="number">2184</span>, <span class="number">2138</span>, <span class="number">2093</span>, <span class="number">2048</span>, <span class="number">2002</span>, <span class="number">1958</span>, <span class="number">1913</span>, <span class="number">1869</span>,     <span class="comment">//20  ~  29℃</span></span><br><span class="line"><span class="number">1825</span>, <span class="number">1782</span>, <span class="number">1739</span>, <span class="number">1697</span>, <span class="number">1655</span>, <span class="number">1614</span>, <span class="number">1573</span>, <span class="number">1533</span>, <span class="number">1494</span>, <span class="number">1455</span>,     <span class="comment">//30  ~  39℃</span></span><br><span class="line"><span class="number">1417</span>, <span class="number">1380</span>, <span class="number">1343</span>, <span class="number">1307</span>, <span class="number">1272</span>, <span class="number">1237</span>, <span class="number">1203</span>, <span class="number">1170</span>, <span class="number">1138</span>, <span class="number">1106</span>,     <span class="comment">//40  ~  49℃</span></span><br><span class="line"><span class="number">1081</span>, <span class="number">1045</span>, <span class="number">1016</span>, <span class="number">987</span>,  <span class="number">959</span>,  <span class="number">932</span>,  <span class="number">905</span>,  <span class="number">879</span>,  <span class="number">854</span>,  <span class="number">829</span>,      <span class="comment">//50  ~  59℃</span></span><br><span class="line"><span class="number">806</span>,  <span class="number">782</span>,  <span class="number">760</span>,  <span class="number">738</span>,  <span class="number">716</span>,  <span class="number">696</span>,  <span class="number">675</span>,  <span class="number">656</span>,  <span class="number">637</span>,  <span class="number">618</span>,      <span class="comment">//60  ~  69℃</span></span><br><span class="line"><span class="number">600</span>,  <span class="number">583</span>,  <span class="number">566</span>,  <span class="number">550</span>,  <span class="number">534</span>,  <span class="number">518</span>,  <span class="number">503</span>,  <span class="number">489</span>,  <span class="number">475</span>,  <span class="number">461</span>,      <span class="comment">//70  ~  79℃</span></span><br><span class="line"><span class="number">448</span>,  <span class="number">435</span>,  <span class="number">422</span>,  <span class="number">410</span>,  <span class="number">398</span>,  <span class="number">387</span>,  <span class="number">376</span>,  <span class="number">365</span>,  <span class="number">355</span>,  <span class="number">345</span>,      <span class="comment">//80  ~  89℃</span></span><br><span class="line"><span class="number">335</span>,  <span class="number">326</span>,  <span class="number">316</span>,  <span class="number">308</span>,  <span class="number">299</span>,  <span class="number">290</span>,  <span class="number">283</span>,  <span class="number">274</span>,  <span class="number">267</span>,  <span class="number">259</span>,      <span class="comment">//90  ~  99℃</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NTC_TABLE_SIZE         (sizeof(g_ntcAdcTable) / sizeof(g_ntcAdcTable[0]))</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INDEX_TO_TEMP(index)   ((int32_t)index)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFF_NUM_SIZE 11</span></span><br><span class="line"><span class="type">static</span> <span class="type">uint16_t</span> g_temp10MplBuf[BUFF_NUM_SIZE];</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">float</span> g_tempData;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">GPIOInit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">rcu_periph_clock_enable(RCU_GPIOC);</span><br><span class="line">gpio_init(GPIOC, GPIO_MODE_AIN, GPIO_OSPEED_10MHZ, GPIO_PIN_3);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">ADCInit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 使能时钟；*/</span></span><br><span class="line">rcu_periph_clock_enable(RCU_ADC0);</span><br><span class="line"><span class="comment">/* 设置分频系数；*/</span></span><br><span class="line">rcu_adc_clock_config(RCU_CKADC_CKAPB2_DIV6);  <span class="comment">// 6分频，120MHz / 6 = 20MHz</span></span><br><span class="line"><span class="comment">/* 设置独立模式；*/</span></span><br><span class="line">adc_mode_config(ADC_MODE_FREE);</span><br><span class="line"><span class="comment">/* 设置连续模式；*/</span> </span><br><span class="line">adc_special_function_config(ADC0, ADC_CONTINUOUS_MODE, ENABLE);</span><br><span class="line"><span class="comment">/* 设置数据对齐；*/</span></span><br><span class="line">adc_data_alignment_config(ADC0, ADC_DATAALIGN_RIGHT);</span><br><span class="line"><span class="comment">/* 设置转换通道个数；*/</span> </span><br><span class="line">adc_channel_length_config(ADC0, ADC_REGULAR_CHANNEL, <span class="number">1</span>);</span><br><span class="line"><span class="comment">/* 设置转换哪一个通道以及所处序列位置；*/</span> </span><br><span class="line">adc_regular_channel_config(ADC0, <span class="number">0</span>, ADC_CHANNEL_13, ADC_SAMPLETIME_239POINT5);  <span class="comment">// PC3对应通道13，放在序列寄存器的0序列中，239.5个周期</span></span><br><span class="line"><span class="comment">/* 设置选择哪一个外部触发源；*/</span> </span><br><span class="line">adc_external_trigger_source_config(ADC0, ADC_REGULAR_CHANNEL, ADC0_1_2_EXTTRIG_REGULAR_NONE);</span><br><span class="line"><span class="comment">/* 使能外部触发；*/</span> </span><br><span class="line">adc_external_trigger_config(ADC0, ADC_REGULAR_CHANNEL, ENABLE);</span><br><span class="line"><span class="comment">/* 使能硬件滤波；*/</span> </span><br><span class="line">adc_oversample_mode_config(ADC0, ADC_OVERSAMPLING_ALL_CONVERT, ADC_OVERSAMPLING_SHIFT_4B, ADC_OVERSAMPLING_RATIO_MUL16);</span><br><span class="line">adc_oversample_mode_enable(ADC0);</span><br><span class="line"><span class="comment">/* 使能ADC；*/</span> </span><br><span class="line">adc_enable(ADC0);</span><br><span class="line"><span class="comment">/* 内部校准；*/</span> </span><br><span class="line">DelayNus(<span class="number">50</span>);</span><br><span class="line">adc_calibration_enable(ADC0);</span><br><span class="line">adc_software_trigger_enable(ADC0, ADC_REGULAR_CHANNEL);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">* @brief 算术平均滤波</span></span><br><span class="line"><span class="comment">* @param arr，数组首地址</span></span><br><span class="line"><span class="comment">* @param len，元素个数</span></span><br><span class="line"><span class="comment">* @return 平均运算结果</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">static</span> <span class="type">uint16_t</span> <span class="title function_">ArithAvgFltr</span><span class="params">(<span class="type">uint16_t</span> *arr, <span class="type">uint32_t</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint32_t</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">uint32_t</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line">sum += arr[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> (<span class="type">uint16_t</span>)(sum / len);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int32_t</span> <span class="title function_">DescBinarySearch</span><span class="params">(<span class="type">const</span> <span class="type">uint16_t</span> *arr, <span class="type">int32_t</span> size, <span class="type">uint16_t</span> key)</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int32_t</span> left = <span class="number">0</span>;</span><br><span class="line"><span class="type">int32_t</span> right = size - <span class="number">1</span>;</span><br><span class="line"><span class="type">int32_t</span> mid = <span class="number">0</span>;</span><br><span class="line"><span class="type">int32_t</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(left &lt;= right)</span><br><span class="line">&#123;</span><br><span class="line">mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(key &gt;= arr[mid])</span><br><span class="line">&#123;</span><br><span class="line">right = mid - <span class="number">1</span>;</span><br><span class="line">index = mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">left = mid + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> index;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">* @brief qsort函数调用的回调函数，比较规则，降序排列</span></span><br><span class="line"><span class="comment">* @param *_a，对应数组元素</span></span><br><span class="line"><span class="comment">* @param *_b，对应数组元素</span></span><br><span class="line"><span class="comment">* @return 比较结果</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">CmpCb</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *_a, <span class="type">const</span> <span class="type">void</span> *_b)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint16_t</span>* a = (<span class="type">uint16_t</span>*)_a;</span><br><span class="line"><span class="type">uint16_t</span>* b = (<span class="type">uint16_t</span>*)_b;</span><br><span class="line"><span class="type">int8_t</span> val = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(*a &lt; *b)</span><br><span class="line">&#123;</span><br><span class="line">val = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(*a &gt; *b)</span><br><span class="line">&#123;</span><br><span class="line">val = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">val = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">* @brief 中位值平均滤波</span></span><br><span class="line"><span class="comment">* @param arr，数组首地址</span></span><br><span class="line"><span class="comment">* @param len，元素个数，需要大于等于3个</span></span><br><span class="line"><span class="comment">* @return 平均运算结果</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">static</span> <span class="type">uint16_t</span> <span class="title function_">MedianAvgFltr</span><span class="params">(<span class="type">uint16_t</span> *arr, <span class="type">uint32_t</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">qsort(arr, len, <span class="keyword">sizeof</span>(<span class="type">uint16_t</span>), CmpCb);</span><br><span class="line"><span class="keyword">return</span> ArithAvgFltr(&amp;arr[<span class="number">1</span>], len - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint16_t</span> <span class="title function_">Get_ADCVal</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (!adc_flag_get(ADC0, ADC_FLAG_EOC));</span><br><span class="line"><span class="keyword">return</span> adc_regular_data_read(ADC0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">uint16_t</span> <span class="title function_">ADCtoTemp10Mpl</span><span class="params">(<span class="type">uint16_t</span> ADCVal)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 二分查找 找温度（下标）</span></span><br><span class="line"><span class="type">int32_t</span> index = DescBinarySearch(g_ntcAdcTable, NTC_TABLE_SIZE, ADCVal);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(index == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 表示温度为0</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算 </span></span><br><span class="line"><span class="type">uint16_t</span> Temp10Mpl = INDEX_TO_TEMP(index - <span class="number">1</span>) * <span class="number">10</span> + (g_ntcAdcTable[index - <span class="number">1</span>] - ADCVal) / (g_ntcAdcTable[index - <span class="number">1</span>] - g_ntcAdcTable[index]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> Temp10Mpl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">PushDataToBuf</span><span class="params">(<span class="type">uint16_t</span> temp10Mpl)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">static</span> <span class="type">uint16_t</span> s_index = <span class="number">0</span>;</span><br><span class="line">g_temp10MplBuf[s_index++] = temp10Mpl; </span><br><span class="line">s_index %= BUFF_NUM_SIZE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">* @brief NTC驱动初始化</span></span><br><span class="line"><span class="comment">* @param</span></span><br><span class="line"><span class="comment">* @return </span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Temp_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">GPIOInit();</span><br><span class="line">ADCInit();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">* @brief 触发驱动转换温度传感器数据</span></span><br><span class="line"><span class="comment">* @param</span></span><br><span class="line"><span class="comment">* @return </span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Temp_SensorProc</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">static</span> <span class="type">uint16_t</span> s_convertNum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获得ADC采集数据</span></span><br><span class="line"><span class="type">uint16_t</span> ADCVal = Get_ADCVal();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将ADC采集数据转换为十倍温度值</span></span><br><span class="line"><span class="type">uint16_t</span> temp10Mpl = ADCtoTemp10Mpl(ADCVal);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将十倍温度值放入Buffer中</span></span><br><span class="line">PushDataToBuf(temp10Mpl);</span><br><span class="line"></span><br><span class="line">s_convertNum++;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 采集小于3次直接用第一次采集数据代替</span></span><br><span class="line"><span class="keyword">if</span>(s_convertNum &lt; <span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line">g_tempData = g_temp10MplBuf[<span class="number">0</span>] / <span class="number">10.0f</span>;</span><br><span class="line"><span class="comment">//return ;// 少加return 直接触发</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s_convertNum &gt; BUFF_NUM_SIZE)</span><br><span class="line">&#123;</span><br><span class="line">s_convertNum = BUFF_NUM_SIZE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 快速排序 + 中值滤波 </span></span><br><span class="line">g_tempData = MedianAvgFltr(g_temp10MplBuf, s_convertNum) / <span class="number">10.0f</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">* @brief 获取温度传感器数据</span></span><br><span class="line"><span class="comment">* @param</span></span><br><span class="line"><span class="comment">* @return 温度数据，小数</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">float</span> <span class="title function_">Get_TempData</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> g_tempData;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-湿敏电阻"><a href="#9-湿敏电阻" class="headerlink" title="9.湿敏电阻"></a>9.湿敏电阻</h2><h3 id="1-简介-1"><a href="#1-简介-1" class="headerlink" title="1. 简介"></a><strong>1. 简介</strong></h3><p><strong>湿敏电阻（Humidity Sensitive Resistor）</strong>是一种对湿度变化敏感的电阻器件。由于材料特性的原因，为了防止极化和电解作用，湿敏电阻需要<strong>交流电源驱动</strong>。相比于热敏电阻，湿敏电阻的驱动电路更为复杂。</p><h4 id="1-相对湿度与绝对湿度"><a href="#1-相对湿度与绝对湿度" class="headerlink" title="1. 相对湿度与绝对湿度"></a><strong>1. 相对湿度与绝对湿度</strong></h4><p>在日常生活中，当我们说“湿度是50”，其实指的是<strong>相对湿度</strong>。相对湿度是指在某一特定温度下，空气中实际含有的水蒸气密度与该温度下水蒸气的饱和密度之比，通常以百分比表示。因此，“50”代表<strong>50%</strong>。</p><p>相对湿度与绝对湿度的区别如下：</p><ul><li><strong>相对湿度</strong>：空气中水蒸气的实际密度与饱和密度之比，表示为百分比。</li><li><strong>绝对湿度</strong>：在一定温度和压力条件下，空气中水蒸气的最大容量，通常以克每立方米（g/m³）表示。</li></ul><h4 id="2-驱动电路设计"><a href="#2-驱动电路设计" class="headerlink" title="2. 驱动电路设计"></a><strong>2. 驱动电路设计</strong></h4><p>驱动电路简易框图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501190042276.png" alt="image-20241201210622103"></p><p>以下是湿敏电阻的驱动电路设计要点：</p><ul><li><strong>驱动引脚</strong>：使用三个引脚，其中<code>PB0</code>和<code>PB1</code>用于交流电源驱动。具体配置如下：<ul><li>当<code>PB0</code>为高电平时，<code>PB1</code>为低电平。</li><li>当<code>PB0</code>为低电平时，<code>PB1</code>为高电平。</li></ul></li><li><strong>ADC采集端口</strong>：<code>PC4</code>为ADC采集端口，用于读取湿敏电阻上的电压值。</li><li><strong>电阻配置</strong>：<ul><li>湿敏电阻串联一个470Ω的电阻。</li><li>并联一个1MΩ的电阻。</li><li>使用39kΩ的分压电阻。</li></ul></li><li><strong>驱动频率</strong>：<strong><code>厂商建议使用1kHz的交流驱动频率</code></strong>，即每个周期1毫秒，高电平500微秒，低电平500微秒。但在实际项目中，为了降低频率需求，我们选择<strong>250Hz</strong>，即每个周期4毫秒，高电平2毫秒，低电平2毫秒。这一频率足以满足数据采集需求，同时减少定时器中断的负担。</li></ul><h4 id="3-驱动电路工作原理"><a href="#3-驱动电路工作原理" class="headerlink" title="3. 驱动电路工作原理"></a><strong>3. 驱动电路工作原理</strong></h4><p>在驱动电路中，通过<code>PB0</code>和<code>PB1</code>的高低电平交替，产生交流信号驱动湿敏电阻。<code>PC4</code>端口通过ADC采集湿敏电阻两端的电压值，并将其转换为数字信号用于后续处理。</p><p>湿度数据的计算</p><blockquote><h4 id="1：根据温度获取对应湿度的ADC数值"><a href="#1：根据温度获取对应湿度的ADC数值" class="headerlink" title="1：根据温度获取对应湿度的ADC数值"></a><strong>1：根据温度获取对应湿度的ADC数值</strong></h4><p>假设我们获得的温度数据是18摄氏度，正好位于15°C和20°C之间。湿度的间隔为5%，同样，温度的间隔也是5°C。</p><p><strong>计算过程</strong>：</p><ol><li><p>确定温度行：</p><ul><li><p>温度数据18°C位于15°C和20°C之间。</p></li><li><p>温度行索引计算：</p><script type="math/tex; mode=display">text{temp\_row} = \frac{18}{5} = 3.6 \approx 3</script><p>（向下取整，索引从0开始，表示15°C对应第3行）</p></li></ul></li><li><p>获取15°C和20°C下特定湿度的ADC数值：</p><ul><li>例如，20%湿度在15°C下对应的ADC数值为154，在20°C下为168。</li></ul></li><li><p><strong>线性插值计算18°C下20%湿度的ADC数值</strong>：</p><script type="math/tex; mode=display">\text{ADC}_{18} = \text{ADC}_{15} + \left( \frac{18 - 15}{20 - 15} \right) \times (\text{ADC}_{20} - \text{ADC}_{15}) = 154 + \left( \frac{3}{5} \right) \times (168 - 154) = 154 + 10.8 = 164.8 \approx 165</script><p>这样，我们得到18°C下20%湿度对应的ADC数值约为165。</p></li></ol><h4 id="2：根据ADC数值计算湿度"><a href="#2：根据ADC数值计算湿度" class="headerlink" title="2：根据ADC数值计算湿度"></a><strong>2：根据ADC数值计算湿度</strong></h4><ol><li><p>二分查找法定位ADC数值：</p><ul><li>使用二分查找法在对应温度行的ADC数值数组中查找目标ADC值。</li><li>假设目标ADC值为170，位于15°C下20%湿度（ADC=154）和20°C下20%湿度（ADC=168）之间。</li></ul></li><li><p>线性插值计算湿度：</p><script type="math/tex; mode=display">\text{湿度} = \text{湿度}_{\text{low}} + \left( \frac{\text{ADC}_{\text{low}} - \text{ADC}_{\text{current}}}{\text{ADC}_{\text{low}} - \text{ADC}_{\text{high}}} \right) \times (\text{湿度}_{\text{high}} - \text{湿度}_{\text{low}})</script></li></ol><p>   示例：</p><script type="math/tex; mode=display">\text{ADC}_{\text{low}} = 168</script><p>   20°C下20%湿度</p><script type="math/tex; mode=display">   \text{ADC}_{\text{high}} = 154</script><p>   15°C下20%湿度</p><script type="math/tex; mode=display">   \text{ADC}_{\text{current}} = 170</script><script type="math/tex; mode=display">   \text{湿度} = 20\% + \left( \frac{168 - 170}{168 - 154} \right) \times (25\% - 20\%) = 20\% + \left( \frac{-2}{14} \right) \times 5\% \approx 20\% - 0.714\% \approx 19.3\%</script></blockquote><h3 id="2-代码实现-5"><a href="#2-代码实现-5" class="headerlink" title="2.代码实现"></a>2.代码实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;gd32f30x.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;led_drv.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">uint16_t</span> g_adcVal;<span class="comment">// 全局变量，用于存储ADC转换的数值</span></span><br><span class="line"><span class="type">static</span> <span class="type">uint8_t</span> g_humiData;<span class="comment">// 全局变量，用于存储湿度值</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HUMI_LEVEL_NUM 18<span class="comment">// 湿度等级数量</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不同温度下的湿度对应ADC值表</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">uint16_t</span> g_rhADCVal[][HUMI_LEVEL_NUM] = &#123;</span><br><span class="line"><span class="comment">//         10%RH  15%RH  20%RH  25%RH  30%RH  35%RH  40%RH  45%RH  50%RH  55%RH  60%RH  65%RH  70%RH  75%RH  80%RH  85%RH  90%RH  95%RH               </span></span><br><span class="line"><span class="comment">/* 0℃*/</span>  &#123;<span class="number">154</span>,   <span class="number">155</span>,   <span class="number">160</span>,   <span class="number">165</span>,   <span class="number">177</span>,   <span class="number">204</span>,   <span class="number">257</span>,   <span class="number">354</span>,   <span class="number">516</span>,   <span class="number">803</span>,   <span class="number">1189</span>,  <span class="number">1633</span>,  <span class="number">2101</span>,  <span class="number">2579</span>,  <span class="number">2919</span>,  <span class="number">3204</span>,  <span class="number">3434</span>,  <span class="number">3595</span>,&#125;,</span><br><span class="line"><span class="comment">/* 5℃*/</span>  &#123;<span class="number">154</span>,   <span class="number">155</span>,   <span class="number">161</span>,   <span class="number">168</span>,   <span class="number">186</span>,   <span class="number">223</span>,   <span class="number">296</span>,   <span class="number">429</span>,   <span class="number">650</span>,   <span class="number">985</span>,   <span class="number">1408</span>,  <span class="number">1874</span>,  <span class="number">2330</span>,  <span class="number">2796</span>,  <span class="number">3113</span>,  <span class="number">3356</span>,  <span class="number">3571</span>,  <span class="number">3702</span>,&#125;,</span><br><span class="line"><span class="comment">/*10℃*/</span>  &#123;<span class="number">154</span>,   <span class="number">156</span>,   <span class="number">164</span>,   <span class="number">175</span>,   <span class="number">199</span>,   <span class="number">250</span>,   <span class="number">342</span>,   <span class="number">508</span>,   <span class="number">775</span>,   <span class="number">1154</span>,  <span class="number">1633</span>,  <span class="number">2127</span>,  <span class="number">2540</span>,  <span class="number">2945</span>,  <span class="number">3236</span>,  <span class="number">3456</span>,  <span class="number">3619</span>,  <span class="number">3736</span>,&#125;,</span><br><span class="line"><span class="comment">/*15℃*/</span>  &#123;<span class="number">154</span>,   <span class="number">157</span>,   <span class="number">168</span>,   <span class="number">183</span>,   <span class="number">217</span>,   <span class="number">284</span>,   <span class="number">410</span>,   <span class="number">619</span>,   <span class="number">941</span>,   <span class="number">1367</span>,  <span class="number">1835</span>,  <span class="number">2330</span>,  <span class="number">2750</span>,  <span class="number">3113</span>,  <span class="number">3370</span>,  <span class="number">3555</span>,  <span class="number">3676</span>,  <span class="number">3780</span>,&#125;,</span><br><span class="line"><span class="comment">/*20℃*/</span>  &#123;<span class="number">155</span>,   <span class="number">158</span>,   <span class="number">176</span>,   <span class="number">197</span>,   <span class="number">237</span>,   <span class="number">320</span>,   <span class="number">477</span>,   <span class="number">750</span>,   <span class="number">1121</span>,  <span class="number">1604</span>,  <span class="number">2075</span>,  <span class="number">2540</span>,  <span class="number">2919</span>,  <span class="number">3236</span>,  <span class="number">3442</span>,  <span class="number">3611</span>,  <span class="number">3736</span>,  <span class="number">3825</span>,&#125;,</span><br><span class="line"><span class="comment">/*25℃*/</span>  &#123;<span class="number">155</span>,   <span class="number">160</span>,   <span class="number">183</span>,   <span class="number">210</span>,   <span class="number">264</span>,   <span class="number">375</span>,   <span class="number">579</span>,   <span class="number">901</span>,   <span class="number">1338</span>,  <span class="number">1855</span>,  <span class="number">2298</span>,  <span class="number">2727</span>,  <span class="number">3055</span>,  <span class="number">3342</span>,  <span class="number">3539</span>,  <span class="number">3676</span>,  <span class="number">3780</span>,  <span class="number">3853</span>,&#125;,</span><br><span class="line"><span class="comment">/*30℃*/</span>  &#123;<span class="number">155</span>,   <span class="number">161</span>,   <span class="number">191</span>,   <span class="number">230</span>,   <span class="number">301</span>,   <span class="number">451</span>,   <span class="number">696</span>,   <span class="number">1062</span>,  <span class="number">1537</span>,  <span class="number">2075</span>,  <span class="number">2502</span>,  <span class="number">2894</span>,  <span class="number">3204</span>,  <span class="number">3427</span>,  <span class="number">3595</span>,  <span class="number">3719</span>,  <span class="number">3807</span>,  <span class="number">3871</span>,&#125;,</span><br><span class="line"><span class="comment">/*35℃*/</span>  &#123;<span class="number">156</span>,   <span class="number">164</span>,   <span class="number">202</span>,   <span class="number">250</span>,   <span class="number">344</span>,   <span class="number">508</span>,   <span class="number">803</span>,   <span class="number">1226</span>,  <span class="number">1728</span>,  <span class="number">2238</span>,  <span class="number">2705</span>,  <span class="number">3055</span>,  <span class="number">3302</span>,  <span class="number">3501</span>,  <span class="number">3652</span>,  <span class="number">3754</span>,  <span class="number">3834</span>,  <span class="number">3899</span>,&#125;,</span><br><span class="line"><span class="comment">/*40℃*/</span>  &#123;<span class="number">156</span>,   <span class="number">166</span>,   <span class="number">214</span>,   <span class="number">284</span>,   <span class="number">397</span>,   <span class="number">619</span>,   <span class="number">985</span>,   <span class="number">1429</span>,  <span class="number">1936</span>,  <span class="number">2430</span>,  <span class="number">2820</span>,  <span class="number">3143</span>,  <span class="number">3370</span>,  <span class="number">3547</span>,  <span class="number">3685</span>,  <span class="number">3780</span>,  <span class="number">3853</span>,  <span class="number">3909</span>,&#125;,</span><br><span class="line"><span class="comment">/*45℃*/</span>  &#123;<span class="number">157</span>,   <span class="number">171</span>,   <span class="number">237</span>,   <span class="number">315</span>,   <span class="number">477</span>,   <span class="number">750</span>,   <span class="number">1154</span>,  <span class="number">1604</span>,  <span class="number">2101</span>,  <span class="number">2540</span>,  <span class="number">2945</span>,  <span class="number">3236</span>,  <span class="number">3442</span>,  <span class="number">3603</span>,  <span class="number">3728</span>,  <span class="number">3816</span>,  <span class="number">3871</span>,  <span class="number">3918</span>,&#125;,</span><br><span class="line"><span class="comment">/*50℃*/</span>  &#123;<span class="number">158</span>,   <span class="number">174</span>,   <span class="number">253</span>,   <span class="number">354</span>,   <span class="number">545</span>,   <span class="number">865</span>,   <span class="number">1328</span>,  <span class="number">1835</span>,  <span class="number">2298</span>,  <span class="number">2727</span>,  <span class="number">3055</span>,  <span class="number">3329</span>,  <span class="number">3516</span>,  <span class="number">3660</span>,  <span class="number">3762</span>,  <span class="number">3843</span>,  <span class="number">3895</span>,  <span class="number">3938</span>,&#125;,</span><br><span class="line"><span class="comment">/*55℃*/</span>  &#123;<span class="number">159</span>,   <span class="number">179</span>,   <span class="number">278</span>,   <span class="number">401</span>,   <span class="number">634</span>,   <span class="number">941</span>,   <span class="number">1524</span>,  <span class="number">2027</span>,  <span class="number">2502</span>,  <span class="number">2844</span>,  <span class="number">3173</span>,  <span class="number">3398</span>,  <span class="number">3563</span>,  <span class="number">3693</span>,  <span class="number">3789</span>,  <span class="number">3862</span>,  <span class="number">3909</span>,  <span class="number">3947</span>,&#125;,</span><br><span class="line"><span class="comment">/*60℃*/</span>  &#123;<span class="number">160</span>,   <span class="number">184</span>,   <span class="number">301</span>,   <span class="number">457</span>,   <span class="number">739</span>,   <span class="number">1035</span>,  <span class="number">1711</span>,  <span class="number">2209</span>,  <span class="number">2662</span>,  <span class="number">2999</span>,  <span class="number">3275</span>,  <span class="number">3456</span>,  <span class="number">3611</span>,  <span class="number">3728</span>,  <span class="number">3807</span>,  <span class="number">3871</span>,  <span class="number">3918</span>,  <span class="number">3957</span>,&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TEMP_INTERVAL_VAL   5   <span class="comment">// 温度间隔值 (°C)</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HUMI_INTERVAL_VAL   5   <span class="comment">// 湿度间隔值 (%RH)</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HUMI_MAX_VAL        95  <span class="comment">// 最大湿度值 (%RH)</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HUMI_MIN_VAL        10  <span class="comment">// 最小湿度值 (%RH)</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TEMP_MAX_VAL        60  <span class="comment">// 最大温度值 (°C)</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">GPIOInit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">rcu_periph_clock_enable(RCU_GPIOC);</span><br><span class="line">gpio_init(GPIOC, GPIO_MODE_AIN, GPIO_OSPEED_MAX, GPIO_PIN_4);    <span class="comment">// ADC通道14</span></span><br><span class="line"></span><br><span class="line">rcu_periph_clock_enable(RCU_GPIOB);</span><br><span class="line">gpio_init(GPIOB, GPIO_MODE_OUT_PP, GPIO_OSPEED_50MHZ, GPIO_PIN_0 | GPIO_PIN_1);  <span class="comment">// 交流电源激励</span></span><br><span class="line">gpio_bit_write(GPIOB, GPIO_PIN_0, (bit_status)<span class="number">1</span>);</span><br><span class="line">gpio_bit_write(GPIOB, GPIO_PIN_1, (bit_status)<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">ADCInit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 使能时钟；*/</span></span><br><span class="line">rcu_periph_clock_enable(RCU_ADC1);</span><br><span class="line"><span class="comment">/* 设置分频系数；*/</span></span><br><span class="line">rcu_adc_clock_config(RCU_CKADC_CKAPB2_DIV6);  <span class="comment">// 6分频，120MHz / 6 = 20MHz</span></span><br><span class="line"><span class="comment">/* 设置独立模式；*/</span></span><br><span class="line">adc_mode_config(ADC_MODE_FREE);</span><br><span class="line"><span class="comment">/* 设置单次模式；*/</span> </span><br><span class="line">adc_special_function_config(ADC1, ADC_CONTINUOUS_MODE, DISABLE);</span><br><span class="line"><span class="comment">/* 设置数据对齐；*/</span></span><br><span class="line">adc_data_alignment_config(ADC1, ADC_DATAALIGN_RIGHT);</span><br><span class="line"><span class="comment">/* 设置转换通道个数；*/</span> </span><br><span class="line">adc_channel_length_config(ADC1, ADC_REGULAR_CHANNEL, <span class="number">1</span>);</span><br><span class="line"><span class="comment">/* 设置转换哪一个通道以及所处序列位置；*/</span> </span><br><span class="line">adc_regular_channel_config(ADC1, <span class="number">0</span>, ADC_CHANNEL_14, ADC_SAMPLETIME_71POINT5);  <span class="comment">// PC4对应通道14，放在序列寄存器的0序列中，71.5个周期</span></span><br><span class="line"><span class="comment">/* 设置选择哪一个外部触发源；*/</span> </span><br><span class="line">adc_external_trigger_source_config(ADC1, ADC_REGULAR_CHANNEL, ADC0_1_2_EXTTRIG_REGULAR_NONE);</span><br><span class="line"><span class="comment">/* 使能外部触发；*/</span> </span><br><span class="line">adc_external_trigger_config(ADC1, ADC_REGULAR_CHANNEL, ENABLE);</span><br><span class="line"><span class="comment">/* 使能硬件滤波；*/</span> </span><br><span class="line">adc_oversample_mode_config(ADC1, ADC_OVERSAMPLING_ALL_CONVERT, ADC_OVERSAMPLING_SHIFT_4B, ADC_OVERSAMPLING_RATIO_MUL16);</span><br><span class="line">adc_oversample_mode_enable(ADC1);</span><br><span class="line"><span class="comment">/* 使能ADC；*/</span> </span><br><span class="line">adc_enable(ADC1);</span><br><span class="line"><span class="comment">/* 内部校准；*/</span> </span><br><span class="line">DelayNus(<span class="number">50</span>);</span><br><span class="line">adc_calibration_enable(ADC1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">TimerInit</span><span class="params">(<span class="type">uint32_t</span> periodUs)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 使能定时器时钟；*/</span></span><br><span class="line">rcu_periph_clock_enable(RCU_TIMER4);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 复位定时器；*/</span></span><br><span class="line">timer_deinit(TIMER4);</span><br><span class="line"></span><br><span class="line">timer_parameter_struct timerInitPara;</span><br><span class="line">timer_struct_para_init(&amp;timerInitPara);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 设置预分频器值；*/</span></span><br><span class="line">timerInitPara.prescaler = <span class="number">120</span> - <span class="number">1</span>;     <span class="comment">// 输入给计数器的时钟频率为1Mhz，周期1us</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 设置自动重装载值；*/</span> </span><br><span class="line">timerInitPara.period = periodUs - <span class="number">1</span>;</span><br><span class="line">timer_init(TIMER4, &amp;timerInitPara);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使能定时器的计数更新中断；*/</span></span><br><span class="line">timer_interrupt_enable(TIMER4, TIMER_INT_UP);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使能定时器中断和优先级；*/</span></span><br><span class="line">nvic_irq_enable(TIMER4_IRQn, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使能定时器；*/</span> </span><br><span class="line">timer_enable(TIMER4);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">* @brief 湿度传感器驱动初始化</span></span><br><span class="line"><span class="comment">* @param</span></span><br><span class="line"><span class="comment">* @return </span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Humi_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">GPIOInit();</span><br><span class="line">ADCInit();</span><br><span class="line">Timer_Init(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">* @brief 获取数据寄存器中的 ADC 值</span></span><br><span class="line"><span class="comment">* @param</span></span><br><span class="line"><span class="comment">* @return ADC值</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">static</span> <span class="type">uint16_t</span> <span class="title function_">GetAdcVal</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 中断服务函数中每调用一次，使能ADC转换 */</span></span><br><span class="line">adc_software_trigger_enable(ADC1, ADC_REGULAR_CHANNEL);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 等待转换完成标志 */</span></span><br><span class="line">    <span class="keyword">while</span>(!adc_flag_get(ADC1, ADC_FLAG_EOC));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 读取数据寄存器 */</span></span><br><span class="line">    <span class="keyword">return</span> (adc_regular_data_read(ADC1));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">* @brief 翻转 IO 状态</span></span><br><span class="line"><span class="comment">* @param 无</span></span><br><span class="line"><span class="comment">* @return 无</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">AcPowerProc</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">gpio_bit_write(GPIOB, GPIO_PIN_0, (FlagStatus)((FlagStatus)<span class="number">1</span> - gpio_output_bit_get(GPIOB, GPIO_PIN_0)));</span><br><span class="line">gpio_bit_write(GPIOB, GPIO_PIN_1, (FlagStatus)((FlagStatus)<span class="number">1</span> - gpio_output_bit_get(GPIOB, GPIO_PIN_1)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">TIMER4_IRQHandler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">static</span> <span class="type">uint16_t</span> timerCount = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (timer_interrupt_flag_get(TIMER4, TIMER_INT_FLAG_UP) != RESET)</span><br><span class="line">&#123;</span><br><span class="line">timer_interrupt_flag_clear(TIMER4, TIMER_INT_FLAG_UP);</span><br><span class="line">timerCount++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (timerCount % <span class="number">2</span> == <span class="number">0</span>)     <span class="comment">// 每2ms反转IO口</span></span><br><span class="line">&#123;</span><br><span class="line">AcPowerProc();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (timerCount % <span class="number">400</span> == <span class="number">1</span>)  <span class="comment">// 每隔400ms，在高电平中间位置获取一次ADC的数据</span></span><br><span class="line">&#123;</span><br><span class="line">g_adcVal = GetAdcVal();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">* @brief 根据温度计算湿度对应的 ADC 值表</span></span><br><span class="line"><span class="comment">* @param arr 存储计算结果的数组</span></span><br><span class="line"><span class="comment">* @param temp 当前温度</span></span><br><span class="line"><span class="comment">* @return 无</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">CalcHumiAdcByTemp</span><span class="params">(<span class="type">uint16_t</span> *arr, <span class="type">uint8_t</span> temp)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint8_t</span> tempRow = temp / TEMP_INTERVAL_VAL;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 边界值温度直接返回其ADC值即可 */</span></span><br><span class="line"><span class="keyword">if</span> (temp % TEMP_INTERVAL_VAL == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memcpy</span>(arr, &amp;g_rhADCVal[tempRow][<span class="number">0</span>], HUMI_LEVEL_NUM * <span class="keyword">sizeof</span>(<span class="type">uint16_t</span>));</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">uint8_t</span> i = <span class="number">0</span>; i &lt; HUMI_LEVEL_NUM; i++)</span><br><span class="line">&#123;</span><br><span class="line">arr[i] = g_rhADCVal[tempRow][i] + (g_rhADCVal[tempRow + <span class="number">1</span>][i] - g_rhADCVal[tempRow][i]) * (tempRow) / TEMP_INTERVAL_VAL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">* @brief 使用二分法在升序数组中查找元素位置</span></span><br><span class="line"><span class="comment">* @param arr 升序数组</span></span><br><span class="line"><span class="comment">* @param size 数组大小</span></span><br><span class="line"><span class="comment">* @param key 查找的键值</span></span><br><span class="line"><span class="comment">* @return 找到的位置索引</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">static</span> <span class="type">int32_t</span> <span class="title function_">AsceBinarySearch</span><span class="params">(<span class="type">const</span> <span class="type">uint16_t</span> *arr, <span class="type">int32_t</span> size, <span class="type">uint16_t</span> key)</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int32_t</span> left = <span class="number">0</span>;              </span><br><span class="line"><span class="type">int32_t</span> right = size - <span class="number">1</span>;       </span><br><span class="line"><span class="type">int32_t</span> mid;</span><br><span class="line"><span class="type">int32_t</span> index = size - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (left &lt;= right)             </span><br><span class="line">&#123;</span><br><span class="line">mid = left + (right - left) / <span class="number">2</span>; </span><br><span class="line"><span class="keyword">if</span> (key &lt;= arr[mid])</span><br><span class="line">&#123;</span><br><span class="line">right = mid - <span class="number">1</span>;</span><br><span class="line">index = mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">left = mid + <span class="number">1</span>;  </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> index;               </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">uint8_t</span> <span class="title function_">ADCToHumi</span><span class="params">(<span class="type">uint16_t</span> *arr, <span class="type">uint16_t</span> adcVal)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int32_t</span> index = AsceBinarySearch(arr, HUMI_LEVEL_NUM, adcVal);</span><br><span class="line"><span class="keyword">if</span> (index == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> HUMI_MIN_VAL;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">uint8_t</span> humi = HUMI_MIN_VAL + (index - <span class="number">1</span>) * HUMI_INTERVAL_VAL +  HUMI_INTERVAL_VAL * (adcVal - arr[index - <span class="number">1</span>]) / (arr[index] - arr[index - <span class="number">1</span>]);</span><br><span class="line"><span class="keyword">return</span> humi;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">* @brief 触发驱动转换湿度传感器数据</span></span><br><span class="line"><span class="comment">* @param</span></span><br><span class="line"><span class="comment">* @return </span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Humi_SensorProc</span><span class="params">(<span class="type">uint8_t</span> temp)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (temp &gt; TEMP_MAX_VAL)</span><br><span class="line">&#123;</span><br><span class="line">temp = TEMP_MAX_VAL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint16_t</span> humiADCBuf[HUMI_LEVEL_NUM];</span><br><span class="line">CalcHumiAdcByTemp(humiADCBuf, temp);</span><br><span class="line">g_humiData = ADCToHumi(humiADCBuf, g_adcVal);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">* @brief 获取湿度传感器数据</span></span><br><span class="line"><span class="comment">* @param</span></span><br><span class="line"><span class="comment">* @return 湿度数据，整数</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">float</span> <span class="title function_">Get_HumiData</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> g_humiData;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="RS485"><a href="#RS485" class="headerlink" title="RS485"></a>RS485</h1><h2 id="1-协议介绍"><a href="#1-协议介绍" class="headerlink" title="1.协议介绍"></a><strong>1.协议介绍</strong></h2><blockquote><h6 id="协议框图："><a href="#协议框图：" class="headerlink" title="协议框图："></a>协议框图：</h6><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412021947729.png" alt="image-20241202194707662" style="zoom: 150%;"></p><p>​    RS485采用的是双线传输，包含A信号线和B信号线。与RS232最本质的区别在于，RS485采用了差分模式。即在同一时刻，RS485    总线要么在发送数据，要么在接收数据，因此是半双工的。</p><p>​    RS232是全双工的，使用两个信号线，一个用于发送数据，另一个用于接收数据。这是它们两个的主要区别。</p><p>​    由于采用差分模式，当A-B的电压差值大于0.2伏时，RS485总线传输逻辑电平1；当A-B小于-0.2伏时，传输逻辑电平0。如果A-B    的电压差在-0.2伏到0.2伏之间，则无法识别逻辑电平。</p><p>​    这种差分模式可以提高抗干扰能力。例如，遇到脉冲干扰时，干扰会叠加在A和B信号线上，但由于差分模式，A-B的差值会抵消    这些脉冲干扰。因此，RS485能够实现更远的通信距离，理论上可达1200米，远超RS232，广泛应用于工业现场。</p><p>​    RS485支持一主多从的通信方式，即一个主机可以连接多个从机。这种能力取决于芯片的转换能力和软件协议。</p></blockquote><h2 id="2-硬件电路方案"><a href="#2-硬件电路方案" class="headerlink" title="2.硬件电路方案"></a><strong>2.硬件电路方案</strong></h2><blockquote><h6 id="常规方案"><a href="#常规方案" class="headerlink" title="常规方案:"></a>常规方案:</h6><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412021957614.png" alt="image-20241202195740526"></p><p>​    使用常见的转换芯片，如SSP485。左侧部分连接到MCU单片机，涉及三个IO口，分别对应串口的RX、TX以及一个普通的IO口。    在开发板上使用的是PC5口，用于切换RS485芯片的工作模式（发送或接收）。通过一个切换开关控制，并配有三个100欧姆的限    流电阻起到缓冲作用。</p><p>​    右侧是RS485相关的电路部分，包括防护电路。主要有两个自恢复保险丝，起到过流保护，防止电流过大烧毁器件；三个TVS二极    管，用于防止浪涌干扰。这些都是典型的防护电路，可以参考芯片的规格书（datasheet）获取这些电路信息，实际产品中也大量    使用，放在自己的项目中没有问题。</p><p>​    左侧有两个上拉和下拉电阻。A信号线接一个上拉电阻到3.3伏，B信号线接一个下拉电阻到GND。这两个上下拉电阻是必须要加</p><p>​    的，以保证RS485总线在空闲状态下A和B信号线呈现逻辑电平1，即电压差大于0.2伏。这样在空闲状态下，A和B信号线通过上下    拉电阻分别为3.3伏和0伏，确保RS485总线电平为1。</p><p>​    另外，RS485有时需要在A和B信号线之间加上120欧姆的终端电阻，具体是否需要根据实际部署环境决定。如果系统中有多个节点    且总线距离较长，可以在主机侧和最后一个从机侧各加一个120欧姆的终端电阻，以起到阻抗匹配、防止信号反射的作用。</p><h6 id="自收发电路"><a href="#自收发电路" class="headerlink" title="自收发电路:"></a>自收发电路:</h6><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412021957032.png" alt="image-20241202195733946"></p><p>​    较于第一种方案，它节省了一个IO口，仅使用串口的RX和TX。</p><h6 id="具体实现方式如下："><a href="#具体实现方式如下：" class="headerlink" title="具体实现方式如下："></a>具体实现方式如下：</h6><p>​    串口的RX接到RO管脚，DI管脚接地。单片机的TX通过一个三极管连接到RE和DE管脚。这种设计虽然节省了IO口，但不太规范，    实际应用中不推荐使用。之前使用这种电路时，遇到了RS485通信异常的问题，发现电阻损坏（虽然表面未烧毁，但电阻变为无    穷大），原因可能与现场环境如雷击或强干扰有关。因此，建议采用第一种常规方案。</p><h6 id="自收发电路的工作原理："><a href="#自收发电路的工作原理：" class="headerlink" title="自收发电路的工作原理："></a>自收发电路的工作原理：</h6><p>​    自收发电路中，当工作在接收模式时，单片机的TX默认是高电平，三极管导通，使RE被使能，RS485芯片进入接收模式，可以接    收外部数据。当需要发送数据时，通过三极管切换至发送模式，发送对应的逻辑电平。由于使用了三极管的开关特性，频率特性    与串口的波特率相关，适用于较低的波特率（如9600），高波特率下可能不稳定。</p><p>​    这种电路的优点是节省IO口，适用于IO资源有限的项目。但由于稳定性和可靠性问题，实际应用中建议优先选择常规方案。</p></blockquote><h1 id="MODBUS"><a href="#MODBUS" class="headerlink" title="MODBUS"></a>MODBUS</h1><h2 id="1-协议介绍-1"><a href="#1-协议介绍-1" class="headerlink" title="1.协议介绍"></a><strong>1.协议介绍</strong></h2><h3 id="1-RS485-amp-MODBUS"><a href="#1-RS485-amp-MODBUS" class="headerlink" title="1. RS485 &amp; MODBUS"></a>1. RS485 &amp; MODBUS</h3><blockquote><h6 id="关系框图："><a href="#关系框图：" class="headerlink" title="关系框图："></a>关系框图：</h6><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412022050180.png" alt="image-20241202205031112"></p><p>​    RS485 是一种电气协议，属于硬件级别的协议。而 MODBUS 是一种软件协议，这种软件协议既可以运行在 RS485 这种电气接口</p><p>​    上，也可以运行在 RS232 或者以太网电气接口上。</p><p>​    <strong>RS485相当于公路，MODBUS相当于交通规则，传输的数据就是汽车。</strong></p></blockquote><h3 id="2-特点"><a href="#2-特点" class="headerlink" title="2.特点"></a>2.特点</h3><blockquote><h6 id="标准开放性："><a href="#标准开放性：" class="headerlink" title="标准开放性："></a>标准开放性：</h6><p>MODBUS 协议是标准开放的，公开发表的，没有版权要求。</p><h6 id="协议格式与兼容性："><a href="#协议格式与兼容性：" class="headerlink" title="协议格式与兼容性："></a>协议格式与兼容性：</h6><p>MODBUS 协议的消息帧格式非常简单，便于厂商开发和集成。在做产品时，尽量少使用私有协议（即自己定义的协议），因为这样无法与其他厂商的产品对接，尤其是在复杂庞大的系统中，可能有许多不同厂家的设备，系统将无法正常运行。因此，在使用通信协议时，一定要选择标准开放的协议。</p><h6 id="传输介质与报文类型："><a href="#传输介质与报文类型：" class="headerlink" title="传输介质与报文类型："></a>传输介质与报文类型：</h6><p>MODBUS 协议可以在 RS485 、RS232 和以太网上传输，支持三种报文类型，包括 ASCII、RTU（Remote Terminal Unit）和 TCP。对于 ASCII 和 RTU ，通常运行在 RS485 和 RS232 电气接口上；而 TCP 则用于以太网接口。</p><p>在 ASCII 和 RTU 中，RTU 模式最为常用。RTU 使用二进制（或 16 进制）数据传输，而 ASCII 模式使用字符数据传输。</p></blockquote><h2 id="2-报文格式"><a href="#2-报文格式" class="headerlink" title="2.报文格式"></a>2.报文格式</h2><blockquote><h6 id="报文介绍："><a href="#报文介绍：" class="headerlink" title="报文介绍："></a>报文介绍：</h6><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412022054120.png" alt="image-20241202205421028"></p><ul><li>绿色的线表示以太网，传输协议报文类型为TCP。</li><li>蓝色的线表示RS485电气接口。主机通过RS485连接多个从机，大家都使用一套MODBUS RTU协议进行集成。</li></ul><h6 id="MODBUS-RTU-报文格式："><a href="#MODBUS-RTU-报文格式：" class="headerlink" title="MODBUS-RTU 报文格式："></a>MODBUS-RTU 报文格式：</h6><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412022057133.png" alt="image-20241202205755053"></p><p>​    在传输数据时，一包数据通常包含多个字节，我们可以称之为一帧数据。其格式如下：</p><ul><li><strong>从机地址（ 1 字节）</strong>：每个从机都有唯一的地址（ID），相当于门牌号，主机通过地址找到对应的从机。</li><li><strong>功能码（ 1 字节）</strong>：指示这一帧数据的用途，例如查询数据、读取数据、修改数据或写入数据。</li><li><strong>数据部分（ 0 - 252 字节）</strong>：根据功能码的不同，内容也不同。</li><li><strong>CRC校验码（ 2 字节）</strong>：包括低字节和高字节，用于检测接收数据的正确性。</li></ul><h6 id="功能码："><a href="#功能码：" class="headerlink" title="功能码："></a>功能码：</h6><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412022059166.png" alt="image-20241202205953093"></p><p>​    MODBUS协议中有多个功能码，其中最常用的功能码：</p><ul><li>03：读多个寄存器</li><li>06：写单个寄存器</li><li>16：写多个寄存器</li></ul></blockquote><h2 id="3-数据格式"><a href="#3-数据格式" class="headerlink" title="3.数据格式"></a>3.<strong>数据格式</strong></h2><blockquote><p>​    <strong>这里的寄存器不是指单片机中的物理寄存器，而是软件中的控制项。</strong>例如，控制传感器、继电器、开关等。这些寄存器在软件设</p><p>​    计时需要分配唯一的地址，类似于 PLC 系统中的控制项。</p><p>​    以某个产品为例，支持 RS485 MODBUS 功能。软件设计时，需要为每个传感器（如 PM2.5、温度、湿度、二氧化碳、TVOC、</p><p>​    PM10）分配唯一的寄存器地址，并定义其数据格式（通常为两个字节）。</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412022107725.png" alt="image-20241202210742650" style="zoom:;"></p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412022102725.png" alt="image-20241202210254655"></p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412022106828.png" alt="image-20241202210609762"></p><p>​    <strong>空闲间隔时间（3.5T）</strong></p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412031549792.png" alt="image-20241203154937731"></p><p>​    为了方便软件解析数据，MODBUS RTU 协议规定两帧数据之间必须有 3.5 个字符时间的空闲间隔，称为 3.5T 。这有助于判断一帧</p><p>​    数据是否接收完毕。具体时间计算如下：</p><ul><li><p>假设波特率为9600，字符时间为10位（1起始位 + 8数据位 + 1停止位）。</p></li><li><p>一个字符传输时间 = 10位 / 9600波特率 ≈ 1.04毫秒</p></li><li><p>3.5T ≈ 3.5 × 1.04 ≈ 3.64毫秒</p><p><strong>通常设计时，使用定时器来实现3.5T的检测。</strong></p></li></ul><h6 id="异常处理："><a href="#异常处理：" class="headerlink" title="异常处理："></a>异常处理：</h6><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412022125615.png" alt="image-20241202212532544"></p><p>​    实际应用中，可能会接收到错误的数据，此时需要进行异常处理。MODBUS 定义了几种异常码，例如：</p><ul><li>01：非法功能码（从机不支持该功能码）</li><li>02：非法地址（地址超出范围）</li><li>03：非法数据值（数据值不在允许范围）</li><li>04：从机故障（解析数据时出错）</li></ul><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412022126452.png" alt="image-20241202212635382"></p><p>​    主机发送了一个非法地址，或者数据值不合法，从机会返回对应的异常码通知主机。</p></blockquote><h2 id="4-软件架构"><a href="#4-软件架构" class="headerlink" title="4.软件架构"></a><strong>4.软件架构</strong></h2><blockquote><h6 id="采用分层架构，代码清晰："><a href="#采用分层架构，代码清晰：" class="headerlink" title="采用分层架构，代码清晰："></a>采用分层架构，代码清晰：</h6><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412022119111.png" alt></p><ul><li><strong>应用层</strong>：实现具体的业务逻辑，如数据处理和控制。</li><li><strong>中间件层</strong>：使用 FreeMODBUS 库，实现协议相关功能。</li><li><strong>驱动层</strong>：实现定时器和串口的初始化及中断功能。</li></ul><p>​    MODBUS 协议本身格式简单，但在代码实现时涉及数据解析、异常处理和 3.5T 的检测，可能显得复杂。因此，建议使用开源的</p><p>​    MODBUS 库，如 FreeMODBUS ，来简化开发。FreeMODBUS 已经实现了<strong>从机功能、异常处理和数据解析</strong>等，开发者只需实现驱</p><p>​    动层接口，如定时器和串口中断，并编写业务逻辑代码。</p></blockquote><h1 id="IIC"><a href="#IIC" class="headerlink" title="IIC"></a>IIC</h1><h2 id="1-协议解读"><a href="#1-协议解读" class="headerlink" title="1.协议解读"></a>1.协议解读</h2><h3 id="1-串并行通信"><a href="#1-串并行通信" class="headerlink" title="1.串并行通信"></a>1.串并行通信</h3><blockquote><h6 id="串行通信与并行通信简易框图："><a href="#串行通信与并行通信简易框图：" class="headerlink" title="串行通信与并行通信简易框图："></a>串行通信与并行通信简易框图：</h6><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412131829756.png" alt="image-20241213182936683"></p><p>​     <strong>UART 、I²C、SPI、CAN、USB </strong>都是串行通信。</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412131855012.png" alt="image-20241213185508950"></p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412131830718.png" alt="image-20241213183034659"></p><p>​    I²C 总线一共两个信号线，一个是时钟信号线（ SCL ），一个是数据线（ SDA ）。而异步通信，比如 UART（串口），没有时钟信    号线。</p><p>​    同步通信：由于有时钟信号，接收端根据<strong>时钟信号的脉冲</strong>来检测和解析数据线上的数据是<code>0</code>还是<code>1</code>。因此，对于同步通信来</p><p>​    说，对持续时间的要求没有那么严格，可以稍快或慢。</p><p>​    异步通信：数据传输时，<strong>接收端和发送端必须严格按照固定的波特率去发送和解析数据</strong>。例如<code>9600</code>波特</p><p>​    率，接收端接收到数据时，会根据波特率对应每一个二进制位的持续时间去解析数据，是二进制的<code>0</code>还是<code>1</code>。因此，时序要求非</p><p>​    常严格。</p><p>​    <strong>I²C 总线是半双工的，因为只有两个信号线（ SCL 和 SDA ），在同一时刻只能进行发送或接收。</strong></p></blockquote><h3 id="2-硬件原理"><a href="#2-硬件原理" class="headerlink" title="2.硬件原理"></a>2.硬件原理</h3><blockquote><p>​    I²C 总线和 MODBUS 一样，<strong>支持一主多从的通信方式</strong>，即一个主机可以连接多个从机。例如在一个总线上，可以将单片机作为主    机，挂载多个从机（如 EEPROM 、触摸屏芯片、温湿度传感器等）。</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412131540868.png" alt="image-20241213154014804"></p><p>​    在总线上，有多个节点设备要求这些设备内部需要将<strong>SDA和SCL总线配置成开漏输出模式，而不能设计成推挽输出模式</strong>。</p><p>​    设备内部设计成开漏输出模式，还需要在总线上使用两个上拉电阻，每条总线都加一个上拉电阻，阻值一般是3kΩ到10kΩ，典型</p><p>​    值是4.7kΩ。</p><h6 id="开漏输出和上拉电阻实现限流："><a href="#开漏输出和上拉电阻实现限流：" class="headerlink" title="开漏输出和上拉电阻实现限流："></a>开漏输出和上拉电阻实现限流：</h6><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412131541437.png" alt="image-20241213154145377"></p><p>​    假如总线上有两个设备：</p><ul><li><p>第一个设备要输出高电平1，上拉电阻将总线拉高，开漏输出管不导通，总线保持高电平。</p></li><li><p>另一个设备要输出低电平0，它的开漏输出管导通，将总线拉低。</p></li></ul><p>​    <strong>由于开漏输出模式，多个设备可以安全地连接在同一总线上，而不会像推挽输出模式那样导致短路和损坏器件。</strong></p></blockquote><h2 id="2-数据格式"><a href="#2-数据格式" class="headerlink" title="2.数据格式"></a><strong>2.数据格式</strong></h2><blockquote><h6 id="数据格式："><a href="#数据格式：" class="headerlink" title="数据格式："></a>数据格式：</h6><ul><li><p>主机控制：单片机程序</p></li><li><p>从机控制：芯片内部</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412131906232.png" alt="image-20241213190652166"></p><h6 id="向从机写数据："><a href="#向从机写数据：" class="headerlink" title="向从机写数据："></a>向从机写数据：</h6><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202502151716819.png" alt="图片1"></p><p>​    主机发送数据，从机接收数据后发送应答信号。</p><h6 id="向从机读数据："><a href="#向从机读数据：" class="headerlink" title="向从机读数据："></a>向从机读数据：</h6><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202502151717896.png" alt="图片2"></p><p>​    主机发送从机地址 + 读控制位后，从机发送数据，主机接收数据后发送应答信号，主机接收完数据后发送非应答信号。</p></blockquote><h2 id="3-时钟频率与数据传输"><a href="#3-时钟频率与数据传输" class="headerlink" title="3.时钟频率与数据传输"></a><strong>3.时钟频率与数据传输</strong></h2><blockquote><p>​    I²C总线支持多种时钟频率，如 <strong>100kHz（标准模式）</strong>、400kHz（快速模式）、1MHz（高速模式）。</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412131912451.png" alt="image-20241213191225388"></p><p>​    主机控制 SCL 时钟信号，SDA 信号线由主机或从机控制。传输数据时，SDA 信号线的数据只能在 SCL 为低电平时变化，在 SCL 为    高电平时保持稳定，供接收方读取。</p></blockquote><h3 id="1-起始、停止信号"><a href="#1-起始、停止信号" class="headerlink" title="1.起始、停止信号"></a><strong>1.起始、停止信号</strong></h3><blockquote><h6 id="空闲状态时，SDA-和-SCL-信号线都保持高电平："><a href="#空闲状态时，SDA-和-SCL-信号线都保持高电平：" class="headerlink" title="空闲状态时，SDA 和 SCL 信号线都保持高电平："></a>空闲状态时，SDA 和 SCL 信号线都保持高电平：</h6><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412131914019.png" alt="image-20241213191453961"></p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412131916321.png" alt="image-20241213191612262"></p><p>​    <strong>当数据传输时，主机发起起始信号，开始数据传输；传输完成后，主机发起停止信号，返回空闲状态</strong>。</p></blockquote><h3 id="2-发送字节"><a href="#2-发送字节" class="headerlink" title="2.发送字节"></a><strong>2.发送字节</strong></h3><blockquote><h6 id="高电平（稳定状态）读取数据，低电平准备数据："><a href="#高电平（稳定状态）读取数据，低电平准备数据：" class="headerlink" title="高电平（稳定状态）读取数据，低电平准备数据："></a>高电平（稳定状态）读取数据，低电平准备数据：</h6><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412131922777.png" alt="image-20241213192215715"></p><p>​    <strong>主机使 SCL 高电平时间维持周期的一半值（以上），从机才能检测到 SDA 数据。</strong></p></blockquote><h3 id="3-读取字节"><a href="#3-读取字节" class="headerlink" title="3.读取字节"></a><strong>3.读取字节</strong></h3><blockquote><h6 id="读取数据时，不论主机还是从机，主机必须先释放-SDA-线："><a href="#读取数据时，不论主机还是从机，主机必须先释放-SDA-线：" class="headerlink" title="读取数据时，不论主机还是从机，主机必须先释放 SDA 线："></a>读取数据时，不论主机还是从机，<strong>主机</strong>必须先释放 SDA 线：</h6><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412131928260.png" alt="image-20241213192838194"></p><p>​    <strong>在 IIC 协议中，SDA 线是双向的，既可以由主机控制，也可以由从机控制。</strong>主机在读取数据时，必须释放 SDA 线，使得从机能够    写入数据到 SDA 线，主机将数据放到 SDA 线上。如果主机没有释放 SDA 线而仍然保持为低电平，则该时刻，无论从机发送数据</p><p>​    的是 0 还是 1 ，最终都会被拉成 0（从机无法操作 SDA 线），因为主机仍然控制着 SDA 线。</p></blockquote><h3 id="4-发送应答"><a href="#4-发送应答" class="headerlink" title="4.发送应答"></a><strong>4.发送应答</strong></h3><blockquote><h6 id="主机和从机都可以发送应答信号（ACK）。低电平应答，高电平（初态）非应答："><a href="#主机和从机都可以发送应答信号（ACK）。低电平应答，高电平（初态）非应答：" class="headerlink" title="主机和从机都可以发送应答信号（ACK）。低电平应答，高电平（初态）非应答："></a>主机和从机都可以发送应答信号（ACK）。低电平应答，高电平（初态）非应答：</h6><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412131944748.png" alt="image-20241213194439683"></p><p>​    <strong>主机</strong>：<strong>主机</strong>接收到从机发送的数据（<strong>读操作</strong>），会<strong>向从机发送</strong>一个 ACK 信号，表示数据已经接收，可以继续接收更多数据，此时    从机接收应答（<strong>主机软件手动控制，从机硬件检测</strong>）。</p><p>​    <strong>从机</strong>：<strong>从机</strong>接收到主机发送的数据（<strong>写操作</strong>），会<strong>向主机发送</strong>一个 ACK 信号，表示数据已经接收，可以继续接收更多数据，此时    主机接收应答（<strong>从机硬件自动发送，主机软件检测</strong>）。</p></blockquote><h3 id="5-接收应答"><a href="#5-接收应答" class="headerlink" title="5.接收应答"></a><strong>5.接收应答</strong></h3><blockquote><h6 id="主机和从机都接收应答信号（ACK）："><a href="#主机和从机都接收应答信号（ACK）：" class="headerlink" title="主机和从机都接收应答信号（ACK）："></a>主机和从机都接收应答信号（ACK）：</h6><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412131938993.png" alt="image-20241213193803925"></p><p>​    <strong>主机</strong>：从机发送一个 ACK 信号（<strong>从机硬件自动发送</strong>），主机接收该应答信号（<strong>主机软件检测</strong>）表示已成功接收数据并准备好接收    下一个字节。</p><p>​    <strong>从机</strong>：主机发送一个 ACK 信号（<strong>主机软件手动控制</strong>），从机接收该应答信号（<strong>从机硬件检测</strong>）表示已成功接收数据并准备好接收    下一个字节。</p></blockquote><h2 id="4-EEPROM"><a href="#4-EEPROM" class="headerlink" title="4. EEPROM"></a>4. EEPROM</h2><blockquote><h6 id="存储器分类："><a href="#存储器分类：" class="headerlink" title="存储器分类："></a>存储器分类：</h6><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412132024705.png" alt="image-20241213202400643"></p></blockquote><h3 id="1-ROM发展历程"><a href="#1-ROM发展历程" class="headerlink" title="1. ROM发展历程"></a>1. ROM发展历程</h3><blockquote><h6 id="ROM-介绍："><a href="#ROM-介绍：" class="headerlink" title="ROM 介绍："></a>ROM 介绍：</h6><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412132025153.png" alt="image-20241213202541090"></p><ul><li><strong>掩膜ROM（Mask ROM）</strong>：出厂时就写入数据，之后不可修改。</li><li><strong>PROM</strong>：可编程 ROM ，通过特殊手段可以在出厂后写入一次数据，但只能修改一次。</li><li><strong>EPROM</strong>：可擦除可编程 ROM ，采用紫外线擦除并重新写入数据，支持多次擦写。</li><li><strong>EEPROM（电可擦除可编程 ROM ）</strong>：与 EPROM 类似，但采用电流擦除，支持多次擦写。</li></ul></blockquote><h3 id="2-EEPROM-与-Flash"><a href="#2-EEPROM-与-Flash" class="headerlink" title="2. EEPROM 与 Flash"></a>2. EEPROM 与 Flash</h3><blockquote><h6 id="Flash-与-EEPROM-比较："><a href="#Flash-与-EEPROM-比较：" class="headerlink" title="Flash 与 EEPROM 比较："></a>Flash 与 EEPROM 比较：</h6><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412132025477.png" alt="image-20241213202552418"></p><ul><li><p><strong>EEPROM</strong>：可以随机访问并修改任何字节，支持数据保存 100 年，擦写次数可达 100 万次。它的成本较高，容量较小，如</p><p>​    <strong>AT24C02</strong> 为 256 字节。</p></li><li><p><strong>Flash</strong>：闪存通常按块擦除，相比 EEPROM ，它可以支持更大的存储容量（如 U 盘使用的 NAND Flash），且具有较低的成本。</p><ul><li><p><strong>NOR Flash</strong>：数据线和地址线分开，支持随机寻址，适用于代码存储。</p></li><li><p><strong>NAND Flash</strong>：数据线和地址线复用，不能随机寻址，但擦除和写入速度较快，成本较低，适用于大容量存储（U盘）。</p></li></ul></li></ul></blockquote><h3 id="3-AT24C02"><a href="#3-AT24C02" class="headerlink" title="3. AT24C02"></a>3. AT24C02</h3><blockquote><p>AT24C02 是一个小容量的 EEPROM ，容量为 256 字节（2Kbits），每个字节都有唯一的地址。支持按字节或按页写入，能够在掉电后保存数据。使用 IIC 协议与主机通信，可以通过控制信号进行数据的读写操作。它支持多字节读取和写入，具有较高的可靠性，但容量有限，适用于小容量存储应用。</p></blockquote><h4 id="1-写数据"><a href="#1-写数据" class="headerlink" title="1.写数据"></a>1.写数据</h4><blockquote><h6 id="写入一个字节："><a href="#写入一个字节：" class="headerlink" title="写入一个字节："></a>写入一个字节：</h6><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412151225078.png" alt="image-20241215122519962"></p><ul><li><strong>起始信号</strong>：主机发送起始信号。</li><li><strong>设备地址和写控制位</strong>：主机发送24C02的地址及写控制位。</li><li><strong>数据地址</strong>：主机指定要写入数据的地址（0-255）。</li><li><strong>数据</strong>：主机发送要写入的数据字节。</li><li><strong>应答信号</strong>：24C02返回应答信号（ACK）。</li><li><strong>停止信号</strong>：主机发送停止信号。</li></ul><h6 id="按页写："><a href="#按页写：" class="headerlink" title="按页写："></a>按页写：</h6><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412151226127.png" alt="image-20241215122659056"></p><ul><li>每个页包含 8 个字节，24C02 总共有 32 页（ 256 字节 ÷ 8 字节 / 页）。</li><li>可以选择从任意字节地址开始写入（例如从地址 1 开始），但每页的最大写入字节数为 8 个。如果超过 8 个字节，会跨页，需重新发送写信号。</li></ul></blockquote><h4 id="2-读数据"><a href="#2-读数据" class="headerlink" title="2.读数据"></a>2.读数据</h4><blockquote><h6 id="单字节读取："><a href="#单字节读取：" class="headerlink" title="单字节读取："></a>单字节读取：</h6><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412151316197.png" alt="image-20241215131603127"></p><ul><li>主机发送设备地址和写控制位，指定要读取的起始地址（假写）。</li><li>主机发送起始信号后，再次发送设备地址和读控制位，24C02返回指定地址的数据。</li><li>主机发送非应答信号，并发送停止信号。</li></ul><h6 id="多字节读取："><a href="#多字节读取：" class="headerlink" title="多字节读取："></a>多字节读取：</h6><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412151316341.png" alt="image-20241215131617281"></p><p>​    主机只需发送起始地址，24C02内部有地址计数器，可以连续返回后续地址数据，直到主机发送非应答信号。</p><h6 id="时序延时注意："><a href="#时序延时注意：" class="headerlink" title="时序延时注意："></a>时序延时注意：</h6><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412151324403.png" alt="image-20241215132401331"></p></blockquote><h3 id="4-代码实现"><a href="#4-代码实现" class="headerlink" title="4.代码实现"></a>4.代码实现</h3><h4 id="1-软件IIC"><a href="#1-软件IIC" class="headerlink" title="1.软件IIC"></a>1.软件IIC</h4><h5 id="1-软件模拟IIC"><a href="#1-软件模拟IIC" class="headerlink" title="1.软件模拟IIC"></a>1.软件模拟IIC</h5><blockquote><h6 id="延时时间："><a href="#延时时间：" class="headerlink" title="延时时间："></a>延时时间：</h6><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202502161324651.png" alt="微信截图_20250216131831"></p></blockquote><h6 id="1-起始信号"><a href="#1-起始信号" class="headerlink" title="1.起始信号"></a>1.起始信号</h6><blockquote><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412151324633.png" alt="image-20241215132434566"></p></blockquote><h6 id="2-停止信号"><a href="#2-停止信号" class="headerlink" title="2.停止信号"></a>2.停止信号</h6><blockquote><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412151325702.png" alt="image-20241215132539631"></p></blockquote><h6 id="3-发送字节"><a href="#3-发送字节" class="headerlink" title="3.发送字节"></a>3.发送字节</h6><blockquote><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412151326402.png" alt="image-20241215132622333"></p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412151326453.png" alt="image-20241215132635387"></p><p>​    <strong>发送数据时</strong>，主机通过 SDA 线传输8位数据。每位数据的传输时，SDA线由主机控制，<strong>并且在每一位的数据传输后，</strong>SDA 线需要</p><p>​    为下一位传输准备好。<strong>当所有数据位（8位）完成后，SDA线会被设置为“高电平”</strong>，这是由上拉电阻来保证的，表示总线已经空</p><p>​    闲，可以开始新的数据传输。</p></blockquote><h6 id="4-读取字节"><a href="#4-读取字节" class="headerlink" title="4.读取字节"></a>4.读取字节</h6><blockquote><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412151327329.png" alt="image-20241215132703258"></p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412151327848.png" alt="image-20241215132722771"></p></blockquote><h6 id="5-发送应答"><a href="#5-发送应答" class="headerlink" title="5.发送应答"></a>5.发送应答</h6><blockquote><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412151328592.png" alt="image-20241215132804524"></p><p>​    <strong>发送应答 ACK 后，主机必须手动释放SDA线，不然从机没办法发送数据。</strong></p></blockquote><h6 id="6-接收应答"><a href="#6-接收应答" class="headerlink" title="6.接收应答"></a>6.接收应答</h6><blockquote><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412151328049.png" alt="image-20241215132809986"></p></blockquote><h5 id="2-读写实现"><a href="#2-读写实现" class="headerlink" title="2.读写实现"></a>2.读写实现</h5><h6 id="1-EEPROM读"><a href="#1-EEPROM读" class="headerlink" title="1. EEPROM读"></a>1. EEPROM读</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> EEPROM_DRV_ADDR  0xA0<span class="comment">// 24xx02的设备地址 </span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EEPROM_PAGE_SIZE  8<span class="comment">// 24xx02的页面大小</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EEPROM_SIZE  256    <span class="comment">// 24xx02总容量</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EEPROM_I2C_WR  0    <span class="comment">// 写控制bit</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EEPROM_I2C_RD          1    <span class="comment">// 读控制bit</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">bool</span> <span class="title function_">Read_EEPROM_Data</span><span class="params">(<span class="type">uint8_t</span> readAddr, <span class="type">uint8_t</span> *pBuffer, <span class="type">uint16_t</span> numToRead)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 起始位置和读取数据量超过 PPEROM 最大读取地址 或 此时 pBuffer地址并没有数据 */</span></span><br><span class="line"><span class="keyword">if</span>(readAddr + numToRead &gt; EEPROM_SIZE | pBuffer == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 无法正确操作EEPROM 返回错误 */</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">I2CStart();                          <span class="comment">// 发送起始信号</span></span><br><span class="line">I2CSendByte(EEPROM_DRV_ADDR | EEPROM_I2C_WR);   <span class="comment">// 发送器件地址和读写模式，1 0 1 0 x x x  R/~W  0xA0</span></span><br><span class="line"><span class="keyword">if</span>(!I2CWaitAck())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">goto</span> iic_err;</span><br><span class="line">&#125;</span><br><span class="line">I2CSendByte(readAddr);</span><br><span class="line"><span class="keyword">if</span>(!I2CWaitAck())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">goto</span> iic_err;</span><br><span class="line">&#125;</span><br><span class="line">I2CStart();                          <span class="comment">// 发送起始信号</span></span><br><span class="line">I2CSendByte(EEPROM_DRV_ADDR | EEPROM_I2C_RD);   <span class="comment">// 发送器件地址和读写模式，1 0 1 0 x x x  R/~W  0xA0</span></span><br><span class="line"><span class="keyword">if</span>(!I2CWaitAck())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">goto</span> iic_err;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(numToRead--)</span><br><span class="line">&#123;</span><br><span class="line">*pBuffer++ = I2CReadByte();</span><br><span class="line"><span class="keyword">if</span>(numToRead)</span><br><span class="line">&#123;</span><br><span class="line">I2CSendAck();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">I2CSendNack();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">I2CStop(); </span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">iic_err:</span><br><span class="line">I2CStop(); </span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="2-EEPROM写"><a href="#2-EEPROM写" class="headerlink" title="2. EEPROM写"></a>2. EEPROM写</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">bool</span> <span class="title function_">Write_EEPROM_Data</span><span class="params">(<span class="type">uint8_t</span> writeAddr, <span class="type">uint8_t</span> *pBuffer, <span class="type">uint16_t</span> numToWrite)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 起始位置和读取数据量超过 PPEROM 最大读取地址 或 此时 pBuffer地址并没有数据 */</span></span><br><span class="line"><span class="keyword">if</span>(writeAddr + numToWrite &gt; EEPROM_SIZE | pBuffer == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 无法正确操作EEPROM 返回错误 */</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1</span></span><br><span class="line">I2CStart();                          <span class="comment">// 发送起始信号</span></span><br><span class="line">    </span><br><span class="line">I2CSendByte(EEPROM_DRV_ADDR | EEPROM_I2C_WR);   <span class="comment">// 发送器件地址和读写模式，1 0 1 0 x x x  R/~W  0xA0</span></span><br><span class="line"><span class="keyword">if</span>(!I2CWaitAck())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">goto</span> iic_err;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">I2CSendByte(writeAddr);</span><br><span class="line"><span class="keyword">if</span>(!I2CWaitAck())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">goto</span> iic_err;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 发送数据 */</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">uint8_t</span> i = <span class="number">0</span>; i &lt; numToWrite; i++)</span><br><span class="line">&#123;</span><br><span class="line">I2CSendByte(pBuffer[i]);</span><br><span class="line"><span class="keyword">if</span>(!I2CWaitAck())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">goto</span> iic_err;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">I2CStop(); </span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">iic_err:</span><br><span class="line">I2CStop(); </span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="3-EEPROM-收发数据"><a href="#3-EEPROM-收发数据" class="headerlink" title="3. EEPROM 收发数据"></a>3. EEPROM 收发数据</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> BUFFER_SIZE              17</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">EEPROM_Test</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint8_t</span> bufferWrite[BUFFER_SIZE];</span><br><span class="line">    <span class="type">uint8_t</span> bufferRead[BUFFER_SIZE];</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;AT24C02 writing data：\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">uint16_t</span> i = <span class="number">0</span>; i &lt; BUFFER_SIZE; i++)</span><br><span class="line">&#123; </span><br><span class="line">bufferWrite[i]= i + <span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;0x%02X &quot;</span>, bufferWrite[i]);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n开始写入\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!Write_EEPROM_Data(<span class="number">0</span>, bufferWrite, BUFFER_SIZE))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;AT24C02写数据故障，请排查！\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">DelayNms(<span class="number">5</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;AT24C02 reading...\n&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (!Read_EEPROM_Data(<span class="number">0</span>, bufferRead, BUFFER_SIZE))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;AT24C02读数据故障，请排查！\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">uint16_t</span> i = <span class="number">0</span>; i &lt; BUFFER_SIZE; i++)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">if</span> (bufferRead[i] != bufferWrite[i])&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;0x%02X &quot;</span>, bufferRead[i]);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;AT24C02测试故障，请排查！\n&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;0x%02X &quot;</span>, bufferRead[i]);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n24C02测试通过！\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-3-问题"><a href="#1-3-问题" class="headerlink" title="1.3.问题"></a>1.3.问题</h5><h6 id="1-页写入限制"><a href="#1-页写入限制" class="headerlink" title="1.页写入限制"></a>1.页写入限制</h6><blockquote><h6 id="BUFFER-SIZE-越大时，会出现“AT24C02测试故障，请排查”的报错："><a href="#BUFFER-SIZE-越大时，会出现“AT24C02测试故障，请排查”的报错：" class="headerlink" title="BUFFER_SIZE 越大时，会出现“AT24C02测试故障，请排查”的报错："></a><strong>BUFFER_SIZE</strong> 越大时，会出现“AT24C02测试故障，请排查”的报错：</h6><ul><li>第一次有可能不是从 EEPROM <strong>每一页的首地址</strong>开始写数据。</li><li>尝试写入超过页大小的数据（如 17 字节），导致<strong>数据截断</strong>或<strong>覆盖</strong>，写入失败。需要重新发起。</li></ul><h6 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h6><p>写入数据前，先判断写入EEPROM的地址是否为页首地址：</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">bool</span> <span class="title function_">Write_EEPROM_Data</span><span class="params">(<span class="type">uint8_t</span> writeAddr, <span class="type">uint8_t</span> *pBuffer, <span class="type">uint16_t</span> numToWrite)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 起始位置和读取数据量超过 PPEROM 最大读取地址 或 此时 pBuffer地址并没有数据 */</span></span><br><span class="line"><span class="keyword">if</span>(writeAddr + numToWrite &gt; EEPROM_SIZE | pBuffer == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 无法正确操作EEPROM 返回错误 */</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 发送数据 */</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">uint8_t</span> i = <span class="number">0</span>; i &lt; numToWrite; i++)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="comment">// 2</span></span><br><span class="line"><span class="comment">/* 判断要写入的页地址是否为页首地址 */</span></span><br><span class="line"><span class="keyword">if</span>(i == <span class="number">0</span> || (writeAddr &amp; (EEPROM_PAGE_SIZE - <span class="number">1</span>)) == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 停止上一次的主从交互，使总线变为高电平状态 */</span></span><br><span class="line">I2CStop();</span><br><span class="line">I2CStart();                          <span class="comment">// 发送起始信号</span></span><br><span class="line">I2CSendByte(EEPROM_DRV_ADDR | EEPROM_I2C_WR);   <span class="comment">// 发送器件地址和读写模式，1 0 1 0 x x x  R/~W  0xA0</span></span><br><span class="line"><span class="keyword">if</span>(!I2CWaitAck())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">goto</span> iic_err;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">I2CSendByte(writeAddr);</span><br><span class="line"><span class="keyword">if</span>(!I2CWaitAck())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">goto</span> iic_err;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">I2CSendByte(pBuffer[i]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!I2CWaitAck())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">goto</span> iic_err;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">// 2</span></span><br><span class="line"><span class="comment">/* 每成功写入数据，就更新其页地址 */</span></span><br><span class="line">writeAddr++;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">I2CStop(); </span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">iic_err:</span><br><span class="line">I2CStop(); </span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="2-页间隔限制"><a href="#2-页间隔限制" class="headerlink" title="2.页间隔限制"></a>2.页间隔限制</h6><blockquote><h6 id="写入数据故障："><a href="#写入数据故障：" class="headerlink" title="写入数据故障："></a>写入数据故障：</h6><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202502172000817.png" alt="微信截图_20250217195839"></p><p> ​    原因：写入超过一页时，页与页之间要有间隔。常规延时也可以解决！</p><h6 id="解决方法：-1"><a href="#解决方法：-1" class="headerlink" title="解决方法："></a>解决方法：</h6><p>​    单片机向 EEPROM 发送寻址的命令，检测 EEPROM 是否发来应答信号：    </p><p>​    返回 ACK ：说明本次页写入完成。可以进行下一次页写入！！</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202502172018372.png" alt="微信截图_20250217201748"></p><p>​    <strong>页间隔使 j 循环 7 次！</strong></p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">bool</span> <span class="title function_">Write_EEPROM_Data</span><span class="params">(<span class="type">uint8_t</span> writeAddr, <span class="type">uint8_t</span> *pBuffer, <span class="type">uint16_t</span> numToWrite)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 起始位置和读取数据量超过 PPEROM 最大读取地址 或 此时 pBuffer地址并没有数据 */</span></span><br><span class="line"><span class="keyword">if</span>(writeAddr + numToWrite &gt; EEPROM_SIZE | pBuffer == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 无法正确操作EEPROM 返回错误 */</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3 尽量不改变传入的形参</span></span><br><span class="line"><span class="type">uint16_t</span> i, j;</span><br><span class="line"><span class="type">uint8_t</span> dataAddr = writeAddr;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 发送数据 */</span></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; numToWrite; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 判断要写入的页地址是否为页首地址  第 1 次 || 第 N 次 */</span></span><br><span class="line"><span class="keyword">if</span>(i == <span class="number">0</span> || (dataAddr &amp; (EEPROM_PAGE_SIZE - <span class="number">1</span>)) == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 使总线变为高电平状态 */</span></span><br><span class="line">I2CStop();</span><br><span class="line">            <span class="comment">// 3</span></span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">100</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line">I2CStart();                          <span class="comment">// 发送起始信号</span></span><br><span class="line">I2CSendByte(EEPROM_DRV_ADDR | EEPROM_I2C_WR);   <span class="comment">// 发送器件地址和读写模式，1 0 1 0 x x x  R/~W  0xA0// 如果应答，说明可以进行下一页写入 第一次写入直接应答，之后要消耗一定时间</span></span><br><span class="line"><span class="keyword">if</span>(I2CWaitAck())   </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">            <span class="comment">// 3</span></span><br><span class="line"><span class="comment">/* EEPROM不处于空闲状态 */</span></span><br><span class="line"><span class="keyword">if</span>(j == <span class="number">100</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">goto</span> iic_err;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;dataAddr = %d, j = %d\n&quot;</span>, dataAddr, j);</span><br><span class="line"></span><br><span class="line">I2CSendByte(dataAddr);</span><br><span class="line"><span class="keyword">if</span>(!I2CWaitAck())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">goto</span> iic_err;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">I2CSendByte(pBuffer[i]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!I2CWaitAck())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">goto</span> iic_err;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">// 3</span></span><br><span class="line"><span class="comment">/* 每成功写入数据，就判断其 */</span></span><br><span class="line">dataAddr++;</span><br><span class="line">&#125;</span><br><span class="line">I2CStop(); </span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">iic_err:</span><br><span class="line">I2CStop(); </span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-硬件IIC"><a href="#2-硬件IIC" class="headerlink" title="2.硬件IIC"></a>2.硬件IIC</h4>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2024/10/27/RTT/RTT%E9%97%AE%E9%A2%98%E5%90%88%E9%9B%86/"/>
      <url>/2024/10/27/RTT/RTT%E9%97%AE%E9%A2%98%E5%90%88%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h1 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h1><h2 id="问题一："><a href="#问题一：" class="headerlink" title="问题一："></a>问题一：</h2><p>如图：</p><p><strong>这个代码189只有一次，难不成第一次执行rt_kprintf不是在92行而是189行，92和114是我想要的行数，可是189并不是我期望看到的结果。</strong></p><p><img src="/2024/10/27/RTT/RTT%E9%97%AE%E9%A2%98%E5%90%88%E9%9B%86/QQ20241027-213440.png" alt></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">rt_thread_t</span> th1_ptr, th2_ptr, th3_ptr;</span><br><span class="line"><span class="type">rt_mutex_t</span> mutex1_ptr;</span><br><span class="line"><span class="type">void</span> <span class="title function_">th1_printf</span><span class="params">(<span class="type">void</span> *parameter)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        rt_mutex_take(mutex1_ptr, RT_WAITING_FOREVER);</span><br><span class="line">        rt_kprintf(<span class="string">&quot;In %s,func %s is running! the line is %d!\r\n&quot;</span> ,__FILE__,__FUNCTION__, __LINE__);</span><br><span class="line">        rt_thread_mdelay(<span class="number">1000</span>);</span><br><span class="line">        rt_mutex_release(mutex1_ptr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">th2_printf</span><span class="params">(<span class="type">void</span> *parameter)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        rt_kprintf(<span class="string">&quot;In %s,func %s is running! the priority is %d!\r\n&quot;</span> ,__FILE__,__FUNCTION__, th3_ptr-&gt;current_priority);</span><br><span class="line">        rt_thread_mdelay(<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">th3_printf</span><span class="params">(<span class="type">void</span> *parameter)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        rt_mutex_take(mutex1_ptr, RT_WAITING_FOREVER);</span><br><span class="line">        rt_kprintf(<span class="string">&quot;In %s,func %s is running! the line is %d!\r\n&quot;</span> ,__FILE__,__FUNCTION__, __LINE__);</span><br><span class="line">        rt_thread_mdelay(<span class="number">1000</span>);</span><br><span class="line">        rt_mutex_release(mutex1_ptr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    mutex1_ptr = rt_mutex_create(<span class="string">&quot;mutex1_ptr&quot;</span>, RT_IPC_FLAG_FIFO);</span><br><span class="line">    <span class="keyword">if</span>(mutex1_ptr == RT_NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        LOG_E(<span class="string">&quot;mutex1_ptr rt_mutex_create failed!\r\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    th1_ptr = rt_thread_create(<span class="string">&quot;th1&quot;</span>, th1_printf, <span class="literal">NULL</span>, <span class="number">1024</span>, <span class="number">7</span>, <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">if</span>(th1_ptr == RT_NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        LOG_E(<span class="string">&quot;th1_printf rt_thread_create failed!\r\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> -RT_ENOMEM;</span><br><span class="line">    &#125;</span><br><span class="line">    rt_thread_startup(th1_ptr);</span><br><span class="line"></span><br><span class="line">    th2_ptr = rt_thread_create(<span class="string">&quot;th2&quot;</span>, th2_printf, <span class="literal">NULL</span>, <span class="number">1024</span>, <span class="number">8</span>, <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">if</span>(th2_ptr == RT_NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        LOG_E(<span class="string">&quot;th2_printf rt_thread_create failed!\r\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> -RT_ENOMEM;</span><br><span class="line">    &#125;</span><br><span class="line">    rt_thread_startup(th2_ptr);</span><br><span class="line"></span><br><span class="line">    th3_ptr = rt_thread_create(<span class="string">&quot;th3&quot;</span>, th3_printf, <span class="literal">NULL</span>, <span class="number">1024</span>, <span class="number">9</span>, <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">if</span>(th3_ptr == RT_NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        LOG_E(<span class="string">&quot;th3_printf rt_thread_create failed!\r\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> -RT_ENOMEM;</span><br><span class="line">    &#125;</span><br><span class="line">    rt_thread_startup(th3_ptr);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> RT_EOK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解释一下为啥最后是这么打印的，而且还多出来一个189这个数</p><hr><h3 id="代码结构及线程逻辑"><a href="#代码结构及线程逻辑" class="headerlink" title="代码结构及线程逻辑"></a><strong>代码结构及线程逻辑</strong></h3><ol><li><p><strong>三个线程：</strong></p><ul><li><code>th1_printf</code> 和 <code>th3_printf</code> 都使用 <code>mutex1_ptr</code> 互斥锁来同步访问共享资源，打印行号。</li><li><code>th2_printf</code> 打印线程的优先级，没有使用锁。</li></ul></li><li><p><strong>线程创建：</strong></p><ul><li><code>th1_ptr</code> 线程：优先级为 <code>7</code></li><li><code>th2_ptr</code> 线程：优先级为 <code>8</code></li><li><code>th3_ptr</code> 线程：优先级为 <code>9</code></li></ul></li><li><p><strong>线程行为：</strong></p><ul><li><code>th1_printf</code> 和 <code>th3_printf</code> 都会拿到互斥锁后打印，然后延时 <code>1000ms</code>，再释放锁（放锁期间其他获锁的线程无法执行）。</li><li><code>th2_printf</code> 每隔 <code>100ms</code> 打印一次当前的线程优先级（使用的是 <code>th3_ptr</code> 的优先级）。</li><li><strong>互斥锁保证</strong>，同时只有一个线程能够访问共享资源（此处是打印输出）。</li></ul></li></ol><hr><h3 id="为什么-189-行号只出现一次"><a href="#为什么-189-行号只出现一次" class="headerlink" title="为什么 189 行号只出现一次"></a>为什么 <code>189</code> 行号只出现一次</h3><p>在 <code>th2_printf</code> 中的打印语句是：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rt_kprintf(<span class="string">&quot;In %s,func %s is running! the priority is %d!\r\n&quot;</span> ,__FILE__,__FUNCTION__, th3_ptr-&gt;current_priority);</span><br></pre></td></tr></table></figure><p>这个打印语句没有使用 <code>__LINE__</code> 宏，因此不会打印出当前代码的实际行号 <code>189</code>。但是，在编译输出时，<code>__FILE__</code> 中的文件名和默认行号会在 <code>rt_kprintf</code> 函数中被初始化为 <code>189</code>。这通常是因为编译器可能会在特定的情况下把文件中的行号记录在输出中，但 <code>th2_printf</code> 的这一行在程序首次运行时仅被执行一次，因此显示了 <code>189</code> 行号。</p><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><ul><li><strong><code>189</code></strong> 是代码中 <strong><code>rt_kprintf</code></strong> 在 <code>th2_printf</code> 中的实际行号。</li><li>频繁打印的原因是 <strong><code>th2_printf</code></strong> 没有使用互斥锁，且延迟时间较短（100ms）。</li><li><code>th1_printf</code> 和 <code>th3_printf</code> 的执行顺序受互斥锁和 1000ms 的延时控制，因此打印频率较低。</li><li>打印输出的顺序与实时操作系统中的线程调度机制有关，线程优先级和延时会影响打印内容的出现顺序。</li><li><code>189</code> 只出现一次，可能是因为编译后的代码在首次运行时输出了 <code>th2_printf</code> 的代码位置（默认显示为 <code>189</code>）。而 <code>92</code> 和 <code>114</code> 行反复出现，是因为这些行在 <code>th1_printf</code> 和 <code>th3_printf</code> 中包含了 <code>__LINE__</code> 宏，它们的行号会在每次打印时被正确解析并输出。</li></ul><h2 id="问题二："><a href="#问题二：" class="headerlink" title="问题二："></a>问题二：</h2><p>代码有什么问题？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化超声波传感器的外部接口</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">Sr04_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">rt_err_t</span> ret = RT_EOK;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用内部初始化函数</span></span><br><span class="line">    Ultra_Init(&amp;csbModel);</span><br><span class="line"></span><br><span class="line">    <span class="type">rt_thread_t</span> Sr04_thread = rt_thread_create(<span class="string">&quot;Sr04_thread&quot;</span>, Sr04_thread_entry, RT_NULL, <span class="keyword">sizeof</span>(Sr04_thread), THREAD_PRIORITY, THREAD_TIMESLICE);</span><br><span class="line">    <span class="keyword">if</span> (Sr04_thread == RT_NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        rt_kprintf(<span class="string">&quot;Sr04_thread is created failed!\r\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ret = RT_ERROR;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 启动线程</span></span><br><span class="line">    rt_thread_startup(Sr04_thread);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印初始化信息</span></span><br><span class="line">    rt_kprintf(<span class="string">&quot;Sr04_Init Init successfully\r\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>问题是栈溢出，为什么？</p><p><img src="/2024/10/27/RTT/RTT%E9%97%AE%E9%A2%98%E5%90%88%E9%9B%86/QQ20241112-105259.png" alt="QQ20241112-105259"></p><p>你提到的代码：</p><p>这里的 <code>sizeof(Sr04_thread)</code> 作为栈大小是不合适的，这可能是导致栈溢出的原因。原因在于 <code>sizeof(Sr04_thread)</code> 实际上只返回指针的大小（通常是4字节或8字节），而不是实际的栈大小。</p><h3 id="修改建议："><a href="#修改建议：" class="headerlink" title="修改建议："></a>修改建议：</h3><p>为了避免栈溢出，应该提供合适的栈大小。可以使用已定义的 <code>THREAD_STACK_SIZE</code>。正确的代码如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">rt_thread_t</span> Sr04_thread = rt_thread_create(<span class="string">&quot;Sr04_thread&quot;</span>, sr04_thread_entry, RT_NULL, THREAD_STACK_SIZE, THREAD_PRIORITY, THREAD_TIMESLICE);</span><br></pre></td></tr></table></figure></p><p>在这个修订中，<code>THREAD_STACK_SIZE</code> 是一个定义好的宏，代表为线程分配的栈大小（这里为 <code>1024</code> 字节）。这个大小通常足够处理测距的逻辑操作，但具体需要根据你的程序栈空间的需求来调整。错误地使用 <code>sizeof(Sr04_thread)</code> 会导致为线程分配非常小的栈空间，从而引发栈溢出。</p><h3 id="详细解释"><a href="#详细解释" class="headerlink" title="详细解释"></a>详细解释</h3><ul><li><strong><code>sizeof(Sr04_thread)</code> 返回的只是指针大小</strong>：<code>rt_thread_t</code> 是指向线程对象的指针，而 <code>sizeof</code> 操作返回的仅仅是指针的大小（比如 4 或 8 字节），远远不足以作为线程的栈空间。</li><li><strong>使用 <code>THREAD_STACK_SIZE</code></strong>：在创建线程时，应该为栈提供足够的大小，以确保函数调用、局部变量等可以正确地分配到栈中。</li></ul><p>此外，检查以下几点来进一步避免栈溢出问题：</p><ol><li><strong>栈大小设置</strong>：如果 <code>1024</code> 字节的栈空间不足，可以适当地增加，例如 <code>2048</code> 或 <code>4096</code> 字节。</li><li><strong>栈消耗较多的操作</strong>：避免在线程中调用可能消耗大量栈的操作，比如递归调用或大量的局部变量分配。</li><li><strong>调试信息</strong>：可以通过增加调试日志来追踪线程的执行过程，或者启用 RT-Thread 的栈溢出检测功能（如果可用），以便更好地理解问题所在。</li></ol><p>总结来说，改用合适的栈大小而不是 <code>sizeof</code> 操作符来避免栈溢出问题，这将确保线程运行的稳定性。</p><h1 id="结构体对齐"><a href="#结构体对齐" class="headerlink" title="结构体对齐"></a>结构体对齐</h1><p>在您的代码中，宏 <code>ALIGN(RT_ALIGN_SIZE)</code> 出现在了两个线程的堆栈声明中，如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ALIGN(RT_ALIGN_SIZE)</span><br><span class="line"><span class="type">static</span> <span class="type">char</span> thread1_stack[<span class="number">1024</span>];</span><br><span class="line"><span class="type">static</span> <span class="type">char</span> thread2_stack[<span class="number">1024</span>];</span><br></pre></td></tr></table></figure><p><code>ALIGN</code> 宏用于确保这些堆栈在内存中的起始地址是按照某个边界对齐的，这个边界通常由 <code>RT_ALIGN_SIZE</code> 决定。这种对齐操作有助于提高 CPU 访问数据的效率。在这里，我将借助这段代码详细解释结构体和内存对齐的概念，以及它是如何提高系统效率的。</p><h3 id="1-什么是内存对齐？"><a href="#1-什么是内存对齐？" class="headerlink" title="1. 什么是内存对齐？"></a>1. <strong>什么是内存对齐？</strong></h3><p><strong>内存对齐</strong> 是指将数据存储在特定的内存地址边界上。现代处理器在读取内存中的数据时，通常效率最高的方式是以某些特定的地址对齐读取（如 4 字节、8 字节等）。内存对齐使得 CPU 在读取或写入数据时，能够更快地访问内存。</p><p>在您的代码中，堆栈是为线程分配的一段内存区域，<code>ALIGN(RT_ALIGN_SIZE)</code> 用于确保这段内存的起始地址对齐到特定的边界。比如 <code>RT_ALIGN_SIZE</code> 可能是 4 或 8，这就意味着内存地址必须是 4 或 8 的倍数。</p><h3 id="2-为什么需要内存对齐？"><a href="#2-为什么需要内存对齐？" class="headerlink" title="2. 为什么需要内存对齐？"></a>2. <strong>为什么需要内存对齐？</strong></h3><ul><li><p><strong>硬件限制</strong>：很多 CPU 要求访问内存时，数据的地址必须是字长（如 4 字节、8 字节）的倍数，否则访问需要多个指令来完成，造成额外的性能开销。<strong>例如，如果 4 字节数据没有对齐到 4 字节边界，那么读取该数据就可能需要两次内存读取操作。</strong></p></li><li><p><strong>缓存友好性</strong>：内存对齐有助于更好地利用 CPU 缓存，减少缓存的失效。<strong>当数据对齐时，CPU 能够更有效地加载和存储数据块，减少因缓存缺失造成的性能下降。</strong></p></li></ul><h3 id="3-结构体对齐和效率提高"><a href="#3-结构体对齐和效率提高" class="headerlink" title="3. 结构体对齐和效率提高"></a>3. <strong>结构体对齐和效率提高</strong></h3><p>假设您在一个线程中定义了一个数据结构，比如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">char</span> a;       <span class="comment">// 1 字节</span></span><br><span class="line">    <span class="type">int</span> b;        <span class="comment">// 4 字节</span></span><br><span class="line">    <span class="type">short</span> c;      <span class="comment">// 2 字节</span></span><br><span class="line">&#125; Example;</span><br></pre></td></tr></table></figure><ul><li>如果不进行内存对齐，这个结构体的内存分布可能是这样的：<ul><li><code>char a</code> 占用 1 字节。</li><li><code>int b</code> 由于其需要 4 字节对齐，它的地址会是一个 4 的倍数。这意味着在 <code>a</code> 之后，可能需要 3 字节的填充（padding）才能使 <code>b</code> 对齐到 4 字节的边界。</li><li><code>short c</code> 通常要求 2 字节对齐，可能会产生额外的填充字节。</li></ul></li></ul><p>对齐后的内存布局如下所示：</p><div class="table-container"><table><thead><tr><th>字段</th><th>大小 (字节)</th><th>偏移量 (字节)</th><th>备注</th></tr></thead><tbody><tr><td>a</td><td>1</td><td>0</td><td></td></tr><tr><td>填充</td><td>3</td><td>1-3</td><td>为对齐 <code>b</code></td></tr><tr><td>b</td><td>4</td><td>4-7</td><td>4 字节对齐</td></tr><tr><td>c</td><td>2</td><td>8-9</td><td>2 字节对齐</td></tr><tr><td>填充</td><td>2</td><td>10-11</td><td>结构体对齐</td></tr></tbody></table></div><ul><li><p><strong>未对齐</strong> 的情况下，访问字段 <code>b</code> 时可能需要额外的指令，因为 <code>b</code> 的内存可能跨越多个内存地址，而不是单个指令能一次性读取的区域。</p></li><li><p><strong>对齐后</strong>，每个字段的地址都是它所需要的对齐边界，因此读取和写入操作可以更有效地执行。这减少了处理器处理额外指令的时间，提高了代码执行的效率。</p></li></ul><h3 id="4-作用"><a href="#4-作用" class="headerlink" title="4. 作用"></a>4. <strong>作用</strong></h3><p><code>ALIGN(RT_ALIGN_SIZE)</code> 的使用确保了线程堆栈的起始地址是对齐的。具体来说：</p><ul><li><p><strong>线程堆栈</strong> 对齐到特定的内存边界（如 4 或 8 字节），可以确保 CPU 访问线程堆栈中的变量时，效率更高。尤其是对于嵌入式系统中的 RT-Thread 这样的实时操作系统，高效的堆栈访问对于响应速度至关重要。</p></li><li><p>如果没有对齐，线程堆栈可能在内存中是零散的，这会使得对栈上的局部变量访问时产生额外的内存访问开销，特别是当这些变量在指令中需要按块（如 4 字节）访问时。</p></li></ul><h3 id="5-对齐的宏-ALIGN-是如何提高效率的"><a href="#5-对齐的宏-ALIGN-是如何提高效率的" class="headerlink" title="5. 对齐的宏 ALIGN 是如何提高效率的"></a>5. <strong>对齐的宏 <code>ALIGN</code> 是如何提高效率的</strong></h3><p>对齐宏 <code>ALIGN</code> 的主要目的是确保分配的内存地址符合 CPU 最佳访问模式，通常是：</p><ul><li><p><strong>更少的 CPU 时钟周期</strong>：数据对齐可以使得处理器在读取或写入内存时减少所需的时钟周期，因为它可以一次性读取数据块，而无需分成两次访问。</p></li><li><p><strong>提高缓存命中率</strong>：当内存中的数据被正确对齐时，处理器读取的缓存行更有可能完整地包含所需数据，从而减少缓存失效。</p></li></ul><p>通过使用 <code>ALIGN(RT_ALIGN_SIZE)</code>，可以确保：</p><ul><li><p><strong>堆栈起始地址是对齐的</strong>，这样堆栈上的变量访问更有效，避免了未对齐的访问引起的性能损失。</p></li><li><p><strong>结构体和数据访问更快</strong>，从而提高整个系统的实时响应能力，这对于 RT-Thread 这样的实时操作系统至关重要。</p></li></ul><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>在您的代码中使用 <code>ALIGN(RT_ALIGN_SIZE)</code> 的目的是确保线程堆栈的地址对齐到一个特定的边界，这样做的好处是：</p><ul><li><strong>提高 CPU 访问内存的效率</strong>，因为对齐内存使得 CPU 访问时只需单次操作而不是多次分段操作。</li><li><strong>减少内存访问的额外开销</strong>，尤其是在读取和写入未对齐的数据时避免额外的指令和时钟周期的浪费。</li><li><strong>提高代码的执行速度</strong>，尤其是需要频繁访问堆栈中的局部变量和其他数据的场景。</li></ul><p>这对于实时系统中的调度和响应时间来说尤为重要，因此在 RT-Thread 这样的嵌入式系统中，内存对齐是一个非常关键的优化手段。</p><h1 id="邮箱"><a href="#邮箱" class="headerlink" title="邮箱"></a>邮箱</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">rt_thread_t</span> th1_ptr, th2_ptr;</span><br><span class="line"><span class="type">rt_mailbox_t</span> mb_ptr;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> str1[]=<span class="string">&quot;12345&quot;</span>;</span><br><span class="line"><span class="type">char</span> str2[]=<span class="string">&quot;67890&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">th1_recv</span><span class="params">(<span class="type">void</span> *parameter)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">rt_err_t</span> ret;</span><br><span class="line">    <span class="type">char</span>* Recv;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ret = rt_mb_recv(mb_ptr, (<span class="type">rt_ubase_t</span>*)&amp;Recv, RT_WAITING_FOREVER);</span><br><span class="line">        <span class="keyword">if</span>(ret == RT_EOK)</span><br><span class="line">        &#123;</span><br><span class="line">            rt_kprintf(<span class="string">&quot;rt_mb_recv is %s!\r\n&quot;</span> ,Recv);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            LOG_E(<span class="string">&quot;mb rt_mb_recv failed!\r\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        rt_thread_mdelay(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">th2_send</span><span class="params">(<span class="type">void</span> *parameter)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">rt_err_t</span> ret;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ret = rt_mb_send(mb_ptr,(<span class="type">rt_ubase_t</span>)str1);</span><br><span class="line">        <span class="keyword">if</span>(ret != RT_EOK)</span><br><span class="line">        &#123;</span><br><span class="line">            LOG_E(<span class="string">&quot;mb rt_mb_send failed!\r\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        rt_thread_mdelay(<span class="number">1000</span>);</span><br><span class="line">        ret = rt_mb_send(mb_ptr,(<span class="type">rt_ubase_t</span>)str2);</span><br><span class="line">        <span class="keyword">if</span>(ret != RT_EOK)</span><br><span class="line">        &#123;</span><br><span class="line">            LOG_E(<span class="string">&quot;mb rt_mb_send failed!\r\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        rt_thread_mdelay(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    mb_ptr = rt_mb_create(<span class="string">&quot;mb_ptr&quot;</span>, <span class="number">4</span>, RT_IPC_FLAG_FIFO);<span class="comment">// 四封邮件</span></span><br><span class="line">    <span class="keyword">if</span>(mb_ptr == RT_NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        LOG_E(<span class="string">&quot;mb_ptr rt_mb_create failed!\r\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    th1_ptr = rt_thread_create(<span class="string">&quot;th1&quot;</span>, th1_recv, <span class="literal">NULL</span>, <span class="number">1024</span>, <span class="number">7</span>, <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">if</span>(th1_ptr == RT_NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        LOG_E(<span class="string">&quot;th1_recv rt_thread_create failed!\r\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> -RT_ENOMEM;</span><br><span class="line">    &#125;</span><br><span class="line">    rt_thread_startup(th1_ptr);</span><br><span class="line"></span><br><span class="line">    th2_ptr = rt_thread_create(<span class="string">&quot;th2&quot;</span>, th2_send, <span class="literal">NULL</span>, <span class="number">1024</span>, <span class="number">8</span>, <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">if</span>(th2_ptr == RT_NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        LOG_E(<span class="string">&quot;th2_send rt_thread_create failed!\r\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> -RT_ENOMEM;</span><br><span class="line">    &#125;</span><br><span class="line">    rt_thread_startup(th2_ptr);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> RT_EOK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为什么定义的邮箱容量为 4，但可以发送五个字节的数据而没有报错。</p><h3 id="1-邮箱-Mailbox-的工作机制"><a href="#1-邮箱-Mailbox-的工作机制" class="headerlink" title="1. 邮箱 (Mailbox) 的工作机制"></a>1. <strong>邮箱 (<code>Mailbox</code>) 的工作机制</strong></h3><p>在 RT-Thread 中，<strong>邮箱 (<code>Mailbox</code>)</strong> 是一种用于线程间通信的同步机制，类似于其他 RTOS 中的消息队列。<strong>邮箱并不是直接存储数据，而是存储指针</strong>。换句话说，邮箱中保存的是内存中数据的地址（指针），而不是数据本身的内容。</p><ul><li><p><strong>邮箱容量</strong>：</p><ul><li>您创建了一个邮箱，其容量为 <strong>4</strong>：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mb_ptr = rt_mb_create(<span class="string">&quot;mb_ptr&quot;</span>, <span class="number">4</span>, RT_IPC_FLAG_FIFO);</span><br></pre></td></tr></table></figure>这表示这个邮箱最多可以存储 <strong>4 个指针</strong>，即最多可以存放 <strong>4 个消息地址</strong>。</li></ul></li><li><p><strong>数据的传递方式</strong>：</p><ul><li>在您代码中，通过 <code>rt_mb_send(mb_ptr, (rt_ubase_t)str1)</code> 将字符串 <code>str1</code> 的地址发送到邮箱中。</li><li><strong>邮箱并不关心字符串的长度</strong>，因为它只存储了字符串的地址（指针）。这个地址是一个固定大小的数据（通常是 4 或 8 字节，取决于系统的字长），与字符串长度无关。</li></ul></li></ul><h3 id="2-邮箱存储的是指针"><a href="#2-邮箱存储的是指针" class="headerlink" title="2. 邮箱存储的是指针"></a>2. <strong>邮箱存储的是指针</strong></h3><ul><li><strong>存储指针</strong>：当调用 <code>rt_mb_send(mb_ptr, (rt_ubase_t)str1)</code> 时，您发送的是指针 <code>str1</code>，这个指针指向字符串 <code>&quot;12345&quot;</code> 的首地址。</li><li><strong>邮箱容量的含义</strong>：定义邮箱容量为 <code>4</code>，并不意味着可以存储 <code>4 个字节</code>，而是说<strong>邮箱可以存储 4 个指针</strong>。<ul><li>每次调用 <code>rt_mb_send</code>，邮箱会存储这个消息的指针，并将其传递给接收方。</li></ul></li></ul><h3 id="3-具体解释您的代码"><a href="#3-具体解释您的代码" class="headerlink" title="3. 具体解释您的代码"></a>3. <strong>具体解释您的代码</strong></h3><ul><li><p>您的代码中，线程 <code>th2_send</code> 向邮箱发送两次字符串地址：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ret = rt_mb_send(mb_ptr, (<span class="type">rt_ubase_t</span>)str1);</span><br><span class="line">ret = rt_mb_send(mb_ptr, (<span class="type">rt_ubase_t</span>)str2);</span><br></pre></td></tr></table></figure><ul><li><strong><code>str1</code></strong> 的内容是 <code>&quot;12345&quot;</code>，<strong>5 个字节</strong>，但发送给邮箱的是指向这个字符串的 <strong>地址</strong>。</li><li><strong><code>str2</code></strong> 的内容是 <code>&quot;67890&quot;</code>，也是 <strong>5 个字节</strong>，同样发送的是这个字符串的 <strong>地址</strong>。</li></ul></li><li><p><strong>邮箱的容量是 <code>4</code></strong>：</p><ul><li>这表示邮箱可以存储 <strong>4 个指针</strong>。每个指针的大小通常是 <strong>4 字节</strong>（在 32 位系统中）或者 <strong>8 字节</strong>（在 64 位系统中），与指针所指向的数据大小无关。</li><li>因此，尽管您的字符串 <code>str1</code> 和 <code>str2</code> 各有 <strong>5 个字节</strong>，邮箱中只是保存了它们的 <strong>首地址</strong>，并不是直接保存字符串的内容。</li><li>由于您只发送了两次数据，邮箱并未达到其存储指针的上限（容量为 4），所以不会报错。</li></ul></li></ul><h3 id="4-关于发送的数据量与邮箱容量"><a href="#4-关于发送的数据量与邮箱容量" class="headerlink" title="4. 关于发送的数据量与邮箱容量"></a>4. <strong>关于发送的数据量与邮箱容量</strong></h3><ul><li><strong>邮箱容量</strong>：邮箱容量表示能存储的消息数（指针个数），而不是每条消息的数据量。因此，即使每条消息的数据量不同，邮箱只关心存储的指针的数量。</li><li><strong>发送 5 个字节没有报错</strong>：<ul><li>由于邮箱只存储指针，而不是字符串内容本身，邮箱的容量与字符串的大小无关。因此可以发送任意长度的数据，只要邮箱中有足够的空间（定义的缓冲区足够大）存储指针即可。</li><li>在您的代码中，<code>str1</code> 和 <code>str2</code> 分别是 5 字节的字符串，但发送到邮箱的内容只是它们的内存地址，而这些地址是 <strong>固定长度的指针</strong>。</li></ul></li></ul><h3 id="5-接收数据"><a href="#5-接收数据" class="headerlink" title="5. 接收数据"></a>5. <strong>接收数据</strong></h3><ul><li>在 <code>th1_recv</code> 线程中，使用 <code>rt_mb_recv(mb_ptr, (rt_ubase_t*)&amp;Recv, RT_WAITING_FOREVER)</code> 接收来自邮箱的消息。<ul><li><strong><code>Recv</code></strong> 是一个指针，用于保存从邮箱接收到的指针值。</li><li>接收到指针之后，使用 <code>rt_kprintf(&quot;rt_mb_recv is %s!\r\n&quot; ,Recv);</code> 打印字符串内容，这样可以打印出 <code>str1</code> 或 <code>str2</code> 的内容。</li></ul></li></ul><h3 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. <strong>总结</strong></h3><ul><li><strong>邮箱的容量 <code>4</code> 表示它能存储 4 个指针</strong>，即可以存储 4 个消息的地址，而不是指向数据的大小。消息内容的实际长度无关紧要，因为邮箱只存储指向消息的指针。</li><li><strong>每次发送的是字符串的地址</strong>，而不是字符串本身。因此，无论字符串是 <code>&quot;12345&quot;</code> 还是更长的字符串，只要邮箱中有足够的空间来存储指针，就不会报错。</li><li>这就是为什么定义的邮箱容量为 <code>4</code>，但可以发送指向长度为 5 字节（或更大）的数据指针的原因。邮箱中只关心存储多少个消息的地址，而不关心数据的实际长度。</li></ul><p>希望这个解释能帮助您更好地理解 RT-Thread 中的邮箱机制以及为什么发送 5 个字节的字符串并不会受到邮箱容量限制的原因。</p><h1 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h1><h2 id="问题一：内存分配错误"><a href="#问题一：内存分配错误" class="headerlink" title="问题一：内存分配错误"></a>问题一：内存分配错误</h2><p>如图：</p><p><img src="/2024/10/27/RTT/RTT%E9%97%AE%E9%A2%98%E5%90%88%E9%9B%86/QQ20241028-204753.png" alt="QQ20241028-204753"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">rt_thread_t</span> th1_ptr, th2_ptr;</span><br><span class="line"><span class="type">rt_mq_t</span> mq_ptr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">msg</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> Recv_ptr[<span class="number">100</span>];<span class="comment">//////////////</span></span><br><span class="line">    <span class="type">uint16_t</span> Recv_ptr_len;</span><br><span class="line">&#125;<span class="type">msg_t</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> str1[]=<span class="string">&quot;12345678&quot;</span>;</span><br><span class="line"><span class="type">char</span> str2[]=<span class="string">&quot;67890&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">th1_recv</span><span class="params">(<span class="type">void</span> *parameter)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">rt_err_t</span> ret;</span><br><span class="line">    <span class="type">msg_t</span> Msg_Info;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ret = rt_mq_recv(mq_ptr, &amp;Msg_Info, <span class="keyword">sizeof</span>(<span class="type">msg_t</span>), RT_WAITING_FOREVER);</span><br><span class="line">        <span class="keyword">if</span>(ret &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            rt_kprintf(<span class="string">&quot;rt_mq_recv is %s the len is %d!\r\n&quot;</span> ,Msg_Info.Recv_ptr,Msg_Info.Recv_ptr_len);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            LOG_E(<span class="string">&quot;mq rt_mq_recv failed!\r\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">th2_send</span><span class="params">(<span class="type">void</span> *parameter)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">rt_err_t</span> ret;</span><br><span class="line">    <span class="type">msg_t</span> Msg_Info;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">strcpy</span>(Msg_Info.Recv_ptr, str1);</span><br><span class="line">        Msg_Info.Recv_ptr_len = <span class="built_in">strlen</span>(Msg_Info.Recv_ptr);</span><br><span class="line"></span><br><span class="line">        ret = rt_mq_send(mq_ptr, &amp;Msg_Info, <span class="keyword">sizeof</span>(<span class="type">msg_t</span>));</span><br><span class="line">        <span class="keyword">if</span>(ret != RT_EOK)</span><br><span class="line">        &#123;</span><br><span class="line">            LOG_E(<span class="string">&quot;mq_ptr rt_mq_send failed!\r\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        rt_thread_mdelay(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">strcpy</span>(Msg_Info.Recv_ptr, str2);</span><br><span class="line">        Msg_Info.Recv_ptr_len = <span class="built_in">strlen</span>(Msg_Info.Recv_ptr);</span><br><span class="line">        ret = rt_mq_send(mq_ptr, &amp;Msg_Info, <span class="keyword">sizeof</span>(<span class="type">msg_t</span>));</span><br><span class="line">        <span class="keyword">if</span>(ret != RT_EOK)</span><br><span class="line">        &#123;</span><br><span class="line">            LOG_E(<span class="string">&quot;mq_ptr rt_mq_send failed!\r\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        rt_thread_mdelay(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    mq_ptr = rt_mq_create(<span class="string">&quot;mq_ptr&quot;</span>, (<span class="type">rt_size_t</span>)<span class="keyword">sizeof</span>(<span class="type">msg_t</span>), (<span class="type">rt_size_t</span>)<span class="number">4</span>, RT_IPC_FLAG_FIFO);</span><br><span class="line">    <span class="keyword">if</span>(mq_ptr == RT_NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        LOG_E(<span class="string">&quot;mq_ptr rt_mq_create failed!\r\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    th1_ptr = rt_thread_create(<span class="string">&quot;th1&quot;</span>, th1_recv, <span class="literal">NULL</span>, <span class="number">1024</span>, <span class="number">7</span>, <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">if</span>(th1_ptr == RT_NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        LOG_E(<span class="string">&quot;th1_recv rt_thread_create failed!\r\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> -RT_ENOMEM;</span><br><span class="line">    &#125;</span><br><span class="line">    rt_thread_startup(th1_ptr);</span><br><span class="line"></span><br><span class="line">    th2_ptr = rt_thread_create(<span class="string">&quot;th2&quot;</span>, th2_send, <span class="literal">NULL</span>, <span class="number">1024</span>, <span class="number">8</span>, <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">if</span>(th2_ptr == RT_NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        LOG_E(<span class="string">&quot;th2_send rt_thread_create failed!\r\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> -RT_ENOMEM;</span><br><span class="line">    &#125;</span><br><span class="line">    rt_thread_startup(th2_ptr);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> RT_EOK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>为什么把 char Recv_ptr[100]换成 char* Recv_ptr，就有问题。</strong></p><p>你不在定义的时候初始化就意味着没有分配内存，下次要存入字符串需要动态申请内存才可。</p><p>根据你的描述和提供的图片，问题出在你将结构体 <code>msg_t</code> 中的 <code>char Recv_ptr[100]</code> 改为 <code>char* Recv_ptr</code> 时。这很可能导致了访问违规，这是由于内存分配不正确，而不一定是栈溢出问题。</p><h3 id="关键区别："><a href="#关键区别：" class="headerlink" title="关键区别："></a>关键区别：</h3><ol><li><p><strong><code>char Recv_ptr[100]</code>:</strong><br>当你在结构体中将 <code>Recv_ptr</code> 定义为固定大小的数组时，数组的内存会随着结构体实例一起分配。这意味着每次创建 <code>msg_t</code> 的实例时，都会为 <code>Recv_ptr</code> 分配空间。这种方式较为安全，因为缓冲区的内存是自动分配的。</p></li><li><p><strong><code>char* Recv_ptr</code>:</strong><br>当你将 <code>Recv_ptr</code> 改为指针时，它只保存一个字符数组的地址，但你<strong>必须负责为 <code>Recv_ptr</code> 指向的数据分配内存</strong>。如果你没有明确分配内存（例如，使用 <code>malloc</code> 或静态分配），那么在用 <code>strcpy</code> 复制数据到 <code>Recv_ptr</code> 时就会出现问题。这可能会导致未定义行为、程序崩溃或类似你看到的错误。</p></li></ol><h3 id="你图片中的错误："><a href="#你图片中的错误：" class="headerlink" title="你图片中的错误："></a>你图片中的错误：</h3><ul><li><code>IMPRECISERR</code> 表示发生了不精确的总线错误，通常是由于非法的内存访问引发的。此类错误通常发生在指针没有正确初始化或指向了无效的内存时（例如，如果你尝试用 <code>strcpy</code> 向未分配内存的指针写入数据）。</li></ul><h3 id="建议："><a href="#建议：" class="headerlink" title="建议："></a>建议：</h3><ol><li><p><strong>内存分配</strong>：<br>如果你想使用 <code>char* Recv_ptr</code>，你必须动态分配内存。在 <code>th2_send</code> 中使用 <code>Recv_ptr</code> 之前，你需要像这样分配内存：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Msg_Info.Recv_ptr = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">100</span> * <span class="keyword">sizeof</span>(<span class="type">char</span>));  <span class="comment">// 分配内存</span></span><br><span class="line"><span class="keyword">if</span> (Msg_Info.Recv_ptr == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">    LOG_E(<span class="string">&quot;内存分配失败！\r\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;  <span class="comment">// 适当处理错误</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用完内存后，还要确保释放内存，否则会导致内存泄漏：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">free</span>(Msg_Info.Recv_ptr);</span><br></pre></td></tr></table></figure></li><li><p><strong>另一种方法（保持数组）</strong>：<br>如果你不想处理手动内存管理，可以继续使用 <code>Recv_ptr[100]</code> 作为数组。这样，内存会自动随结构体分配，减少类似问题的出现几率。</p></li></ol><h3 id="结论："><a href="#结论：" class="headerlink" title="结论："></a>结论：</h3><p>你在图片中看到的错误是由于内存访问违规引发的总线错误（IMPRECISERR），而不是栈溢出问题。根本原因是你将数组改为指针，但没有为指针分配内存。你可以选择手动管理内存（使用 <code>malloc/free</code>），或者恢复使用更安全的 <code>char Recv_ptr[100]</code> 数组版本。</p><h1 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h1><h2 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h2><p>如图：</p><p><img src="/2024/10/27/RTT/RTT%E9%97%AE%E9%A2%98%E5%90%88%E9%9B%86/QQ20241029-190812.png" alt="QQ20241029-190812"></p><p>在这段代码中，定时器被创建为一个周期性、软定时器，初始超时时间为100个tick。定时器的回调函数<code>timer_callback</code>会打印当前的tick计数（<code>rt_tick_get()</code>）。</p><p>代码可能在2020这个tick值处停止并无法继续的原因如下：</p><ol><li><p><strong>定时器控制函数（<code>rt_timer_control</code>）</strong>：你使用<code>rt_timer_control</code>将超时时间设置为2000个tick。然而，这一行代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RT_ASSERT((*(<span class="type">rt_tick_t</span> *)arg) &lt; RT_TICK_MAX / <span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>是一个安全检查。此断言确保设置的超时时间不超过<code>RT_TICK_MAX / 2</code>，因为如果值太大，可能会导致定时器计算出现溢出或意外行为。例如，如果<code>RT_TICK_MAX</code>为4096，那么<code>RT_TICK_MAX / 2</code>就是2048，这意味着超时时间不能超过此限制。</p></li><li><p><strong>断言的作用</strong>：这个断言是为了防止系统接受接近<code>RT_TICK_MAX</code>的超时时间值，这样做可以避免tick计数器溢出或环绕带来的不可预测结果。通过将定时间隔限制在一个安全阈值内（小于<code>RT_TICK_MAX</code>的一半），可以避免这些问题。</p></li><li><p><strong>停止在2020的原因</strong>：当你尝试将定时间隔设置为2000个tick时，这可能会接近或超过tick计数器的最大容量，尤其是在<code>RT_TICK_MAX</code>不比2020大很多的情况下。如果达到<code>RT_TICK_MAX</code>，tick计数器可能会环绕或根据系统内部限制停止递增，从而导致程序在2020处停滞。</p></li></ol><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>检查系统的<code>RT_TICK_MAX</code>值，确保定时器的超时时间（2000个tick）远小于<code>RT_TICK_MAX / 2</code>。如果有必要，可以在<code>rt_timer_control</code>函数中减少超时时间，以避免触发该断言。</p><h1 id="互斥量"><a href="#互斥量" class="headerlink" title="互斥量"></a>互斥量</h1><h2 id="问题一-1"><a href="#问题一-1" class="headerlink" title="问题一"></a>问题一</h2><p><strong><code>rt_mutex_take</code></strong>为啥会出现断言错误？</p><p>这个错误说明在中断服务例程（ISR）中调用了<code>_rt_mutex_take</code>函数，而在RT-Thread中，<strong>不允许在中断上下文中使用互斥量</strong>。这是因为互斥量的实现通常依赖于线程调度，<code>而中断上下文中不允许进行线程调度操作</code>。因此，尝试在ISR中使用互斥量时，会触发断言失败，从而导致报错。</p><h3 id="为什么不能在中断中使用互斥量？"><a href="#为什么不能在中断中使用互斥量？" class="headerlink" title="为什么不能在中断中使用互斥量？"></a>为什么不能在中断中使用互斥量？</h3><ol><li><strong>线程调度限制</strong>：互斥量的实现通常需要支持阻塞等待（比如线程进入等待队列），这是在中断上下文中不能做的操作，因为中断不支持线程切换。</li><li><strong>中断实时性</strong>：中断服务例程的设计应尽量简短、快速完成，以保证系统的实时性。互斥量的使用可能导致在ISR中长时间等待资源，影响系统性能。</li></ol><h3 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h3><p>如果在中断服务例程中需要保护共享资源，可以采用其他适用于中断环境的同步机制，例如<strong>信号量</strong>或<strong>禁用中断</strong>。</p><p>以下是几种可替代的方法：</p><h4 id="方法-1：使用信号量"><a href="#方法-1：使用信号量" class="headerlink" title="方法 1：使用信号量"></a>方法 1：使用信号量</h4><p>如果你的需求只是通知某个线程去处理资源，而不需要在ISR中直接访问互斥量，可以使用信号量来实现异步通知。</p><ul><li>在ISR中发送信号量，通知后台线程去处理资源。</li><li>后台线程等待信号量并在获取到信号量后，再使用互斥量去访问共享资源。</li></ul><p>示例代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;rtthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建互斥量</span></span><br><span class="line"><span class="type">static</span> <span class="type">rt_mutex_t</span> serial2_mutex = RT_NULL;</span><br><span class="line"><span class="type">static</span> <span class="type">rt_mutex_t</span> serial3_mutex = RT_NULL;</span><br><span class="line"><span class="type">static</span> <span class="type">rt_mutex_t</span> face_flag_mutex = RT_NULL;</span><br><span class="line"><span class="type">static</span> <span class="type">rt_mutex_t</span> temp_mutex = RT_NULL;</span><br><span class="line"><span class="type">static</span> <span class="type">rt_mutex_t</span> dist_mutex = RT_NULL;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Mutex_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    serial2_mutex = rt_mutex_create(<span class="string">&quot;serial2_mutex&quot;</span>, RT_IPC_FLAG_FIFO);</span><br><span class="line">    serial3_mutex = rt_mutex_create(<span class="string">&quot;serial3_mutex&quot;</span>, RT_IPC_FLAG_FIFO);</span><br><span class="line">    face_flag_mutex = rt_mutex_create(<span class="string">&quot;face_flag_mutex&quot;</span>, RT_IPC_FLAG_FIFO);</span><br><span class="line">    temp_mutex = rt_mutex_create(<span class="string">&quot;temp_mutex&quot;</span>, RT_IPC_FLAG_FIFO);</span><br><span class="line">    dist_mutex = rt_mutex_create(<span class="string">&quot;dist_mutex&quot;</span>, RT_IPC_FLAG_FIFO);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (serial2_mutex == RT_NULL || serial3_mutex == RT_NULL ||</span><br><span class="line">        face_flag_mutex == RT_NULL || temp_mutex == RT_NULL || dist_mutex == RT_NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        rt_kprintf(<span class="string">&quot;Failed to create one or more mutexes!\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 串口写操作示例</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">write_to_serial2</span><span class="params">(<span class="type">const</span> <span class="type">uint8_t</span> *data, <span class="type">size_t</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">    rt_mutex_take(serial2_mutex, RT_WAITING_FOREVER); <span class="comment">// 加锁</span></span><br><span class="line">    rt_device_write(Serial2, <span class="number">0</span>, data, size);</span><br><span class="line">    rt_mutex_release(serial2_mutex); <span class="comment">// 解锁</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问 faceCheckFlag 的示例</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">set_face_check_flag</span><span class="params">(<span class="type">uint8_t</span> value)</span></span><br><span class="line">&#123;</span><br><span class="line">    rt_mutex_take(face_flag_mutex, RT_WAITING_FOREVER); <span class="comment">// 加锁</span></span><br><span class="line">    faceCheckFlag = value;</span><br><span class="line">    rt_mutex_release(face_flag_mutex); <span class="comment">// 解锁</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">get_face_check_flag</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint8_t</span> value;</span><br><span class="line">    rt_mutex_take(face_flag_mutex, RT_WAITING_FOREVER); <span class="comment">// 加锁</span></span><br><span class="line">    value = faceCheckFlag;</span><br><span class="line">    rt_mutex_release(face_flag_mutex); <span class="comment">// 解锁</span></span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问 temp 的示例</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">set_temp</span><span class="params">(<span class="type">float</span> value)</span></span><br><span class="line">&#123;</span><br><span class="line">    rt_mutex_take(temp_mutex, RT_WAITING_FOREVER); <span class="comment">// 加锁</span></span><br><span class="line">    temp = value;</span><br><span class="line">    rt_mutex_release(temp_mutex); <span class="comment">// 解锁</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">float</span> <span class="title function_">get_temp</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">float</span> value;</span><br><span class="line">    rt_mutex_take(temp_mutex, RT_WAITING_FOREVER); <span class="comment">// 加锁</span></span><br><span class="line">    value = temp;</span><br><span class="line">    rt_mutex_release(temp_mutex); <span class="comment">// 解锁</span></span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问 Dist 的示例</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">set_dist</span><span class="params">(<span class="type">rt_uint32_t</span> value)</span></span><br><span class="line">&#123;</span><br><span class="line">    rt_mutex_take(dist_mutex, RT_WAITING_FOREVER); <span class="comment">// 加锁</span></span><br><span class="line">    Dist = value;</span><br><span class="line">    rt_mutex_release(dist_mutex); <span class="comment">// 解锁</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">rt_uint32_t</span> <span class="title function_">get_dist</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">rt_uint32_t</span> value;</span><br><span class="line">    rt_mutex_take(dist_mutex, RT_WAITING_FOREVER); <span class="comment">// 加锁</span></span><br><span class="line">    value = Dist;</span><br><span class="line">    rt_mutex_release(dist_mutex); <span class="comment">// 解锁</span></span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方法-2：禁用中断"><a href="#方法-2：禁用中断" class="headerlink" title="方法 2：禁用中断"></a>方法 2：禁用中断</h4><p>在一些实时要求不高的情况下，也可以在进入临界区时短暂禁用中断，从而保护共享资源。</p><p>示例代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">access_shared_resource_in_isr_safe</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">rt_base_t</span> level = rt_hw_interrupt_disable();  <span class="comment">// 禁用中断</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 访问共享资源</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    rt_hw_interrupt_enable(level);  <span class="comment">// 恢复中断</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><ul><li><strong>在ISR中不要使用互斥量</strong>。使用信号量通知后台线程完成任务或临时禁用中断可以替代互斥量。</li><li><strong>使用信号量</strong>适用于需要线程响应的情况；<strong>禁用中断</strong>适用于快速完成资源访问的情况。</li></ul><p>通过这样处理，你可以避免断言失败的错误，同时确保系统的安全性和稳定性。</p><h1 id="延时函数的使用"><a href="#延时函数的使用" class="headerlink" title="延时函数的使用"></a>延时函数的使用</h1><h2 id="问题一-2"><a href="#问题一-2" class="headerlink" title="问题一"></a>问题一</h2><p>虽然打印出<strong>Thread_Uart2 created successfully and started</strong>.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">UART2_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">rt_err_t</span> ret = RT_EOK;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化环形缓冲区</span></span><br><span class="line">    rt_ringbuffer_init(&amp;rxRingBuffer, rxBuffer, UART_BUFFER_SIZE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建接收信号量</span></span><br><span class="line">    rxUart2Sem = rt_sem_create(<span class="string">&quot;rxUart2Sem&quot;</span>, <span class="number">0</span>, RT_IPC_FLAG_FIFO);</span><br><span class="line">    <span class="keyword">if</span> (rxUart2Sem == RT_NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        rt_kprintf(<span class="string">&quot;rxUart2Sem rt_sem_create failed!\r\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ret = RT_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查找系统中的串口二设备</span></span><br><span class="line">    Serial2 = rt_device_find(SAMPLE_UART2_NAME);</span><br><span class="line">    <span class="keyword">if</span> (Serial2 == RT_NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        rt_kprintf(<span class="string">&quot;find %s failed!\r\n&quot;</span>, SAMPLE_UART2_NAME);</span><br><span class="line">        <span class="keyword">return</span> ret = RT_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 以中断接收及轮询发送模式打开串口设备</span></span><br><span class="line">    rt_device_open(Serial2, RT_DEVICE_FLAG_INT_RX);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置接收回调函数</span></span><br><span class="line">    rt_device_set_rx_indicate(Serial2, UART2_Input);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建线程Thread_Uart2</span></span><br><span class="line">    <span class="type">rt_thread_t</span> Thread_Uart2 = rt_thread_create(<span class="string">&quot;Thread_Uart2&quot;</span>, Thread_Uart2_Entry, RT_NULL, <span class="number">2048</span>, <span class="number">25</span>, <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">if</span> (Thread_Uart2 == RT_NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        rt_kprintf(<span class="string">&quot;Thread_Uart2 is created failed!\r\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ret = RT_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (Thread_Uart2 == RT_NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        rt_kprintf(<span class="string">&quot;Thread_Uart2 creation failed!\r\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        rt_kprintf(<span class="string">&quot;Thread_Uart2 created successfully and started.\r\n&quot;</span>);</span><br><span class="line">        rt_thread_startup(Thread_Uart2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 打印初始化信息</span></span><br><span class="line">    rt_kprintf(<span class="string">&quot;UART2 Init successfully\r\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>表示线程调度开始，但是主函数没有延时函数，线程也没办法运行，因为把打印放线程函数最前面，也没办法打印1，所以到底是什么问题？</p><p>从你的描述来看，尽管 <code>Thread_Uart2</code> 线程已经成功创建和启动，但在主函数没有延时的情况下，<code>Thread_Uart2</code> 仍然无法运行，这表明主线程可能在某种程度上“阻塞”了其他线程的执行。这种情况可能是由以下原因导致的：</p><h3 id="1-主线程优先级较高，导致-Thread-Uart2-得不到执行"><a href="#1-主线程优先级较高，导致-Thread-Uart2-得不到执行" class="headerlink" title="1. 主线程优先级较高，导致 Thread_Uart2 得不到执行"></a>1. 主线程优先级较高，导致 <code>Thread_Uart2</code> 得不到执行</h3><ul><li>在 RT-Thread 或类似的实时操作系统中，如果主线程的优先级高于其他线程，并且没有延时，主线程会一直占用 CPU 时间，导致优先级较低的 <code>Thread_Uart2</code> 没有机会执行。</li><li><strong>解决方法</strong>：尝试将 <code>Thread_Uart2</code> 的优先级设置得比主线程高，确保 <code>Thread_Uart2</code> 能够抢占主线程的执行，具体代码如下：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">rt_thread_t</span> Thread_Uart2 = rt_thread_create(<span class="string">&quot;Thread_Uart2&quot;</span>, Thread_Uart2_Entry, RT_NULL, <span class="number">2048</span>, <span class="number">10</span>, <span class="number">10</span>);</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-主线程处于忙等待状态"><a href="#2-主线程处于忙等待状态" class="headerlink" title="2. 主线程处于忙等待状态"></a>2. 主线程处于忙等待状态</h3><ul><li>如果主线程没有延时函数，并且处于一个忙等待的循环中，那么主线程会不断消耗 CPU 时间，即使它的优先级不高，也会挤占系统资源，导致其他线程难以获得执行机会。</li><li><strong>解决方法</strong>：确保主线程中至少有一个适当的延时调用（例如 <code>rt_thread_mdelay(100)</code>），这样可以让出 CPU 给其他线程。</li></ul><h3 id="3-主线程设置的优先级较低，但被无限占用"><a href="#3-主线程设置的优先级较低，但被无限占用" class="headerlink" title="3. 主线程设置的优先级较低，但被无限占用"></a>3. 主线程设置的优先级较低，但被无限占用</h3><ul><li>如果主线程的优先级较低，但它在一个忙等待的循环中（例如一直在调用某个操作而没有任何延时），尽管其他线程优先级更高，调度器仍然可能在某些情况下无法及时切换到 <code>Thread_Uart2</code>。</li><li><strong>解决方法</strong>：将主线程的逻辑设计成非阻塞模式，或者确保有足够的时间片供高优先级线程运行。</li></ul><h3 id="调试方法"><a href="#调试方法" class="headerlink" title="调试方法"></a>调试方法</h3><p>为了进一步确认问题，你可以在 <code>main()</code> 中进行如下测试：</p><ol><li><strong>将主线程优先级设置为更低的值</strong>，确保 <code>Thread_Uart2</code> 的优先级高于主线程。</li><li><strong>在主线程中添加延时</strong>，测试一下是否会影响 <code>Thread_Uart2</code> 的执行。</li></ol><p>这两条经验证都是可以的！！！！！</p><p><strong>主线程是主函数的while（1）吗？</strong></p><p>是的，通常在嵌入式系统中，<strong>主函数中的 <code>while(1)</code> 循环</strong>可以被看作是主线程的执行体。当主函数进入 <code>while(1)</code> 循环后，它就会不断地执行循环体内的代码，这被视为主线程的持续运行。</p><p>如果主函数中的 <code>while(1)</code> 循环没有任何延时或者其他阻塞操作，主线程将会持续占用 CPU 时间，这会影响系统对其他线程的调度。由于 RT-Thread 是一个实时操作系统，线程调度是基于优先级和时间片的。如果主线程占用了太多的 CPU 时间，其他优先级相对较低或者相同优先级的线程就很难得到执行机会。</p><h3 id="如何优化主函数中的-while-1-循环"><a href="#如何优化主函数中的-while-1-循环" class="headerlink" title="如何优化主函数中的 while(1) 循环"></a>如何优化主函数中的 <code>while(1)</code> 循环</h3><p>为了避免主线程占用过多的 CPU 时间，你可以在 <code>while(1)</code> 循环中添加一些延时或者其他释放 CPU 的操作，例如：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 主线程的主要任务</span></span><br><span class="line">    tempProc();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 让出 CPU，给其他线程执行的机会</span></span><br><span class="line">    rt_thread_mdelay(<span class="number">100</span>);  <span class="comment">// 延时 100 毫秒</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h3><p>如果没有延时，主线程的 <code>while(1)</code> 循环将会不断运行，占用 CPU 资源，影响到其他线程（例如你的串口接收线程）得到执行的机会。在主函数中添加 <code>rt_thread_mdelay(100)</code> 延时后，CPU 会被释放一段时间，系统能够调度其他线程正常运行。</p><h1 id="PWM初始化"><a href="#PWM初始化" class="headerlink" title="PWM初始化"></a>PWM初始化</h1><p>这里没加rt_device_open，为啥还能用？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化PWM设备，设置默认周期和脉冲宽度</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Pwm_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 查找PWM设备</span></span><br><span class="line">    pwmDev = (<span class="keyword">struct</span> rt_device_pwm*)rt_device_find(PWM_DEV_NAME);</span><br><span class="line">    <span class="keyword">if</span> (pwmDev == RT_NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        rt_kprintf(<span class="string">&quot;Pwm_Init run failed! can&#x27;t find %s device!\n&quot;</span>, PWM_DEV_NAME); <span class="comment">// 打印错误信息</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置PWM默认周期和脉冲宽度</span></span><br><span class="line">    rt_pwm_set(pwmDev, PWM_DEV_CHANNEL, PWM_PERIOD, PWM_CLOSED_PULSE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使能PWM</span></span><br><span class="line">    rt_pwm_enable(pwmDev, PWM_DEV_CHANNEL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在 RT-Thread 中，PWM 设备是通过 <code>rt_device_find</code> 获取到设备控制块的指针后进行操作的，并不需要显式调用 <code>rt_device_open</code> 函数。</p><p>这是因为 <strong>PWM</strong> 驱动程序通常没有针对设备进行多用户访问控制，也不涉及硬件设备的多态操作，因此大部分的 PWM 驱动并没有实现或不需要实现 <code>Open</code> 操作。</p><p>具体来说：</p><ol><li><p><strong>PWM驱动初始化</strong>：<code>rt_device_find</code> 查找设备后，直接获取到设备对象（<code>pwmDev</code>），如果设备正确注册并且可以找到，这个指针就已经可以直接使用。</p></li><li><p><strong>PWM驱动的实现逻辑</strong>：在 RT-Thread 的设备驱动框架中，PWM 设备驱动通常注册的是 <code>rt_device_pwm_ops</code> 操作集，其中包括了设置周期和脉冲宽度 (<code>set</code>) 以及使能 (<code>enable</code>) 的函数。</p><p>这些函数可以直接操作 PWM 硬件寄存器，而不涉及对设备进行打开和关闭的资源控制。因此，调用这些函数时，不需要经过 <code>rt_device_open</code>。</p></li><li><p><strong>设备访问模型</strong>：不像某些需要复用资源的设备（如串口、SPI）需要通过 <code>open</code> 函数来进行资源分配和访问控制，PWM 通常被视为独占的硬件资源，因此不需要显式调用 <code>open</code> 函数。这让代码更加简洁，也方便用户在单个任务中使用 PWM。</p></li></ol></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>位掩码</title>
      <link href="/2024/10/04/%E7%9F%A5%E8%AF%86%E7%82%B9/%E4%BD%8D%E6%8E%A9%E7%A0%81/"/>
      <url>/2024/10/04/%E7%9F%A5%E8%AF%86%E7%82%B9/%E4%BD%8D%E6%8E%A9%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h2 id="位掩码解释"><a href="#位掩码解释" class="headerlink" title="位掩码解释"></a>位掩码解释</h2><p><strong>位掩码（Bitmask）</strong> 是一种通过按位操作（位与、位或等）来<strong>选择或操作二进制数据特定位</strong>的方法，主要用于高效地处理特定位的操作，比如启用、禁用、检测或切换特定位。</p><h3 id="位掩码的基本概念"><a href="#位掩码的基本概念" class="headerlink" title="位掩码的基本概念"></a><strong>位掩码的基本概念</strong></h3><p>位掩码本质上是一个二进制数，通过其每一位的 <strong>0 或 1</strong> 来控制另一个数的特定位是否参与操作。</p><ul><li><strong>“掩码”</strong> 的意思是“遮盖”或“过滤”，通过掩码可以过滤出需要的特定位。</li><li>常见操作包括 <strong>提取</strong>、<strong>设置</strong>、<strong>清除</strong> 和 <strong>切换（翻转）</strong>。</li></ul><h3 id="为什么需要位掩码"><a href="#为什么需要位掩码" class="headerlink" title="为什么需要位掩码"></a><strong>为什么需要位掩码</strong></h3><p>位掩码用于高效地操作数据的特定位，尤其是在嵌入式编程中经常用到。例如：</p><ol><li><strong>检测特定位是否为 1</strong>（如 GPIO 引脚状态）。</li><li><strong>设置某个位为 1</strong>（如启用某个硬件功能）。</li><li><strong>清除某个位为 0</strong>（如禁用某个硬件功能）。</li><li><strong>切换某个位的值</strong>（如翻转某个引脚的状态）。</li></ol><p>这些操作可以通过按位操作（位与 <code>&amp;</code>、位或 <code>|</code>、按位取反 <code>~</code> 等）实现。</p><h3 id="位掩码的实际例子"><a href="#位掩码的实际例子" class="headerlink" title="位掩码的实际例子"></a><strong>位掩码的实际例子</strong></h3><h4 id="例-1：提取特定位的值"><a href="#例-1：提取特定位的值" class="headerlink" title="例 1：提取特定位的值"></a>例 1：<strong>提取特定位的值</strong></h4><p>假设有一个 8 位的寄存器，其值为 <code>0b10101100</code>（十六进制 <code>0xAC</code>），我们想提取其中的第 3 位（从右边开始计数，第 0 位为最低位）。</p><ul><li><p>使用掩码 <code>0b00001000</code>（十进制 8或十六进制 0x08）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint8_t</span> reg = <span class="number">0xAC</span>;     <span class="comment">// 寄存器值</span></span><br><span class="line"><span class="type">uint8_t</span> mask = <span class="number">0x08</span>;    <span class="comment">// 位掩码（提取第 3 位）</span></span><br><span class="line"><span class="type">uint8_t</span> result = reg &amp; mask;</span><br></pre></td></tr></table></figure></li><li><p>结果：</p><ul><li>如果 <code>reg</code> 的第 3 位为 <code>1</code>，<code>result = 0x08</code>（非零）。</li><li>如果 <code>reg</code> 的第 3 位为 <code>0</code>，<code>result = 0x00</code>。</li></ul></li></ul><h4 id="例-2：设置特定位为-1"><a href="#例-2：设置特定位为-1" class="headerlink" title="例 2：设置特定位为 1"></a>例 2：<strong>设置特定位为 1</strong></h4><p>假设我们想将一个寄存器 <code>0b10101100</code> 的第 2 位设为 <code>1</code>。</p><ul><li><p>使用掩码 <code>0b00000100</code>（十进制 4或十六进制 0x04）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint8_t</span> reg = <span class="number">0xAC</span>;     <span class="comment">// 寄存器值</span></span><br><span class="line"><span class="type">uint8_t</span> mask = <span class="number">0x04</span>;    <span class="comment">// 位掩码（设置第 2 位）</span></span><br><span class="line">reg |= mask;            <span class="comment">// 按位或</span></span><br></pre></td></tr></table></figure></li><li><p>结果：</p><ul><li>原始值：<code>0b10101100</code></li><li>新值：<code>0b10101100 | 0b00000100 = 0b10101100</code>（第 2 位已经是 <code>1</code>，所以无变化）。</li></ul></li></ul><h4 id="例-3：清除特定位为-0"><a href="#例-3：清除特定位为-0" class="headerlink" title="例 3：清除特定位为 0"></a>例 3：<strong>清除特定位为 0</strong></h4><p>假设我们想将一个寄存器 <code>0b10101100</code> 的第 2 位清为 <code>0</code>。</p><ul><li><p>使用掩码 <code>0b11111011</code>（取反 0b00000100）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint8_t</span> reg = <span class="number">0xAC</span>;     <span class="comment">// 寄存器值</span></span><br><span class="line"><span class="type">uint8_t</span> mask = ~<span class="number">0x04</span>;   <span class="comment">// 取反掩码，清除第 2 位</span></span><br><span class="line">reg &amp;= mask;            <span class="comment">// 按位与</span></span><br></pre></td></tr></table></figure></li><li><p>结果：</p><ul><li>原始值：<code>0b10101100</code></li><li>新值：<code>0b10101100 &amp; 0b11111011 = 0b10101000</code>。</li></ul></li></ul><h4 id="例-4：切换（翻转）特定位"><a href="#例-4：切换（翻转）特定位" class="headerlink" title="例 4：切换（翻转）特定位"></a>例 4：<strong>切换（翻转）特定位</strong></h4><p>假设我们想将一个寄存器 <code>0b10101100</code> 的第 2 位翻转（即 <code>1 -&gt; 0</code> 或 <code>0 -&gt; 1</code>）。</p><ul><li><p>使用掩码 <code>0b00000100</code>（十进制 4或十六进制 0x04）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint8_t</span> reg = <span class="number">0xAC</span>;     <span class="comment">// 寄存器值</span></span><br><span class="line"><span class="type">uint8_t</span> mask = <span class="number">0x04</span>;    <span class="comment">// 位掩码（翻转第 2 位）</span></span><br><span class="line">reg ^= mask;            <span class="comment">// 按位异或</span></span><br></pre></td></tr></table></figure></li><li><p>结果：</p><ul><li>原始值：<code>0b10101100</code></li><li>新值：<code>0b10101100 ^ 0b00000100 = 0b10101000</code>。</li></ul></li></ul><h3 id="位掩码在-HAL-GPIO-Init-中的应用"><a href="#位掩码在-HAL-GPIO-Init-中的应用" class="headerlink" title="位掩码在 HAL_GPIO_Init 中的应用"></a><strong>位掩码在 HAL_GPIO_Init 中的应用</strong></h3><p>在 <code>HAL_GPIO_Init()</code> 函数中，位掩码被用来确定用户指定的 GPIO 引脚是否需要被配置。</p><h4 id="相关代码段"><a href="#相关代码段" class="headerlink" title="相关代码段"></a>相关代码段</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ioposition = (<span class="number">0x01</span>uL &lt;&lt; position);      <span class="comment">// 生成当前引脚的位掩码 (1 &lt;&lt; position)</span></span><br><span class="line">iocurrent = GPIO_Init-&gt;Pin &amp; ioposition; <span class="comment">// 检查当前引脚是否有效</span></span><br><span class="line"><span class="keyword">if</span> (iocurrent == ioposition)            <span class="comment">// 如果当前引脚有效，则执行配置</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 执行引脚配置逻辑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实际意义"><a href="#实际意义" class="headerlink" title="实际意义"></a>实际意义</h4><p>假设 <code>GPIO_Init-&gt;Pin = GPIO_PIN_1 | GPIO_PIN_3 = 0b00001010</code>（同时配置 PA1 和 PA3）：</p><ul><li><code>position = 0</code> 时，<code>ioposition = 0b00000001</code>，<code>iocurrent = 0b00001010 &amp; 0b00000001 = 0b00000000</code>（跳过）。</li><li><code>position = 1</code> 时，<code>ioposition = 0b00000010</code>，<code>iocurrent = 0b00001010 &amp; 0b00000010 = 0b00000010</code>（配置 PA1）。</li><li><code>position = 2</code> 时，<code>ioposition = 0b00000100</code>，<code>iocurrent = 0b00001010 &amp; 0b00000100 = 0b00000000</code>（跳过）。</li><li><code>position = 3</code> 时，<code>ioposition = 0b00001000</code>，<code>iocurrent = 0b00001010 &amp; 0b00001000 = 0b00001000</code>（配置 PA3）。</li></ul><p>通过这样的位掩码操作，只需要一整个 <code>while</code> 循环的完整运行过程，即包括多次迭代，直到所有引脚都被检查完,即可有效配置多个 GPIO 引脚。</p>]]></content>
      
      
      <categories>
          
          <category> 知识点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STM32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>合集</title>
      <link href="/2024/10/04/%E7%9F%A5%E8%AF%86%E7%82%B9/%E5%90%88%E9%9B%86/"/>
      <url>/2024/10/04/%E7%9F%A5%E8%AF%86%E7%82%B9/%E5%90%88%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h1 id="动态窗口"><a href="#动态窗口" class="headerlink" title="动态窗口"></a>动态窗口</h1><p>理解这个动态窗口可以从它的<strong>设计目的</strong>和<strong>运行机制</strong>两个角度来分析。动态窗口是为了确保系统只处理最近一段时间（比如3秒）内的数据，并通过一个<strong>环形缓冲区</strong>来实现数据的添加和移除。而且动态窗口可以看作是<strong>FIFO</strong>（先进先出）或者<strong>队列</strong>的一种实现形式，尤其是在处理实时数据或流数据时，动态窗口的工作方式和队列或FIFO的行为非常相似。</p><p>动态窗口的机制是为了确保数据的实时性和有效性，通过环形缓冲区和读写指针的管理，保证系统在有限的内存中处理最近的（例如3秒）数据，并能及时丢弃过期数据。这种设计广泛用于需要处理连续数据流的场景，例如传感器数据采集、网络流量监控等。</p><h2 id="动态窗口的设计目的"><a href="#动态窗口的设计目的" class="headerlink" title="动态窗口的设计目的"></a>动态窗口的设计目的</h2><ol><li><strong>实时性数据处理</strong>：系统需要在一个<strong>固定的时间范围</strong>内（如3秒）处理数据，而不是无限制地存储所有历史数据。动态窗口保证了系统只对最近一段时间的数据进行计算或分析，保证数据的实时性。</li><li><strong>节省内存</strong>：通过环形缓冲区的设计，系统不需要无限制地扩展内存，只需要一定大小的缓冲区来存储最近的数据。超出时间窗口的数据会被移除，腾出空间给新数据。</li><li><strong>滑动窗口</strong>：每当有新数据进入时，窗口会“滑动”——添加新数据的同时，移除超出时间范围的数据，保证窗口内的数据始终是最新的。</li></ol><h3 id="动态窗口的运行机制"><a href="#动态窗口的运行机制" class="headerlink" title="动态窗口的运行机制"></a>动态窗口的运行机制</h3><ol><li><strong>环形缓冲区</strong>：<ul><li>环形缓冲区的设计允许在有限的空间内进行数据的“读”和“写”操作。</li><li><code>buffer_start_r</code> 是读指针，表示当前窗口的<strong>起始位置</strong>，指向最旧的数据。</li><li><code>buffer_end_w</code> 是写指针，表示当前窗口的<strong>结束位置</strong>，指向最近写入的数据。</li></ul></li><li><strong>添加新数据</strong>：<ul><li>当新数据被采集后，它会被放入到 <code>buffer_end_w</code> 位置，并更新写指针 <code>buffer_end_w</code>，将其移到下一个可写入的位置。</li><li>如果写指针追上了读指针（即缓冲区满了），系统就需要调整 <code>buffer_start_r</code> 来丢弃最旧的数据，从而保证新数据有空间写入。</li></ul></li><li><strong>移除超时数据</strong>：<ul><li>每次写入新数据后，系统会检查缓冲区中的最旧数据（<code>buffer_start_r</code>）是否已经超出了设定的时间窗口（例如3秒）。</li><li>通过一个 <code>while</code> 循环，移除所有时间戳超过3秒的旧数据，直到缓冲区内的数据全部在最近3秒内为止。</li></ul></li></ol><h3 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h3><ol><li><strong>动态窗口本质上是一个滑动窗口</strong>：当新数据写入时，窗口会自动“滑动”，旧数据会被移除，新数据会被加入。窗口的大小（例如3秒）是固定的，但窗口内的数据内容会随时间变化。</li><li><strong>读写指针的管理</strong>：环形缓冲区通过读写指针来控制数据的读写，确保不会出现数据覆盖或错误。<code>buffer_start_r</code>（读指针）负责指出当前有效数据的最早位置，<code>buffer_end_w</code>（写指针）则指向下一个写入位置。</li><li><strong>时间范围的维护</strong>：通过对比当前时间与数据时间戳，可以有效地维护3秒这个时间窗口，确保在每次添加新数据时，只保留最近3秒内的数据。</li></ol><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// PH值结构体成员</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">uint32_t</span> <span class="type">time_t</span>;  <span class="comment">// 时间戳</span></span><br><span class="line">    <span class="type">uint32_t</span> adc_val; <span class="comment">// adc值</span></span><br><span class="line">&#125; <span class="type">adc_data_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PH值动态窗口环形缓冲区结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">uint16_t</span> buffer_start_r; <span class="comment">// 读</span></span><br><span class="line">    <span class="type">uint16_t</span> buffer_end_w;   <span class="comment">// 写</span></span><br><span class="line">    <span class="type">adc_data_t</span> adc_buffer[BUFFER_SIZE];</span><br><span class="line">&#125; Ph_ring_buffer;</span><br><span class="line"></span><br><span class="line">Ph_ring_buffer buffer[BUFFER_SIZE];</span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> Pd_mutation_status = <span class="number">0</span>; <span class="comment">// 突变状态</span></span><br><span class="line"><span class="type">uint8_t</span> Ph_overrun_status = <span class="number">0</span>;  <span class="comment">// 超限状态</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将采集到的adc值放到时间窗口中, 添加新数据到缓冲区并管理窗口数据</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">add_data_to_win</span><span class="params">(Ph_ring_buffer *buffer, <span class="type">uint16_t</span> current, <span class="type">uint16_t</span> adc)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 将时间戳和采集电压放入结构体中</span></span><br><span class="line">    buffer-&gt;adc_buffer[buffer-&gt;buffer_end_w].<span class="type">time_t</span> = current;</span><br><span class="line">    buffer-&gt;adc_buffer[buffer-&gt;buffer_end_w].adc_val = adc;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 循环30次，一次100ms，相当于一个采集3s内数据的动态窗口</span></span><br><span class="line">    buffer-&gt;buffer_end_w = (buffer-&gt;buffer_end_w + <span class="number">1</span>) % BUFFER_SIZE;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果缓冲区满了，调整buffer_start写指针</span></span><br><span class="line">    <span class="keyword">if</span> (buffer-&gt;buffer_start_r == buffer-&gt;buffer_end_w)</span><br><span class="line">    &#123;</span><br><span class="line">        buffer-&gt;buffer_start_r = (buffer-&gt;buffer_start_r + <span class="number">1</span>) % BUFFER_SIZE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// buffer_start_r </span></span><br><span class="line">    <span class="keyword">while</span> ((current - buffer-&gt;adc_buffer[buffer-&gt;buffer_start_r].<span class="type">time_t</span>) &gt; WINDOW_SIZE_MS)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 移动写指针，更新动态窗口</span></span><br><span class="line">        buffer-&gt;buffer_start_r = (buffer-&gt;buffer_start_r + <span class="number">1</span>) % BUFFER_SIZE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">check_Ph_val__sudden_change</span><span class="params">(Ph_ring_buffer *buffer, <span class="type">uint16_t</span> *p)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint32_t</span> Ph_max = buffer-&gt;adc_buffer[buffer-&gt;buffer_end_w].adc_val;</span><br><span class="line">    <span class="type">uint32_t</span> Ph_min = buffer-&gt;adc_buffer[buffer-&gt;buffer_end_w].adc_val;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> index = buffer-&gt;buffer_start_r;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 必须保证环形缓冲区内可以读，处理完先前写入环形缓冲区的数据。</span></span><br><span class="line">    <span class="keyword">while</span> (index != buffer-&gt;buffer_end_w)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 查找最大值</span></span><br><span class="line">        <span class="keyword">if</span> (Ph_max &lt; buffer-&gt;adc_buffer[index].adc_val)</span><br><span class="line">        &#123;</span><br><span class="line">            Ph_max = buffer-&gt;adc_buffer[index].adc_val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 查找最小值</span></span><br><span class="line">        <span class="keyword">if</span> (Ph_min &gt; buffer-&gt;adc_buffer[index].adc_val)</span><br><span class="line">        &#123;</span><br><span class="line">            Ph_min = buffer-&gt;adc_buffer[index].adc_val;</span><br><span class="line">        &#125;</span><br><span class="line">        index = (index + <span class="number">1</span>) % BUFFER_SIZE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint16_t</span> Ph_overrun = Ph_max - Ph_min;</span><br><span class="line">    <span class="comment">// 注意为什么这样写，而不是直接(*p)++;</span></span><br><span class="line">    <span class="keyword">if</span> (Ph_overrun &gt; pd_val)</span><br><span class="line">    &#123;</span><br><span class="line">        Pd_mutation_status = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (Pd_mutation_status == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Pd_mutation_status = <span class="number">0</span>;</span><br><span class="line">        (*p)++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ucLed[<span class="number">2</span>] = (Ph_overrun &gt; pd_val) ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h2><p>这段代码实现了一个<strong>动态窗口环形缓冲区</strong>，用于存储和管理最近一段时间（例如3秒）内的采集数据。该缓冲区的作用是持续存储传感器（如ADC）采集到的数据，并在每次采集新数据时，移除超出时间窗口范围（即超过3秒）的旧数据，保证系统只处理最新的、有效的数据。下面是对代码的详细解释：</p><h3 id="结构体定义"><a href="#结构体定义" class="headerlink" title="结构体定义"></a><strong>结构体定义</strong></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">uint32_t</span> <span class="type">time_t</span>;  <span class="comment">// 时间戳</span></span><br><span class="line">    <span class="type">uint32_t</span> adc_val; <span class="comment">// ADC采集的电压值</span></span><br><span class="line">&#125; <span class="type">adc_data_t</span>;</span><br></pre></td></tr></table></figure><ul><li><code>adc_data_t</code> 结构体包含两个成员：<ul><li><code>time_t</code>：表示数据采集的时间戳。</li><li><code>adc_val</code>：存储ADC采集到的电压值。</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">uint16_t</span> buffer_start_r; <span class="comment">// 读指针（缓冲区的起始位置）</span></span><br><span class="line">    <span class="type">uint16_t</span> buffer_end_w;   <span class="comment">// 写指针（缓冲区的结束位置）</span></span><br><span class="line">    <span class="type">adc_data_t</span> adc_buffer[BUFFER_SIZE]; <span class="comment">// 环形缓冲区，用于存储ADC采集数据</span></span><br><span class="line">&#125; Ph_ring_buffer;</span><br></pre></td></tr></table></figure><ul><li><code>Ph_ring_buffer</code> 是环形缓冲区的结构体：<ul><li><code>buffer_start_r</code>：指向当前有效数据的起始位置（读指针）。</li><li><code>buffer_end_w</code>：指向下一个将要写入数据的位置（写指针）。</li><li><code>adc_buffer</code>：这是实际存储数据的缓冲区，大小为 <code>BUFFER_SIZE</code>。</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ph_ring_buffer buffer[BUFFER_SIZE];</span><br></pre></td></tr></table></figure><ul><li>创建了一个 <code>buffer</code> 实例，用于存储数据。</li></ul><h3 id="add-data-to-win-函数详细解释"><a href="#add-data-to-win-函数详细解释" class="headerlink" title="add_data_to_win 函数详细解释"></a><strong><code>add_data_to_win</code> 函数详细解释</strong></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">add_data_to_win</span><span class="params">(Ph_ring_buffer *buffer, <span class="type">uint16_t</span> current, <span class="type">uint16_t</span> adc)</span></span><br></pre></td></tr></table></figure><ul><li>该函数用于将新采集的 ADC 数据（<code>adc</code>）添加到动态时间窗口中，并移除超出3秒的数据。</li><li><p>参数：</p><ul><li><code>buffer</code>：指向环形缓冲区的指针。</li><li><code>current</code>：当前的时间戳。</li><li><code>adc</code>：采集到的ADC值。</li></ul><p><strong>将新数据添加到缓冲区</strong></p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">buffer-&gt;adc_buffer[buffer-&gt;buffer_end_w].<span class="type">time_t</span> = current;</span><br><span class="line">buffer-&gt;adc_buffer[buffer-&gt;buffer_end_w].adc_val = adc;</span><br></pre></td></tr></table></figure><ul><li><p>将当前时间戳和采集到的电压值存入 <code>buffer_end_w</code> 位置，表示新采集的数据被放入缓冲区。</p><p><strong>移动写指针</strong></p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">buffer-&gt;buffer_end_w = (buffer-&gt;buffer_end_w + <span class="number">1</span>) % BUFFER_SIZE;</span><br></pre></td></tr></table></figure><ul><li><p>写指针 <code>buffer_end_w</code> 向前移动一个位置，指向下一个可以写入数据的位置。因为这是一个环形缓冲区，当写指针到达缓冲区末尾时，它会回到起始位置（通过 <code>% BUFFER_SIZE</code> 实现的）。</p><p><strong>处理缓冲区满的情况</strong></p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (buffer-&gt;buffer_start_r == buffer-&gt;buffer_end_w)</span><br><span class="line">&#123;</span><br><span class="line">    buffer-&gt;buffer_start_r = (buffer-&gt;buffer_start_r + <span class="number">1</span>) % BUFFER_SIZE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>如果写指针 <code>buffer_end_w</code> 追上了读指针 <code>buffer_start_r</code>，这意味着缓冲区满了。此时，需要将读指针 <code>buffer_start_r</code> 向前移动一位，以丢弃最早的数据，确保有空间存储新数据。这样可以保证缓冲区的数据始终处于<strong>先进先出（FIFO）</strong>的顺序。</p><p><strong>移除超出3秒的数据</strong></p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> ((current - buffer-&gt;adc_buffer[buffer-&gt;buffer_start_r].<span class="type">time_t</span>) &gt; WINDOW_SIZE_MS)</span><br><span class="line">&#123;</span><br><span class="line">    buffer-&gt;buffer_start_r = (buffer-&gt;buffer_start_r + <span class="number">1</span>) % BUFFER_SIZE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>这里通过一个 <code>while</code> 循环检查缓冲区中最早的数据（<code>buffer_start_r</code>）是否超出了设定的时间窗口（例如3秒）。</p><ul><li><code>current - buffer-&gt;adc_buffer[buffer-&gt;buffer_start_r].time_t &gt; WINDOW_SIZE_MS</code>：如果当前时间和最早数据的时间戳之差超过了 <code>WINDOW_SIZE_MS</code>（窗口大小，假设是3000毫秒），则表明该数据已经超时，不再需要。</li></ul></li><li><p>每次找到超时数据后，将读指针 <code>buffer_start_r</code> 向前移动一位，直到所有超出时间窗口的数据都被移除。</p></li></ul><p>2.5. <strong><code>while</code> 和 <code>if</code> 的选择</strong></p><ul><li>这里使用 <code>while</code> 来确保<strong>所有超出3秒的数据都被移除</strong>，即使有多个数据已经超出了时间窗口，<code>while</code> 循环会一直移动读指针，直到缓冲区中的数据都在3秒之内。</li><li>如果使用 <code>if</code>，则只会移除<strong>一个超出窗口的数据</strong>，这可能会导致缓冲区中仍然保留一些超时数据，无法确保整个窗口只包含最新的3秒内数据。</li></ul><ol><li><strong>总结与理解</strong></li></ol><ul><li><p>这个动态窗口是一个<strong>基于时间的滑动窗口</strong>，通过环形缓冲区实现，目的在于只保留最近的3秒数据。每次新数据写入时：</p><ul><li>新数据加入到缓冲区。</li><li>缓冲区满了时丢弃最早的数据。</li><li>检查并移除超过3秒的数据。</li></ul></li><li><p><strong>读写指针</strong>：通过 <code>buffer_start_r</code> 和 <code>buffer_end_w</code> 来管理数据的添加和移除，确保缓冲区始终在指定时间范围内保持有效数据，类似于队列的先进先出（FIFO）机制。</p></li><li><p><strong>动态窗口的滑动</strong>：每次新数据加入后，窗口会自动滑动，移除旧数据，保持窗口内的数据在3秒范围内。</p></li></ul><h2 id="FIFO与动态窗口异同"><a href="#FIFO与动态窗口异同" class="headerlink" title="FIFO与动态窗口异同"></a>FIFO与动态窗口异同</h2><h3 id="动态窗口与FIFO-队列的相似点"><a href="#动态窗口与FIFO-队列的相似点" class="headerlink" title="动态窗口与FIFO/队列的相似点"></a><strong>动态窗口与FIFO/队列的相似点</strong></h3><ul><li><p><strong>先进先出</strong>：动态窗口中的数据处理顺序是<strong>按时间顺序</strong>进行的，最早进入窗口的数据在超出时间范围或队列满时最先被移除，这与FIFO和队列的先进先出特性一致。</p></li><li><p><strong>顺序性</strong>：无论是动态窗口还是FIFO/队列，都保证了数据按照进入的顺序进行处理，新数据会按顺序添加，旧数据按顺序移除。</p></li></ul><h3 id="动态窗口与FIFO-队列的不同点"><a href="#动态窗口与FIFO-队列的不同点" class="headerlink" title="动态窗口与FIFO/队列的不同点"></a><strong>动态窗口与FIFO/队列的不同点</strong></h3><ul><li><p><strong>时间限制</strong>：队列和FIFO通常不考虑时间因素，而动态窗口的核心是按时间来管理数据。数据是否被移除不仅取决于它是否是最早的，还取决于它是否超出了时间窗口的范围。</p></li><li><p><strong>内存管理</strong>：FIFO或队列可以是动态大小，而动态窗口通常使用<strong>固定大小的环形缓冲区</strong>，限制存储的数据量。如果缓冲区满了，新数据将覆盖最旧的数据。</p></li></ul><h1 id="测量按键按下时间"><a href="#测量按键按下时间" class="headerlink" title="测量按键按下时间"></a>测量按键按下时间</h1><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><ol><li>使用定时器 2 通道 2 来捕获按键 2 按下时间，并通过串口打印。 </li><li>计一个数的时间：1us，PSC=71，ARR=65535 </li><li>下降沿捕获、输入通道 2 映射在 TI2 上、不分频、不滤波</li></ol><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p><img src="/2024/10/04/%E7%9F%A5%E8%AF%86%E7%82%B9/%E5%90%88%E9%9B%86/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20241007130731.png" alt="微信截图_20241007130731"></p><p><strong>PA1和TIM2的Channel 2 相连。</strong></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ic.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;string.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 捕获状态结构体，存储捕获标志和计数状态</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">uint8_t</span> succeed_flag;  <span class="comment">// 成功捕获标志</span></span><br><span class="line">    <span class="type">uint8_t</span> rising_flag;   <span class="comment">// 上升沿标志</span></span><br><span class="line">    <span class="type">uint8_t</span> falling_flag;  <span class="comment">// 下降沿标志</span></span><br><span class="line">    <span class="type">uint16_t</span> timout_cnt;   <span class="comment">// 超时计数</span></span><br><span class="line">&#125; capture_status = &#123;<span class="number">0</span>&#125;;    <span class="comment">// 初始化为 0</span></span><br><span class="line"></span><br><span class="line"><span class="type">uint16_t</span> last_cnt = <span class="number">0</span>;  <span class="comment">// 存储最后一次捕获值</span></span><br><span class="line"></span><br><span class="line">TIM_HandleTypeDef ic_handle = &#123;<span class="number">0</span>&#125;;  <span class="comment">// 定时器句柄</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定时器输入捕获初始化函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">ic_init</span><span class="params">(<span class="type">uint16_t</span> arr, <span class="type">uint16_t</span> psc)</span></span><br><span class="line">&#123;</span><br><span class="line">    TIM_IC_InitTypeDef ic_config = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定时器实例配置为TIM2</span></span><br><span class="line">    ic_handle.Instance = TIM2;</span><br><span class="line">    ic_handle.Init.Prescaler = psc;          <span class="comment">// 预分频器设置</span></span><br><span class="line">    ic_handle.Init.Period = arr;             <span class="comment">// 自动重装载值</span></span><br><span class="line">    ic_handle.Init.CounterMode = TIM_COUNTERMODE_UP;  <span class="comment">// 向上计数模式</span></span><br><span class="line">    HAL_TIM_IC_Init(&amp;ic_handle);             <span class="comment">// 初始化定时器</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置输入捕获通道参数</span></span><br><span class="line">    ic_config.ICPolarity = TIM_ICPOLARITY_FALLING;  <span class="comment">// 捕获下降沿</span></span><br><span class="line">    ic_config.ICSelection = TIM_ICSELECTION_DIRECTTI; <span class="comment">// 直接输入捕获</span></span><br><span class="line">    ic_config.ICPrescaler = TIM_ICPSC_DIV1;   <span class="comment">// 输入捕获不分频</span></span><br><span class="line">    ic_config.ICFilter = <span class="number">0</span>;                   <span class="comment">// 不使用滤波</span></span><br><span class="line">    HAL_TIM_IC_ConfigChannel(&amp;ic_handle, &amp;ic_config, TIM_CHANNEL_2);  <span class="comment">// 配置通道2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使能定时器更新中断</span></span><br><span class="line">    __HAL_TIM_ENABLE_IT(&amp;ic_handle, TIM_IT_UPDATE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 启动通道2的输入捕获功能（带中断）</span></span><br><span class="line">    HAL_TIM_IC_Start_IT(&amp;ic_handle, TIM_CHANNEL_2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TIM2相关硬件资源初始化</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_TIM_IC_MspInit</span><span class="params">(TIM_HandleTypeDef *htim)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(htim-&gt;Instance == TIM2)</span><br><span class="line">    &#123;</span><br><span class="line">        GPIO_InitTypeDef gpio_initstruct;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使能GPIOA时钟</span></span><br><span class="line">        __HAL_RCC_GPIOA_CLK_ENABLE();</span><br><span class="line">        <span class="comment">// 使能TIM2时钟</span></span><br><span class="line">        __HAL_RCC_TIM2_CLK_ENABLE();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化GPIOA引脚1，用作输入</span></span><br><span class="line">        gpio_initstruct.Pin = GPIO_PIN_1;</span><br><span class="line">        gpio_initstruct.Mode = GPIO_MODE_INPUT;</span><br><span class="line">        gpio_initstruct.Pull = GPIO_PULLUP;  <span class="comment">// 上拉模式</span></span><br><span class="line">        gpio_initstruct.Speed = GPIO_SPEED_FREQ_HIGH; <span class="comment">// 高速</span></span><br><span class="line">        HAL_GPIO_Init(GPIOA, &amp;gpio_initstruct);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 配置定时器中断优先级，并使能TIM2的中断</span></span><br><span class="line">        HAL_NVIC_SetPriority(TIM2_IRQn, <span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">        HAL_NVIC_EnableIRQ(TIM2_IRQn);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TIM2中断服务函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">TIM2_IRQHandler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_TIM_IRQHandler(&amp;ic_handle);  <span class="comment">// 调用HAL库的中断处理</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输入捕获中断回调函数（捕获到上升沿或下降沿时执行）</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_TIM_IC_CaptureCallback</span><span class="params">(TIM_HandleTypeDef *htim)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 判断是否为TIM2的中断</span></span><br><span class="line">    <span class="keyword">if</span>(htim-&gt;Instance == TIM2)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 如果捕获未成功</span></span><br><span class="line">        <span class="keyword">if</span>(capture_status.succeed_flag == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 如果捕获到下降沿</span></span><br><span class="line">            <span class="keyword">if</span>(capture_status.falling_flag == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 捕获上升沿</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;捕获到上升沿\r\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 捕获成功</span></span><br><span class="line">                capture_status.succeed_flag = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 读取捕获值（时间）</span></span><br><span class="line">                last_cnt = HAL_TIM_ReadCapturedValue(&amp;ic_handle, TIM_CHANNEL_2);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 重置捕获极性为下降沿</span></span><br><span class="line">                TIM_RESET_CAPTUREPOLARITY(&amp;ic_handle, TIM_CHANNEL_2);</span><br><span class="line">                TIM_SET_CAPTUREPOLARITY(&amp;ic_handle, TIM_CHANNEL_2, TIM_ICPOLARITY_FALLING);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 捕获到下降沿</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;捕获到下降沿\r\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 重置捕获状态</span></span><br><span class="line">                <span class="built_in">memset</span>(&amp;capture_status, <span class="number">0</span>, <span class="keyword">sizeof</span>(capture_status));</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 设置为捕获下降沿标志</span></span><br><span class="line">                capture_status.falling_flag = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 停止定时器，并重置计数器</span></span><br><span class="line">                __HAL_TIM_DISABLE(&amp;ic_handle);</span><br><span class="line">                __HAL_TIM_SET_COUNTER(&amp;ic_handle, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 设置捕获极性为上升沿</span></span><br><span class="line">                TIM_RESET_CAPTUREPOLARITY(&amp;ic_handle, TIM_CHANNEL_2);</span><br><span class="line">                TIM_SET_CAPTUREPOLARITY(&amp;ic_handle, TIM_CHANNEL_2, TIM_ICPOLARITY_RISING);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 重新使能定时器</span></span><br><span class="line">                __HAL_TIM_ENABLE(&amp;ic_handle);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定时器更新中断回调函数（周期到达后溢出）</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_TIM_PeriodElapsedCallback</span><span class="params">(TIM_HandleTypeDef *htim)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(htim-&gt;Instance == TIM2)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 如果捕获未成功且已经捕获到下降沿，增加超时计数</span></span><br><span class="line">        <span class="keyword">if</span>(capture_status.succeed_flag == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(capture_status.falling_flag == <span class="number">1</span>)</span><br><span class="line">                capture_status.timout_cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算按下时间并打印</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">pressed_time_get</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(capture_status.succeed_flag == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 计算按下时间：超时计数 * 最大计数值 + 最后一次捕获值</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;按下时间：%d us\r\n&quot;</span>, capture_status.timout_cnt * <span class="number">65536</span> + last_cnt);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 重置捕获状态</span></span><br><span class="line">        <span class="built_in">memset</span>(&amp;capture_status, <span class="number">0</span>, <span class="keyword">sizeof</span>(capture_status));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个代码主要用于配置定时器输入捕获（Input Capture, IC）功能，以捕获输入信号的上升沿和下降沿，计算信号的脉宽（即信号在低电平和高电平下的持续时间）。通过定时器的中断机制，可以在每次捕获到信号边缘时记录时间戳，从而计算信号的持续时间。</p><p>能够实现同时测量两个相邻的相反边沿的时间差。</p><p><img src="/2024/10/04/%E7%9F%A5%E8%AF%86%E7%82%B9/%E5%90%88%E9%9B%86/image-20241005125420458.png" alt="image-20241005125420458"></p><h1 id="解析串口数据"><a href="#解析串口数据" class="headerlink" title="解析串口数据"></a>解析串口数据</h1><h2 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*    格式为 先s600\n，后c10\n    */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 对收到的命令进行处理</span></span><br><span class="line"><span class="comment"> * @param &#123;uint16_t&#125; *rate 采样率</span></span><br><span class="line"><span class="comment"> * @param &#123;uint16_t&#125; *duration 采样时长</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 例如：&quot;s1000\n&quot;  s表示下发的是采样率     1000表示采样率（每分钟采样1000次） 单位min</span></span><br><span class="line"><span class="comment">// 例如：&quot;c60\n&quot;    c表示下发的是采集时长   60表示采样60s。 收到这个命令之后开启ADC和定时器开始采集 单位s</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Heart_Cmd_Proc</span><span class="params">(<span class="type">uint16_t</span> *rate, <span class="type">uint16_t</span> *duration)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 等待命令接收完毕</span></span><br><span class="line">    <span class="keyword">while</span> (ringbuffer_is_empty(&amp;usart_rb))</span><br><span class="line">    &#123;</span><br><span class="line">        ; <span class="comment">// 空循环等待</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从环形缓冲区读取数据</span></span><br><span class="line">    ringbuffer_read(&amp;usart_rb, Usart_Read_Buffer, <span class="keyword">sizeof</span>(Usart_Read_Buffer));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义临时变量来存储命令解析的值</span></span><br><span class="line">    <span class="type">uint16_t</span> Temp_Rate = <span class="number">0</span>;</span><br><span class="line">    <span class="type">uint16_t</span> Temp_Duration = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析字符串</span></span><br><span class="line">    <span class="comment">// 解析 s 命令</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">sscanf</span>((<span class="type">const</span> <span class="type">char</span> *)Usart_Read_Buffer, <span class="string">&quot;s%hu\n&quot;</span>, &amp;Temp_Rate) == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        *rate = Temp_Rate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清空接收缓冲区</span></span><br><span class="line">    <span class="built_in">memset</span>(Usart_Read_Buffer, <span class="number">0</span>, <span class="keyword">sizeof</span>(Usart_Read_Buffer));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清空环形缓冲区</span></span><br><span class="line">    <span class="built_in">memset</span>(&amp;usart_rb, <span class="number">0</span>, <span class="keyword">sizeof</span>(usart_rb));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 等待 c 命令接收完毕</span></span><br><span class="line">    <span class="keyword">while</span> (G_isToReceiveCompleted == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ; <span class="comment">// 空循环等待</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 再次读取数据</span></span><br><span class="line">    <span class="keyword">while</span> (ringbuffer_is_empty(&amp;usart_rb))</span><br><span class="line">    &#123;</span><br><span class="line">        ; <span class="comment">// 空循环等待</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从环形缓冲区读取数据</span></span><br><span class="line">    ringbuffer_read(&amp;usart_rb, Usart_Read_Buffer, <span class="keyword">sizeof</span>(Usart_Read_Buffer));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析 c 命令</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">sscanf</span>((<span class="type">const</span> <span class="type">char</span> *)Usart_Read_Buffer, <span class="string">&quot;c%hu\n&quot;</span>, &amp;Temp_Duration) == <span class="number">1</span> &amp;&amp; G_isToReceiveCompleted)</span><br><span class="line">    &#123;</span><br><span class="line">        *duration = Temp_Duration;</span><br><span class="line">        Debug_Printfln(<span class="string">&quot;请下发指令: 采样率(s600\\n)和采样时长(c10\\n)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重置完成标志</span></span><br><span class="line">    G_isToReceiveCompleted = <span class="number">0</span>; <span class="comment">// 重置状态以等待下一个命令</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清空DMA缓冲区</span></span><br><span class="line">    <span class="built_in">memset</span>(Usart_Read_Buffer, <span class="number">0</span>, <span class="keyword">sizeof</span>(Usart_Read_Buffer));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_UARTEx_RxEventCallback</span><span class="params">(UART_HandleTypeDef *huart, <span class="type">uint16_t</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (huart-&gt;Instance == USART1)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 将接收到的数据写入环形缓冲区</span></span><br><span class="line">        <span class="keyword">if</span> (!ringbuffer_is_full(&amp;usart_rb))</span><br><span class="line">        &#123;</span><br><span class="line">            ringbuffer_write(&amp;usart_rb, Usart_Write_Buffer, size);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加 &#x27;\0&#x27; 结束符，确保字符串可以被正确解析</span></span><br><span class="line">        Usart_Write_Buffer[size] = <span class="string">&#x27;\0&#x27;</span>; <span class="comment">// 确保 DMA 接收的内容是以 &#x27;\0&#x27; 结束的字符串</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查是否接收到了完整的 c 命令</span></span><br><span class="line">        <span class="type">char</span> *c_ptr = <span class="built_in">strstr</span>((<span class="type">const</span> <span class="type">char</span> *)Usart_Write_Buffer, <span class="string">&quot;c&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (c_ptr != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 查找换行符，确保命令以 &#x27;\n&#x27; 结尾</span></span><br><span class="line">            <span class="type">char</span> *newline_ptr = <span class="built_in">strchr</span>(c_ptr, <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span> (newline_ptr != <span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 确保命令长度合理</span></span><br><span class="line">                <span class="keyword">if</span> (newline_ptr - c_ptr &gt; <span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 检查数字部分是否正确</span></span><br><span class="line">                    <span class="type">int</span> temp_duration;</span><br><span class="line">                    <span class="comment">// 使用 sscanf 解析 c 后面的数字</span></span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">sscanf</span>(c_ptr, <span class="string">&quot;c%d&quot;</span>, &amp;temp_duration) == <span class="number">1</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">// 接收到完整的 c 命令，设置标志</span></span><br><span class="line">                        G_isToReceiveCompleted = <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 清空DMA缓冲区</span></span><br><span class="line">        <span class="built_in">memset</span>(Usart_Write_Buffer, <span class="number">0</span>, <span class="keyword">sizeof</span>(Usart_Write_Buffer));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的问题是，先发送s600\n，然后能解析并得到600这个数据，而之后再发送c10\n，却无法正确地解析得到10这个数据。</p><p>原因就是我们第一次解析完600后，不仅要清空接收缓冲区Usart_Read_Buffer，还要要清空环形缓冲区usart_rb。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   // 清空接收缓冲区</span><br><span class="line">   memset(Usart_Read_Buffer, 0, sizeof(Usart_Read_Buffer));</span><br><span class="line"></span><br><span class="line">// 清空环形缓冲区</span><br><span class="line">   memset(&amp;usart_rb, 0, sizeof(usart_rb));</span><br></pre></td></tr></table></figure><h2 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;gd32f30x.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;led_drv.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">rcu_periph_enum RCU_Usart;<span class="comment">// UART外设的时钟</span></span><br><span class="line">rcu_periph_enum RCU_GPIO;<span class="comment">// GPIO外设的时钟</span></span><br><span class="line"><span class="type">uint32_t</span> GPIO;<span class="comment">// GPIO端口号（如GPIOA）</span></span><br><span class="line"><span class="type">uint32_t</span> USART_Num;<span class="comment">// 串口号，例如USART0</span></span><br><span class="line"><span class="type">uint32_t</span> txPin;         <span class="comment">// 发送引脚</span></span><br><span class="line"><span class="type">uint32_t</span> rxPin;         <span class="comment">// 接收引脚</span></span><br><span class="line"><span class="type">uint8_t</span> irq;             <span class="comment">// 中断号</span></span><br><span class="line">&#125; UART_Info_t;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> UART_Info_t g_uartInfo = &#123;RCU_USART0, RCU_GPIOA, GPIOA, USART0, GPIO_PIN_9, GPIO_PIN_10, USART0_IRQn&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">GPIO_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">rcu_periph_clock_enable(g_uartInfo.RCU_GPIO);</span><br><span class="line">gpio_init(g_uartInfo.RCU_GPIO, GPIO_MODE_AF_PP, GPIO_OSPEED_10MHZ, g_uartInfo.txPin);</span><br><span class="line">gpio_init(g_uartInfo.RCU_GPIO, GPIO_MODE_IPU, GPIO_OSPEED_10MHZ, g_uartInfo.rxPin);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">USART_Init</span><span class="params">(<span class="type">uint32_t</span> baudRate)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 使能UART时钟；*/</span></span><br><span class="line">rcu_periph_clock_enable(g_uartInfo.RCU_Usart);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 复位UART；*/</span></span><br><span class="line">usart_deinit(g_uartInfo.USART_Num);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 通过USART_CTL0寄存器的WL设置字长；*/</span> </span><br><span class="line">usart_word_length_set(g_uartInfo.USART_Num, USART_WL_8BIT);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 通过USART_CTL0寄存器的PCEN设置校验位；*/</span> </span><br><span class="line">usart_parity_config(g_uartInfo.USART_Num, USART_PM_NONE);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 在USART_CTL1寄存器中写STB[1:0]位来设置停止位的长度；*/</span> </span><br><span class="line">usart_stop_bit_set(g_uartInfo.USART_Num, USART_STB_1BIT);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 在USART_BAUD寄存器中设置波特率；*/</span> </span><br><span class="line">usart_baudrate_set(g_uartInfo.USART_Num, baudRate);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 在USART_CTL0寄存器中设置TEN位，使能发送功能；*/</span></span><br><span class="line">usart_transmit_config(g_uartInfo.USART_Num, USART_TRANSMIT_ENABLE);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 在USART_CTL0寄存器中设置TEN位，使能接收功能；*/</span></span><br><span class="line">usart_receive_config(g_uartInfo.USART_Num, USART_RECEIVE_ENABLE);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使能串口接收中断；*/</span></span><br><span class="line">usart_interrupt_enable(g_uartInfo.USART_Num, USART_INT_RBNE);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使能串口中断；*/</span></span><br><span class="line">nvic_irq_enable(g_uartInfo.irq, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 在USART_CTL0寄存器中置位UEN位，使能UART；*/</span> </span><br><span class="line">usart_enable(g_uartInfo.USART_Num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">* @brief USB转串口硬件初始化</span></span><br><span class="line"><span class="comment">* @param</span></span><br><span class="line"><span class="comment">* @return </span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Usb_to_ComDrvInit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">GPIO_Init();</span><br><span class="line">USART_Init(<span class="number">115200</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">***********************************************************************</span></span><br><span class="line"><span class="comment">包格式：帧头0  帧头1  数据域长度  功能字   LED编号  亮/灭  异或校验数据</span></span><br><span class="line"><span class="comment">        0x55   0xAA    0x03      0x06     0x00     0x01      0xFB</span></span><br><span class="line"><span class="comment">***********************************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FRAME_HEAD_0        0x55  </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FRAME_HEAD_1        0xAA</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CTRL_DATA_LEN       3     <span class="comment">//数据域长度</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PACKET_DATA_LEN     (CTRL_DATA_LEN + 4)  <span class="comment">//包长度</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FUNC_DATA_INDEX       3     <span class="comment">//功能字数组下标</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED_CTRL_CODE       0x06  <span class="comment">//功能字</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_BUF_SIZE 20</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">uint8_t</span> g_rcvDataBuf[MAX_BUF_SIZE] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">bool</span> g_pktRcvd = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">UartData_Proc</span><span class="params">(<span class="type">uint8_t</span> Data)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">static</span> <span class="type">uint8_t</span> Tmp_index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">g_rcvDataBuf[Tmp_index++] = Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (Tmp_index)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="comment">// 解析数据帧头</span></span><br><span class="line"><span class="keyword">if</span>(g_rcvDataBuf[<span class="number">0</span>] != FRAME_HEAD_0)</span><br><span class="line">&#123;</span><br><span class="line">Tmp_index = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line"><span class="comment">// 解析数据帧头</span></span><br><span class="line"><span class="keyword">if</span>(g_rcvDataBuf[<span class="number">1</span>] != FRAME_HEAD_1)</span><br><span class="line">&#123;</span><br><span class="line">Tmp_index = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> PACKET_DATA_LEN:</span><br><span class="line"><span class="comment">// 是否收到完整的数据包（7Bytes）</span></span><br><span class="line">g_pktRcvd = <span class="literal">true</span>;</span><br><span class="line">Tmp_index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">* @brief 对数据进行异或运算</span></span><br><span class="line"><span class="comment">* @param data, 存储数组的首地址</span></span><br><span class="line"><span class="comment">* @param len, 要计算的元素的个数</span></span><br><span class="line"><span class="comment">* @return 异或运算结果</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">static</span> <span class="type">uint8_t</span> <span class="title function_">CalXorSum</span><span class="params">(<span class="type">const</span> <span class="type">uint8_t</span> *data, <span class="type">uint32_t</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint8_t</span> xorSum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">uint32_t</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line">xorSum ^= data[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> xorSum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">* @brief LED控制处理函数</span></span><br><span class="line"><span class="comment">* @param ctrlData，结构体指针，传入LED的编号和状态</span></span><br><span class="line"><span class="comment">* @return </span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">uint8_t</span> LedNum;</span><br><span class="line"><span class="type">uint8_t</span> LedState;</span><br><span class="line">&#125; LedCtrlInfo_t;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">CtrlLed</span><span class="params">(LedCtrlInfo_t *ctrlData)</span></span><br><span class="line">&#123;</span><br><span class="line">ctrlData-&gt;LedState != <span class="number">0</span> ? TurnOnLed(ctrlData-&gt;LedNum) : TurnOffLed(ctrlData-&gt;LedNum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">* @brief USB转串口任务处理函数</span></span><br><span class="line"><span class="comment">* @param</span></span><br><span class="line"><span class="comment">* @return </span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Usb_to_ComTask</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!g_pktRcvd)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 成功接收到数据</span></span><br><span class="line">g_pktRcvd = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (CalXorSum(g_rcvDataBuf, PACKET_DATA_LEN - <span class="number">1</span>) != g_rcvDataBuf[PACKET_DATA_LEN - <span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 校验完成</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (g_rcvDataBuf[FUNC_DATA_INDEX] == LED_CTRL_CODE)</span><br><span class="line">&#123;</span><br><span class="line">CtrlLed((LedCtrlInfo_t *)(&amp;g_rcvDataBuf[FUNC_DATA_INDEX + <span class="number">1</span>]));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">* @brief 串口0中断服务函数</span></span><br><span class="line"><span class="comment">* @param</span></span><br><span class="line"><span class="comment">* @return </span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">USART0_IRQHandler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(usart_interrupt_flag_get(g_uartInfo.USART_Num, USART_INT_FLAG_RBNE) != RESET) </span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 清楚对应中断标志位</span></span><br><span class="line">usart_interrupt_flag_clear(g_uartInfo.USART_Num, USART_INT_FLAG_RBNE);</span><br><span class="line"><span class="type">uint8_t</span> uData = (<span class="type">uint8_t</span>)usart_data_receive(g_uartInfo.USART_Num);</span><br><span class="line">UartData_Proc(uData);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">* @brief printf函数默认打印输出到显示器，如果要输出到串口，</span></span><br><span class="line"><span class="comment"> 必须重新实现fputc函数，将输出指向串口，称为重定向</span></span><br><span class="line"><span class="comment">* @param</span></span><br><span class="line"><span class="comment">* @return </span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">fputc</span><span class="params">(<span class="type">int</span> ch, FILE *f)</span></span><br><span class="line">&#123;</span><br><span class="line">usart_data_transmit(g_uartInfo.USART_Num, (<span class="type">uint8_t</span>)ch);</span><br><span class="line"><span class="keyword">while</span> (RESET == usart_flag_get(g_uartInfo.USART_Num, USART_FLAG_TBE));</span><br><span class="line"><span class="keyword">return</span> ch;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>g_rcvDataBuf[FUNC_DATA_INDEX + 1]</strong><code>是被用作传入</code><strong>CtrlLed()</strong><code>函数的参数，并且通过类型转换为</code>LedCtrlInfo_t` 结构体指针。</p><p><strong>结构体 <code>LedCtrlInfo_t</code></strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">uint8_t</span> LedNum;</span><br><span class="line">    <span class="type">uint8_t</span> LedState;</span><br><span class="line">&#125; LedCtrlInfo_t;</span><br></pre></td></tr></table></figure><p>这个结构体包含两个字段：</p><ul><li><code>LedNum</code>：表示LED的编号。</li><li><code>LedState</code>：表示LED的状态（例如亮或灭）。</li></ul><p><strong>数据包的结构</strong></p><p>根据你提供的通信协议格式：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">包格式：帧头<span class="number">0</span>  帧头<span class="number">1</span>  数据域长度  功能字   LED编号  亮/灭  异或校验数据</span><br><span class="line">        <span class="number">0x55</span>   <span class="number">0xAA</span>    <span class="number">0x03</span>      <span class="number">0x06</span>     <span class="number">0x00</span>     <span class="number">0x01</span>      <span class="number">0xFB</span></span><br></pre></td></tr></table></figure><ul><li><strong>帧头0：0x55</strong></li><li><strong>帧头1：0xAA</strong></li><li><strong>数据域长度：0x03</strong></li><li><strong>功能字：0x06（表示这是一个控制LED的命令）</strong></li><li><strong>LED编号：例如 0x00，表示某个特定编号的LED</strong></li><li><strong>LED亮/灭：例如 0x01（亮）或 0x00（灭）</strong></li><li><strong>异或校验数据：0xFB（整个数据包的校验和）</strong></li></ul><p><strong><code>g_rcvDataBuf</code> 的结构</strong></p><ul><li><code>g_rcvDataBuf</code> 是用于存储接收到的整帧数据的缓冲区。</li><li><code>FUNC_DATA_INDEX</code> 的值是 <code>3</code>，它指向数据包中功能字的位置，即 <code>g_rcvDataBuf[3]</code>。</li></ul><p>当我们调用 <code>CtrlLed()</code> 函数时，使用的参数是：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CtrlLed((LedCtrlInfo_t *)(&amp;g_rcvDataBuf[FUNC_DATA_INDEX + <span class="number">1</span>]));</span><br></pre></td></tr></table></figure><p>这里 <code>&amp;g_rcvDataBuf[FUNC_DATA_INDEX + 1]</code> 的含义是指向 <code>g_rcvDataBuf</code> 中第 <code>FUNC_DATA_INDEX + 1</code> 个字节的地址，也就是 <code>g_rcvDataBuf[4]</code>。</p><p><strong>为什么两个字节能映射到结构体</strong></p><p>这里将指针强制转换为 <code>LedCtrlInfo_t *</code>，它的作用是将 <code>g_rcvDataBuf</code> 中从 <code>FUNC_DATA_INDEX + 1</code> 开始的两个字节作为一个 <code>LedCtrlInfo_t</code> 类型结构体来使用。</p><p>具体来说：</p><ul><li><code>g_rcvDataBuf[4]</code>：映射到结构体中的 <code>LedNum</code> 字段。</li><li><code>g_rcvDataBuf[5]</code>：映射到结构体中的 <code>LedState</code> 字段。</li></ul><p>通过这种强制类型转换，代码可以直接把 <code>g_rcvDataBuf</code> 缓冲区中的数据解释为一个 <code>LedCtrlInfo_t</code> 结构体，从而更方便地访问 <code>LedNum</code> 和 <code>LedState</code>。</p><p><strong>举例说明</strong></p><p>假设你接收的数据包如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x55, 0xAA, 0x03, 0x06, 0x00, 0x01, 0xFB</span><br></pre></td></tr></table></figure><ul><li><code>g_rcvDataBuf[4]</code> 等于 <code>0x00</code>，表示 <code>LedNum</code> 为 0。</li><li><code>g_rcvDataBuf[5]</code> 等于 <code>0x01</code>，表示 <code>LedState</code> 为亮（1）。</li></ul><p>这样，在 <code>CtrlLed()</code> 中的 <code>ctrlData-&gt;LedNum</code> 等于 <code>0x00</code>，<code>ctrlData-&gt;LedState</code> 等于 <code>0x01</code>，你就可以通过调用适当的函数来控制对应的 LED 状态（比如 <code>TurnOnLed(0)</code>）。</p><p><strong>总结</strong></p><ul><li><code>g_rcvDataBuf[FUNC_DATA_INDEX + 1]</code> 开始的两个字节其实分别代表了 LED 的编号和状态。</li><li>通过将 <code>&amp;g_rcvDataBuf[FUNC_DATA_INDEX + 1]</code> 强制转换为 <code>LedCtrlInfo_t *</code>，可以直接将接收的数据包的这两个字节映射到 <code>LedCtrlInfo_t</code> 结构体中。</li><li>这种处理方式简化了数据解析的过程，使得代码更易读、更易维护。</li></ul><p>虽然 <code>g_rcvDataBuf[FUNC_DATA_INDEX + 1]</code> 只是一个字节的开始，但通过强制类型转换，它被解释为 <code>LedCtrlInfo_t</code> 结构体，包含两个字节的数据，这样就可以同时解析出 LED 的编号和状态。</p><p>这两个字节在数据包中是连续排列的，所以能够通过指针转换的方式映射到结构体的各个字段中。这种连续排列的特性使得你可以把接收的数据解释为一个特定的结构体。</p><p>因此，这种做法的前提是数据在内存中的布局是连续的，数据包的格式也需要与结构体的字段顺序和大小一致，因此在你编写通信协议和解析代码时，这一点必须严格保证。如果数据不连续或者大小不匹配，强制类型转换会导致错误的解析结果，甚至会出现程序崩溃等问题。</p><h1 id="标志位"><a href="#标志位" class="headerlink" title="标志位"></a>标志位</h1><h2 id="问题一：独立变量"><a href="#问题一：独立变量" class="headerlink" title="问题一：独立变量"></a>问题一：独立变量</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint8_t</span> Pd_mutation_status = <span class="number">0</span>; <span class="comment">// 突变状态</span></span><br><span class="line"><span class="type">uint8_t</span> Ph_overrun_status = <span class="number">0</span>;  <span class="comment">// 超限状态</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">check_freq_data</span><span class="params">(<span class="type">freq_data_t</span> *buffer, <span class="type">uint8_t</span> *nd_change_arr, <span class="type">uint8_t</span> *nh_change_arr)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint32_t</span> freqMax = buffer[bufferStartRead].freqVal;</span><br><span class="line">    <span class="type">uint32_t</span> freqMin = buffer[bufferStartRead].freqVal;</span><br><span class="line">    <span class="type">uint16_t</span> index = bufferStartRead;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 频率超限</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (buffer[index].freqVal &lt; param_arr[<span class="number">1</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        Ph_overrun_status = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (Ph_overrun_status == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        (*nh_change_arr)++;</span><br><span class="line">        Ph_overrun_status = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 环形缓冲区不为空</span></span><br><span class="line">    <span class="keyword">while</span> (index != bufferEndWrite)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 循环处理30个频率数据</span></span><br><span class="line">        <span class="keyword">if</span> (freqMax &lt; buffer[index].freqVal)</span><br><span class="line">        &#123;</span><br><span class="line">            freqMax = buffer[index].freqVal;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (freqMin &gt; buffer[index].freqVal)</span><br><span class="line">        &#123;</span><br><span class="line">            freqMin = buffer[index].freqVal;</span><br><span class="line">        &#125;</span><br><span class="line">        index = (index + <span class="number">1</span>) % BUFFER_SIZE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 频率突变</span></span><br><span class="line">    <span class="keyword">if</span> (freqMax - freqMin &lt; param_arr[<span class="number">0</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        Pd_mutation_status = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (Pd_mutation_status == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        (*nd_change_arr)++;</span><br><span class="line">        Pd_mutation_status = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint32_t</span> tim_ic_buffer[<span class="number">2</span>][<span class="number">64</span>]; <span class="comment">// 存储输入捕获值的缓冲区</span></span><br><span class="line"><span class="type">int32_t</span> tim_ic_val[<span class="number">2</span>];         <span class="comment">// 最终计算得到的输入捕获值</span></span><br><span class="line"><span class="type">uint32_t</span> tim_ic_temp[<span class="number">2</span>];       <span class="comment">// 临时存储输入捕获计算的中间值</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">ic_proc</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint32_t</span> current_time = HAL_GetTick(); <span class="comment">// 记录当前时间</span></span><br><span class="line"></span><br><span class="line">    tim_ic_temp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    tim_ic_temp[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i; i &lt; <span class="number">64</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tim_ic_temp[<span class="number">0</span>] += tim_ic_buffer[<span class="number">0</span>][i];</span><br><span class="line">        tim_ic_temp[<span class="number">1</span>] += tim_ic_buffer[<span class="number">1</span>][i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算平均值</span></span><br><span class="line">    tim_ic_temp[<span class="number">0</span>] /= <span class="number">64</span>;</span><br><span class="line">    tim_ic_temp[<span class="number">1</span>] /= <span class="number">64</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算频率值，单位为Hz</span></span><br><span class="line">    tim_ic_val[<span class="number">0</span>] = (<span class="type">int</span>)((<span class="type">float</span>)(<span class="number">1000.0f</span> * <span class="number">1000.0f</span>) / (<span class="type">float</span>)tim_ic_temp[<span class="number">0</span>]);</span><br><span class="line">    tim_ic_val[<span class="number">1</span>] = (<span class="type">int</span>)((<span class="type">float</span>)(<span class="number">1000.0f</span> * <span class="number">1000.0f</span>) / (<span class="type">float</span>)tim_ic_temp[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 校准频率值</span></span><br><span class="line">    tim_ic_val[<span class="number">0</span>] += param_arr[<span class="number">2</span>];</span><br><span class="line">    tim_ic_val[<span class="number">1</span>] += param_arr[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将计算得到的频率值限制在1到20000之间</span></span><br><span class="line">    limit_value((<span class="type">uint32_t</span> *)&amp;tim_ic_val[<span class="number">0</span>], <span class="number">1</span>, <span class="number">400</span>, <span class="number">20000</span>);</span><br><span class="line">    limit_value((<span class="type">uint32_t</span> *)&amp;tim_ic_val[<span class="number">1</span>], <span class="number">1</span>, <span class="number">400</span>, <span class="number">20000</span>);</span><br><span class="line"></span><br><span class="line">    add_freq_data(buffer_A, current_time, tim_ic_val[<span class="number">0</span>]);</span><br><span class="line">    check_freq_data(buffer_A, &amp;statistical_array[<span class="number">0</span>], &amp;statistical_array[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">    add_freq_data(buffer_B, current_time, tim_ic_val[<span class="number">1</span>]);</span><br><span class="line">    check_freq_data(buffer_B, &amp;statistical_array[<span class="number">1</span>], &amp;statistical_array[<span class="number">3</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>满足频率突变或超限的条件后，对应的<code>(*nd_change_arr)++、(*nh_change_arr)++</code>会一直++而不是只加一次。</p><p>解决方法：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint8_t</span> Pd_A_mutation_status = <span class="number">0</span>; <span class="comment">// 突变状态</span></span><br><span class="line"><span class="type">uint8_t</span> Pd_B_mutation_status = <span class="number">0</span>; <span class="comment">// 突变状态</span></span><br><span class="line"><span class="type">uint8_t</span> Ph_A_overrun_status = <span class="number">0</span>;  <span class="comment">// 超限状态</span></span><br><span class="line"><span class="type">uint8_t</span> Ph_B_overrun_status = <span class="number">0</span>;  <span class="comment">// 超限状态</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">check_freq_data</span><span class="params">(<span class="type">freq_data_t</span> *buffer, <span class="type">uint8_t</span> *nd_change_arr, <span class="type">uint8_t</span> *nh_change_arr)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint32_t</span> freqMax = buffer[bufferStartRead].freqVal;</span><br><span class="line">    <span class="type">uint32_t</span> freqMin = buffer[bufferStartRead].freqVal;</span><br><span class="line">    <span class="type">uint16_t</span> index = bufferStartRead;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 频率超限</span></span><br><span class="line">    <span class="keyword">if</span> (nh_change_arr == &amp;statistical_array[<span class="number">2</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (buffer[index].freqVal &lt; param_arr[<span class="number">1</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            Ph_A_overrun_status = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (Ph_A_overrun_status == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            (*nh_change_arr)++;</span><br><span class="line">            Ph_A_overrun_status = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (nh_change_arr == &amp;statistical_array[<span class="number">3</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (buffer[index].freqVal &lt; param_arr[<span class="number">1</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            Ph_B_overrun_status = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (Ph_B_overrun_status == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            (*nh_change_arr)++;</span><br><span class="line">            Ph_B_overrun_status = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 环形缓冲区不为空</span></span><br><span class="line">    <span class="keyword">while</span> (index != bufferEndWrite)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 循环处理30个频率数据</span></span><br><span class="line">        <span class="keyword">if</span> (freqMax &lt; buffer[index].freqVal)</span><br><span class="line">        &#123;</span><br><span class="line">            freqMax = buffer[index].freqVal;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (freqMin &gt; buffer[index].freqVal)</span><br><span class="line">        &#123;</span><br><span class="line">            freqMin = buffer[index].freqVal;</span><br><span class="line">        &#125;</span><br><span class="line">        index = (index + <span class="number">1</span>) % BUFFER_SIZE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 频率突变</span></span><br><span class="line">    <span class="keyword">if</span> (nd_change_arr == &amp;statistical_array[<span class="number">0</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (freqMax - freqMin &lt; param_arr[<span class="number">0</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            Pd_A_mutation_status = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (Pd_A_mutation_status == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            (*nd_change_arr)++;</span><br><span class="line">            Pd_A_mutation_status = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (nd_change_arr == &amp;statistical_array[<span class="number">1</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (freqMax - freqMin &lt; param_arr[<span class="number">0</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            Pd_B_mutation_status = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (Pd_B_mutation_status == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            (*nd_change_arr)++;</span><br><span class="line">            Pd_B_mutation_status = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以我们要使用独立的标志位去分别控制A和B，因此我们可以先判断传入参数的地址，分别处理<code>nd_change_arr</code>和<code>nh_change_arr</code>。</p><h3 id="主要改动与分析"><a href="#主要改动与分析" class="headerlink" title="主要改动与分析"></a>主要改动与分析</h3><p>在你的原始代码中，似乎有两个主要问题，导致了 <code>(*nd_change_arr)++</code> 进入一个不断递增的循环：</p><ol><li><p><strong>状态标志变量未区分 A 和 B 通道</strong>：<br>在最初版本中，你的 <code>Pd_mutation_status</code> 是一个单一的状态标志变量，而在新版本中，你引入了 <strong><code>Pd_A_mutation_status</code></strong> 和 <strong><code>Pd_B_mutation_status</code></strong> 两个状态变量。它们分别对应不同的 <code>nd_change_arr</code> 参数（即 <code>statistical_array[0]</code> 和 <code>statistical_array[1]</code>），从而实现了对 A 通道和 B 通道的独立控制。</p><p>旧版本中，由于同一个状态标志变量 <code>Pd_mutation_status</code> 被复用，可能导致状态无法正确反映 A 和 B 通道的独立状态变化。每次 <code>check_freq_data()</code> 被调用时，该标志可能一直被错误地设置，从而导致 <code>(*nd_change_arr)</code> 反复增加。</p><p>通过分别使用 <code>Pd_A_mutation_status</code> 和 <code>Pd_B_mutation_status</code>，你确保了各个通道的频率变化标志不会互相干扰，从而使得相应的计数 (<code>(*nd_change_arr)++</code>) 仅在符合特定条件时增加一次，而不是每次都符合同样的条件。</p></li><li><p><strong>明确的条件和标志变量设置</strong>：<br>现在你为 A 和 B 通道分别处理了两个逻辑条件，确保了 <code>freqMax - freqMin &lt; param_arr[0]</code> 的情况被独立地判断。这样，如果当前频率波动符合设定条件，标志位会被设置为 <code>1</code>，并且在 <code>(*nd_change_arr)++</code> 执行后状态重置为 <code>0</code>。通过这种状态机式的设计，标志位必须先通过 “突变发生” 再通过 “突变消失” 的过程，这样逻辑变得更加清晰和严谨。</p></li><li><p><strong>不同统计数组的分开处理</strong>：<br>你还将 <code>nh_change_arr</code> 和 <code>nd_change_arr</code> 的处理逻辑分开得更加清楚，并且使用了 <code>statistical_array[2]</code> 和 <code>statistical_array[3]</code> 来区别不同的变化处理。这样确保了各个变化情况（如 A 通道和 B 通道的频率突变）是独立判断的，不会相互影响。由于数组引用和标志的单独管理，逻辑不再重叠，从而避免了多次累加的问题。</p></li></ol><h3 id="为什么现在只会加一次？"><a href="#为什么现在只会加一次？" class="headerlink" title="为什么现在只会加一次？"></a>为什么现在只会加一次？</h3><p>现在的逻辑可以理解为一个 <strong>有限状态机</strong>，它有两个状态：</p><ul><li>状态 <code>0</code>：没有发生突变。</li><li>状态 <code>1</code>：检测到突变并准备计数。</li></ul><p>在进入 <code>check_freq_data()</code> 函数时：</p><ul><li>如果符合条件（<code>freqMax - freqMin &lt; param_arr[0]</code>），状态从 <code>0</code> 变为 <code>1</code>，表示检测到了频率突变。</li><li>在下一次进入这个函数时，如果之前状态是 <code>1</code> 并且频率已经不再突变（<code>else if (Pd_A_mutation_status == 1)</code>），则 <code>(*nd_change_arr)++</code> 执行，并将状态重置为 <code>0</code>。</li></ul><p>因此，每个通道在频率突变时只会有一次状态变化，并且在突变消失后才会执行累加操作。这个状态重置的设计确保了不会在每次调用时反复累加。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>你之所以成功修复了这个问题，主要是因为：</p><ol><li>你对 A 通道和 B 通道使用了独立的状态标志（<code>Pd_A_mutation_status</code> 和 <code>Pd_B_mutation_status</code>）。</li><li>状态标志的明确区分，使得每个突变状态只会触发一次 <code>(*nd_change_arr)++</code>，而不是反复累加。</li><li>通过这种状态控制的方式，有效避免了逻辑混乱导致的条件反复触发。</li></ol><p>这样清晰的状态管理可以确保系统按预期工作，避免任何的累加错误。继续保持良好的编程实践，状态机的管理是非常重要的概念，特别是在实时信号处理这样的场景中。</p><h2 id="问题二-1"><a href="#问题二-1" class="headerlink" title="问题二"></a>问题二</h2><p>如何巧妙的实现LED在低频模式、高频模式切换期间，指示灯 LED 以 0.1 秒为间隔切换亮、 灭状态，模式切换完成后熄灭？</p><p>正常情况下，可以会定义旧模式和新模式两个变量，当新旧模式变亮不等时，则加入指示灯 LED 以 0.1 秒为间隔切换亮、 灭状态的需求，之后再写5s后熄灭的逻辑。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(uwTick - pwm_tick &gt;= <span class="number">100</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(freq_val != (pwm_output_mode?<span class="number">8000</span>:<span class="number">4000</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        ucLed[<span class="number">1</span>] ^= <span class="number">1</span>;</span><br><span class="line">        freq_val += (<span class="number">4000</span> / <span class="number">50</span>) * (pwm_output_mode?<span class="number">1</span>:<span class="number">-1</span>);</span><br><span class="line">        pwm_set_frequency(freq_val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        ucLed[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    pwm_tick = uwTick;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码主要实现了一个LED指示灯（假设为<code>LD2</code>）在PWM频率模式切换时以0.1秒的间隔闪烁，在模式切换完成后熄灭。代码实现的关键在于<code>PWM_Output_Mode</code>的变化。</p><p>具体过程如下：</p><ol><li><strong>逻辑判断频率变化</strong>：<ul><li><code>PWM_Output_Mode</code>控制PWM频率模式：<code>0</code>表示低频（4000Hz），<code>1</code>表示高频（8000Hz）。</li><li>当<code>PWM_Output_Mode</code>发生变化时，程序会检查当前<code>Freq_Val</code>是否达到了目标值（即低频时目标为4000，高频时目标为8000）。如果没有达到，则通过<code>Freq_Val</code>的增量控制逐步逼近目标频率。</li></ul></li><li><strong>频率逐步调节</strong>（代码在主函数里循环处理）：<ul><li><code>Freq_Val</code>会根据<code>PWM_Output_Mode</code>的状态，以每次步进 <code>(8000 - 4000) / 50 = 80Hz</code> 的方式逐渐逼近目标值（4000或8000）。</li><li>每隔100ms，<code>Freq_Val</code>会增加或减少80Hz，使得频率在50个时间间隔（即约5秒）内逐步完成从4000到8000或反之的切换。</li></ul></li><li><strong>LED闪烁控制</strong>：<ul><li>在<code>Freq_Val</code>未达到目标频率之前，<code>ucLed[1] ^= 1;</code>会每100ms取反一次，使得<code>LD2</code>以0.1秒为间隔闪烁，持续50次，也就是<strong>5000ms</strong>。</li><li>当频率调整完成，即<code>Freq_Val</code>达到了目标频率值（4000或8000）时，<code>ucLed[1]</code>被设为0，表示<code>LD2</code>熄灭。</li></ul></li><li><strong>模式切换后LED熄灭</strong>：<ul><li>由于<code>LD2</code>的状态完全受<code>Freq_Val</code>是否达到目标值控制，当模式切换完成且<code>Freq_Val</code>稳定在目标频率时，<code>LD2</code>将保持熄灭，不再闪烁。</li></ul></li></ol><p>通过这种逻辑，代码能够满足以下需求：在模式切换的过程中（约5秒内），<code>LD2</code>每100ms闪烁一次，表示正在进行切换。一旦切换完成，LED即熄灭。</p><p>这个方法比较巧妙，巧在写改变频率值的需求正好构造出来LED的需求逻辑。</p><h1 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">led_disp</span><span class="params">(<span class="type">uint8_t</span> *ucled)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint8_t</span> temp = <span class="number">0x00</span>;</span><br><span class="line">    <span class="comment">// 记录上次LED状态</span></span><br><span class="line">    <span class="type">static</span> <span class="type">uint8_t</span> temp_old = <span class="number">0xff</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 让数组第一个灯对应板子上第一个灯也就是最高位</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> pos = <span class="number">0</span>; pos &lt; <span class="number">8</span>; pos++)</span><br><span class="line">    &#123;</span><br><span class="line">        temp |= (ucled[pos] &lt;&lt; pos);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (temp != temp_old)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 清零高八位</span></span><br><span class="line">        GPIOC-&gt;ODR &amp;= <span class="number">0x00ff</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 转回正逻辑，并左移高八位到对应IO</span></span><br><span class="line">        GPIOC-&gt;ODR |= ~(temp &lt;&lt; <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打开锁存器 高电平有效</span></span><br><span class="line">        GPIOD-&gt;BSRR |= (<span class="number">0x01</span> &lt;&lt; <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭锁存器 低电平有效</span></span><br><span class="line">        GPIOD-&gt;BRR |= (<span class="number">0x01</span> &lt;&lt; <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 更新状态</span></span><br><span class="line">        temp_old = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>static uint8_t temp_old = 0xff;</code> 主要有两个作用：</p><ol><li><strong>在函数调用间保持值不变</strong>：将 <code>temp_old</code> 声明为 <code>static</code> 可以确保它的值在多次调用 <code>led_disp()</code> 时保持不变。如果不加 <code>static</code>，每次调用该函数时 <code>temp_old</code> 都会重新初始化为 <code>0xff</code>。由于 <code>temp_old</code> 用来存储上一次的 LED 状态，这种值的保持是非常重要的。只有当 <code>temp</code>（新的 LED 状态）不同于 <code>temp_old</code> 时，才会更新 <code>temp_old</code>，这使得 <code>led_disp()</code> 可以有效地检测到 LED 状态的变化。</li><li><strong>限制变量的作用域</strong>：虽然 <code>temp_old</code> 在函数调用间保留其值，但由于 <code>static</code> 的作用域规则，它仍然只在 <code>led_disp()</code> 函数内部有效。这可以防止代码其他部分修改 <code>temp_old</code>，从而减少潜在的错误或冲突。</li></ol><p>总结来说，这里的 <code>static</code> 是为了在多次函数调用中保留上一次的 LED 状态，同时将变量的作用域限制在 <code>led_disp()</code> 函数内。</p><h1 id="运算符计算顺序"><a href="#运算符计算顺序" class="headerlink" title="运算符计算顺序"></a>运算符计算顺序</h1><p><code>Freq_Val != (!PWM_Output_Mode ? 4000 : 8000))</code>与<code>if (Freq_Val != (!PWM_Output_Mode) ? 4000 : 8000)</code>计算的结果一样吗？</p><p>这两个表达式在计算逻辑上有所不同，主要差异在于它们使用的运算符优先级以及具体的语法结构。</p><h3 id="1-表达式"><a href="#1-表达式" class="headerlink" title="1. 表达式"></a>1. 表达式</h3><p><code>(Freq_Val != (!PWM_Output_Mode ? 4000 : 8000))</code></p><p>在这个表达式中，首先计算<code>!PWM_Output_Mode</code>的值（取反操作），然后将其结果用于三元运算符<code>(? :)</code>，再与<code>Freq_Val</code>进行不等比较操作。这是一个复合条件表达式。</p><p>计算步骤如下：</p><ol><li><strong>取反</strong>：<code>!PWM_Output_Mode</code>，这一步将<code>PWM_Output_Mode</code>布尔取反。</li><li><strong>三元运算</strong>：根据取反后的布尔值，如果<code>!PWM_Output_Mode</code>为<code>true</code>，则结果为<code>4000</code>；否则为<code>8000</code>。</li><li><strong>比较</strong>：将上述三元运算的结果与<code>Freq_Val</code>进行不等比较。如果<code>Freq_Val</code>不等于三元运算结果，则整个表达式为<code>true</code>，否则为<code>false</code>。</li></ol><h3 id="2-表达式"><a href="#2-表达式" class="headerlink" title="2. 表达式"></a>2. 表达式</h3><p><code>if (Freq_Val != (!PWM_Output_Mode) ? 4000 : 8000)</code></p><p>在这种写法中，由于<code>if</code>语句的语法要求，实际结构被解读为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (Freq_Val != (!PWM_Output_Mode)) </span><br><span class="line">    <span class="number">4000</span>;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">    <span class="number">8000</span>;</span><br></pre></td></tr></table></figure><p>这个写法会被编译器识别为条件语句的<code>if-else</code>结构，而不是直接的三元运算符。具体的执行流程如下：</p><ol><li><strong>不等比较</strong>：<code>Freq_Val != (!PWM_Output_Mode)</code>，首先将<code>PWM_Output_Mode</code>取反，并与<code>Freq_Val</code>进行不等比较。</li><li><strong>条件执行</strong>：根据比较结果，如果<code>Freq_Val</code>不等于取反后的<code>PWM_Output_Mode</code>值，则执行<code>4000</code>；否则执行<code>8000</code>。</li></ol><hr><h3 id="总结对比"><a href="#总结对比" class="headerlink" title="总结对比"></a>总结对比</h3><ul><li><strong>第一种写法</strong>：是一个单独的表达式，返回的是一个布尔值，表示<code>Freq_Val</code>是否与<code>(!PWM_Output_Mode ? 4000 : 8000)</code>相等。</li><li><strong>第二种写法</strong>：由于<code>if</code>语句的结构，表示条件控制逻辑，而非布尔比较。</li></ul><h1 id="时间戳"><a href="#时间戳" class="headerlink" title="时间戳"></a>时间戳</h1><h2 id="问题一-1"><a href="#问题一-1" class="headerlink" title="问题一"></a>问题一</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">errorCnt++;</span><br><span class="line"><span class="keyword">if</span> (errorCnt &gt;= <span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;errorCnt is %d&quot;</span>, errorCnt);</span><br><span class="line">    errorTick = HAL_GetTick();</span><br><span class="line">    <span class="keyword">if</span> (HAL_GetTick() - errorTick &gt;= <span class="number">100</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ucLed[<span class="number">1</span>] ^= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (HAL_GetTick() - errorTick &gt;= <span class="number">5000</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ucLed[<span class="number">1</span>] ^= <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为啥这样不能实现当时间戳大于100ms时，LED闪烁，时间戳大于5000ms时，LED灭。</p><p>出现这个问题的原因在于代码的逻辑结构。在你的代码中，当 <code>errorCnt</code> 大于等于3时，执行 <code>errorTick = HAL_GetTick();</code> 赋值语句。这样会导致 <code>errorTick</code> 每次进入该 <code>if</code> 语句时都会被重置，因此 <code>HAL_GetTick() - errorTick</code> 的值始终接近0，从而无法达到100或5000的条件，导致LED不会闪烁。</p><p>为了实现 <code>ucLED[1]</code> 的闪烁，你需要将 <code>errorTick</code> 的赋值逻辑放在外部，这样在 <code>errorCnt &gt;= 3</code> 之后，不会再改变 <code>errorTick</code> 的值，从而可以通过 <code>HAL_GetTick() - errorTick</code> 来检测时间间隔。以下是修改建议：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">led_proc</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    led_disp(ucLed);</span><br><span class="line"></span><br><span class="line">    ucLed[<span class="number">0</span>] = lcd_disp_mode;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (HAL_GetTick() - errorTick &gt;= <span class="number">100</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ucLed[<span class="number">1</span>] ^= (errorCnt &gt;= <span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (HAL_GetTick() - errorTick &gt;= <span class="number">5000</span> &amp;&amp; errorCnt &gt;= <span class="number">3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        errorCnt = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">key_proc</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (key_down == <span class="number">4</span> &amp;&amp; lcd_disp_mode == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">memcmp</span>(passWordData, passWordInputData, <span class="keyword">sizeof</span>(passWordInputData)) == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 密码正确，进入输出状态界面</span></span><br><span class="line">            lcd_disp_mode = <span class="number">1</span>;</span><br><span class="line">            Shift_Tick = HAL_GetTick();</span><br><span class="line">            <span class="comment">// 密码正确,清0输入错误次数</span></span><br><span class="line">            errorCnt = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 密码错误，清除输入密码</span></span><br><span class="line">            <span class="built_in">memset</span>(passWordInputData, <span class="string">&#x27;@&#x27;</span>, <span class="keyword">sizeof</span>(passWordInputData));</span><br><span class="line">            <span class="comment">// 密码错误次数</span></span><br><span class="line">            errorCnt++;</span><br><span class="line">            <span class="keyword">if</span> (errorCnt &gt;= <span class="number">3</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                errorTick = HAL_GetTick();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解释-1"><a href="#解释-1" class="headerlink" title="解释"></a>解释</h3><ol><li><code>errorTick</code> 仅在第一次进入时赋值，不会每次进入都重置。</li><li>使用 <code>HAL_GetTick()</code> 来判断时间是否超过100ms，如果是，则切换 <code>ucLED[1]</code> 的状态并重置 <code>errorTick</code>，以实现闪烁效果。</li><li>另外增加了一个 <code>5000ms</code> 的判断，超过5秒则关闭 <code>ucLED[1]</code> 并重置 <code>errorCnt</code> 和 <code>errorTick</code>，以便重新计时和计数。</li></ol><p>这样调整后，你的代码就能够按照预期工作，实现 <code>ucLED[1]</code> 的闪烁效果。</p><p>因此我们可以知道，用时间戳进行判断的时候，我们可以在完成某一逻辑需求下，先获取此时的时间值，然后在别的函数或者其他地方用时间戳相差来实现需求。</p><h1 id="整型提升"><a href="#整型提升" class="headerlink" title="整型提升"></a>整型提升</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>（g_irCode[<span class="number">2</span>] == ~g_irCode[<span class="number">3</span>]）</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>括号里表达式的值是真是假？二者不相等，即为假！</p><p>在 C 语言中，即使 <code>g_irCode[2]</code> 和 <code>g_irCode[3]</code> 都是 <code>uint8_t</code> 类型，在进行位操作时可能会发生数据类型的“提升”，这会影响 <code>~</code> 操作符的结果。</p><h3 id="问题原因：类型提升"><a href="#问题原因：类型提升" class="headerlink" title="问题原因：类型提升"></a>问题原因：类型提升</h3><p>在表达式 <code>~g_irCode[3]</code> 中，即使 <code>g_irCode[3]</code> 是 <code>uint8_t</code> 类型，编译器会将它提升为 <code>int</code> 类型，以符合标准的操作数要求。提升为 <code>int</code> 后，<code>g_irCode[3]</code> 的范围从 <code>0x00</code> - <code>0xFF</code> 变为 <code>0x00000000</code> - <code>0x000000FF</code>。接着，取反操作 <code>~</code> 会在整个 <code>int</code> 范围（通常是 32 位）内执行位反转，而不是仅限于 <code>uint8_t</code> 的 8 位。</p><h3 id="示例：具体过程"><a href="#示例：具体过程" class="headerlink" title="示例：具体过程"></a>示例：具体过程</h3><ol><li>假设 <code>g_irCode[2] = 0x55</code> 和 <code>g_irCode[3] = 0x55</code>。</li><li><code>~g_irCode[3]</code> 被提升为 <code>int</code> 类型。<ul><li><code>g_irCode[3]</code> 实际上变成了 <code>0x00000055</code>（32 位）。</li></ul></li><li>取反操作 <code>~</code> 作用于整个 32 位：<ul><li><code>~0x00000055</code> 结果是 <code>0xFFFFFFAA</code>。</li></ul></li><li><code>0xFFFFFFAA</code> 是一个 32 位有符号整数，而 <code>g_irCode[2]</code> 仍然是 8 位的 <code>uint8_t</code> 值 <code>0x55</code>，这就导致两者不相等。</li></ol><h3 id="解决方案：确保取反后只保留-8-位"><a href="#解决方案：确保取反后只保留-8-位" class="headerlink" title="解决方案：确保取反后只保留 8 位"></a>解决方案：确保取反后只保留 8 位</h3><p>为确保结果在 8 位 <code>uint8_t</code> 范围内，你可以通过强制转换将结果截断为 8 位：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(g_irCode[<span class="number">2</span>] == (<span class="type">uint8_t</span>)(~g_irCode[<span class="number">3</span>]))</span><br></pre></td></tr></table></figure><p>这样，<code>~g_irCode[3]</code> 的结果会先取反为 <code>0xFFFFFFAA</code>，然后再强制转换为 <code>uint8_t</code>，最终只保留低 8 位，得到 <code>0xAA</code>，即符合预期的取反值。</p><h1 id="sizeof"><a href="#sizeof" class="headerlink" title="sizeof"></a>sizeof</h1><p><code>sizeof()里放数组名和struct+结构体名是不是就能准确的算出数组和结构体的大小？</code></p><p><code>sizeof()</code> 运算符在 C 和 C++ 中确实可以用于计算数组和结构体的大小：</p><ol><li><p><strong>数组</strong>：当 <code>sizeof()</code> 中放入数组名（例如 <code>sizeof(array)</code>）时，它会返回整个数组的总大小（单位是字节）。例如，对于 <code>int array[10];</code>，<code>sizeof(array)</code> 会返回 <code>10 * sizeof(int)</code> 的值，这表示整个数组所占的内存空间。如果传递的是指针而不是数组名，比如 <code>int *array_ptr</code>，那么 <code>sizeof(array_ptr)</code> 得到的只是指针本身的大小（通常是 4 或 8 字节），而不是数组的总大小。</p></li><li><p><strong>结构体</strong>：<code>sizeof(struct StructName)</code> 或 <code>sizeof(structure_variable)</code> 可以准确地计算结构体所占的内存大小。<code>sizeof</code> 会考虑结构体内部字段的对齐（alignment），并且会将所有字段的大小加在一起，因此返回的值就是结构体占用的总字节数。</p></li></ol><p>所以，将数组名和结构体名传给 <code>sizeof()</code> 确实能准确计算出数组和结构体的内存大小。这种方法在编译期直接计算，效率高且准确。<code>sizeof()</code>确实能准确计算其字节大小，包括<code>&#39;\0&#39;</code>等所有元素。</p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p><code>sizeof</code>和<code>strlen</code>在用途上有不同的场景，特别是在数组和字符串的处理中。以下是它们的适用场景及示例：</p><h3 id="1-使用-sizeof-的情况"><a href="#1-使用-sizeof-的情况" class="headerlink" title="1. 使用 sizeof 的情况"></a>1. 使用 <code>sizeof</code> 的情况</h3><ul><li><strong>数组的总大小</strong>：<code>sizeof</code>用于计算整个数组的字节数，包括任何内容在内的总大小，<strong>适用于非字符串类型的数组和固定大小的字符串数组。</strong></li><li><strong>结构体的总大小</strong>：<code>sizeof</code>用于获取结构体在内存中占用的总字节数，包括所有字段和可能的填充字节。</li></ul><p><strong>示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 整数数组</span></span><br><span class="line">    <span class="type">int</span> arr[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;数组的大小: %lu 字节\n&quot;</span>, <span class="keyword">sizeof</span>(arr)); <span class="comment">// 输出为整个数组的字节数，例如20字节（假设int是4字节）</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 字符数组</span></span><br><span class="line">    <span class="type">char</span> str[<span class="number">10</span>] = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;字符数组的大小: %lu 字节\n&quot;</span>, <span class="keyword">sizeof</span>(str)); <span class="comment">// 输出10字节，即数组分配的总大小，不管实际存储的内容</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 结构体</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">MyStruct</span> &#123;</span></span><br><span class="line">        <span class="type">int</span> a;</span><br><span class="line">        <span class="type">double</span> b;</span><br><span class="line">        <span class="type">char</span> c;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;结构体的大小: %lu 字节\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> MyStruct)); <span class="comment">// 输出结构体的总大小，包括字段和填充</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于结构体，只能使用 <code>sizeof</code> 来计算其大小，因为 <code>strlen</code> 只适用于字符串，而结构体中通常包含多种不同类型的数据，不适合作为字符串处理。</p><h3 id="2-使用-strlen-的情况"><a href="#2-使用-strlen-的情况" class="headerlink" title="2. 使用 strlen 的情况"></a>2. 使用 <code>strlen</code> 的情况</h3><ul><li><strong>字符串的实际长度</strong>：<code>strlen</code>用于计算字符串内容的实际长度（不包括末尾的<code>\0</code>），通常用于字符数组（C字符串）。</li><li>只适用于字符串数组，不适用于非字符串数组或结构体。</li></ul><p><strong>示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 字符串</span></span><br><span class="line">    <span class="type">char</span> str[<span class="number">10</span>] = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;字符串的实际长度: %lu\n&quot;</span>, <span class="built_in">strlen</span>(str)); <span class="comment">// 输出5，因为&quot;hello&quot;的长度为5，不包括结尾的&#x27;\0&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 空字符串上</span></span><br><span class="line">    <span class="type">char</span> emptyStr[<span class="number">10</span>] = <span class="string">&quot;&quot;</span>; </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;空字符串的实际长度: %lu\n&quot;</span>, <span class="built_in">strlen</span>(emptyStr)); <span class="comment">// 输出0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 非字符串数组 (strlen不适用)</span></span><br><span class="line">    <span class="type">int</span> arr[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    <span class="comment">// printf(&quot;%lu\n&quot;, strlen(arr)); // 错误！strlen不适用于非字符串类型</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><ul><li><strong>用 <code>sizeof</code></strong>：用于获取数组的总大小（字节数）或结构体的总字节数。适合于非字符串数组（如<code>int</code>数组）和结构体。</li><li><strong>用 <code>strlen</code></strong>：用于获取字符串（字符数组）的实际字符长度，不包括末尾的<code>\0</code>。适合于字符串数组。</li></ul><h1 id="文件路径打印"><a href="#文件路径打印" class="headerlink" title="文件路径打印"></a>文件路径打印</h1><h2 id="问题一-2"><a href="#问题一-2" class="headerlink" title="问题一"></a>问题一</h2><p>为啥实际打印效果是这样的，如图所示。</p><p><img src="/2024/10/04/%E7%9F%A5%E8%AF%86%E7%82%B9/%E5%90%88%E9%9B%86/QQ20241116-134323.png" alt="QQ20241116-134323"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> FILENAME (strrchr(__FILE__, <span class="string">&#x27;\\&#x27;</span>) ? strrchr(__FILE__, <span class="string">&#x27;\\&#x27;</span>) + 1 : __FILE__)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Debug_Printf(format, ...) printf(<span class="string">&quot;[%s:%d]--&quot;</span> format, FILENAME, __LINE__, ##__VA_ARGS__)</span></span><br></pre></td></tr></table></figure><p><strong>路径分隔符不匹配的问题</strong>： 您的 <code>FILENAME</code> 宏使用了 <code>strrchr(__FILE__, &#39;\\&#39;)</code> 来获取文件名，但实际路径可能使用的是斜杠 <code>/</code>，而不是反斜杠 <code>\\</code>。这会导致 <code>strrchr(__FILE__, &#39;\\&#39;)</code> 返回空指针，从而执行宏中的 <code>__FILE__</code>，即打印出完整路径。</p><p><strong>解决方案</strong>： 修改 <code>FILENAME</code> 宏，使其同时支持 <code>/</code> 和 <code>\\</code> 路径分隔符，例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> FILENAME ((strrchr(__FILE__, <span class="string">&#x27;/&#x27;</span>) ? strrchr(__FILE__, <span class="string">&#x27;/&#x27;</span>) : strrchr(__FILE__, <span class="string">&#x27;\\&#x27;</span>)) ? (strrchr(__FILE__, <span class="string">&#x27;/&#x27;</span>) ? strrchr(__FILE__, <span class="string">&#x27;/&#x27;</span>) + 1 : strrchr(__FILE__, <span class="string">&#x27;\\&#x27;</span>) + 1) : __FILE__)</span></span><br></pre></td></tr></table></figure><p>或者更简化的方法：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> FILENAME (strrchr(__FILE__, <span class="string">&#x27;/&#x27;</span>) ? strrchr(__FILE__, <span class="string">&#x27;/&#x27;</span>) + 1 : (strrchr(__FILE__, <span class="string">&#x27;\\&#x27;</span>) ? strrchr(__FILE__, <span class="string">&#x27;\\&#x27;</span>) + 1 : __FILE__))</span></span><br></pre></td></tr></table></figure><p><strong>打印位置格式化问题</strong>： 打印输出显示的是 <code>[./Core/Src/main.c:94]</code>，说明文件路径的分隔符是 <code>/</code>，这和 <code>FILENAME</code> 宏里假设的 <code>\\</code> 不一致。</p><p><strong>调试环境或编译器行为差异</strong>： 不同的编译器或 IDE 可能在 <code>__FILE__</code> 中提供不同格式的路径。例如：</p><ul><li>Windows 环境下通常使用反斜杠 <code>\\</code>。</li><li>Unix/Linux 或跨平台编译器（如 GCC 或 Clang）可能使用正斜杠 <code>/</code>。</li></ul><p>这种差异会直接影响 <code>strrchr()</code> 的匹配结果。</p><p><strong>日志显示方式影响</strong>： 如果是通过串口助手显示日志，请确保没有其他格式化过程（例如某些脚本或日志系统会对路径或信息进行格式化处理）。</p><h2 id="问题二-2"><a href="#问题二-2" class="headerlink" title="问题二"></a>问题二</h2><p>进一步详细解释为啥 <code>FILENAME</code> 宏使用了 <code>strrchr(__FILE__, &#39;\\&#39;)</code> 来获取文件名，但实际路径可能使用的是斜杠 /，而不是反斜杠 \。这会导致 <code>strrchr(__FILE__, &#39;\\&#39;)</code> 返回空指针，从而执行宏中的 <strong>FILE</strong>，即打印出完整路径？</p><h3 id="1-路径分隔符与操作系统"><a href="#1-路径分隔符与操作系统" class="headerlink" title="1. 路径分隔符与操作系统"></a>1. <strong>路径分隔符与操作系统</strong></h3><ul><li><strong>Windows</strong>: 通常使用反斜杠 <code>\</code> 作为路径分隔符。例如：<code>C:\Users\Documents\main.c</code>。</li><li><strong>Unix/Linux</strong>: 使用正斜杠 <code>/</code> 作为路径分隔符。例如：<code>/home/user/main.c</code>。</li><li><strong>跨平台编译器（如 GCC 或 Clang）</strong>: 即使在 Windows 平台上编译，编译器通常会在 <code>__FILE__</code> 宏中返回正斜杠 <code>/</code>，因为这是标准化的路径分隔符，便于跨平台兼容。</li></ul><h3 id="2-FILE-的实际值"><a href="#2-FILE-的实际值" class="headerlink" title="2. __FILE__ 的实际值"></a>2. <strong><code>__FILE__</code> 的实际值</strong></h3><ul><li><code>__FILE__</code> 是预定义宏，它表示当前编译单元的文件路径，具体值由编译器决定。</li><li>在大多数编译器中：<ul><li><strong>绝对路径</strong>: <code>__FILE__</code> 包含完整的文件路径。例如：<code>C:/project/src/main.c</code>。</li><li><strong>相对路径</strong>: 如果文件是通过相对路径传递给编译器，<code>__FILE__</code> 的值可能是相对路径，例如：<code>src/main.c</code>。</li></ul></li><li>关键问题是：<strong>路径中的分隔符格式由编译器决定</strong>，即使在 Windows 上，许多跨平台编译器（如 GCC）依然会使用正斜杠 <code>/</code>。</li></ul><h3 id="3-strrchr-的行为"><a href="#3-strrchr-的行为" class="headerlink" title="3. strrchr 的行为"></a>3. <strong><code>strrchr</code> 的行为</strong></h3><p><code>strrchr</code> 函数用于查找字符串中某个字符的最后一次出现，语法如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> *<span class="title function_">strrchr</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *str, <span class="type">int</span> ch)</span>;</span><br></pre></td></tr></table></figure><ul><li>如果找到目标字符（如 <code>&#39;\\&#39;</code> 或 <code>&#39;/&#39;</code>），返回该字符在字符串中的指针。</li><li>如果未找到目标字符，返回 <code>NULL</code>。</li></ul><h3 id="4-为什么-strrchr-FILE-39-39-会返回-NULL？"><a href="#4-为什么-strrchr-FILE-39-39-会返回-NULL？" class="headerlink" title="4. 为什么 strrchr(__FILE__, &#39;\\&#39;) 会返回 NULL？"></a>4. <strong>为什么 <code>strrchr(__FILE__, &#39;\\&#39;)</code> 会返回 <code>NULL</code>？</strong></h3><p>如果 <code>__FILE__</code> 中的路径分隔符是正斜杠 <code>/</code>，例如：<code>/home/user/main.c</code>，那么：</p><ul><li><code>strrchr(__FILE__, &#39;\\&#39;)</code> 会尝试寻找反斜杠 <code>\</code>。</li><li>因为路径中根本没有反斜杠，<code>strrchr</code> 将返回 <code>NULL</code>。</li></ul><p>当返回 <code>NULL</code> 时，您的宏会进入三目运算符的 <code>: __FILE__</code> 分支，因此最终打印整个路径。</p><h1 id="硬件异常（HardFault）"><a href="#硬件异常（HardFault）" class="headerlink" title="硬件异常（HardFault）"></a>硬件异常（HardFault）</h1><h2 id="数组越界访问"><a href="#数组越界访问" class="headerlink" title="数组越界访问"></a>数组越界访问</h2><p>这段代码，有什么问题？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">* @brief 中位值平均滤波</span></span><br><span class="line"><span class="comment">* @param arr，数组首地址</span></span><br><span class="line"><span class="comment">* @param len，元素个数，需要大于等于3个</span></span><br><span class="line"><span class="comment">* @return 平均运算结果</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">static</span> <span class="type">uint16_t</span> <span class="title function_">MedianAvgFltr</span><span class="params">(<span class="type">uint16_t</span> *arr, <span class="type">uint32_t</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">qsort(arr, len, <span class="keyword">sizeof</span>(<span class="type">uint16_t</span>), CmpCb);</span><br><span class="line"><span class="keyword">return</span> ArithAvgFltr(&amp;arr[<span class="number">1</span>], len - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">* @brief 触发驱动转换温度传感器数据</span></span><br><span class="line"><span class="comment">* @param</span></span><br><span class="line"><span class="comment">* @return </span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Temp_SensorProc</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">static</span> <span class="type">uint16_t</span> s_convertNum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获得ADC采集数据</span></span><br><span class="line"><span class="type">uint16_t</span> ADCVal = Get_ADCVal();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将ADC采集数据转换为十倍温度值</span></span><br><span class="line"><span class="type">uint16_t</span> temp10Mpl = ADCtoTemp10Mpl(ADCVal);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将十倍温度值放入Buffer中</span></span><br><span class="line">PushDataToBuf(temp10Mpl);</span><br><span class="line"></span><br><span class="line">s_convertNum++;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 采集小于3次直接用第一次采集数据代替</span></span><br><span class="line"><span class="keyword">if</span>(s_convertNum &lt; <span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line">g_tempData = g_temp10MplBuf[<span class="number">0</span>] / <span class="number">10.0f</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s_convertNum &gt; BUFF_NUM_SIZE)</span><br><span class="line">&#123;</span><br><span class="line">s_convertNum = BUFF_NUM_SIZE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 快速排序 + 中值滤波 </span></span><br><span class="line">g_tempData = MedianAvgFltr(g_temp10MplBuf, s_convertNum) / <span class="number">10.0f</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每调用一次<code>Temp_SensorProc</code>函数，都会采集一次ADC数据，<code>s_convertNum</code></p><p>会记录采集次数。在小于3次的情况下，一旦调用<code>MedianAvgFltr</code>函数，那么<code>len - 2 &lt; 0</code>，导致数组越界进入硬件故障处理程序 (<code>HardFault_Handler</code>) 。</p><p>程序进入硬件故障处理程序 (<code>HardFault_Handler</code>) 的原因通常是因为直接访问了未定义的内存区域，导致不可预期的行为。在 Cortex-M 系列 MCU（比如你使用的 GD32F30x）中，CPU 会进行内存保护，如果尝试访问非法地址，可能会触发硬件异常，导致进入 <code>HardFault_Handler</code>。</p><h3 id="1-原因"><a href="#1-原因" class="headerlink" title="1.原因"></a>1.原因</h3><ol><li><strong>无效的内存访问</strong><ul><li><strong>栈内存溢出</strong>：如果函数访问了超出数组大小的地址，就有可能修改到本不属于它的内存区域，甚至可能覆盖堆栈。这样会导致调用返回地址丢失，函数在返回时无法正常跳转，进而引发异常。</li><li><strong>访问不可访问的区域</strong>：某些微控制器的内存区域可能是不可访问的（比如保留区域），如果越界访问到这些区域，就会触发 <code>HardFault</code>。</li></ul></li><li><strong>程序执行错误</strong><ul><li>当越界访问破坏了函数的返回地址或者栈上的数据时，程序的控制流就会被破坏。当函数返回时，由于返回地址错误，程序指针 (<code>PC</code>) 可能跳转到一个不合法的地址，这种情况下，硬件无法找到有效的指令来执行，就会进入 <code>HardFault_Handler</code>。</li></ul></li><li><strong>具体的示例</strong><ul><li>比如，在 <code>ArithAvgFltr()</code> 函数中，传入了错误的 <code>len</code> 值（比如大于数组的实际长度），那么在循环中 <code>arr[i]</code> 就可能访问到越界的内存，导致未定义行为。</li><li>在函数 <code>MedianAvgFltr()</code> 中调用 <code>qsort()</code> 进行排序后，再访问 <code>arr</code> 时，如果 <code>len</code> 传入错误，同样会造成越界，进而引发硬件故障。</li></ul></li></ol><h3 id="2-解决方法"><a href="#2-解决方法" class="headerlink" title="2.解决方法"></a>2.解决方法</h3><p>如何避免数组越界进入 <code>HardFault_Handler</code>？</p><ol><li><p><strong>检查数组的边界条件</strong></p><ul><li><p>在使用任何数组之前，必须确保其索引不会超过数组的最大范围。</p></li><li><p>在调用 <code>ArithAvgFltr()</code>、<code>MedianAvgFltr()</code> 等涉及数组操作的函数时，增加对 <code>len</code> 的检查。例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (arr == <span class="literal">NULL</span> || len == <span class="number">0</span> || len &gt; BUFF_NUM_SIZE) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  <span class="comment">// 防止传入无效的长度或指针</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>增加防护代码</strong></p><ul><li><p>在每次访问数组时，都可以添加边界检查，确保访问的索引没有超过数组的大小。例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">uint32_t</span> i = <span class="number">0</span>; i &lt; len; i++) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= BUFF_NUM_SIZE) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 这里添加错误处理逻辑，避免越界访问</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sum += arr[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>使用硬件调试器</strong></p><ul><li>使用硬件调试器（如 J-Link 或其他支持 SWD 的调试器）可以设置硬件断点，并在访问非法内存地址时中断程序，便于定位越界访问的源头。</li></ul></li></ol><p>可以修改如下内容以避免数组越界导致的 <code>HardFault</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">* @brief 触发驱动转换温度传感器数据</span></span><br><span class="line"><span class="comment">* @param</span></span><br><span class="line"><span class="comment">* @return </span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">TempSensorProc</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">static</span> <span class="type">uint16_t</span> s_convertNum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">uint16_t</span> adcVal = GetAdcVal();</span><br><span class="line"><span class="type">uint16_t</span> temp10Mpl = AdcToTemp10Mpl(adcVal);</span><br><span class="line"></span><br><span class="line">PushDataToBuf(temp10Mpl);</span><br><span class="line">s_convertNum++;</span><br><span class="line"><span class="keyword">if</span> (s_convertNum &lt; <span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line">g_tempData = g_temp10MplBuf[<span class="number">0</span>] / <span class="number">10.0f</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (s_convertNum &gt; MAX_BUF_SIZE)</span><br><span class="line">&#123;</span><br><span class="line">s_convertNum = MAX_BUF_SIZE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">g_tempData = MedianAvgFltr(g_temp10MplBuf, s_convertNum) / <span class="number">10.0f</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里加<code>return</code>后，使用数组就不会进行非法内存访问，从而避免程序进入 <code>HardFault_Handler</code>。</p><p>因此，<strong>数组越界</strong>会导致进入 <code>HardFault_Handler</code> 是因为 <strong>MCU 中有内存访问保护</strong>，<strong>越界访问会导致访问未定义的内存地址</strong>，<strong>可能会影响堆栈或跳转到无效指令</strong>，<strong>最终触发硬件异常</strong>。为了避免这种情况，必须进行边界检查、合理使用数组并确保指针操作的合法性。</p><h1 id="总线异常（Bus-Fault）"><a href="#总线异常（Bus-Fault）" class="headerlink" title="总线异常（Bus Fault）"></a>总线异常（Bus Fault）</h1><h2 id="1-外部中断"><a href="#1-外部中断" class="headerlink" title="1.外部中断"></a>1.外部中断</h2><p>按键未按下导致外部中断触发的问题与清不清中断标志位没关系，但仍然会进入总线访问异常中断。总线访问异常（Bus Fault）通常与访问非法地址、栈溢出或其他内存错误有关。</p><h3 id="1-原因-1"><a href="#1-原因-1" class="headerlink" title="1.原因"></a>1.<strong>原因</strong></h3><ol><li><p><strong>外部中断配置不当</strong>：</p><ul><li>如果外部中断配置（例如 EXTI0）或中断向量表的处理不正确，可能会触发不可预期的行为，导致访问非法内存区域。特别是在外部中断服务程序（ISR）中进行非法操作时。</li><li>如果没有正确配置中断的优先级或中断处理函数中访问了非法内存（如未初始化的指针、NULL 指针、未对齐访问等），会引发总线访问异常。</li></ul></li><li><p><strong>外设的中断触发条件</strong>：</p><ul><li>即使按键没有按下，中断仍然可能被触发，尤其是如果外部中断线的状态没有正确检查或配置。</li><li>比如，如果 GPIO 输入引脚的电平状态未正确处理，可能会导致外部中断触发。若该中断服务函数（ISR）未正确清除中断标志位或处理中断时访问了无效地址，可能会导致异常。</li></ul></li><li><p><strong>中断服务函数访问非法内存</strong>：</p><ul><li>在你的 <code>EXTI0_IRQHandler</code> 函数中，如果在处理中访问了无效的内存地址或使用了未初始化的指针，程序会进入总线访问异常。</li></ul></li><li><p><strong>外设寄存器配置问题</strong>：</p><ul><li>如果访问了未初始化或无效的外设寄存器，可能会导致总线访问异常。例如，在你的代码中，如果中断源没有正确配置或清除，外设可能未正确初始化，导致访问外设时发生异常。</li></ul></li></ol><h3 id="2-解决方法-1"><a href="#2-解决方法-1" class="headerlink" title="2.解决方法"></a><strong>2.解决方法</strong></h3><ol><li><p><strong>确认 GPIO 配置正确</strong>：<br>你的按键连接到 <code>GPIOA</code> 的 <code>PIN_0</code>，在 <code>GPIOInit</code> 函数中配置为输入浮空状态。这可能会导致不稳定的中断触发，因为浮空输入可能接收到噪声信号，导致不必要的中断触发。</p><p><strong>改进</strong>：</p><ul><li>使用上拉或下拉电阻，确保在按键没有按下时，GPIO 引脚的电平是确定的，避免触发不必要的中断。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpio_init(GPIOA, GPIO_MODE_IN_PULLUP, GPIO_OSPEED_2MHZ, GPIO_PIN_0);  <span class="comment">// 使用上拉</span></span><br></pre></td></tr></table></figure></li><li><p><strong>检查外部中断配置</strong>：<br>外部中断（<code>EXTI0</code>）的触发配置可能是下降沿触发（<code>EXTI_TRIG_FALLING</code>），在没有按键按下时如果引脚状态变化（比如引脚接收到噪声或浮空），可能会导致中断触发，进而进入 <code>EXTI0_IRQHandler</code>。</p><p><strong>改进</strong>：</p><ul><li>确保中断只在按键按下时触发，并使用适当的防抖方法，或者在外部中断服务函数中检查 GPIO 引脚的实际状态。</li></ul></li><li><p><strong>ISR 中的非法内存访问</strong>：<br>确保 <code>EXTI0_IRQHandler</code> 中没有非法的内存访问操作。比如，在 ISR 中访问未初始化的指针或执行不合法的内存操作都会导致总线访问异常。</p><p><strong>改进</strong>：</p><ul><li>检查并确保 ISR 中没有不必要的内存操作，避免使用指针访问未分配的内存。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">EXTI0_IRQHandler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (exti_interrupt_flag_get(EXTI_0)) &#123;</span><br><span class="line">        exti_interrupt_flag_clear(EXTI_0);</span><br><span class="line">        <span class="comment">// 这里确保中断标志位已清除且没有非法内存操作</span></span><br><span class="line">        ToggleLed(LED1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>检查 NVIC 配置</strong>：<br>中断优先级配置不当也可能导致中断服务程序执行时进入异常状态。确保 NVIC 中断优先级正确配置。</p><p><strong>改进</strong>：</p><ul><li>确保 <code>NVIC</code> 中断优先级正确设置，避免优先级冲突或中断失效。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvic_irq_enable(EXTI0_IRQn, <span class="number">1</span>, <span class="number">1</span>);  <span class="comment">// 中断优先级设置为 1</span></span><br></pre></td></tr></table></figure></li></ol><ul><li>按键未按下，可能因为浮空输入或者未正确配置上拉/下拉电阻，导致不必要的外部中断触发。</li><li>总线访问异常通常与非法内存访问相关，可能是在 ISR 中访问了未初始化或非法的内存地址。</li><li>确保外设中断配置、GPIO 引脚状态以及中断服务程序中的内存操作正确。</li><li>最重要的是，检查并确保在中断服务函数中没有非法的内存访问或资源竞争，并且中断标志被正确清除。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 知识点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STM32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构</title>
      <link href="/2024/09/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>/2024/09/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<ol><li><h1 id="基础顺序表"><a href="#基础顺序表" class="headerlink" title="基础顺序表"></a>基础顺序表</h1></li><li><h2 id="顺序表分类"><a href="#顺序表分类" class="headerlink" title="顺序表分类"></a><strong>顺序表分类</strong></h2><p>顺序表分为动态顺序表和静态顺序表，他们的基本结构是怎么展现的呢？</p></li><li><p><strong>静态顺序表</strong></p></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> N 100</span></span><br><span class="line"><span class="comment">//静态顺序表</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Seqlist</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">        <span class="type">int</span> arr[N];<span class="comment">//存放数组大小</span></span><br><span class="line">        <span class="type">int</span> size;<span class="comment">//有效存储数据个数</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>静态顺序表只有两个成员，首先是存放数据数组，其次我们还要知道有效的数据个数,其存放数据大小是一开始便已经确定的，并不灵活，实际开发中根本不会用这种方式。</p><ol><li><strong>动态顺序表</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Seqlist</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span>* arr;<span class="comment">//存放数组大小</span></span><br><span class="line">    <span class="type">int</span> size;<span class="comment">//有效存储数据个数</span></span><br><span class="line">    <span class="type">int</span> capacity;<span class="comment">//开辟空间大小</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>为啥这里用 <strong>int</strong> <strong>*</strong> ？当然是因为需要动态开辟内存空间。既然是动态，当然要用到动态内存管理的知识 ，让我们的<strong>arr</strong>依据存储数据<strong>size</strong>需求量，对数组空间进行扩容或缩容。这里多了一个<strong>capacity</strong>表示开辟空间的大小。为啥要这样设计，因为有效存储数据size的大小并不一定等于空间capacity的大小，这样便于逻辑书写。</p><p>诚然，动态和静态都能解决问题，可是对于静态顺序表来说，一开始我们也不知道到底需要存储多少数据，就像短视频的老板一样，他也不知道自己的产品需要存储多少用户信息。万一初始空间给小了，就放不了太多，容易导致数据丢失；万一初始空间给大了，会占用很大的内存空间，导致代码低效！</p><p>​    因此，对比动态和静态顺序表，我们可以清楚的知道动态顺序表更有优势，接下来就是实现一个简单的动态顺序表。</p><ol><li><h2 id="动态顺序表的具体实现"><a href="#动态顺序表的具体实现" class="headerlink" title="动态顺序表的具体实现"></a>动态顺序表的具体实现</h2></li><li><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3></li></ol><p>上述定义其实不太完美。改良一下，将<strong>int</strong>重定义为<strong>SLDataType</strong>，其目的是为了以后方便<strong>修改数据类型</strong> 。</p><p><img src="/2024/09/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/-172554078033116.png" alt="img"></p><p>试想一下，万一以后要往顺序表里存储字符串咋办，很多涉及到int这个关键字的地方肯定不能全用VS的替换吧，有些变量可能本身用int来定义，以后代码万一增多，手动修改出现错误或误操作，代码可能直接崩溃，这是很可怕的事情。</p><p>因此，提前做好防范。同时为了避免每次传结构体都要加上struct，把它重新命名为SL，这样会很方便！</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 动态顺序表</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> SLDataType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Seqlist</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    SLDataType *arr; <span class="comment">// 存放数组大小</span></span><br><span class="line">    <span class="type">int</span> size;        <span class="comment">// 有效存储数据个数</span></span><br><span class="line">    <span class="type">int</span> capacity;    <span class="comment">// 开辟空间的大小</span></span><br><span class="line">&#125; SL;</span><br></pre></td></tr></table></figure><ol><li><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3></li></ol><p>初始化其实很简单，用一个封装函数，让arr指针为空，size和capacity都置为0，也可以用malloc初始扩充一定的空间，不多赘述。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Seqlist_Init</span><span class="params">(SL* ps)</span></span><br><span class="line">&#123;</span><br><span class="line">    ps-&gt;arr = <span class="literal">NULL</span>;</span><br><span class="line">    ps-&gt;capacity = ps-&gt;size = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那我初始化函数这样写对不对？</p><p>当然是不对的，我们渴望修改结构体里的数据，从而初始化。根据函数调用中实参和形参的关系可知，形参只是形参的临时拷贝，改变形参不会改变实参，所以传值调用是不合法的（建议可以了解一下函数栈帧的知识），对于用函数交换两个变量，我们是不是只能传两个变量的地址啊，这里也一样。</p><p>经过调试，成功实现顺序表初始化。</p><p><img src="/2024/09/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/-17255407803301.png" alt="img"></p><ol><li><h3 id="销毁"><a href="#销毁" class="headerlink" title="销毁"></a>销毁</h3><p>有初始化必然就有销毁！销毁就必然要将开辟的内存空间重新还给操作系统，并将size和capacity置为0。</p></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Seqlist_Destroy</span><span class="params">(SL* ps)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (ps-&gt;arr) <span class="comment">//等价于  if(ps-&gt;arr != NULL)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">free</span>(ps-&gt;arr);</span><br><span class="line">    &#125;</span><br><span class="line">    ps-&gt;arr = <span class="literal">NULL</span>;</span><br><span class="line">    ps-&gt;size = ps-&gt;capacity = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>勿忘将arr置为 <strong>NULL</strong> 。我们用free函数将内存释放只是失去了访问之前开辟空间的能力，首地址还是那个地址没有变，可是已经没有明确的指向，构成野指针，而且free不会自动置空。</p><p>补充一点，例如return 返回值，我们调用一个函数来返回一个结果，我们是不是一般都是返回一个值啊，万一返回一个地址咋办，而且这个地址是正常的吗？</p><p>以一道题目为例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> *<span class="title function_">GetMemory</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> p[] = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Test</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> *str = <span class="literal">NULL</span>;</span><br><span class="line">    str = GetMemory();</span><br><span class="line">    <span class="built_in">printf</span>(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以运行吗？</p><p><img src="/2024/09/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/-17255407803302.png" alt="img"></p><p>编译器直接报错。原因嘛和上面一样啊，这个p地址还是那个地址，但是GetMemory函数执行完后p指向的空间还给操作系统了，没有访问权限，就会指向不明确，所以p为野指针，不能正确执行程序。就算有些编译器可以成功运行此程序，那也是非法访问。</p><ol><li><h3 id="打印数据"><a href="#打印数据" class="headerlink" title="打印数据"></a>打印数据</h3></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//打印</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">PrintSeqlist</span><span class="params">(SL* ps)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ps-&gt;size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, ps-&gt;arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/09/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/-17255407803303.png" alt="img"></p><p><strong>注意：</strong></p><ol><li><p><strong>不需要考虑\</strong>**arr**<em>\</em>里面的数据是啥，所以我们只需要打印有效数据就可以。并不需要对要删除的数据做处理。**</p></li><li><p><strong>要断言一下，如果ps为空指针，删除就无意义了。</strong></p></li><li><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">插入方法各种各样。</span><br></pre></td></tr></table></figure></li><li><h4 id="尾插"><a href="#尾插" class="headerlink" title="尾插"></a>尾插</h4></li></ol><p><img src="/2024/09/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/-17255407803314.png" alt="img"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//尾插</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SLPushBack</span><span class="params">(SL* ps, SLDataType x)</span><span class="comment">//x为插入数据</span></span><br><span class="line">&#123;</span><br><span class="line">    assert(ps);</span><br><span class="line">    ps-&gt;arr[ps-&gt;size++] = x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接这样写行不行？试想，万一<strong>capacity</strong>和<strong>size</strong>相等，即空间大小等于有效个数大小，是不是没有空间了，需要扩容。还有如果capacity为0，arr的地址是无效的哦，也不能插入数据吧！</p><p>每一次插入数据我都需要判断顺序表空是否的存在，从而决定是否扩容。</p><p><strong>因此需要实现一个通用的判断函数：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">SLCheckOut</span><span class="params">(SL* ps)</span></span><br><span class="line">&#123;   </span><br><span class="line">    <span class="keyword">if</span> (ps-&gt;capacity == ps-&gt;size)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> NEWCapacity = (!ps-&gt;capacity) ? <span class="number">4</span> : <span class="number">2</span> * ps-&gt;capacity;</span><br><span class="line">        SLDataType* tmp = (SLDataType*)<span class="built_in">realloc</span>(ps-&gt;arr, NEWCapacity * <span class="keyword">sizeof</span>(SLDataType));</span><br><span class="line">        <span class="comment">//空间开辟失败</span></span><br><span class="line">        <span class="keyword">if</span> (!tmp)</span><br><span class="line">        &#123;</span><br><span class="line">            perror(<span class="string">&quot;realloc&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//空间开辟成功</span></span><br><span class="line">        ps-&gt;arr = tmp;</span><br><span class="line">        ps-&gt;capacity = NEWCapacity;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><ol><li><strong>capacity</strong> <strong> == size怎么办？</strong> 说明此时需要先扩容再插入数据。</li><li><strong>capacity</strong> <strong>为0怎么办？</strong> 所以要单独先判断capacity，为0就给个初始空间为4（随便给，别太离谱），不为0，扩容两倍。</li><li><strong>realloc万一开辟失败怎么办？</strong> 需要报错，来终止程序,开辟内存成功后，才能进行插入数据操作。因为一旦realloc开辟失败，不光不能解决问题，同时还有极大可能把我原来的数据删掉，这不是帮倒忙吗，因此我们使用realloc必须考虑这一点。</li><li><strong>万一ps接收到空指针怎么办？</strong> 那就无法实现插入数据，因此要用assert断言一下（可以去网上找一下assert的用法）其他插入删除数据同理。</li><li><strong>exit(1)</strong> :只是一个简单的退出程序语句。</li><li><strong>size</strong>表示有效数据个数，其初始值为0，所以插入完要++，因为是后置++，在插入数据前不会影响，也可以分开写，无所谓。</li></ol><p>测试一下：</p><p><img src="/2024/09/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/-17255407803315.png" alt="img"></p><p>成功插入数据。</p><ol><li><h4 id="头插"><a href="#头插" class="headerlink" title="头插"></a>头插</h4></li></ol><p>如图，方便理解：</p><p><img src="/2024/09/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/-17255407803316.png" alt="img"></p><p>看到这里是不是就明白了，简单：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//头插</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SLPushFront</span><span class="params">(SL* ps, SLDataType x)</span></span><br><span class="line">&#123;</span><br><span class="line">    assert(ps);</span><br><span class="line">    SLCheckOut(ps);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = ps-&gt;size; i &gt; <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        ps-&gt;arr[i] = ps-&gt;arr[i - <span class="number">1</span>];<span class="comment">//最终arr[1] = arr[0]</span></span><br><span class="line">    &#125;</span><br><span class="line">    ps-&gt;arr[<span class="number">0</span>] = x;</span><br><span class="line">    ps-&gt;size++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试成功！</p><p>注意：</p><p>ps-&gt;size++为啥最后写？<strong>只要顺序表有空间，ps-&gt;size一定小于ps-&gt;**</strong>capacity**，我们这样设计便于理解，删除数据涉及到的ps-&gt;size—同理。</p><ol><li><h4 id="任插"><a href="#任插" class="headerlink" title="任插"></a>任插</h4></li></ol><p>如图，方便理解：</p><p><img src="/2024/09/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/-17255407803317.png" alt="img"></p><p>因此，就是要将pos位之后的数据向右移动一位，再把要放入的数据赋值给数组第pos位，最后有效数据个数加一，并不是将原来pos位的数据替换。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//任意位置插入</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SLInsert</span><span class="params">(SL* ps, <span class="type">int</span> pos, SLDataType x)</span></span><br><span class="line">&#123;</span><br><span class="line">    assert(ps);</span><br><span class="line">    <span class="comment">//不能让顺序表为空</span></span><br><span class="line">    assert(pos &gt;= <span class="number">0</span> &amp;&amp; pos &lt;= ps-&gt;size);</span><br><span class="line">    SLCheckOut(ps);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = ps-&gt;size; i &gt;= pos + <span class="number">1</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        ps-&gt;arr[i] = ps-&gt;arr[i - <span class="number">1</span>];<span class="comment">//ps-&gt;arr[pos + 1] = ps-&gt;arr[pos]</span></span><br><span class="line">    &#125;</span><br><span class="line">    ps-&gt;arr[pos] = x;</span><br><span class="line">    ps-&gt;size++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试一下：</p><p><img src="/2024/09/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/-17255407803318.png" alt="img"></p><p>由此观知，头插尾插也是这种任插的特殊情况。</p><ol><li><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3></li></ol><p>删除不需要考虑那么多，只要传入的顺序表不为空即可。</p><ol><li><h4 id="尾删"><a href="#尾删" class="headerlink" title="尾删"></a>尾删</h4></li></ol><p>如图，方便理解：</p><p><img src="/2024/09/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/-17255407803319.png" alt="img"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//尾删</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SLPopBack</span><span class="params">(SL* ps)</span></span><br><span class="line">&#123;</span><br><span class="line">    assert(ps);</span><br><span class="line">    ps-&gt;size--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试一下：</p><p><img src="/2024/09/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/-172554078033110.png" alt="img"></p><ol><li><h4 id="头删"><a href="#头删" class="headerlink" title="头删"></a>头删</h4></li></ol><p>如图，方便理解：</p><p><img src="/2024/09/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/-172554078033111.png" alt="img"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//头删</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SLPopFront</span><span class="params">(SL* ps)</span></span><br><span class="line">&#123;</span><br><span class="line">    assert(ps);</span><br><span class="line">    <span class="comment">//判断顺序表是否为空</span></span><br><span class="line">    assert(ps-&gt;size);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ps-&gt;size - <span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ps-&gt;arr[i] = ps-&gt;arr[i + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    ps-&gt;size--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>assert(ps-&gt;size)是判断顺序表是否为空，要是size为0，虽然打印有一个数据，但是此时无效数据为0。</strong></p><p>测试一下：</p><p><img src="/2024/09/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/-172554078033112.png" alt="img"></p><ol><li><h4 id="任删"><a href="#任删" class="headerlink" title="任删"></a>任删</h4></li></ol><p>如图，方便理解：</p><p><img src="/2024/09/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/-172554078033113.png" alt="img"></p><p>将pos位之后的数据向前移动，移动位置不在pos位前，最后有效数据个数减一。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//任意位置删除</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SLErase</span><span class="params">(SL* ps, <span class="type">int</span> pos)</span></span><br><span class="line">&#123;</span><br><span class="line">    assert(ps);</span><br><span class="line">    assert(pos &gt;= <span class="number">0</span> &amp;&amp; pos &lt; ps-&gt;size);</span><br><span class="line">    SLCheckOut(ps);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = pos; i &lt; ps-&gt;size - <span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ps-&gt;arr[i] = ps-&gt;arr[i + <span class="number">1</span>];<span class="comment">//ps-&gt;arr[ps-&gt;size - 2] = ps-&gt;arr[ps-&gt;size - 1]</span></span><br><span class="line">    &#125;</span><br><span class="line">    ps-&gt;size--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试一下：</p><p><img src="/2024/09/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/-172554078033114.png" alt="img"></p><p><strong>注意：</strong></p><ol><li><strong>用assert断言\</strong>**pos**<em>\</em>，让pos在安全且合法的范围内。**</li><li><strong>插入数据时，可以把数据插入到下标size上，而删除数据时，不能删除下标size-1后面的数据。</strong></li></ol><p><strong>上图说明：</strong></p><p><img src="/2024/09/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/-172554078033115.png" alt="img"></p><p>简洁明了。</p><ol><li><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3></li></ol><p>遍历查找。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查找</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">FindSL</span><span class="params">(SL* ps, SLDataType x)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ps-&gt;size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (ps-&gt;arr[i] == x)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//找到了</span></span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//没有找到</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>这里我用下标i来遍历数组中的元素，如果找到数据返回下标，如果没找到返回-1，其中-1是随便给的数，目的是为了与数组下标区分开。</strong></p><ol><li><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>顺序表的本质就是对一个数组增删查改，顺序表是属于线性表的一种。顺序表物理和逻辑结构都是线性的，而线性表不同的地方是其只在物理结构是非线性，逻辑结构依然是线性的！</p></li><li><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2></li><li><h3 id="sqlist-h"><a href="#sqlist-h" class="headerlink" title="sqlist.h"></a><strong>sqlist.h</strong></h3></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="comment">// #define N 100</span></span><br><span class="line"><span class="comment">////静态顺序表</span></span><br><span class="line"><span class="comment">// struct Seqlist</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//  int arr[N];//存放数组大小</span></span><br><span class="line"><span class="comment">//  int size;//有效存储数据个数</span></span><br><span class="line"><span class="comment">// &#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 动态顺序表</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> SLDataType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Seqlist</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    SLDataType *arr; <span class="comment">// 存放数组大小</span></span><br><span class="line">    <span class="type">int</span> size;        <span class="comment">// 有效存储数据个数</span></span><br><span class="line">    <span class="type">int</span> capacity;    <span class="comment">// 开辟空间的大小</span></span><br><span class="line">&#125; SL;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Seqlist_Init</span><span class="params">(SL *ps)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 销毁</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Seqlist_Destroy</span><span class="params">(SL *ps)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">PrintSeqlist</span><span class="params">(SL *ps)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 头部插入 / 尾部插入</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SLPushBack</span><span class="params">(SL *ps, SLDataType x)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">SLPushFront</span><span class="params">(SL *ps, SLDataType x)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 头部删除 / 尾部删除</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SLPopBack</span><span class="params">(SL *ps)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">SLPopFront</span><span class="params">(SL *ps)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 任意位置插入</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SLInsert</span><span class="params">(SL *ps, <span class="type">int</span> pos, SLDataType x)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 任意位置删除</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SLErase</span><span class="params">(SL *ps, <span class="type">int</span> pos)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">FindSL</span><span class="params">(SL *ps, SLDataType x)</span>;</span><br></pre></td></tr></table></figure><ol><li><h3 id="sqlist-c"><a href="#sqlist-c" class="headerlink" title="sqlist.c"></a><strong>sqlist.c</strong></h3></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;sqlist.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Seqlist_Init</span><span class="params">(SL* ps)</span></span><br><span class="line">&#123;</span><br><span class="line">    ps-&gt;arr = <span class="literal">NULL</span>;</span><br><span class="line">    ps-&gt;capacity = ps-&gt;size = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Seqlist_Destroy</span><span class="params">(SL* ps)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (ps-&gt;arr) <span class="comment">//等价于  if(ps-&gt;arr != NULL)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">free</span>(ps-&gt;arr);</span><br><span class="line">    &#125;</span><br><span class="line">    ps-&gt;arr = <span class="literal">NULL</span>;</span><br><span class="line">    ps-&gt;size = ps-&gt;capacity = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">SLCheckOut</span><span class="params">(SL* ps)</span></span><br><span class="line">&#123;   </span><br><span class="line">    <span class="keyword">if</span> (ps-&gt;capacity == ps-&gt;size)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> NEWCapacity = (!ps-&gt;capacity) ? <span class="number">4</span> : <span class="number">2</span> * ps-&gt;capacity;</span><br><span class="line">        SLDataType* tmp = (SLDataType*)<span class="built_in">realloc</span>(ps-&gt;arr, NEWCapacity * <span class="keyword">sizeof</span>(SLDataType));</span><br><span class="line">        <span class="comment">//空间开辟失败</span></span><br><span class="line">        <span class="keyword">if</span> (!tmp)</span><br><span class="line">        &#123;</span><br><span class="line">            perror(<span class="string">&quot;realloc&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//空间开辟成功</span></span><br><span class="line">        ps-&gt;arr = tmp;</span><br><span class="line">        ps-&gt;capacity = NEWCapacity;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//尾插</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SLPushBack</span><span class="params">(SL* ps, SLDataType x)</span><span class="comment">//x为插入数据</span></span><br><span class="line">&#123;</span><br><span class="line">    assert(ps);</span><br><span class="line">    SLCheckOut(ps);</span><br><span class="line">    ps-&gt;arr[ps-&gt;size++] = x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//头插</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SLPushFront</span><span class="params">(SL* ps, SLDataType x)</span></span><br><span class="line">&#123;</span><br><span class="line">    assert(ps);</span><br><span class="line">    SLCheckOut(ps);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = ps-&gt;size; i &gt; <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        ps-&gt;arr[i] = ps-&gt;arr[i - <span class="number">1</span>];<span class="comment">//最终arr[1] = arr[0]</span></span><br><span class="line">    &#125;</span><br><span class="line">    ps-&gt;arr[<span class="number">0</span>] = x;</span><br><span class="line">    ps-&gt;size++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">PrintSeqlist</span><span class="params">(SL* ps)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ps-&gt;size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, ps-&gt;arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//尾删</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SLPopBack</span><span class="params">(SL* ps)</span></span><br><span class="line">&#123;</span><br><span class="line">    assert(ps);</span><br><span class="line">    ps-&gt;size--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//头删</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SLPopFront</span><span class="params">(SL* ps)</span></span><br><span class="line">&#123;</span><br><span class="line">    assert(ps);</span><br><span class="line">    <span class="comment">//判断顺序表是否为空</span></span><br><span class="line">    assert(ps-&gt;size);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ps-&gt;size - <span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ps-&gt;arr[i] = ps-&gt;arr[i + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    ps-&gt;size--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//任意位置插入</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SLInsert</span><span class="params">(SL* ps, <span class="type">int</span> pos, SLDataType x)</span></span><br><span class="line">&#123;</span><br><span class="line">    assert(ps);</span><br><span class="line">    <span class="comment">//不能让顺序表为空</span></span><br><span class="line">    assert(pos &gt;= <span class="number">0</span> &amp;&amp; pos &lt;= ps-&gt;size);</span><br><span class="line">    SLCheckOut(ps);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = ps-&gt;size; i &gt;= pos + <span class="number">1</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        ps-&gt;arr[i] = ps-&gt;arr[i - <span class="number">1</span>];<span class="comment">//ps-&gt;arr[pos + 1] = ps-&gt;arr[pos]</span></span><br><span class="line">    &#125;</span><br><span class="line">    ps-&gt;arr[pos] = x;</span><br><span class="line">    ps-&gt;size++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//任意位置删除</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SLErase</span><span class="params">(SL* ps, <span class="type">int</span> pos)</span></span><br><span class="line">&#123;</span><br><span class="line">    assert(ps);</span><br><span class="line">    assert(pos &gt;= <span class="number">0</span> &amp;&amp; pos &lt; ps-&gt;size);</span><br><span class="line">    SLCheckOut(ps);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = pos; i &lt; ps-&gt;size - <span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ps-&gt;arr[i] = ps-&gt;arr[i + <span class="number">1</span>];<span class="comment">//ps-&gt;arr[ps-&gt;size - 2] = ps-&gt;arr[ps-&gt;size - 1]</span></span><br><span class="line">    &#125;</span><br><span class="line">    ps-&gt;size--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查找</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">FindSL</span><span class="params">(SL* ps, SLDataType x)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ps-&gt;size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (ps-&gt;arr[i] == x)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//找到了</span></span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//没有找到</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方便调用。</p><ol><li><h2 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h2></li></ol><p>关于扩容的规则，可以参考一下这篇博客：<a href="http://t.csdnimg.cn/wqt8P">http://t.csdnimg.cn/wqt8P</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>HAL源码解析</title>
      <link href="/2024/09/01/%E7%9F%A5%E8%AF%86%E7%82%B9/HAL%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
      <url>/2024/09/01/%E7%9F%A5%E8%AF%86%E7%82%B9/HAL%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="1-GPIO"><a href="#1-GPIO" class="headerlink" title="1.GPIO"></a>1.GPIO</h1><h2 id="2-HAL-GPIO-Init"><a href="#2-HAL-GPIO-Init" class="headerlink" title="2.HAL_GPIO_Init"></a>2.<code>HAL_GPIO_Init</code></h2><h3 id="1-源代码"><a href="#1-源代码" class="headerlink" title="1.源代码"></a>1.源代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">HAL_GPIO_Init</span><span class="params">(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">uint32_t</span> position = <span class="number">0x00</span>u;               <span class="comment">// 当前处理的引脚位置 (0~15)，用于遍历所有可能的 GPIO 引脚</span></span><br><span class="line">  <span class="type">uint32_t</span> ioposition;                     <span class="comment">// 当前引脚的位掩码，用于标记引脚位置 (1 &lt;&lt; position)</span></span><br><span class="line">  <span class="type">uint32_t</span> iocurrent;                      <span class="comment">// 当前引脚的实际位值（GPIO_Init-&gt;Pin &amp; ioposition），判断引脚是否有效</span></span><br><span class="line">  <span class="type">uint32_t</span> temp;                           <span class="comment">// 临时变量，用于存储寄存器值</span></span><br><span class="line">  <span class="type">uint32_t</span> config = <span class="number">0x00</span>u;                 <span class="comment">// 配置值，用于存储 MODE 和 CNF 的组合配置</span></span><br><span class="line">  __IO <span class="type">uint32_t</span> *configregister;           <span class="comment">// 指向 CRL 或 CRH 寄存器的指针，用于配置引脚的 MODE 和 CNF</span></span><br><span class="line">  <span class="type">uint32_t</span> registeroffset;                 <span class="comment">// 用于计算 CNF 和 MODE 位在 CRL 或 CRH 中的偏移量</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 检查传入的参数是否有效 */</span></span><br><span class="line">  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));  <span class="comment">// 确保 GPIOx 是合法的 GPIO 实例</span></span><br><span class="line">  assert_param(IS_GPIO_PIN(GPIO_Init-&gt;Pin));  <span class="comment">// 确保指定的引脚是合法的 GPIO 引脚</span></span><br><span class="line">  assert_param(IS_GPIO_MODE(GPIO_Init-&gt;Mode)); <span class="comment">// 确保引脚模式是合法的 GPIO 模式</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 遍历 GPIO_Init-&gt;Pin 所对应的所有引脚 */</span></span><br><span class="line">  <span class="keyword">while</span> (((GPIO_Init-&gt;Pin) &gt;&gt; position) != <span class="number">0x00</span>u)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">/* 获取当前引脚的位掩码（用于标记当前引脚位置） */</span></span><br><span class="line">    ioposition = (<span class="number">0x01</span>uL &lt;&lt; position);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 检查当前引脚是否在用户配置的引脚掩码中 */</span></span><br><span class="line">    iocurrent = (<span class="type">uint32_t</span>)(GPIO_Init-&gt;Pin) &amp; ioposition;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (iocurrent == ioposition)  <span class="comment">// 如果当前引脚需要配置</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">/* 确保 GPIO 端口支持复用功能（AFIO） */</span></span><br><span class="line">      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* 根据指定的模式设置 MODE 和 CNF 值 */</span></span><br><span class="line">      <span class="keyword">switch</span> (GPIO_Init-&gt;Mode)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">/* 输出推挽模式 */</span></span><br><span class="line">        <span class="keyword">case</span> GPIO_MODE_OUTPUT_PP:</span><br><span class="line">          assert_param(IS_GPIO_SPEED(GPIO_Init-&gt;Speed)); <span class="comment">// 确保输出速度参数有效</span></span><br><span class="line">          config = GPIO_Init-&gt;Speed + GPIO_CR_CNF_GP_OUTPUT_PP; <span class="comment">// 配置为通用推挽输出</span></span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 输出开漏模式 */</span></span><br><span class="line">        <span class="keyword">case</span> GPIO_MODE_OUTPUT_OD:</span><br><span class="line">          assert_param(IS_GPIO_SPEED(GPIO_Init-&gt;Speed)); <span class="comment">// 确保输出速度参数有效</span></span><br><span class="line">          config = GPIO_Init-&gt;Speed + GPIO_CR_CNF_GP_OUTPUT_OD; <span class="comment">// 配置为通用开漏输出</span></span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 复用功能推挽模式 */</span></span><br><span class="line">        <span class="keyword">case</span> GPIO_MODE_AF_PP:</span><br><span class="line">          assert_param(IS_GPIO_SPEED(GPIO_Init-&gt;Speed)); <span class="comment">// 确保输出速度参数有效</span></span><br><span class="line">          config = GPIO_Init-&gt;Speed + GPIO_CR_CNF_AF_OUTPUT_PP; <span class="comment">// 配置为复用推挽输出</span></span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 复用功能开漏模式 */</span></span><br><span class="line">        <span class="keyword">case</span> GPIO_MODE_AF_OD:</span><br><span class="line">          assert_param(IS_GPIO_SPEED(GPIO_Init-&gt;Speed)); <span class="comment">// 确保输出速度参数有效</span></span><br><span class="line">          config = GPIO_Init-&gt;Speed + GPIO_CR_CNF_AF_OUTPUT_OD; <span class="comment">// 配置为复用开漏输出</span></span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 输入模式，包括外部中断和事件触发模式 */</span></span><br><span class="line">        <span class="keyword">case</span> GPIO_MODE_INPUT:</span><br><span class="line">        <span class="keyword">case</span> GPIO_MODE_IT_RISING:</span><br><span class="line">        <span class="keyword">case</span> GPIO_MODE_IT_FALLING:</span><br><span class="line">        <span class="keyword">case</span> GPIO_MODE_IT_RISING_FALLING:</span><br><span class="line">        <span class="keyword">case</span> GPIO_MODE_EVT_RISING:</span><br><span class="line">        <span class="keyword">case</span> GPIO_MODE_EVT_FALLING:</span><br><span class="line">        <span class="keyword">case</span> GPIO_MODE_EVT_RISING_FALLING:</span><br><span class="line">          assert_param(IS_GPIO_PULL(GPIO_Init-&gt;Pull)); <span class="comment">// 确保上下拉配置有效</span></span><br><span class="line">          <span class="keyword">if</span> (GPIO_Init-&gt;Pull == GPIO_NOPULL)  <span class="comment">// 悬空输入</span></span><br><span class="line">          &#123;</span><br><span class="line">            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span> <span class="keyword">if</span> (GPIO_Init-&gt;Pull == GPIO_PULLUP) <span class="comment">// 上拉输入</span></span><br><span class="line">          &#123;</span><br><span class="line">            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;</span><br><span class="line">            GPIOx-&gt;BSRR = ioposition; <span class="comment">// 设置 ODR 位为 1，启用上拉</span></span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span> <span class="comment">/* GPIO_PULLDOWN 下拉输入 */</span></span><br><span class="line">          &#123;</span><br><span class="line">            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;</span><br><span class="line">            GPIOx-&gt;BRR = ioposition; <span class="comment">// 清除 ODR 位为 0，启用下拉</span></span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 模拟输入模式 */</span></span><br><span class="line">        <span class="keyword">case</span> GPIO_MODE_ANALOG:</span><br><span class="line">          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG; <span class="comment">// 配置为模拟输入</span></span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 如果是其他未支持的模式，跳过配置 */</span></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* 判断当前引脚属于 CRL（前 8 位）还是 CRH（后 8 位），并计算寄存器偏移 */</span></span><br><span class="line">      configregister = (iocurrent &lt; GPIO_PIN_8) ? &amp;GPIOx-&gt;CRL : &amp;GPIOx-&gt;CRH;</span><br><span class="line">      registeroffset = (iocurrent &lt; GPIO_PIN_8) ? (position &lt;&lt; <span class="number">2u</span>) : ((position - <span class="number">8u</span>) &lt;&lt; <span class="number">2u</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* 应用引脚的配置到寄存器 */</span></span><br><span class="line">      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) &lt;&lt; registeroffset), (config &lt;&lt; registeroffset));</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* 如果是 EXTI 模式（外部中断或事件触发），配置 EXTI 寄存器 */</span></span><br><span class="line">      <span class="keyword">if</span> ((GPIO_Init-&gt;Mode &amp; EXTI_MODE) == EXTI_MODE)</span><br><span class="line">      &#123;</span><br><span class="line">        __HAL_RCC_AFIO_CLK_ENABLE(); <span class="comment">// 启用 AFIO 时钟</span></span><br><span class="line">        temp = AFIO-&gt;EXTICR[position &gt;&gt; <span class="number">2u</span>]; <span class="comment">// 获取 EXTI 配置寄存器的值</span></span><br><span class="line">        CLEAR_BIT(temp, (<span class="number">0x0F</span>u) &lt;&lt; (<span class="number">4u</span> * (position &amp; <span class="number">0x03</span>u))); <span class="comment">// 清除当前引脚的 EXTI 映射</span></span><br><span class="line">        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) &lt;&lt; (<span class="number">4u</span> * (position &amp; <span class="number">0x03</span>u))); <span class="comment">// 设置 EXTI 映射到当前引脚</span></span><br><span class="line">        AFIO-&gt;EXTICR[position &gt;&gt; <span class="number">2u</span>] = temp; <span class="comment">// 写回寄存器</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 配置上升沿触发 */</span></span><br><span class="line">        <span class="keyword">if</span> ((GPIO_Init-&gt;Mode &amp; RISING_EDGE) == RISING_EDGE)</span><br><span class="line">        &#123;</span><br><span class="line">          SET_BIT(EXTI-&gt;RTSR, iocurrent); <span class="comment">// 设置上升沿触发</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          CLEAR_BIT(EXTI-&gt;RTSR, iocurrent); <span class="comment">// 禁用上升沿触发</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 配置下降沿触发 */</span></span><br><span class="line">        <span class="keyword">if</span> ((GPIO_Init-&gt;Mode &amp; FALLING_EDGE) == FALLING_EDGE)</span><br><span class="line">        &#123;</span><br><span class="line">          SET_BIT(EXTI-&gt;FTSR, iocurrent); <span class="comment">// 设置下降沿触发</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          CLEAR_BIT(EXTI-&gt;FTSR, iocurrent); <span class="comment">// 禁用下降沿触发</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 配置事件掩码 */</span></span><br><span class="line">        <span class="keyword">if</span> ((GPIO_Init-&gt;Mode &amp; GPIO_MODE_EVT) == GPIO_MODE_EVT)</span><br><span class="line">        &#123;</span><br><span class="line">          SET_BIT(EXTI-&gt;EMR, iocurrent); <span class="comment">// 启用事件掩码</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          CLEAR_BIT(EXTI-&gt;EMR, iocurrent); <span class="comment">// 禁用事件掩码</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 配置中断掩码 */</span></span><br><span class="line">        <span class="keyword">if</span> ((GPIO_Init-&gt;Mode &amp; GPIO_MODE_IT) == GPIO_MODE_IT)</span><br><span class="line">        &#123;</span><br><span class="line">          SET_BIT(EXTI-&gt;IMR, iocurrent); <span class="comment">// 启用中断掩码</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          CLEAR_BIT(EXTI-&gt;IMR, iocurrent); <span class="comment">// 禁用中断掩码</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    position++; <span class="comment">// 处理下一个引脚</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-示例场景"><a href="#2-示例场景" class="headerlink" title="2.示例场景"></a>2.示例场景</h3><p>我们希望将 <strong><code>PA0</code></strong> 引脚配置为：</p><ul><li><strong>外部中断模式</strong>（上升沿触发），</li><li>使用 <strong>上拉电阻</strong>，以防止引脚悬空。</li></ul><h3 id="3-逐步解析"><a href="#3-逐步解析" class="headerlink" title="3.逐步解析"></a>3.逐步解析</h3><h4 id="1-遍历引脚（while-循环部分）"><a href="#1-遍历引脚（while-循环部分）" class="headerlink" title="1. 遍历引脚（while 循环部分）"></a><strong>1. 遍历引脚（while 循环部分）</strong></h4><ul><li><p>在代码中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (((GPIO_Init-&gt;Pin) &gt;&gt; position) != <span class="number">0x00</span>u)</span><br></pre></td></tr></table></figure><ul><li><strong>作用</strong>：遍历用户指定的引脚掩码，这里 <code>GPIO_Init-&gt;Pin = GPIO_PIN_0</code>，即 <code>0x0001</code>。</li><li><strong>position</strong>：每次循环处理一个引脚，当前引脚是 <code>PA0</code>，其位置为 <code>0</code>。</li></ul></li></ul><h4 id="2-确定当前引脚（iocurrent-和-ioposition-的计算）"><a href="#2-确定当前引脚（iocurrent-和-ioposition-的计算）" class="headerlink" title="2. 确定当前引脚（iocurrent 和 ioposition 的计算）"></a><strong>2. 确定当前引脚（<code>iocurrent</code> 和 <code>ioposition</code> 的计算）</strong></h4><ul><li><p>在代码中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ioposition = (<span class="number">0x01</span>uL &lt;&lt; position);  <span class="comment">// 当前位位置（0x1）</span></span><br><span class="line">iocurrent = GPIO_Init-&gt;Pin &amp; ioposition;  <span class="comment">// 当前引脚有效</span></span><br></pre></td></tr></table></figure><ul><li><strong>作用</strong>：计算出当前引脚是否有效。</li><li>对于 <code>GPIO_PIN_0</code>，<code>ioposition = 0x0001</code>，<code>iocurrent = 0x0001</code>，表示引脚 <code>PA0</code> 有效。</li></ul></li></ul><blockquote><p>假设 <code>GPIO_Init-&gt;Pin = GPIO_PIN_1</code>（表示需要配置 PA1 <code>0x0002</code>），以下是 <code>while</code> 循环的逐步执行过程：</p><ol><li><p><strong>第一次循环</strong>：</p><ul><li><code>position = 0</code></li><li><code>ioposition = (1 &lt;&lt; 0) = 0x0001</code>，对应第 0 位。</li><li><code>iocurrent = GPIO_Init-&gt;Pin &amp; ioposition = 0x0002 &amp; 0x0001 = 0x0000</code>。</li><li>因为 <code>iocurrent = 0x0000</code>（当前引脚无效），跳过本次循环，<code>position++</code>。</li></ul></li><li><p><strong>第二次循环</strong>：</p><ul><li><p><code>position = 1</code></p></li><li><p><code>ioposition = (1 &lt;&lt; 1) = 0x0002</code>，对应第 1 位。</p></li><li><p><code>iocurrent = GPIO_Init-&gt;Pin &amp; ioposition = 0x0002 &amp; 0x0002 = 0x0002</code>。</p></li><li><p>因为 </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iocurrent = <span class="number">0x0002</span></span><br></pre></td></tr></table></figure><p>（当前引脚有效），进入配置逻辑：</p><ul><li>配置模式（<code>CRL</code> 或 <code>CRH</code> 寄存器）。</li><li>配置上拉或下拉（<code>BSRR</code> 或 <code>BRR</code>）。</li><li>如果是外部中断模式，配置 EXTI 映射、触发模式等。</li></ul></li></ul></li><li><p><strong>第三次循环</strong>：</p><ul><li><code>position = 2</code></li><li><code>((GPIO_Init-&gt;Pin) &gt;&gt; position) = 0</code>，直接退出循环。</li></ul></li></ol></blockquote><h4 id="3-确定引脚模式和配置（switch-GPIO-Init-gt-Mode-部分）"><a href="#3-确定引脚模式和配置（switch-GPIO-Init-gt-Mode-部分）" class="headerlink" title="3. 确定引脚模式和配置（switch (GPIO_Init-&gt;Mode) 部分）"></a><strong>3. 确定引脚模式和配置（<code>switch (GPIO_Init-&gt;Mode)</code> 部分）</strong></h4><ul><li><p>在代码中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (GPIO_Init-&gt;Mode)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">case</span> GPIO_MODE_IT_RISING:  <span class="comment">// 外部中断模式，上升沿触发</span></span><br><span class="line">        config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING; <span class="comment">// 默认配置为浮空输入</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>作用：</p><ul><li><p><code>GPIO_MODE_IT_RISING</code> 是中断模式，上升沿触发。</p></li><li><p>根据 ：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GPIO_Init-&gt;Pull = GPIO_PULLUP</span><br></pre></td></tr></table></figure><ul><li>配置为上拉输入模式；</li><li>设置引脚对应的上拉位（ODR 位）。</li></ul></li></ul></li></ul></li></ul><h4 id="4-判断引脚属于-CRL-还是-CRH"><a href="#4-判断引脚属于-CRL-还是-CRH" class="headerlink" title="4. 判断引脚属于 CRL 还是 CRH"></a><strong>4. 判断引脚属于 CRL 还是 CRH</strong></h4><ul><li><p>在代码中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">configregister = (iocurrent &lt; GPIO_PIN_8) ? &amp;GPIOx-&gt;CRL : &amp;GPIOx-&gt;CRH;</span><br><span class="line">registeroffset = (iocurrent &lt; GPIO_PIN_8) ? (position &lt;&lt; <span class="number">2u</span>) : ((position - <span class="number">8u</span>) &lt;&lt; <span class="number">2u</span>);</span><br></pre></td></tr></table></figure><ul><li>作用：<ul><li>对于引脚 <code>PA0</code>，属于前 8 位，因此访问 <code>CRL</code> 寄存器。</li><li><code>registeroffset = position &lt;&lt; 2u</code>，即偏移为 <code>0x00</code>。</li></ul></li></ul></li></ul><blockquote><ol><li><strong>GPIO 模式寄存器的定义</strong>：<ul><li>对于输入模式，STM32 使用 <code>MODE</code> 和 <code>CNF</code> 字段来配置引脚的工作模式。</li><li>在上拉和下拉模式下：<ul><li><code>MODE = 00</code>（输入模式）</li><li><code>CNF = 10</code>（上拉/下拉模式）</li></ul></li><li>因此，无论是上拉还是下拉，<code>MODE</code> 和 <code>CNF</code> 的组合都是相同的，导致 <code>config</code> 值一致。</li></ul></li><li><p><strong>区分上拉和下拉的方式</strong>：</p><ul><li>STM32 使用引脚的 <strong>输出数据寄存器（<code>ODR</code>）</strong> 来决定是上拉还是下拉：<ul><li><code>ODR = 1</code>：上拉</li><li><code>ODR = 0</code>：下拉</li></ul></li><li>这意味着 <strong>上拉和下拉的本质区别在于 <code>ODR</code> 的设置</strong>，而非 <code>MODE</code> 或 <code>CNF</code>。</li></ul></li><li><p><strong>GPIOx-&gt;BSRR（置位寄存器）</strong>：</p><ul><li><code>GPIOx-&gt;BSRR</code> 是用于将对应引脚的输出数据寄存器（<code>ODR</code>）的某个位 <strong>设置为 1</strong> 的寄存器。</li><li>写入 <code>GPIOx-&gt;BSRR</code> 会使指定引脚的 <code>ODR</code> 位被置 1。</li><li>当设置为上拉模式时，需要将 <code>ODR</code> 置为 1，因此写入 <code>GPIOx-&gt;BSRR</code>。</li></ul></li><li><strong>GPIOx-&gt;BRR（复位寄存器）</strong>：<ul><li><code>GPIOx-&gt;BRR</code> 是用于将对应引脚的输出数据寄存器（<code>ODR</code>）的某个位 <strong>清零</strong> 的寄存器。</li><li>写入 <code>GPIOx-&gt;BRR</code> 会使指定引脚的 <code>ODR</code> 位被置 0。</li><li>当设置为下拉模式时，需要将 <code>ODR</code> 清为 0，因此写入 <code>GPIOx-&gt;BRR</code>。</li></ul></li></ol></blockquote><h4 id="5-写入-MODE-和-CNF-寄存器"><a href="#5-写入-MODE-和-CNF-寄存器" class="headerlink" title="5. 写入 MODE 和 CNF 寄存器"></a><strong>5. 写入 MODE 和 CNF 寄存器</strong></h4><ul><li><p>在代码中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) &lt;&lt; registeroffset), (config &lt;&lt; registeroffset));</span><br></pre></td></tr></table></figure><ul><li>作用：<ul><li>将 <code>PA0</code> 配置为输入模式（MODE 为 00），浮空或上拉（CNF）。</li><li>写入 <code>GPIOx-&gt;CRL</code> 的对应位。</li></ul></li></ul></li></ul><h4 id="6-配置-EXTI（外部中断模式）"><a href="#6-配置-EXTI（外部中断模式）" class="headerlink" title="6. 配置 EXTI（外部中断模式）"></a><strong>6. 配置 EXTI（外部中断模式）</strong></h4><ul><li><p>在代码中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((GPIO_Init-&gt;Mode &amp; EXTI_MODE) == EXTI_MODE)</span><br><span class="line">&#123;</span><br><span class="line">    __HAL_RCC_AFIO_CLK_ENABLE();  <span class="comment">// 启用 AFIO 时钟</span></span><br><span class="line">    temp = AFIO-&gt;EXTICR[position &gt;&gt; <span class="number">2u</span>]; <span class="comment">// 获取 EXTI 映射寄存器</span></span><br><span class="line">    CLEAR_BIT(temp, (<span class="number">0x0F</span>u) &lt;&lt; (<span class="number">4u</span> * (position &amp; <span class="number">0x03</span>u)));  <span class="comment">// 清除原映射</span></span><br><span class="line">    SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) &lt;&lt; (<span class="number">4u</span> * (position &amp; <span class="number">0x03</span>u)));  <span class="comment">// 设置 EXTI 映射到 PA0</span></span><br><span class="line">    AFIO-&gt;EXTICR[position &gt;&gt; <span class="number">2u</span>] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>作用：<ul><li>将 EXTI0 通道映射到 GPIOA 的第 0 引脚。</li></ul></li></ul></li></ul><h4 id="7-配置-EXTI-触发类型"><a href="#7-配置-EXTI-触发类型" class="headerlink" title="7. 配置 EXTI 触发类型"></a><strong>7. 配置 EXTI 触发类型</strong></h4><ul><li><p>在代码中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((GPIO_Init-&gt;Mode &amp; RISING_EDGE) == RISING_EDGE)</span><br><span class="line">&#123;</span><br><span class="line">    SET_BIT(EXTI-&gt;RTSR, iocurrent);  <span class="comment">// 上升沿触发</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ((GPIO_Init-&gt;Mode &amp; FALLING_EDGE) == FALLING_EDGE)</span><br><span class="line">&#123;</span><br><span class="line">    SET_BIT(EXTI-&gt;FTSR, iocurrent);  <span class="comment">// 下降沿触发</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>作用：<ul><li>配置 EXTI 的触发模式：<ul><li>上升沿触发，设置 <code>RTSR</code>（上升沿触发寄存器）。</li><li>对于 <code>GPIO_MODE_IT_RISING</code>，这里只设置 <code>RTSR</code>。</li></ul></li></ul></li></ul></li></ul><h4 id="8-配置中断和事件屏蔽寄存器"><a href="#8-配置中断和事件屏蔽寄存器" class="headerlink" title="8. 配置中断和事件屏蔽寄存器"></a><strong>8. 配置中断和事件屏蔽寄存器</strong></h4><ul><li><p>在代码中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((GPIO_Init-&gt;Mode &amp; GPIO_MODE_IT) == GPIO_MODE_IT)</span><br><span class="line">&#123;</span><br><span class="line">    SET_BIT(EXTI-&gt;IMR, iocurrent);  <span class="comment">// 打开中断屏蔽</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ((GPIO_Init-&gt;Mode &amp; GPIO_MODE_EVT) == GPIO_MODE_EVT)</span><br><span class="line">&#123;</span><br><span class="line">    SET_BIT(EXTI-&gt;EMR, iocurrent);  <span class="comment">// 打开事件屏蔽</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>作用：<ul><li>启用 EXTI0 中断（IMR 寄存器）。</li></ul></li></ul></li></ul><h3 id="4-巧妙之处"><a href="#4-巧妙之处" class="headerlink" title="4.巧妙之处"></a><strong>4.巧妙之处</strong></h3><p><strong>position（当前正在处理的引脚编号）、ioposition（当前引脚的位掩码）、iocurrent（当前引脚的实际位值）的设计利用位掩码优点：</strong></p><blockquote><ol><li><strong>减少循环次数</strong>：<ul><li>利用 <code>((GPIO_Init-&gt;Pin) &gt;&gt; position)</code> 提前判断，确保仅对有效的引脚进行检查，避免逐一遍历所有 16 个引脚。</li></ul></li><li><strong>快速定位引脚</strong>：<ul><li>通过 <code>ioposition</code> 和 <code>iocurrent</code> 的配合，直接判断当前引脚是否需要配置，无需额外计算。</li></ul></li><li><strong>灵活性</strong>：<ul><li>支持配置单个引脚或多个引脚，例如 <code>GPIO_PIN_0 | GPIO_PIN_1</code>，统一逻辑下处理任意组合的引脚。</li></ul></li></ol></blockquote><h1 id="2-CAN"><a href="#2-CAN" class="headerlink" title="2.CAN"></a>2.CAN</h1><h2 id="1-CAN-InitTypeDef"><a href="#1-CAN-InitTypeDef" class="headerlink" title="1.CAN_InitTypeDef"></a>1.CAN_InitTypeDef</h2><p><code>CAN_InitTypeDef</code> 是一个用于配置 CAN 控制器的初始化结构体。</p><h3 id="1-Prescaler"><a href="#1-Prescaler" class="headerlink" title="1. Prescaler"></a><strong>1. <code>Prescaler</code></strong></h3><ul><li><p><strong>含义</strong>：用于配置 CAN 时钟的分频系数，以调整时间量程（Time Quantum, TQ）的长度。</p></li><li><p><strong>范围</strong>：1 到 1024。</p></li><li><p>对应寄存器：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CAN_BTR -&gt; BRP (Baud Rate Prescaler)</span><br></pre></td></tr></table></figure><ul><li>时钟分频因子决定了 CAN 位时间的基本时间量程。</li><li>实际波特率公式：<code>BaudRate = CAN_Clock / ((Prescaler) * (SyncSeg + TimeSeg1 + TimeSeg2))</code></li></ul></li></ul><h3 id="2-Mode"><a href="#2-Mode" class="headerlink" title="2. Mode"></a><strong>2. <code>Mode</code></strong></h3><ul><li><p><strong>含义</strong>：指定 CAN 的操作模式。</p></li><li><p>值：</p><ul><li>正常模式：数据正常传输。</li><li>环回模式：仅在内部测试。</li><li>静默模式：监听总线，不主动传输。</li><li>静默环回模式：用于自测和诊断。</li></ul></li><li><p>对应寄存器：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CAN_MCR -&gt; </span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CAN_BTR -&gt; </span><br></pre></td></tr></table></figure><ul><li>设置 CAN 控制器的工作模式，例如 Normal 模式、Loopback 模式等。</li></ul></li></ul><h3 id="3-SyncJumpWidth"><a href="#3-SyncJumpWidth" class="headerlink" title="3. SyncJumpWidth"></a><strong>3. <code>SyncJumpWidth</code></strong></h3><ul><li><p><strong>含义</strong>：同步跳转宽度（SJW），表示 CAN 硬件在重同步时允许调整的最大时间量程（TQ）数量。</p></li><li><p><strong>范围</strong>：1 到 4。</p></li><li><p>对应寄存器：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CAN_BTR -&gt; SJW (Synchronization Jump Width)</span><br></pre></td></tr></table></figure><ul><li>在重同步时，如果出现总线上的相位误差，允许调整的最大时间范围。</li></ul></li></ul><h3 id="4-TimeSeg1"><a href="#4-TimeSeg1" class="headerlink" title="4. TimeSeg1"></a><strong>4. <code>TimeSeg1</code></strong></h3><ul><li><p><strong>含义</strong>：时间段 1（Bit Segment 1），指定一个位时间中段 1 的时间量程数。</p></li><li><p><strong>范围</strong>：1 到 16。</p></li><li><p>对应寄存器：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CAN_BTR -&gt; TS1 (Time Segment <span class="number">1</span>)</span><br></pre></td></tr></table></figure><ul><li>位于同步段之后，包含采样点的设置。</li><li>决定采样点的位置。</li></ul></li></ul><hr><h3 id="5-TimeSeg2"><a href="#5-TimeSeg2" class="headerlink" title="5. TimeSeg2"></a><strong>5. <code>TimeSeg2</code></strong></h3><ul><li><p><strong>含义</strong>：时间段 2（Bit Segment 2），指定一个位时间中段 2 的时间量程数。</p></li><li><p><strong>范围</strong>：1 到 8。</p></li><li><p>对应寄存器：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CAN_BTR -&gt; TS2 (Time Segment <span class="number">2</span>)</span><br></pre></td></tr></table></figure><ul><li>位于采样点之后，用于信号的相位缓冲。</li></ul></li></ul><h3 id="6-TimeTriggeredMode"><a href="#6-TimeTriggeredMode" class="headerlink" title="6. TimeTriggeredMode"></a><strong>6. <code>TimeTriggeredMode</code></strong></h3><ul><li><p><strong>含义</strong>：是否启用时间触发通信模式。</p></li><li><p><strong>值</strong>：<code>ENABLE</code> 或 <code>DISABLE</code>。</p></li><li><p>对应寄存器：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CAN_MCR -&gt; TTCM (Time Triggered Communication Mode)</span><br></pre></td></tr></table></figure><ul><li>启用后，消息传输与时间标记结合，可以在消息中嵌入时间信息。</li></ul></li></ul><h3 id="7-AutoBusOff"><a href="#7-AutoBusOff" class="headerlink" title="7. AutoBusOff"></a><strong>7. <code>AutoBusOff</code></strong></h3><ul><li><p><strong>含义</strong>：是否启用自动总线关闭管理。</p></li><li><p><strong>值</strong>：<code>ENABLE</code> 或 <code>DISABLE</code>。</p></li><li><p>对应寄存器：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CAN_MCR -&gt; ABOM (Automatic Bus-Off Management)</span><br></pre></td></tr></table></figure><ul><li>当 CAN 控制器检测到总线错误后，可以自动离线并尝试恢复。</li></ul></li></ul><h3 id="8-AutoWakeUp"><a href="#8-AutoWakeUp" class="headerlink" title="8. AutoWakeUp"></a><strong>8. <code>AutoWakeUp</code></strong></h3><ul><li><p><strong>含义</strong>：是否启用自动唤醒功能。</p></li><li><p><strong>值</strong>：<code>ENABLE</code> 或 <code>DISABLE</code>。</p></li><li><p>对应寄存器：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CAN_MCR -&gt; AWUM (Automatic Wake-Up Mode)</span><br></pre></td></tr></table></figure><ul><li>在低功耗模式下，当接收到总线活动时自动唤醒。</li></ul></li></ul><h3 id="9-AutoRetransmission"><a href="#9-AutoRetransmission" class="headerlink" title="9. AutoRetransmission"></a><strong>9. <code>AutoRetransmission</code></strong></h3><ul><li><p><strong>含义</strong>：是否启用报文自动重发功能。</p></li><li><p><strong>值</strong>：<code>ENABLE</code> 或 <code>DISABLE</code>。</p></li><li><p>对应寄存器：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CAN_MCR -&gt; NART (No Automatic Retransmission)</span><br></pre></td></tr></table></figure><ul><li>禁用后，错误帧不会自动重发，适用于只发一次的应用场景。</li></ul></li></ul><h3 id="10-ReceiveFifoLocked"><a href="#10-ReceiveFifoLocked" class="headerlink" title="10. ReceiveFifoLocked"></a><strong>10. <code>ReceiveFifoLocked</code></strong></h3><ul><li><p><strong>含义</strong>：是否启用接收 FIFO 锁定模式。</p></li><li><p><strong>值</strong>：<code>ENABLE</code> 或 <code>DISABLE</code>。</p></li><li><p>对应寄存器：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CAN_MCR -&gt; RFLM (Receive FIFO Locked Mode)</span><br></pre></td></tr></table></figure><ul><li>锁定模式下，FIFO 满时不再覆盖旧数据。</li></ul></li></ul><h3 id="11-TransmitFifoPriority"><a href="#11-TransmitFifoPriority" class="headerlink" title="11. TransmitFifoPriority"></a><strong>11. <code>TransmitFifoPriority</code></strong></h3><ul><li><p><strong>含义</strong>：是否启用传输 FIFO 优先级模式。</p></li><li><p><strong>值</strong>：<code>ENABLE</code> 或 <code>DISABLE</code>。</p></li><li><p>对应寄存器：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CAN_MCR -&gt; TXFP (Transmit FIFO Priority)</span><br></pre></td></tr></table></figure><ul><li>启用后，优先根据报文 ID 的优先级决定发送顺序。</li></ul></li></ul><h2 id="2-CAN-FilterTypeDef"><a href="#2-CAN-FilterTypeDef" class="headerlink" title="2.CAN_FilterTypeDef"></a>2.CAN_FilterTypeDef</h2><p><code>CAN_FilterTypeDef</code> 是一个用于配置 CAN 过滤器的初始化结构体。</p><h3 id="1-FilterIdHigh"><a href="#1-FilterIdHigh" class="headerlink" title="1. FilterIdHigh"></a><strong>1. <code>FilterIdHigh</code></strong></h3><ul><li><p><strong>含义</strong>：过滤器标识符的高 16 位。</p></li><li><p><strong>范围</strong>：<code>0x0000</code> 到 <code>0xFFFF</code>。</p></li><li><p>对应寄存器：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CAN_FxR1 -&gt; FB[<span class="number">31</span>:<span class="number">16</span>]</span><br></pre></td></tr></table></figure><ul><li>在 32 位模式下，用于存储消息标识符的高 16 位。</li><li>在 16 位模式下，用于存储第一个标识符的高 16 位。</li></ul></li></ul><h3 id="2-FilterIdLow"><a href="#2-FilterIdLow" class="headerlink" title="2. FilterIdLow"></a><strong>2. <code>FilterIdLow</code></strong></h3><ul><li><p><strong>含义</strong>：过滤器标识符的低 16 位。</p></li><li><p><strong>范围</strong>：<code>0x0000</code> 到 <code>0xFFFF</code>。</p></li><li><p>对应寄存器：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CAN_FxR1 -&gt; FB[<span class="number">15</span>:<span class="number">0</span>]</span><br></pre></td></tr></table></figure><ul><li>在 32 位模式下，用于存储消息标识符的低 16 位。</li><li>在 16 位模式下，用于存储第二个标识符的低 16 位。</li></ul></li></ul><h3 id="3-FilterMaskIdHigh"><a href="#3-FilterMaskIdHigh" class="headerlink" title="3. FilterMaskIdHigh"></a><strong>3. <code>FilterMaskIdHigh</code></strong></h3><ul><li><p><strong>含义</strong>：过滤器掩码的高 16 位。</p></li><li><p><strong>范围</strong>：<code>0x0000</code> 到 <code>0xFFFF</code>。</p></li><li><p>对应寄存器：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CAN_FxR2 -&gt; FB[<span class="number">31</span>:<span class="number">16</span>]</span><br></pre></td></tr></table></figure><ul><li>在 32 位模式下，用于存储消息掩码的高 16 位。</li><li>在 16 位模式下，用于存储第一个掩码的高 16 位。</li></ul></li></ul><h3 id="4-FilterMaskIdLow"><a href="#4-FilterMaskIdLow" class="headerlink" title="4. FilterMaskIdLow"></a><strong>4. <code>FilterMaskIdLow</code></strong></h3><ul><li><p><strong>含义</strong>：过滤器掩码的低 16 位。</p></li><li><p><strong>范围</strong>：<code>0x0000</code> 到 <code>0xFFFF</code>。</p></li><li><p>对应寄存器：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CAN_FxR2 -&gt; FB[<span class="number">15</span>:<span class="number">0</span>]</span><br></pre></td></tr></table></figure><ul><li>在 32 位模式下，用于存储消息掩码的低 16 位。</li><li>在 16 位模式下，用于存储第二个掩码的低 16 位。</li></ul></li></ul><h3 id="5-FilterFIFOAssignment"><a href="#5-FilterFIFOAssignment" class="headerlink" title="5. FilterFIFOAssignment"></a><strong>5. <code>FilterFIFOAssignment</code></strong></h3><ul><li><p><strong>含义</strong>：指定符合过滤条件的消息分配到哪个 FIFO 缓冲区。</p></li><li><p><strong>范围</strong>：<code>0</code> 或 <code>1</code>。</p></li><li><p>对应寄存器：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CAN_FFA1R -&gt; Filter FIFO Assignment <span class="keyword">for</span> filter x</span><br></pre></td></tr></table></figure><ul><li>指定消息分配到 FIFO 0 或 FIFO 1。</li></ul></li></ul><h3 id="6-FilterBank"><a href="#6-FilterBank" class="headerlink" title="6. FilterBank"></a><strong>6. <code>FilterBank</code></strong></h3><ul><li><p><strong>含义</strong>：需要配置的滤波器编号。</p></li><li><p>范围：</p><ul><li>单 CAN 实例：<code>0</code> 到 <code>13</code>。</li><li>双 CAN 实例：<code>0</code> 到 <code>27</code>。</li></ul></li><li><p>对应寄存器：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CAN_FMR -&gt; Filter Bank Initialization</span><br></pre></td></tr></table></figure><ul><li>用于选择需要初始化的过滤器编号。</li></ul></li></ul><h3 id="7-FilterMode"><a href="#7-FilterMode" class="headerlink" title="7. FilterMode"></a><strong>7. <code>FilterMode</code></strong></h3><ul><li><p><strong>含义</strong>：设置过滤器的工作模式。</p></li><li><p>值：</p><ul><li>标识符掩码模式（Id/Mask）。</li><li>标识符列表模式（Id List）。</li></ul></li><li><p>对应寄存器：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CAN_FM1R -&gt; Filter Mode x</span><br></pre></td></tr></table></figure><ul><li>配置过滤器为掩码模式或列表模式。</li></ul></li></ul><h3 id="8-FilterScale"><a href="#8-FilterScale" class="headerlink" title="8. FilterScale"></a><strong>8. <code>FilterScale</code></strong></h3><ul><li><p><strong>含义</strong>：定义过滤器的位宽。</p></li><li><p>值：</p><ul><li><code>0</code>：16 位模式。</li><li><code>1</code>：32 位模式。</li></ul></li><li><p>对应寄存器：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CAN_FS1R -&gt; Filter Scale configuration x</span><br></pre></td></tr></table></figure><ul><li>配置过滤器的位宽模式。</li></ul></li></ul><h3 id="9-FilterActivation"><a href="#9-FilterActivation" class="headerlink" title="9. FilterActivation"></a><strong>9. <code>FilterActivation</code></strong></h3><ul><li><p><strong>含义</strong>：启用或禁用过滤器。</p></li><li><p>值：</p><ul><li><code>ENABLE</code>：启用过滤器。</li><li><code>DISABLE</code>：禁用过滤器。</li></ul></li><li><p>对应寄存器：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CAN_FA1R -&gt; Filter Active x</span><br></pre></td></tr></table></figure><ul><li>启用或禁用指定编号的过滤器。</li></ul></li></ul><h3 id="10-SlaveStartFilterBank"><a href="#10-SlaveStartFilterBank" class="headerlink" title="10. SlaveStartFilterBank"></a><strong>10. <code>SlaveStartFilterBank</code></strong></h3><ul><li><p><strong>含义</strong>：设置从 CAN 实例的起始滤波器编号。</p></li><li><p>范围：</p><ul><li>单 CAN 实例：无意义。</li><li>双 CAN 实例：<code>0</code> 到 <code>27</code>。</li></ul></li><li><p>对应寄存器：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CAN_FMR -&gt; Slave Start Filter Bank</span><br></pre></td></tr></table></figure><ul><li>配置从 CAN 实例的起始滤波器编号，低编号分配给主 CAN，高编号分配给从 CAN。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 知识点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STM32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>定时器从模式的使用</title>
      <link href="/2024/09/01/%E7%9F%A5%E8%AF%86%E7%82%B9/%E5%AE%9A%E6%97%B6%E5%99%A8%E4%BB%8E%E6%A8%A1%E5%BC%8F%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2024/09/01/%E7%9F%A5%E8%AF%86%E7%82%B9/%E5%AE%9A%E6%97%B6%E5%99%A8%E4%BB%8E%E6%A8%A1%E5%BC%8F%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="定时器从模式的使用"><a href="#定时器从模式的使用" class="headerlink" title="定时器从模式的使用"></a>定时器从模式的使用</h1><p>可能很多群友听完PWM和输入捕获的课后，不知道为啥输入捕获要用定时器从模式，今天我基于自己的理解来尝试说明一下。</p><h2 id="触发输入信号"><a href="#触发输入信号" class="headerlink" title="触发输入信号"></a>触发输入信号</h2><p><img src="/2024/09/01/%E7%9F%A5%E8%AF%86%E7%82%B9/%E5%AE%9A%E6%97%B6%E5%99%A8%E4%BB%8E%E6%A8%A1%E5%BC%8F%E7%9A%84%E4%BD%BF%E7%94%A8/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240920214747.png" alt="微信截图_20240920214747"></p><p>​    当定时器从外部模式1设置到从模式，触发输入信号TRGI信号可以控制我们的定时器。其信号来源可以通过外部或自己的定时器通道过来到本定时器的信号。可以用来控制本定时器的一些动作，比如复位。这种情况下<strong>本定时器</strong>就处于<strong>从模式</strong>，被控制。</p><p>​    顺便说一下<strong>TRGO</strong>用于控制别的定时器，这个时候产生TRGO信号的定时器处于主模式。可以用来控制其他外设和定时器。</p><h2 id="定时器从模式"><a href="#定时器从模式" class="headerlink" title="定时器从模式"></a>定时器从模式</h2><p><img src="/2024/09/01/%E7%9F%A5%E8%AF%86%E7%82%B9/%E5%AE%9A%E6%97%B6%E5%99%A8%E4%BB%8E%E6%A8%A1%E5%BC%8F%E7%9A%84%E4%BD%BF%E7%94%A8/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240921095440.png" alt="微信截图_20240921095440"></p><h2 id="案例一："><a href="#案例一：" class="headerlink" title="案例一："></a>案例一：</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 存储信号的周期 */</span></span><br><span class="line"><span class="type">uint16_t</span> t = <span class="number">0</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_TIM_IC_CaptureCallback</span><span class="params">(TIM_HandleTypeDef *htim)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (htim-&gt;Instance == TIM4)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (htim-&gt;Channel == HAL_TIM_ACTIVE_CHANNEL_1)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">/* 计数器清零 */</span></span><br><span class="line">            __HAL_TIM_SetCounter(&amp;htim4, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 返回PWM的周期 ms */</span></span><br><span class="line"><span class="type">double</span> <span class="title function_">Driver_TIM4_GetPWMCycle</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> __HAL_TIM_GetCompare(&amp;htim4, TIM_CHANNEL_1) / <span class="number">1000.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 返回PWM的频率 （对应换算的周期 s）*/</span></span><br><span class="line"><span class="type">double</span> <span class="title function_">Driver_TIM4_GetPWMFreq</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1000000.0</span> / __HAL_TIM_GetCompare(&amp;htim4, TIM_CHANNEL_1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    这个代码就能实现测量PWM的周期，特别强调一点，输入捕获中断是在CCRX捕获到CNT的值之后，才能进入中断，每一次进入中断，便会每次调用中断服务函数，手动清零CNT计数器。</p><h2 id="案例二"><a href="#案例二" class="headerlink" title="案例二"></a>案例二</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_Init();</span><br><span class="line">    SystemClock_Config();</span><br><span class="line">    MX_GPIO_Init();</span><br><span class="line">    MX_TIM4_Init();</span><br><span class="line">    MX_TIM5_Init();</span><br><span class="line">    MX_USART1_UART_Init();</span><br><span class="line">    </span><br><span class="line">    HAL_TIM_PWM_Start(&amp;htim5, TIM_CHANNEL_2);</span><br><span class="line"></span><br><span class="line">    HAL_TIM_IC_Start(&amp;htim4, TIM_CHANNEL_1);</span><br><span class="line">    HAL_TIM_IC_Start(&amp;htim4, TIM_CHANNEL_2);</span><br><span class="line">    </span><br><span class="line">    <span class="type">double</span> t, f, dutyCycle;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        t = Driver_TIM4_GetPWMCycle();</span><br><span class="line">        f = Driver_TIM4_GetPWMFreq();</span><br><span class="line">        dutyCycle = Driver_TIM4_GetDutyCycle();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;t=%.4fms, f=%.4fHz, dutyCycle=%.2f%%\r\n&quot;</span>, t, f, dutyCycle * <span class="number">100</span>);</span><br><span class="line">        HAL_Delay(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 返回PWM的周期 ms*/</span></span><br><span class="line"><span class="type">double</span> <span class="title function_">Driver_TIM4_GetPWMCycle</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> (__HAL_TIM_GetCompare(&amp;htim4, TIM_CHANNEL_1) + <span class="number">1</span>) / <span class="number">1000.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 返回PWM的频率 Hz*/</span></span><br><span class="line"><span class="type">double</span> <span class="title function_">Driver_TIM4_GetPWMFreq</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1000000.0</span> / (__HAL_TIM_GetCompare(&amp;htim4, TIM_CHANNEL_1) + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回占空比</span></span><br><span class="line"><span class="type">double</span> <span class="title function_">Driver_TIM4_GetDutyCycle</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">1</span> + __HAL_TIM_GetCompare(&amp;htim4, TIM_CHANNEL_2)) * <span class="number">1.0</span> / (<span class="number">1</span> + __HAL_TIM_GetCompare(&amp;htim4, TIM_CHANNEL_1));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    配置了定时器从模式之后（上升沿捕获），我们甚至不需要再用中断来手动清零CNT计数器。</p><blockquote><p>第一次上升沿来临时CCRX捕获CNT的值之后，从模式的复位模式才会起作用，CNT计数值会被复位，之后CCRX的值不变，直到下一次上升沿来临后重复第一次上升沿的操作。相当于每一次输入捕获都是记录一个周期的时间，非常方便，我们想知道捕获信号对应的频率或周期，直接读寄存器就可以。</p></blockquote><h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><p>​    为啥调用<strong>__HAL_TIM_GetCompare</strong>时还要手动加1，肯定是有误差的。加一肯定就是少算了一个计数周期嘛。</p><blockquote><p>​    解释：<strong>TIM4计数周期是1us（我用的TIM4）</strong>，来一个上升沿记一个数，被测信号是来一个上升沿计数器复位，来一个上升沿定时器捕获。可能被测信号的上升沿在计数周期前来临（在下一个1us之间），那么此时计数周期没有计数，所以计数器CNT的时间值实际要小于被测信号的值，<strong>少一个计数周期</strong>。</p></blockquote><p>​    可以这样理解：<strong>待测信号第二个上升沿与计数器的时钟周期不一定同时来临</strong>。因为待测信号的上升沿和计数器的时钟周期之间可能存在对齐问题，导致计数器记录的时间小于实际经过的时间。</p><p><img src="/2024/09/01/%E7%9F%A5%E8%AF%86%E7%82%B9/%E5%AE%9A%E6%97%B6%E5%99%A8%E4%BB%8E%E6%A8%A1%E5%BC%8F%E7%9A%84%E4%BD%BF%E7%94%A8/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240921104618.png" alt="微信截图_20240921104618"></p><p>关于选择通道问题我是这么理解的，途中TI1FP1和TI1FP2，本质是一个信号，是经过TIM1通道以及输入滤波器和边沿检测器后分到不同的通道，TI1FP1是进入IC1，TI1FP2是进入IC2的信号。</p><p><img src="/2024/09/01/%E7%9F%A5%E8%AF%86%E7%82%B9/%E5%AE%9A%E6%97%B6%E5%99%A8%E4%BB%8E%E6%A8%A1%E5%BC%8F%E7%9A%84%E4%BD%BF%E7%94%A8/963a6482-103a-40b1-91c0-cb888b350b98.png" alt="963a6482-103a-40b1-91c0-cb888b350b98"></p><p>假设我用了TI1FP1，那么通道一就要用直连direct mode，而通道二也可以用这个信号，但是只能用indirect mode。</p><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><h3 id="定时器信号来源"><a href="#定时器信号来源" class="headerlink" title="定时器信号来源"></a>定时器信号来源</h3><h4 id="外部信号（GPIO-引脚）"><a href="#外部信号（GPIO-引脚）" class="headerlink" title="外部信号（GPIO 引脚）"></a><strong>外部信号（GPIO 引脚）</strong></h4><ul><li>这种方式是最常见的输入捕获配置，用于捕获来自外部设备的脉冲信号，比如传感器输出。</li><li><strong>CubeMX 中的配置</strong>：你可以在 <strong>CubeMX</strong> 中将定时器的输入通道（如 TIMx_CH1、TIMx_CH2 等）映射到特定的 GPIO 引脚，然后在定时器配置界面选择对应的输入捕获模式。</li><li><strong>相关配置</strong>：在 <code>ICSelection</code> 中选择 <code>TIM_ICSELECTION_DIRECTTI</code>，表示直接从外部输入捕获信号。</li></ul><h4 id="内部信号"><a href="#内部信号" class="headerlink" title="内部信号"></a><strong>内部信号</strong></h4><ul><li>有些定时器支持捕获内部的信号，比如定时器之间的同步或者触发信号。</li><li><strong>CubeMX 中的配置</strong>：定时器的内部信号选择在 <strong>CubeMX</strong> 中通常通过定时器的触发选择（TRGO）来配置。例如，一个定时器的输出比较事件可以被另一个定时器捕获。</li><li><strong>相关配置</strong>：通过选择 <code>ICSelection</code> 为 <code>TIM_ICSELECTION_INDIRECTTI</code>，你可以选择内部信号作为输入捕获源。</li></ul><h4 id="复用输入信号"><a href="#复用输入信号" class="headerlink" title="复用输入信号"></a><strong>复用输入信号</strong></h4><ul><li>某些情况下，多个外部输入信号可以通过 GPIO 引脚复用，并映射到同一个输入捕获通道。</li><li><strong>CubeMX 中的配置</strong>：这通常与特定引脚的复用功能有关。在 <strong>CubeMX</strong> 中，当你配置某个定时器的输入捕获通道时，特定的 GPIO 引脚会列出它们支持的复用功能。</li><li><strong>相关配置</strong>：在 <code>ICSelection</code> 中选择 <code>TIM_ICSELECTION_DIRECTTI</code> 或其他选项来选择信号源。</li></ul><h4 id="触发信号"><a href="#触发信号" class="headerlink" title="触发信号"></a><strong>触发信号</strong></h4><ul><li>触发信号常用于定时器之间的同步，一个定时器可以产生一个触发信号，另一个定时器可以使用该触发信号作为输入捕获源。</li><li><strong>CubeMX 中的配置</strong>：你可以在定时器的触发设置中选择特定的触发源（TRGO），并配置另一个定时器来捕获这个触发信号。</li><li><strong>相关配置</strong>：通过 <code>ICSelection</code> 中的 <code>TIM_ICSELECTION_TRC</code>，可以选择使用定时器触发输入作为捕获源。</li></ul><h4 id="其他信号来源"><a href="#其他信号来源" class="headerlink" title="其他信号来源"></a><strong>其他信号来源</strong></h4><p><strong>CubeMX</strong> 中还有其他一些较为特殊的输入捕获方式，可能取决于具体的 STM32 定时器型号：</p><ul><li><strong>编码器模式（Encoder Mode）</strong>：某些定时器可以用于编码器输入捕获，用于捕获旋转或线性运动的编码信号。<ul><li><strong>CubeMX 中的配置</strong>：选择定时器的 Encoder 模式后，可以配置定时器的两个输入通道来捕获编码器的 A 和 B 信号。</li></ul></li><li><strong>正交编码器模式</strong>：通过捕获两个相互正交的信号（如编码器的 A、B 相），可以计算旋转的角度或位置。</li><li><strong>PWM 输入模式（PWM Input Mode）</strong>：有些定时器支持 PWM 输入捕获，用于捕获输入信号的频率和占空比。<ul><li><strong>CubeMX 中的配置</strong>：可以在 CubeMX 的 TIMx 设定中选择 PWM 输入模式，使用两个通道来捕获 PWM 信号的频率和占空比。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 知识点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STM32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IAP</title>
      <link href="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/IAP/"/>
      <url>/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/IAP/</url>
      
        <content type="html"><![CDATA[<h1 id="1-IAP"><a href="#1-IAP" class="headerlink" title="1.IAP"></a>1.IAP</h1><p>IAP<strong>（In-Application Programming）</strong>，中文名为“应用内编程”，是指在系统运行时，应用程序可以通过特定的机制来进行固件更新或更改应用程序的一部分。</p><blockquote><p>系统框图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501182053364.png" alt="image-20250118205320326"></p><p>IAP的实现通常包括以下几个步骤：</p><ol><li>在应用程序中实现一段代码，允许通过特定的接口接收新固件。</li><li>在IAP过程中，设备会暂时停止主应用的运行，进入更新模式。</li><li>更新完毕后，重新启动系统，使得新固件生效。</li></ol></blockquote><h2 id="1-内存分配"><a href="#1-内存分配" class="headerlink" title="1.内存分配"></a>1.内存分配</h2><blockquote><p>Flash内部分配框图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501182118453.png" alt="image-20250118211841395"></p><ul><li><strong>BootLoader区</strong>（24KB）：这部分存储引导程序代码，通常用于<strong>启动系统和加载主应用程序</strong>。引导程序通常在设备复位时首先执行。</li><li><strong>Param区</strong>（8KB）：这一部分用于存储一些参数数据，例如设备配置、序列号、版本信息等。这是一个小区域，通常用于存储和应用程序相关的配置信息。</li><li><strong>Application区</strong>（480KB）：这部分用于存储主要的应用程序代码，它占用了Flash的绝大部分空间。这是用户开发的应用程序所在区域。</li></ul><p><strong>Param区</strong>尽管被单独划分出来用于存储参数和配置数据，但它并不是独立于BootLoader区的。在很多IAP（In-Application Programming）方案中，<strong>Param区</strong>存储与固件更新、启动状态相关的参数信息，比如升级标志位、设备配置、版本信息等。</p><p>因此，<strong>Param区也可视为BootLoader区的一部分</strong>，它在系统重启后可能会被BootLoader读取并决定是否需要进行固件更新（对应上图）。</p></blockquote><h2 id="2-内部实现"><a href="#2-内部实现" class="headerlink" title="2.内部实现"></a>2.内部实现</h2><blockquote><p>单片机上电时，首先从<code>0x08000000</code>地址处执行BootLoader。BootLoader初始化硬件并检查OTA信息中的升级标志位。如果标志位为0，表示无需固件更新，系统将直接跳转并执行Application区中的原有程序。</p><p>在应用程序运行时，如果收到串口一发送的固件更新指令，应用程序将把OTA标志位设置为1，表示准备进行固件更新。接着，应用程序重启单片机。重启后，BootLoader再次启动，检查OTA标志位。此时标志位为1，BootLoader将等待通过串口二接收新的固件文件进行更新。固件更新完成后，BootLoader会清除升级标志位（置为0），并跳转回Application区执行更新后代码。</p></blockquote><h2 id="3-引导加载程序"><a href="#3-引导加载程序" class="headerlink" title="3.引导加载程序"></a>3.引导加载程序</h2><p>即<code>Bootloader</code>，嵌入式系统的核心部分之一，负责在设备上电或重启时初始化硬件并加载操作系统或应用程序。<strong>Bootloader的作用非常重要，它是系统启动过程中的第一段代码，负责将设备引导到正确的运行状态。</strong></p><p>IAP技术通常依赖于一个预置的Bootloader程序，该程序负责在设备启动时初始化硬件、设置内存映射，并在接收到更新指令时加载新的固件到Flash存储器中。更新过程中，Bootloader通过特定的通信接口接收新固件数据，验证其完整性和正确性后，执行Flash操作（如擦除旧固件、写入新固件）以完成更新。</p><ul><li><strong>Bootloader</strong>：负责设备的启动和加载，检查是否有新的固件或者配置。</li><li><strong>IAP</strong>：在应用程序中运行，允许通过应用内的机制进行固件更新。</li></ul><p>IAP通常是嵌入式设备中用于应用程序更新的技术，而Bootloader则是设备启动时必须运行的程序，两者结合在一起，可以使设备实现高效、灵活的固件更新和恢复机制。</p><h2 id="4-代码思路"><a href="#4-代码思路" class="headerlink" title="4.代码思路"></a>4.代码思路</h2>]]></content>
      
      
      <categories>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STM32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MCU模板</title>
      <link href="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/MCU/%E5%A4%A7%E6%A8%A1%E6%9D%BF/"/>
      <url>/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/MCU/%E5%A4%A7%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h1 id="INIT"><a href="#INIT" class="headerlink" title="INIT"></a>INIT</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">SystemInit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* LED */</span></span><br><span class="line">    P0 = <span class="number">0xff</span>;</span><br><span class="line">    P2 = P2 &amp; <span class="number">0x1f</span> | <span class="number">0x80</span>;</span><br><span class="line">    P2 = P2 &amp; <span class="number">0x1f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* REALY &amp; BEEP */</span></span><br><span class="line">    P0 = <span class="number">0x00</span>;</span><br><span class="line">    P2 = P2 &amp; <span class="number">0x1f</span> | <span class="number">0xa0</span>;</span><br><span class="line">    P2 = P2 &amp; <span class="number">0x1f</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="LED"><a href="#LED" class="headerlink" title="LED"></a>LED</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">idata <span class="type">uint8_t</span> tempLed = <span class="number">0x00</span>;     <span class="comment">// 当前LED显示状态</span></span><br><span class="line">idata <span class="type">uint8_t</span> tempLastLed = <span class="number">0xff</span>; <span class="comment">// 上次LED显示状态，用于检测变化</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* @brief Led扫描</span></span><br><span class="line"><span class="comment"> * @param addr 需要控制的Led的地址（0-7）</span></span><br><span class="line"><span class="comment"> * @param ucLed 存储LED状态的数组，每一位对应一个LED的开关状态</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">LedDisplay</span><span class="params">(<span class="type">uint8_t</span> *ucLed)</span></span><br><span class="line">&#123;</span><br><span class="line">    tempLed = <span class="number">0x00</span>; <span class="comment">// 初始化当前LED状态为0（关闭所有LED）</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将输入的LED状态数组ucLed的每个元素按位移位后合并成一个字节</span></span><br><span class="line">    tempLed = (ucLed[<span class="number">0</span>] &lt;&lt; <span class="number">0</span>) | (ucLed[<span class="number">1</span>] &lt;&lt; <span class="number">1</span>) | (ucLed[<span class="number">2</span>] &lt;&lt; <span class="number">2</span>) | (ucLed[<span class="number">3</span>] &lt;&lt; <span class="number">3</span>) |</span><br><span class="line">              (ucLed[<span class="number">4</span>] &lt;&lt; <span class="number">4</span>) | (ucLed[<span class="number">5</span>] &lt;&lt; <span class="number">5</span>) | (ucLed[<span class="number">6</span>] &lt;&lt; <span class="number">6</span>) | (ucLed[<span class="number">7</span>] &lt;&lt; <span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果当前LED状态与上次的LED状态不同，则更新LED显示</span></span><br><span class="line">    <span class="keyword">if</span> (tempLed != tempLastLed)</span><br><span class="line">    &#123;</span><br><span class="line">        P0 = ~tempLed; <span class="comment">// 将当前LED状态写入P0端口并取反（低电平点亮LED）</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 控制P2端口的状态，设置特定的控制位</span></span><br><span class="line">        P2 = P2 &amp; <span class="number">0x1f</span> | <span class="number">0x80</span>; <span class="comment">// 将P2的低5位置为0，高3位置为1</span></span><br><span class="line">        P2 = P2 &amp; <span class="number">0x1f</span>;        <span class="comment">// 清除高3位，恢复P2端口的正常状态</span></span><br><span class="line"></span><br><span class="line">        tempLastLed = tempLed; <span class="comment">// 记录当前的LED状态，以便下次比较</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="KEY"><a href="#KEY" class="headerlink" title="KEY"></a>KEY</h1><h2 id="1-独立按键"><a href="#1-独立按键" class="headerlink" title="1.独立按键"></a>1.独立按键</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint8_t</span> <span class="title function_">KeyRead</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint8_t</span> temp = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (P33 == <span class="number">0</span>) &#123; temp = <span class="number">4</span>; &#125;</span><br><span class="line"><span class="keyword">if</span> (P32 == <span class="number">0</span>) &#123; temp = <span class="number">5</span>; &#125;</span><br><span class="line"><span class="keyword">if</span> (P31 == <span class="number">0</span>) &#123; temp = <span class="number">6</span>; &#125;</span><br><span class="line"><span class="keyword">if</span> (P30 == <span class="number">0</span>) &#123; temp = <span class="number">7</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-矩阵按键"><a href="#2-矩阵按键" class="headerlink" title="2.矩阵按键"></a>2.矩阵按键</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint8_t</span> <span class="title function_">KeyRead</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint8_t</span> temp = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">P44 = <span class="number">0</span>; P42 = <span class="number">1</span>; P35 = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (P33 == <span class="number">0</span>) &#123; temp = <span class="number">4</span>; &#125;</span><br><span class="line"><span class="keyword">if</span> (P32 == <span class="number">0</span>) &#123; temp = <span class="number">5</span>; &#125;</span><br><span class="line"><span class="keyword">if</span> (P31 == <span class="number">0</span>) &#123; temp = <span class="number">6</span>; &#125;</span><br><span class="line"><span class="keyword">if</span> (P30 == <span class="number">0</span>) &#123; temp = <span class="number">7</span>; &#125;</span><br><span class="line"></span><br><span class="line">P44 = <span class="number">1</span>; P42 = <span class="number">0</span>; P35 = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (P33 == <span class="number">0</span>) &#123; temp = <span class="number">8</span>; &#125;</span><br><span class="line"><span class="keyword">if</span> (P32 == <span class="number">0</span>) &#123; temp = <span class="number">9</span>; &#125;</span><br><span class="line"><span class="keyword">if</span> (P31 == <span class="number">0</span>) &#123; temp = <span class="number">10</span>; &#125;</span><br><span class="line"><span class="keyword">if</span> (P30 == <span class="number">0</span>) &#123; temp = <span class="number">11</span>; &#125;</span><br><span class="line"></span><br><span class="line">P44 = <span class="number">1</span>; P42 = <span class="number">1</span>; P35 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (P33 == <span class="number">0</span>) &#123; temp = <span class="number">12</span>; &#125;</span><br><span class="line"><span class="keyword">if</span> (P32 == <span class="number">0</span>) &#123; temp = <span class="number">13</span>; &#125;</span><br><span class="line"><span class="keyword">if</span> (P31 == <span class="number">0</span>) &#123; temp = <span class="number">14</span>; &#125;</span><br><span class="line"><span class="keyword">if</span> (P30 == <span class="number">0</span>) &#123; temp = <span class="number">15</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="SEG"><a href="#SEG" class="headerlink" title="SEG"></a>SEG</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">SegDisplay</span><span class="params">(<span class="type">uint8_t</span> pPos, <span class="type">uint8_t</span> sPos, <span class="type">uint8_t</span> point)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 消影 */</span></span><br><span class="line">P0 = <span class="number">0xff</span>;</span><br><span class="line">P2 = P2 &amp; <span class="number">0x1f</span> | <span class="number">0xe0</span>;</span><br><span class="line">P2 = P2 &amp; <span class="number">0x1f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 位选 */</span></span><br><span class="line">P0 = <span class="number">0x01</span> &lt;&lt; pPos;</span><br><span class="line">P2 = P2 &amp; <span class="number">0x1f</span> | <span class="number">0xc0</span>;</span><br><span class="line">P2 = P2 &amp; <span class="number">0x1f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 段选 */</span></span><br><span class="line">P0 = Seg_Table[sPos];</span><br><span class="line"><span class="keyword">if</span>(point) &#123; P0 &amp;= <span class="number">0x7f</span>; &#125;</span><br><span class="line">P2 = P2 &amp; <span class="number">0x1f</span> | <span class="number">0xe0</span>;</span><br><span class="line">P2 = P2 &amp; <span class="number">0x1f</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="SCHEDULER"><a href="#SCHEDULER" class="headerlink" title="SCHEDULER"></a>SCHEDULER</h1><h2 id="1-定时器"><a href="#1-定时器" class="headerlink" title="1.定时器"></a>1.定时器</h2><ul><li>打开 <code>stc-isp</code> 软件，找到 <strong>“定时器计算器”</strong>：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202503071852774.png" alt="微信截图_20250307184752" style="zoom: 200%;"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Timer1_Init</span><span class="params">(<span class="type">void</span>)</span>  <span class="comment">// 1毫秒@12.000MHz</span></span><br><span class="line">&#123;</span><br><span class="line">    AUXR &amp;= <span class="number">0xBF</span>;       <span class="comment">// 定时器时钟12T模式</span></span><br><span class="line">    TMOD &amp;= <span class="number">0x0F</span>;       <span class="comment">// 设置定时器模式</span></span><br><span class="line">    TL1 = <span class="number">0x18</span>;         <span class="comment">// 设置定时初始值</span></span><br><span class="line">    TH1 = <span class="number">0xFC</span>;         <span class="comment">// 设置定时初始值</span></span><br><span class="line">    TF1 = <span class="number">0</span>;            <span class="comment">// 清除TF1标志</span></span><br><span class="line">    TR1 = <span class="number">1</span>;            <span class="comment">// 定时器1开始计时</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>添加 ET1 和 EA 使能：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ET1 = <span class="number">1</span>;</span><br><span class="line">EA = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>2.创建任务列表结构体</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">void</span> (*taskPFunc)(<span class="type">void</span>);  <span class="comment">// 指向任务函数的指针</span></span><br><span class="line">    <span class="type">uint32_t</span> timeLoad;        <span class="comment">// 任务的周期时间（单位：毫秒）</span></span><br><span class="line">    <span class="type">uint32_t</span> timeLast;        <span class="comment">// 上次任务执行的时间戳</span></span><br><span class="line">&#125; Scheduler;</span><br><span class="line"></span><br><span class="line">Scheduler g_SchedulerList[] = </span><br><span class="line">&#123;</span><br><span class="line">    &#123;LedProc, <span class="number">1</span>, <span class="number">0</span>&#125;,        <span class="comment">// LedProc任务，每1毫秒执行一次</span></span><br><span class="line">    &#123;KeyProc, <span class="number">10</span>, <span class="number">0</span>&#125;,       <span class="comment">// KeyProc任务，每10毫秒执行一次</span></span><br><span class="line">    &#123;SegProc, <span class="number">150</span>, <span class="number">0</span>&#125;       <span class="comment">// SegProc任务，每150毫秒执行一次</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">idata <span class="type">uint8_t</span> TaskNum = <span class="keyword">sizeof</span>(g_SchedulerList) / <span class="keyword">sizeof</span>(g_SchedulerList[<span class="number">0</span>]);  <span class="comment">// 任务数量，计算Scheduler数组的大小</span></span><br></pre></td></tr></table></figure><p>3.设置调度器</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 任务调度器主循环函数 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">TaskSchedulerRun</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint8_t</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历所有任务</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; TaskNum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* 获取当前时间戳 */</span></span><br><span class="line">        <span class="type">uint32_t</span> timeNow = uwTick; <span class="comment">// 获取当前时间，假设uwTick是全局计时器的时间戳</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查当前时间是否已经达到了任务的执行周期</span></span><br><span class="line">        <span class="keyword">if</span> (timeNow - g_SchedulerList[i].timeLast &gt;= g_SchedulerList[i].timeLoad)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 更新时间戳为任务的执行周期（timeLoad），防止任务过度执行</span></span><br><span class="line">            g_SchedulerList[i].timeLast = timeNow;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 执行任务</span></span><br><span class="line">            g_SchedulerList[i].taskPFunc(); <span class="comment">// 调用任务对应的函数</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li><strong>先更新时间戳，后对任务函数进行调度</strong></li><li><strong>timeNow要定义在for循环里面</strong></li></ul></blockquote><h1 id="DS1302"><a href="#DS1302" class="headerlink" title="DS1302"></a>DS1302</h1><h2 id="1-硬件驱动层"><a href="#1-硬件驱动层" class="headerlink" title="1.硬件驱动层"></a>1.硬件驱动层</h2><h3 id="1-手写代码"><a href="#1-手写代码" class="headerlink" title="1.手写代码"></a>1.手写代码</h3><h4 id="1-写时序"><a href="#1-写时序" class="headerlink" title="1.写时序"></a>1.写时序</h4><blockquote><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202502151534524.png" alt="微信截图_20250215153352"></p></blockquote><ul><li><strong>CE</strong> 和 <strong>SCLK</strong> 根据时序进行控制，引脚状态通过外部代码模拟</li><li><strong>IO</strong> 是数据传输引脚，通过 <code>SCK</code> 时钟周期来同步数据的读取和写入</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Write_Ds1302</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> temp)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> i;</span><br><span class="line"><span class="comment">// LSB to MSB</span></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">SCK = <span class="number">0</span>;</span><br><span class="line">SDA = temp &amp; <span class="number">0x01</span>;</span><br><span class="line">SCK = <span class="number">1</span>;</span><br><span class="line">temp &gt;&gt;= <span class="number">1</span>; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Write_Ds1302_Byte</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> address, <span class="type">unsigned</span> <span class="type">char</span> dat)</span></span><br><span class="line">&#123;</span><br><span class="line">    RST = <span class="number">0</span>;_nop_();</span><br><span class="line">    SCK = <span class="number">0</span>;_nop_();</span><br><span class="line">RST = <span class="number">1</span>;_nop_();</span><br><span class="line"><span class="comment">// 写入地址</span></span><br><span class="line">Write_Ds1302(address);</span><br><span class="line"><span class="comment">// 写数据</span></span><br><span class="line">Write_Ds1302(dat);</span><br><span class="line">SCK = <span class="number">0</span>;_nop_();</span><br><span class="line">RST = <span class="number">1</span>;_nop_();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-读时序"><a href="#2-读时序" class="headerlink" title="2.读时序"></a>2.读时序</h4><blockquote><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202502151535024.png" alt="微信截图_20250215153502"></p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">char</span> <span class="title function_">Read_Ds1302_Byte</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> address)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> temp = <span class="number">0x00</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    RST = <span class="number">0</span>;_nop_();</span><br><span class="line">    SCK = <span class="number">0</span>;_nop_();</span><br><span class="line">RST = <span class="number">1</span>;_nop_();</span><br><span class="line"><span class="comment">// 写地址</span></span><br><span class="line">Write_Ds1302(address);</span><br><span class="line"><span class="comment">// 读出写入地址的数据</span></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">temp &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">SCK = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(SDA)</span><br><span class="line">temp |= <span class="number">0x80</span>;</span><br><span class="line">SCK = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">RST = <span class="number">0</span>;_nop_();</span><br><span class="line">    <span class="comment">// </span></span><br><span class="line">    <span class="comment">// </span></span><br><span class="line">    <span class="comment">// </span></span><br><span class="line">    <span class="comment">// </span></span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-官方代码"><a href="#2-官方代码" class="headerlink" title="2.官方代码"></a>2.官方代码</h3><h4 id="1-写时序-1"><a href="#1-写时序-1" class="headerlink" title="1.写时序"></a>1.写时序</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Write_Ds1302</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> temp)</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)     </span><br><span class="line">&#123; </span><br><span class="line">SCK = <span class="number">0</span>;</span><br><span class="line">SDA = temp &amp; <span class="number">0x01</span>;</span><br><span class="line">temp &gt;&gt;= <span class="number">1</span>; </span><br><span class="line">SCK = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;   </span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Write_Ds1302_Byte</span><span class="params">( <span class="type">unsigned</span> <span class="type">char</span> address,<span class="type">unsigned</span> <span class="type">char</span> dat)</span>     </span><br><span class="line">&#123;</span><br><span class="line"> RST = <span class="number">0</span>;_nop_();</span><br><span class="line"> SCK = <span class="number">0</span>;_nop_();</span><br><span class="line"> RST = <span class="number">1</span>; _nop_();  </span><br><span class="line"> Write_Ds1302(address);</span><br><span class="line"> Write_Ds1302(dat);</span><br><span class="line"> RST = <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-读时序-1"><a href="#2-读时序-1" class="headerlink" title="2.读时序"></a>2.读时序</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">char</span> <span class="title function_">Read_Ds1302_Byte</span> <span class="params">( <span class="type">unsigned</span> <span class="type">char</span> address )</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="type">unsigned</span> <span class="type">char</span> i,temp = <span class="number">0x00</span>;</span><br><span class="line"> RST = <span class="number">0</span>;_nop_();</span><br><span class="line"> SCK = <span class="number">0</span>;_nop_();</span><br><span class="line"> RST = <span class="number">1</span>;_nop_();</span><br><span class="line"> Write_Ds1302(address);</span><br><span class="line"> <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) </span><br><span class="line"> &#123;</span><br><span class="line">SCK = <span class="number">0</span>;</span><br><span class="line">temp &gt;&gt;= <span class="number">1</span>;</span><br><span class="line"> <span class="keyword">if</span>(SDA)</span><br><span class="line"> temp|= <span class="number">0x80</span>;</span><br><span class="line"> SCK = <span class="number">1</span>;</span><br><span class="line">&#125; </span><br><span class="line"> RST = <span class="number">0</span>;_nop_();</span><br><span class="line"> SCK = <span class="number">0</span>;_nop_();</span><br><span class="line">SCK = <span class="number">1</span>;_nop_();</span><br><span class="line">SDA = <span class="number">0</span>;_nop_();</span><br><span class="line">SDA = <span class="number">1</span>;_nop_();</span><br><span class="line"><span class="keyword">return</span> (temp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-问题"><a href="#3-问题" class="headerlink" title="3.问题"></a>3.问题</h3><ul><li><h4 id="为什么-SCK-0-必须要在-RST-0-与-RST-1-之间，不能在RST-0-与-RST-1-后面？"><a href="#为什么-SCK-0-必须要在-RST-0-与-RST-1-之间，不能在RST-0-与-RST-1-后面？" class="headerlink" title="为什么 SCK = 0 必须要在 RST = 0 与 RST = 1 之间，不能在RST = 0 与 RST = 1 后面？"></a><strong>为什么 SCK = 0 必须要在 RST = 0 与 RST = 1 之间，不能在RST = 0 与 RST = 1 后面？</strong></h4><blockquote><p>​    在复位过程中，它的内部状态和寄存器会被重置，时钟信号也应该被禁用（<code>SCK = 0</code>），因此你需要确保时钟信号（<code>SCK</code>）</p><p>​    处于低电平，以便稳定地复位 DS1302 。如果在复位信号（<code>RST = 1</code>）之后再设置 <code>SCK = 0</code>，会打乱时序和同步，导致后</p><p>​    续操作（如数据传输）失败。</p></blockquote></li><li><p><strong>为什么读取逻辑写完后还要操作 SCK 和 SDA ？</strong></p><p> 从数码管读取现象来看，不操作 SCK 和 SDA大概率导致某些数据读取不准：</p><p> <img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202502151640686.jpg" alt="微信图片_20250215163908 (2)"></p><blockquote><p><strong><code>SCK = 0; _nop_(); SCK = 1; _nop_();</code></strong></p><ul><li><strong><code>SCK = 0</code></strong>： <code>SCK</code> 拉低，保证时钟线处于初始化状态<strong>（根据时序，SCK = 0 -&gt; 读数据 -&gt; SCK = 1，图上D7之后是SCK = 0）</strong>，避免任何非预期的信号波动，确保开始时刻的同步。</li><li><strong><code>SCK = 1</code></strong>：时钟信号的拉高是准备进行下一步操作的必要条件。它将开始提供时钟脉冲，驱动数据写入<strong>（下一步写入数据时，SCK应为高电平）</strong>。</li></ul><p><strong><code>SDA = 0; _nop_(); SDA = 1; _nop_();</code></strong></p><ul><li><strong><code>SDA = 0</code></strong>：将数据线 <code>SDA</code> 拉低，准备传输数据。数据线通常会在传输前先设置为低电平，确保没有其他信号干扰。</li><li><strong><code>SDA = 1</code></strong>：将数据线拉高，为接下来开始数据传输做准备。数据线在高电平时表示可以开始传输有效数据。</li></ul></blockquote></li></ul><h2 id="2-硬件抽象层"><a href="#2-硬件抽象层" class="headerlink" title="2.硬件抽象层"></a>2.硬件抽象层</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">SetRtc</span><span class="params">(<span class="type">uint8_t</span> *ucRtc)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint8_t</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">uint8_t</span> temp = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 关闭写保护 */</span></span><br><span class="line">Write_Ds1302_Byte(<span class="number">0x8e</span>, <span class="number">0x00</span>);</span><br><span class="line">    <span class="comment">/* 停止时钟振荡器 */</span></span><br><span class="line">Write_Ds1302_Byte(<span class="number">0x80</span>, <span class="number">0x80</span>);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">temp = ucRtc[i] / <span class="number">10</span> &lt;&lt; <span class="number">4</span> | ucRtc[i] % <span class="number">10</span>;</span><br><span class="line">Write_Ds1302_Byte(<span class="number">0x84</span> - <span class="number">2</span> * i, temp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 打开写保护 */</span></span><br><span class="line">Write_Ds1302_Byte(<span class="number">0x8e</span>, <span class="number">0x80</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">ReadRtc</span><span class="params">(<span class="type">uint8_t</span> *ucRtc)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint8_t</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">uint8_t</span> temp = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    EA = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        temp = Read_Ds1302_Byte(<span class="number">0x85</span> - <span class="number">2</span> * i);</span><br><span class="line">        ucRtc[i] = temp / <span class="number">16</span> * <span class="number">10</span> + temp % <span class="number">16</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    EA = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>1.中断处理：</strong> </p><ul><li>读取时必须关闭全局中断（EA=0）</li><li>防⽌时序被打断导致读取错误</li></ul><p><strong>2.写保护机制：</strong></p><ul><li>任何写操作前后必须配置 WP 位</li><li>遵循 “关闭保护” - &gt; “操作” -&gt; “恢复保护”原则</li></ul><p><strong>3.时钟精度保障：</strong></p><ul><li>初始化时建议先停⽌时钟（CH=1）</li></ul></blockquote><h1 id="IIC"><a href="#IIC" class="headerlink" title="IIC"></a>IIC</h1><h2 id="1-硬件驱动层-1"><a href="#1-硬件驱动层-1" class="headerlink" title="1.硬件驱动层"></a>1.硬件驱动层</h2><h3 id="1-手写代码-1"><a href="#1-手写代码-1" class="headerlink" title="1.手写代码"></a>1.手写代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">I2CStart</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    sda = <span class="number">1</span>;</span><br><span class="line">    scl = <span class="number">1</span>;</span><br><span class="line">    I2C_Delay(DELAY_TIME);</span><br><span class="line">    sda = <span class="number">0</span>;</span><br><span class="line">    I2C_Delay(DELAY_TIME);</span><br><span class="line">    scl = <span class="number">0</span>;</span><br><span class="line">    I2C_Delay(DELAY_TIME);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">I2CStop</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    sda = <span class="number">0</span>;</span><br><span class="line">    I2C_Delay(DELAY_TIME);</span><br><span class="line">    scl = <span class="number">1</span>;</span><br><span class="line">    I2C_Delay(DELAY_TIME);</span><br><span class="line">    sda = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">I2CSendByte</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> byt)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        scl = <span class="number">0</span>;</span><br><span class="line">        I2C_Delay(DELAY_TIME);</span><br><span class="line">        <span class="keyword">if</span> (byt &amp; <span class="number">0x80</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            sda = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            sda = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        byt &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">        I2C_Delay(DELAY_TIME);</span><br><span class="line">        scl = <span class="number">1</span>;</span><br><span class="line">        I2C_Delay(DELAY_TIME);</span><br><span class="line">        scl = <span class="number">0</span>;</span><br><span class="line">        I2C_Delay(DELAY_TIME);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> <span class="title function_">I2CReceiveByte</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> da;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> i;</span><br><span class="line">    <span class="comment">/* 释放 SDA 线 */</span></span><br><span class="line">    sda = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        scl = <span class="number">1</span>;</span><br><span class="line">        I2C_Delay(DELAY_TIME);</span><br><span class="line">        da &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (sda)</span><br><span class="line">            da |= <span class="number">0x01</span>;</span><br><span class="line">        scl = <span class="number">0</span>;</span><br><span class="line">        I2C_Delay(DELAY_TIME);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> da;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> <span class="title function_">I2CWaitAck</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> ackbit;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> Error_Tick;</span><br><span class="line">    <span class="comment">/* 释放 SDA 线  */</span></span><br><span class="line">    sda = <span class="number">1</span>;</span><br><span class="line">    I2C_Delay(DELAY_TIME);</span><br><span class="line"></span><br><span class="line">    scl = <span class="number">1</span>;</span><br><span class="line">    I2C_Delay(DELAY_TIME);</span><br><span class="line">    ackbit = sda;</span><br><span class="line">    <span class="keyword">while</span> (ackbit)</span><br><span class="line">    &#123;</span><br><span class="line">        Error_Tick++;</span><br><span class="line">        <span class="keyword">if</span> (Error_Tick &gt;= <span class="number">250</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Error_Tick = <span class="number">0</span>;</span><br><span class="line">            I2CStop();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    scl = <span class="number">0</span>;</span><br><span class="line">    I2C_Delay(DELAY_TIME);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">I2CSendAck</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> ackbit)</span></span><br><span class="line">&#123;</span><br><span class="line">    scl = <span class="number">0</span>;</span><br><span class="line">    sda = ackbit;</span><br><span class="line">    I2C_Delay(DELAY_TIME);</span><br><span class="line">    scl = <span class="number">1</span>;</span><br><span class="line">    I2C_Delay(DELAY_TIME);</span><br><span class="line">    scl = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/* 释放 SDA 线  */</span></span><br><span class="line">    sda = <span class="number">1</span>;</span><br><span class="line">    I2C_Delay(DELAY_TIME);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-官方代码-1"><a href="#2-官方代码-1" class="headerlink" title="2.官方代码"></a>2.官方代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">I2CStart</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    sda = <span class="number">1</span>;</span><br><span class="line">    scl = <span class="number">1</span>;</span><br><span class="line">    I2C_Delay(DELAY_TIME);</span><br><span class="line">    sda = <span class="number">0</span>;</span><br><span class="line">    I2C_Delay(DELAY_TIME);</span><br><span class="line">    scl = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">I2CStop</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    sda = <span class="number">0</span>;</span><br><span class="line">    scl = <span class="number">1</span>;</span><br><span class="line">    I2C_Delay(DELAY_TIME);</span><br><span class="line">    sda = <span class="number">1</span>;</span><br><span class="line">    I2C_Delay(DELAY_TIME);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">I2CSendByte</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> byt)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        scl = <span class="number">0</span>;</span><br><span class="line">        I2C_Delay(DELAY_TIME);</span><br><span class="line">        <span class="keyword">if</span> (byt &amp; <span class="number">0x80</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            sda = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            sda = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        I2C_Delay(DELAY_TIME);</span><br><span class="line">        scl = <span class="number">1</span>;</span><br><span class="line">        byt &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">        I2C_Delay(DELAY_TIME);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    scl = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> <span class="title function_">I2CReceiveByte</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> da;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        scl = <span class="number">1</span>;</span><br><span class="line">        I2C_Delay(DELAY_TIME);</span><br><span class="line">        da &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (sda)</span><br><span class="line">            da |= <span class="number">0x01</span>;</span><br><span class="line">        scl = <span class="number">0</span>;</span><br><span class="line">        I2C_Delay(DELAY_TIME);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> da;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> <span class="title function_">I2CWaitAck</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> ackbit;</span><br><span class="line"></span><br><span class="line">    scl = <span class="number">1</span>;</span><br><span class="line">    I2C_Delay(DELAY_TIME);</span><br><span class="line">    ackbit = sda;</span><br><span class="line">    scl = <span class="number">0</span>;</span><br><span class="line">    I2C_Delay(DELAY_TIME);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ackbit;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">I2CSendAck</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> ackbit)</span></span><br><span class="line">&#123;</span><br><span class="line">    scl = <span class="number">0</span>;</span><br><span class="line">    sda = ackbit;</span><br><span class="line">    I2C_Delay(DELAY_TIME);</span><br><span class="line">    scl = <span class="number">1</span>;</span><br><span class="line">    I2C_Delay(DELAY_TIME);</span><br><span class="line">    scl = <span class="number">0</span>;</span><br><span class="line">    sda = <span class="number">1</span>;</span><br><span class="line">    I2C_Delay(DELAY_TIME);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-问题-1"><a href="#3-问题-1" class="headerlink" title="3.问题"></a>3.问题</h3><ul><li><p><strong>为什么发送数据时不需要手动释放 SDA 线？</strong></p><blockquote><p><strong>控制权始终在主机</strong>：发送数据时，主机作为数据传输的主动方，全程控制 SDA 线的电平（逐位输出数据）。主机在发送数据时，SDA 线由主机驱动（拉高或拉低），无需释放。</p><p><strong>上拉电阻作用</strong>：数据发送完成后，主机停止驱动 SDA 线，此时 SDA 线通过外部上拉电阻自动恢复到高电平（空闲状态）。因此，主机无需显式释放 SDA 线。</p></blockquote></li><li><p><strong>为什么接收数据时需要手动释放 SDA 线？</strong></p><blockquote><p><strong>控制权转移</strong>：接收数据时，SDA 线需由从机驱动。主机必须主动释放 SDA 线（停止驱动），否则从机无法修改 SDA 线的电平（总线会被主机强制拉高或拉低）。</p><p><strong>同步读取数据</strong>：主机通过时钟（SCL）同步读取SDA线的状态，释放SDA线后，从机在SCL的每个上升沿前设置SDA电平（传输数据位）。</p></blockquote></li><li><p><strong>为什么发送应答（ACK）时需要释放 SDA 线？</strong></p><blockquote><p><strong>发送应答 ACK</strong> ：<strong>主机接收完数据并且发送应答后从机需要继续发送数据，主机必须释放 SDA 线，</strong>允许从机控制SDA线传输下一字节。 </p><p><strong>发送非应答 NACK</strong> ：<strong>主机接收完数据并且发送应答后没必要显示释放 SDA 线</strong>，主机直接停止通信就好。</p></blockquote></li><li><p><strong>为什么接收应答时需要释放 SDA 线？</strong></p><blockquote><p><strong>从机控制应答信号</strong>：接收应答时，主机需读取 SDA 线的电平（ ACK / NACK），而 SDA 线的状态由从机设置。主机必须释放 SDA线，允许从机修改其电平。</p><p><strong>协议时序要求</strong>：在应答周期内，主机拉高 SCL 后，从机在 SCL 高电平期间拉低 SDA（发送 ACK  ）。若主机未释放 SDA 线，从机无法完成此操作，导致通信失败。</p></blockquote></li></ul><h2 id="2-硬件抽象层-1"><a href="#2-硬件抽象层-1" class="headerlink" title="2.硬件抽象层"></a>2.硬件抽象层</h2><blockquote><p>首先添加 intrins.h 头文件。</p></blockquote><h3 id="1-ADC"><a href="#1-ADC" class="headerlink" title="1.ADC"></a>1.ADC</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">ADWrite</span><span class="params">(<span class="type">uint8_t</span> dat)</span></span><br><span class="line">&#123;</span><br><span class="line">    I2CStart();</span><br><span class="line"></span><br><span class="line">    I2CSendByte(<span class="number">0x90</span>);</span><br><span class="line">    I2CWaitAck();</span><br><span class="line"></span><br><span class="line">    I2CSendByte(<span class="number">0x41</span>);</span><br><span class="line">    I2CWaitAck();</span><br><span class="line"></span><br><span class="line">    I2CSendByte(dat);</span><br><span class="line">    I2CWaitAck();</span><br><span class="line"></span><br><span class="line">    I2CStop();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-DAC"><a href="#2-DAC" class="headerlink" title="2.DAC"></a>2.DAC</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint8_t</span> <span class="title function_">AD_Read</span><span class="params">(<span class="type">uint8_t</span> addr)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint8_t</span> temp;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 假写 */</span></span><br><span class="line">    I2CStart();</span><br><span class="line">    I2CSendByte(<span class="number">0x90</span>);</span><br><span class="line">    I2CWaitAck();</span><br><span class="line"></span><br><span class="line">    I2CSendByte(addr);</span><br><span class="line">    I2CWaitAck();</span><br><span class="line"></span><br><span class="line">    I2CStart();</span><br><span class="line">    I2CSendByte(<span class="number">0x91</span>);</span><br><span class="line">    I2CWaitAck();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 读一个字节 */</span></span><br><span class="line">    temp = I2CReceiveByte();</span><br><span class="line">    I2CSendAck(<span class="number">1</span>);</span><br><span class="line">    I2CStop();</span><br><span class="line"></span><br><span class="line">    I2C_Delay(<span class="number">255</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-E2PROM"><a href="#3-E2PROM" class="headerlink" title="3.E2PROM"></a>3.E2PROM</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">E2POMWrite</span><span class="params">(<span class="type">uint8_t</span> *str, <span class="type">uint8_t</span> addr, <span class="type">uint8_t</span> num)</span></span><br><span class="line">&#123;</span><br><span class="line">    I2CStart();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 选择芯片为EEPROM，模式为写 */</span></span><br><span class="line">    I2CSendByte(<span class="number">0xa0</span>);</span><br><span class="line">    I2CWaitAck();</span><br><span class="line"></span><br><span class="line">    I2CSendByte(addr); <span class="comment">// 写入的数据的地址</span></span><br><span class="line">    I2CWaitAck();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (num--)</span><br><span class="line">    &#123;</span><br><span class="line">        I2CSendByte(*str++);</span><br><span class="line">        I2CWaitAck();</span><br><span class="line">        I2C_Delay(<span class="number">200</span>); <span class="comment">// 单字节写入延时保护</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    I2CStop();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 写入完成后的延时保护 */</span></span><br><span class="line">    I2C_Delay(<span class="number">255</span>);</span><br><span class="line">    I2C_Delay(<span class="number">255</span>);</span><br><span class="line">    I2C_Delay(<span class="number">255</span>);</span><br><span class="line">    I2C_Delay(<span class="number">255</span>);</span><br><span class="line">    I2C_Delay(<span class="number">255</span>);</span><br><span class="line">    I2C_Delay(<span class="number">255</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">E2POMRead</span><span class="params">(<span class="type">uint8_t</span> *str, <span class="type">uint8_t</span> addr, <span class="type">uint8_t</span> num)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 假写 */</span></span><br><span class="line">    I2CStart();</span><br><span class="line"></span><br><span class="line">    I2CSendByte(<span class="number">0xa0</span>);</span><br><span class="line">    I2CWaitAck();</span><br><span class="line"></span><br><span class="line">    I2CSendByte(addr);</span><br><span class="line">    I2CWaitAck();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 真读 */</span></span><br><span class="line">    I2CStart();</span><br><span class="line"></span><br><span class="line">    I2CSendByte(<span class="number">0xa1</span>);</span><br><span class="line">    I2CWaitAck();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (num--)</span><br><span class="line">    &#123;</span><br><span class="line">        *str++ = I2CReceiveByte();</span><br><span class="line">        I2CSendAck(num ? <span class="number">0</span> : <span class="number">1</span>); <span class="comment">// 最后一个字节发送NACK</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    I2CStop();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：由于EEPROM是连续写入的，存放 uint16_t 类型的数据时，它会自动占用两个连续位置。而读取时每次只能读一个字节，因此读取多字节数据（如uint16_t）时需要分别读取高低位再组合。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 蓝桥杯 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
