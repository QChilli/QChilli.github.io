<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>STM32进阶篇</title>
      <link href="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/"/>
      <url>/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<ol><li><h1 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h1></li><li><h2 id="系统定时器"><a href="#系统定时器" class="headerlink" title="系统定时器"></a>系统定时器</h2></li><li><h3 id="系统定时器简介"><a href="#系统定时器简介" class="headerlink" title="系统定时器简介"></a>系统定时器简介</h3></li></ol><p>系统定时器（SysTick系统）是属于CM3内核，内嵌在NVIC中。</p><p>系统定时器是一个24bit的向下<strong>递减</strong>的计数器，计数器每计数一次的时间为 <strong>1 / SYSCLK</strong> ，一般我们设置系统时钟SYSCLK（与AHB相同）等于72M。当重装载数值寄存器的值递减到0的时候，系统定时器就产生一次中断，以此循环往复。</p><p>SysTick定时器能产生中断，CM3为它专门开出一个异常类型，并且在向量表中有它的一席之地。它使操作系统和其它系统软件在CM3器件间的移植变得简单多了，因为在所有CM3产品间SysTick的处理方式都是相同的。</p><p>系统定时器一般用于操作系统，用于产生时基，维持操作系统的心跳。SysTick定时器除了能服务于操作系统之外，还能用于其它目的：如作为一个闹铃，用于测量时间等。</p><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172553413982282.png" alt="img"></p><ol><li><h3 id="与SysTick相关的寄存器"><a href="#与SysTick相关的寄存器" class="headerlink" title="与SysTick相关的寄存器"></a>与SysTick相关的寄存器</h3></li></ol><p>有4个寄存器与SysTick有关。在core_cm3.h中可以看到有个类型定义的就是SysTick。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    __IO <span class="type">uint32_t</span> CTRL;                         <span class="comment">/*!&lt; Offset: 0x00  SysTick Control and Status Register */</span></span><br><span class="line">    __IO <span class="type">uint32_t</span> LOAD;                         <span class="comment">/*!&lt; Offset: 0x04  SysTick Reload Value Register       */</span></span><br><span class="line">    __IO <span class="type">uint32_t</span> VAL;                          <span class="comment">/*!&lt; Offset: 0x08  SysTick Current Value Register      */</span></span><br><span class="line">    __IO <span class="type">uint32_t</span> CALIB;                        <span class="comment">/*!&lt; Offset: 0x0C  SysTick Calibration Register        */</span></span><br><span class="line">&#125; SysTick_Type</span><br></pre></td></tr></table></figure><ol><li><strong>CTRL</strong></li></ol><p>SysTick控制和状态寄存器。</p><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-17255341398131.png" alt="img"></p><p>说明:关于<strong>CLKSOURCE</strong>位,当0时,时钟频率是AHB/8, 当1时,时钟频率是AHB。</p><ol><li><strong>LOAD </strong></li></ol><p>SysTick重装载寄存器。</p><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-17255341398132.png" alt="img"></p><ol><li><strong>VAL</strong></li></ol><p>SysTick当前数值寄存器。</p><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-17255341398133.png" alt="img"></p><ol><li><strong>CALIB</strong></li></ol><p>SysTick 校准数值寄存器。很少用到。</p><ol><li><h3 id="系统中断案例：LED灯闪烁"><a href="#系统中断案例：LED灯闪烁" class="headerlink" title="系统中断案例：LED灯闪烁"></a>系统中断案例：LED灯闪烁</h3></li><li><h4 id="需求描述"><a href="#需求描述" class="headerlink" title="需求描述"></a>需求描述</h4></li></ol><p>利用<strong>系统定时器的中断</strong>，每隔1s 让LED1灯闪烁一次。</p><ol><li><h4 id="硬件电路设计"><a href="#硬件电路设计" class="headerlink" title="硬件电路设计"></a>硬件电路设计</h4></li></ol><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-17255341398134.png" alt="img"></p><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-17255341398135.png" alt="img"></p><ol><li><h4 id="软件设计（寄存器）"><a href="#软件设计（寄存器）" class="headerlink" title="软件设计（寄存器）"></a>软件设计（寄存器）</h4></li></ol><p><a href="https://xiza3i1x6q4.feishu.cn/wiki/FNlqwxVkria9T0kUno1cqPamn6g">系统定时器所需要的寄存器详解</a></p><ol><li><h5 id="main-c"><a href="#main-c" class="headerlink" title="main.c"></a><strong>main.c</strong></h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Driver_USART.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Driver_SysTick.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Driver_LED.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Driver_USART1_Init();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;系统定时器实验开始...\r\n&quot;</span>);</span><br><span class="line">    Driver_LED_Init();</span><br><span class="line">    Driver_SysTick_Init();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h5 id="Driver-SysTick-h"><a href="#Driver-SysTick-h" class="headerlink" title="Driver_SysTick.h"></a><strong>Driver_SysTick.h</strong></h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#ifndef__DRIVER_SYSTICK_H</span><br><span class="line"></span><br><span class="line">#define__DRIVER_SYSTICK_H</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Driver_LED.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_SysTick_Init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><ol><li><h5 id="Driver-SysTick-c"><a href="#Driver-SysTick-c" class="headerlink" title="Driver_SysTick.c"></a><strong>Driver_SysTick.c</strong></h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Driver_SysTick.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_SysTick_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 配置时钟源  1=AHB(72MHz) 0=AHB/8 */</span></span><br><span class="line">    SysTick-&gt;CTRL |= SysTick_CTRL_CLKSOURCE;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 2. 使能中断 */</span></span><br><span class="line">    SysTick-&gt;CTRL |= SysTick_CTRL_TICKINT;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 3. 定时器 1ms 产生一次中断 */</span></span><br><span class="line">    SysTick-&gt;LOAD = <span class="number">72000</span> - <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 4. 使能定时器 */</span></span><br><span class="line">    SysTick-&gt;CTRL |= SysTick_CTRL_ENABLE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 每1ms产生一次中断</span></span><br><span class="line"><span class="type">uint16_t</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">SysTick_Handler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    count++;</span><br><span class="line">    <span class="keyword">if</span> (count == <span class="number">1000</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, count);</span><br><span class="line">        count = <span class="number">0</span>;</span><br><span class="line">        Driver_LED_Toggle(LED_1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h5 id="Driver-LED-h"><a href="#Driver-LED-h" class="headerlink" title="Driver_LED.h"></a><strong>Driver_LED.h</strong></h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __DRIVER_LED_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __DRIVER_LED_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED_1 GPIO_ODR_ODR0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED_2 GPIO_ODR_ODR1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED_3 GPIO_ODR_ODR8</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_Init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_On</span><span class="params">(<span class="type">uint32_t</span> led)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_Off</span><span class="params">(<span class="type">uint32_t</span> led)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_Toggle</span><span class="params">(<span class="type">uint32_t</span> led)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_OnAll</span><span class="params">(<span class="type">uint32_t</span> leds[], <span class="type">uint8_t</span> size)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_OffAll</span><span class="params">(<span class="type">uint32_t</span> leds[], <span class="type">uint8_t</span> size)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><ol><li><h5 id="Driver-LED-c"><a href="#Driver-LED-c" class="headerlink" title="Driver_LED.c"></a>Driver_LED.c</h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Driver_LED.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 对LED进行初始化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 打开GPIOA的时钟 */</span></span><br><span class="line">    RCC-&gt;APB2ENR |= RCC_APB2ENR_IOPAEN;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 2. 给用到的端口的所有 PIN (PA0 PA1 PA8) 设置工作模式: 通用推挽输出 MODE:11  CNF:00 */</span></span><br><span class="line">    GPIOA-&gt;CRL |= (GPIO_CRL_MODE0 | GPIO_CRL_MODE1);</span><br><span class="line">    GPIOA-&gt;CRL &amp;= ~(GPIO_CRL_CNF0 | GPIO_CRL_CNF1);</span><br><span class="line">    </span><br><span class="line">    GPIOA-&gt;CRH |= GPIO_CRH_MODE8;</span><br><span class="line">    GPIOA-&gt;CRH &amp;= ~GPIO_CRH_CNF8;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 3. 关闭所有灯  */</span></span><br><span class="line">    Driver_LED_Off(LED_1);</span><br><span class="line">    Driver_LED_Off(LED_2);</span><br><span class="line">    Driver_LED_Off(LED_3);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 点亮指定的LED</span></span><br><span class="line"><span class="comment"> * @param &#123;uint32_t&#125; led 要点亮的LED</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_On</span><span class="params">(<span class="type">uint32_t</span> led)</span></span><br><span class="line">&#123;</span><br><span class="line">    GPIOA-&gt;ODR &amp;= ~led;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 关闭指定的LED</span></span><br><span class="line"><span class="comment"> * @param &#123;uint32_t&#125; led 要关闭的LED</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_Off</span><span class="params">(<span class="type">uint32_t</span> led)</span></span><br><span class="line">&#123;</span><br><span class="line">    GPIOA-&gt;ODR |= led;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 翻转LED的状态</span></span><br><span class="line"><span class="comment"> * @param &#123;uint32_t&#125; led 要翻转的LED</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_Toggle</span><span class="params">(<span class="type">uint32_t</span> led)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 读取引脚的电平,如果是1(目前是关闭), 打开, 否则就关闭 */</span></span><br><span class="line">    <span class="keyword">if</span> ((GPIOA-&gt;IDR &amp; led) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Driver_LED_Off(led);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        Driver_LED_On(led);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 打开数组中所有的灯</span></span><br><span class="line"><span class="comment"> * @param &#123;uint32_t&#125; leds 所有灯</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; size 灯的个数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_OnAll</span><span class="params">(<span class="type">uint32_t</span> leds[], <span class="type">uint8_t</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint8_t</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Driver_LED_On(leds[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 关闭数组中所有的灯</span></span><br><span class="line"><span class="comment"> * @param &#123;uint32_t&#125; leds 所有灯</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; size 灯的个数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_OffAll</span><span class="params">(<span class="type">uint32_t</span> leds[], <span class="type">uint8_t</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint8_t</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Driver_LED_Off(leds[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h4 id="软件设计（HAL库）"><a href="#软件设计（HAL库）" class="headerlink" title="软件设计（HAL库）"></a>软件设计（HAL库）</h4></li><li><h5 id="STM32CubeMX设置"><a href="#STM32CubeMX设置" class="headerlink" title="STM32CubeMX设置"></a>STM32CubeMX设置</h5></li></ol><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-17255341398136.png" alt="img"></p><ol><li><h5 id="SysTick初始化代码解读"><a href="#SysTick初始化代码解读" class="headerlink" title="SysTick初始化代码解读"></a>SysTick初始化代码解读</h5></li></ol><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-17255341398137.png" alt="img"></p><p>在HAL库初始化的时候，会初始化SysTick定时器。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">HAL_StatusTypeDef <span class="title function_">HAL_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* Set Interrupt Group Priority */</span></span><br><span class="line">    HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);</span><br><span class="line">    <span class="comment">// 初始化系统滴答定时器：参数是滴答定时器中断优先级，默认是15</span></span><br><span class="line">    HAL_InitTick(TICK_INT_PRIORITY);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Init the low level hardware */</span></span><br><span class="line">    HAL_MspInit();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Return function status */</span></span><br><span class="line">    <span class="keyword">return</span> HAL_OK;</span><br><span class="line">&#125;</span><br><span class="line">__weak HAL_StatusTypeDef <span class="title function_">HAL_InitTick</span><span class="params">(<span class="type">uint32_t</span> TickPriority)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* Configure the SysTick to have interrupt in 1ms time basis*/</span></span><br><span class="line">    <span class="comment">// 配置滴答定时器：每1ms产生一次中断</span></span><br><span class="line">    <span class="comment">//SystemCoreClock = 72MHz（经过RCC配置后）</span></span><br><span class="line"><span class="comment">// uwTickFreq = 1</span></span><br><span class="line"><span class="comment">// 参数 = 72000 就是重转载寄存器的值。这个值减到0产生一次中断</span></span><br><span class="line"><span class="comment">// 时钟频率是72MHz，计数72次是1us，所以计数72000次就是1ms</span></span><br><span class="line"><span class="comment">// 所以1ms会产生一次中断</span></span><br><span class="line">    <span class="keyword">if</span> (HAL_SYSTICK_Config(SystemCoreClock / (<span class="number">1000U</span> / uwTickFreq)) &gt; <span class="number">0U</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> HAL_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Configure the SysTick IRQ priority */</span></span><br><span class="line">    <span class="keyword">if</span> (TickPriority &lt; (<span class="number">1UL</span> &lt;&lt; __NVIC_PRIO_BITS))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 设置SysTick的优先级：抢占优先级15（最低） 和响应优先级0</span></span><br><span class="line">        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, <span class="number">0U</span>);</span><br><span class="line">        uwTickPrio = TickPriority;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> HAL_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Return function status */</span></span><br><span class="line">    <span class="keyword">return</span> HAL_OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">uint32_t</span> <span class="title function_">HAL_SYSTICK_Config</span><span class="params">(<span class="type">uint32_t</span> TicksNumb)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> SysTick_Config(TicksNumb);</span><br><span class="line">&#125;</span><br><span class="line">__STATIC_INLINE <span class="type">uint32_t</span> <span class="title function_">SysTick_Config</span><span class="params">(<span class="type">uint32_t</span> ticks)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ((ticks - <span class="number">1UL</span>) &gt; SysTick_LOAD_RELOAD_Msk)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">return</span> (<span class="number">1UL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">      <span class="comment">// 重装载寄存器的值。计数器的初始值</span></span><br><span class="line">    SysTick-&gt;LOAD = (<span class="type">uint32_t</span>)(ticks - <span class="number">1UL</span>);</span><br><span class="line"><span class="comment">// 中断优先级</span></span><br><span class="line">    NVIC_SetPriority (SysTick_IRQn, (<span class="number">1UL</span> &lt;&lt; __NVIC_PRIO_BITS) - <span class="number">1UL</span>);</span><br><span class="line"><span class="comment">// 设置当前数值寄存器的值 </span></span><br><span class="line">    SysTick-&gt;VAL = <span class="number">0UL</span>;</span><br><span class="line"><span class="comment">// 1. 设置时钟源为内部时钟源</span></span><br><span class="line"><span class="comment">// 2. 当计数至0时，产生异常</span></span><br><span class="line"><span class="comment">// 3. 使能SysTick计数器</span></span><br><span class="line">    SysTick-&gt;CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">0UL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4></li><li><p>前面的这些参数都可以根据需要进行调整。</p></li><li><p>一般建议把SysTick定时器的抢占优先级设置为最高（数字越小，优先级越高）。<strong>否则在其他中断中使用延时函数的时候会阻塞卡死</strong>。 <strong>（强调：</strong> <strong><code>HAL_Delay()</code>\</strong>**函数记时是由Systick中断来对uwtick进行累加**<em>\</em>。假设不改优先级，由于Systick中断优先级为15，无法竞争高优先级的中断，因此会卡住）**</p></li></ol><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-17255341398138.png" alt="img"></p><ol><li>为啥默认将系统时钟（SystemCoreClock）设置为16,000,000（16 MHz）啊？</li></ol><p>通常是因为这是许多微控制器（MCU）的默认主频。这个值对应于许多常见的晶体振荡器（如16 MHz晶振），它们通常用于驱动微控制器的主时钟。</p><ol><li><strong>兼容性</strong> <strong>和广泛应用</strong> ：16 MHz晶振是许多MCU的标准配置之一，因此HAL库默认使用这个值以确保在大多数情况下的兼容性和可用性。</li><li><strong>简化配置</strong> ：使用一个广泛使用的默认值可以简化初步设置和开发过程，特别是对于初学者和快速原型开发。</li><li><strong>默认启动频率</strong> ：大多数MCU在上电时会使用内部的默认时钟源，而许多MCU的默认内部时钟频率为16 MHz。</li><li><strong>易于调试和文档支持</strong> ：HAL库通常有详细的文档和示例，这些示例使用默认的系统时钟频率，以便开发人员可以轻松理解和调试代码。</li></ol><p>另外，通常情况下，SystemCoreClock 变量会在系统初始化过程中被修改为实际的主时钟频率。</p><p>系统时钟的配置是通过RCC（Reset and Clock Control）模块来完成的，具体来说，当你在代码中配置了 MCU 的主时钟频率（例如使用HAL库中的 <code>HAL_RCC_ClockConfig()</code> 函数），RCC模块会根据你的配置更新系统时钟的实际值，并且会更新 SystemCoreClock 变量以反映新的主时钟频率。</p><p>总结来说，SystemCoreClock 变量的值会在你配置了主时钟频率之后被更新，以便反映当前的系统时钟配置。</p><ol><li>SysTick-&gt;LOAD 怎么设置，什么时候减1？</li></ol><p><strong>要生成一个周期为N个处理器\</strong>**时钟周期**<em>\</em>的多镜头计时器，请使用N-1的RELOAD值。例如，如果每100个*<em>\</em>*时钟脉冲**<em>\</em>需要SysTick中断，则将RELOAD设置为99。如果要在N个处理器时钟周期的延迟后发送一个SysTick中断，则使用值为N的RELOAD。例如，如果需要在400个时钟脉冲后发送一个SysTick中断，则将RELOAD设置为400。**</p><ol><li><p>系统滴答定时器中断回调函数解读</p></li><li><h5 id="stm32f1xx-it-c"><a href="#stm32f1xx-it-c" class="headerlink" title="stm32f1xx_it.c"></a>stm32f1xx_it.c</h5></li></ol><p>在<strong> stm32f1xx_it.c </strong>中已经定义了<strong>中断*</strong>*服务*<strong>*函数。</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">SysTick_Handler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* USER CODE BEGIN SysTick_IRQn 0 */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* USER CODE END SysTick_IRQn 0 */</span></span><br><span class="line">    HAL_IncTick();</span><br><span class="line">    <span class="comment">/* USER CODE BEGIN SysTick_IRQn 1 */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* USER CODE END SysTick_IRQn 1 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HAL定义的弱中断回调函数，我们只需要重新实现这个就可以</p><p>uwTick是一个全局变量，每1ms中断一次，每产生一次中断就加1，所以这个变量表示的计时的ms值。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">__weak <span class="type">void</span> <span class="title function_">HAL_IncTick</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    uwTick += uwTickFreq;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h5 id="main-c-1"><a href="#main-c-1" class="headerlink" title="main.c"></a>main.c</h5></li></ol><p>在main.c中添加我们自己的实现。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">HAL_IncTick</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    uwTick += uwTickFreq;</span><br><span class="line">    <span class="keyword">if</span> (uwTick % <span class="number">1000</span> == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 产生了1s的计时</span></span><br><span class="line">        <span class="comment">// 翻转LED灯</span></span><br><span class="line">        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h3 id="延时函数工具类（寄存器）"><a href="#延时函数工具类（寄存器）" class="headerlink" title="延时函数工具类（寄存器）"></a>延时函数工具类（寄存器）</h3></li><li><h4 id="delay-h"><a href="#delay-h" class="headerlink" title="delay.h"></a>delay.h</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __delay_h</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __delay_h</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;stm32f10x.h&quot;</span><span class="comment">// Device header</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay_us</span><span class="params">(<span class="type">uint16_t</span> us)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay_ms</span><span class="params">(<span class="type">uint16_t</span> ms)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay_s</span><span class="params">(<span class="type">uint16_t</span> s)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><ol><li><h4 id="delay-c"><a href="#delay-c" class="headerlink" title="delay.c"></a>delay.c</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;delay.h&quot;</span><span class="comment">// Device header</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay_us</span><span class="params">(<span class="type">uint16_t</span> us)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 设计定时器重装值 */</span></span><br><span class="line">    SysTick-&gt;LOAD = <span class="number">72</span> * us;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 清除当前计数值 */</span></span><br><span class="line">    SysTick-&gt;VAL = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 设置内部时钟源（2位-&gt;1）,不需要中断（1位-&gt;0），并启动定时器(0位-&gt;1) */</span></span><br><span class="line">    SysTick-&gt;CTRL = <span class="number">0x5</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 等待计数到0，如果计数到0则16位会置为1 SysTick_CTRL_COUNTFLAG 在检查后不会自动清除为0，</span></span><br><span class="line"><span class="comment">    它仅在下一次计数周期开始时由硬件自动清除为0。下面关掉计数器不用管SysTick_CTRL_COUNTFLAG */</span></span><br><span class="line">    <span class="keyword">while</span> (!(SysTick-&gt;CTRL &amp; SysTick_CTRL_COUNTFLAG));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 关闭定时器 */</span></span><br><span class="line">    SysTick-&gt;CTRL &amp;= ~SysTick_CTRL_ENABLE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay_ms</span><span class="params">(<span class="type">uint16_t</span> ms)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (ms--)</span><br><span class="line">    &#123;</span><br><span class="line">        Delay_us(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay_s</span><span class="params">(<span class="type">uint16_t</span> s)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (s--)</span><br><span class="line">    &#123;</span><br><span class="line">        Delay_ms(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">udelay</span><span class="params">(<span class="type">int</span> us)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 获得寄存器的初始计数值 */</span></span><br><span class="line">    <span class="type">uint32_t</span> Time_Old = SysTick-&gt;VAL;</span><br><span class="line">    <span class="comment">/* 获得寄存器的重装载值 */</span></span><br><span class="line">    <span class="type">uint32_t</span> Load = SysTick-&gt;LOAD;</span><br><span class="line">    <span class="type">uint32_t</span> Ticks = us * (Load + <span class="number">1</span>) / <span class="number">1000</span>;</span><br><span class="line">    <span class="type">uint32_t</span> Cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">uint32_t</span> Time_New = SysTick-&gt;VAL;</span><br><span class="line">        <span class="keyword">if</span> (Time_Old &gt;= Time_New)</span><br><span class="line">        &#123;</span><br><span class="line">            Cnt += Time_Old - Time_New;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            Cnt += Time_Old + Load + <span class="number">1</span> - Time_New;</span><br><span class="line">        &#125;</span><br><span class="line">        Time_Old = Time_New;</span><br><span class="line">        <span class="keyword">if</span> (Cnt &gt;= Ticks)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">mdelay</span><span class="params">(<span class="type">int</span> ms)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ms; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        udelay(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//精确度: </span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    udelay 函数通过读取 SysTick 计数器的值来实现微秒级延时。它使用了一个循环来累计计数器的差值，以达到指定的延时时间。这种方法相对较为精确，因为它能够比较实时地检测到计数器的变化并作出调整。</span></span><br><span class="line"><span class="comment">    Delay_us 函数则是直接设置 SysTick 的加载值和启动定时器，然后等待定时器计数完成。这种方法的精确度取决于 SysTick 定时器的时钟频率和加载值的设置。 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//效率:</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    udelay 函数虽然精确，但是通过循环来等待延时，这可能会占用较多的 CPU 资源，特别是当需要较长的延时时。因为它需要不断地检查计数器的值。 </span></span><br><span class="line"><span class="comment">    Delay_us 函数则是配置定时器后就可以让其自己计数，CPU 不需要进行主动等待。这在延时较长时可能会更加高效，因为可以让 CPU 去执行其他任务。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ol><li><h2 id="基本定时器"><a href="#基本定时器" class="headerlink" title="基本定时器"></a>基本定时器</h2></li></ol><p>定时器是STM32中一个非常强大的外设，功能强大，用途很广。STM32F103系列提供了8个定时器：2个基本定时器(TIM6,7)，4个通用定时器(TIM2-5)，2个高级定时器(TIM1和TIM8)。</p><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-17255341398139.png" alt="img"></p><ul><li><strong>TIM6</strong>和<strong>TIM7</strong>是基本定时器。</li><li><strong>TM2 - TIM5</strong>是通用定时器。</li><li><strong>TM1</strong>和<strong>TM8</strong>是高级定时器。</li></ul><ol><li><h3 id="基本定时器介绍"><a href="#基本定时器介绍" class="headerlink" title="基本定时器介绍"></a>基本定时器介绍</h3></li></ol><p>基本定时器TIM6和TIM7各包含一个16位自动装载计数器，由各自的可编程预分频器驱动。</p><p>这2个定时器是互相独立的，不共享任何资源。</p><p>这个2个基本定时器只能向上计数，由于没有外部IO，所以只能计时，不能对外部脉冲进行计数。</p><p>功能：定时中断，主模式，触发DAC。</p><p>定时器框图如图所示：</p><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172553413981310.png" alt="img"></p><p>特点：</p><p>● 16位自动重装载累加计数器</p><p>● 16位可编程(可实时修改)预分频器，用于对输入的时钟按系数为1～65536之间的任意数值分频</p><p>● 触发DAC的同步电路</p><p>● 在更新事件(计数器溢出)时产生中断/DMA请求</p><p>时基单元包含：</p><p>● 计数器寄存器(TIMx_CNT)</p><p>● 预分频寄存器(TIMx_PSC)</p><p>● 自动重装载寄存器(TIMx_ARR)</p><p>注意：</p><p>1、计数器寄存器从零开始自增，自增到自动重装载寄存器的装载值后，再来一个时钟上升沿，才会使计数器溢出，并产生一个更新事件。比如设置好定时器，使其计数器每加1个单位的时间为1ms（基本定时器只能向上计数），想要让36ms后触发中断（前提主函数里使能更新中断），此时自动重装载寄存器应该是 36 - 1 。</p><p>2、即使中断功能没有被启用，定时器溢出后仍会发生更新事件，这是定时器硬件工作的一部分。</p><p>3、自动重装载寄存器是预加载的，且其本质上是由影子寄存器的装载值决定。</p><p>4、预分频寄存器具有缓冲，可以在运行过程中改变它的数值，新的预分频数值将在<strong>下一个更新事件</strong>时起作用。</p><p>5、计数器的时钟频率CK_CNT等于 fCK_PSC / (PSC[15:0]+1) 。</p><p>试想一下，如果我突然改变自动重装载寄存器的装载值，那计数器溢出的时间怎么变？</p><p>答案：立即更新或者等计数器溢出后更新。</p><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172553413981311.png" alt="img"></p><p>配成Disable（即没有预加载），则立即更新；配成Enable（即有预加载），则定时器计数器溢出后更新。</p><p><strong>Enable：</strong></p><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172553413981312.png" alt="img"></p><p><strong>Disable:</strong></p><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172553413981313.png" alt="img"></p><p><strong>上图反应出更新事件（UEV）来临后，更新中断标志位（UIF）都会由硬件置 1 ，且不会自动置 0 ，必须手动清除！！！！</strong></p><ol><li><h3 id="基本定时器案例：LED灯闪烁"><a href="#基本定时器案例：LED灯闪烁" class="headerlink" title="基本定时器案例：LED灯闪烁"></a>基本定时器案例：LED灯闪烁</h3></li><li><h4 id="需求描述-1"><a href="#需求描述-1" class="headerlink" title="需求描述"></a>需求描述</h4></li></ol><p>利用基本定时器定时功能，实现LED_2亮-&gt;1s-&gt;LED_2灭 -&gt;1s …。</p><ol><li><h4 id="硬件电路设计-1"><a href="#硬件电路设计-1" class="headerlink" title="硬件电路设计"></a>硬件电路设计</h4></li></ol><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172553413981314.png" alt="img"></p><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172553413981315.png" alt="img"></p><ol><li><h4 id="软件设计（寄存器）-1"><a href="#软件设计（寄存器）-1" class="headerlink" title="软件设计（寄存器）"></a>软件设计（寄存器）</h4><p><a href="https://xiza3i1x6q4.feishu.cn/wiki/JuwzwEYXniQ4FkkEmeuch1krntg">基本定时器所需要的寄存器</a></p></li><li><h5 id="main-c-2"><a href="#main-c-2" class="headerlink" title="main.c"></a>main.c</h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;stm32f10x.h&quot;</span><span class="comment">// Device header</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;led.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;usart.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;timer6.h&quot;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    LED_Init();</span><br><span class="line">    usart1_init();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;基本定时器实验....\r\n&quot;</span>);</span><br><span class="line">    TIM6_Init();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h5 id="Driver-TIM6-h"><a href="#Driver-TIM6-h" class="headerlink" title="Driver_TIM6.h"></a>Driver_TIM6.h</h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __DRIVER_TIM6_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __DRIVER_TIM6_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Driver_LED.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Driver_USART.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_TIM6_Init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><ol><li><h5 id="Driver-TIM6-c"><a href="#Driver-TIM6-c" class="headerlink" title="Driver_TIM6.c"></a>Driver_TIM6.c</h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Driver_TIM6.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 给定时器6进行初始化</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_TIM6_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 给定时器6开启时钟*/</span></span><br><span class="line">    RCC-&gt;APB1ENR |= RCC_APB1ENR_TIM6EN;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 2. 设置预分频值: 分频值7199表示7200分频。分频后频率10K，周期100us */</span></span><br><span class="line">    TIM6-&gt;PSC = <span class="number">7200</span> - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 3. 设置自动重转载寄存器的值，决定中断发生的频率。</span></span><br><span class="line"><span class="comment">        假设设置为9999，表示计数器计数10000次发生一次中断。</span></span><br><span class="line"><span class="comment">        计数一次100us，10000次1000000us，正好1s */</span></span><br><span class="line">    TIM6-&gt;ARR = <span class="number">10000</span> - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 4. 使能更新中断 (小中断) */</span></span><br><span class="line">    TIM6-&gt;DIER |= TIM_DIER_UIE;<span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* NVIC配置 */</span></span><br><span class="line">    <span class="comment">/* 5. 设置中断优先级分组 */</span></span><br><span class="line">    NVIC_SetPriorityGrouping(<span class="number">3</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 6. 设置中断优先级 */</span></span><br><span class="line">    NVIC_SetPriority(TIM6_IRQn, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 7. 使能定时器6的中断 (大中断) */</span></span><br><span class="line">    NVIC_EnableIRQ(TIM6_IRQn);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 8. 使能计数器 */</span></span><br><span class="line">    TIM6-&gt;CR1 |= TIM_CR1_CEN;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: TIM6的中断服务函数</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">TIM6_IRQHandler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    TIM6-&gt;SR &amp;= ~TIM_SR_UIF;<span class="comment">//</span></span><br><span class="line">    Drviver_LED_Toggle(LED_1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;1s\r\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><p>中断标志位必须软件清除，自己构造中断服务函数的话一定先判断是不是需要的中断，然后清楚对应的中断标志位。（HAL库也是这么干的）</p><ol><li><h4 id="软件设计（HAL库）-1"><a href="#软件设计（HAL库）-1" class="headerlink" title="软件设计（HAL库）"></a>软件设计（HAL库）</h4></li><li><p><strong>STM32CubeMX配置</strong></p></li></ol><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172553413981316.png" alt="img"></p><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172553413981317.png" alt="img"></p><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172553413981318.png" alt="img"></p><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172553413981319.png" alt="img"></p><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172553413981320.png" alt="img"></p><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172553413981321.png" alt="img"></p><ol><li><strong>生成的定时器相关代码介绍（tim.c）</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">TIM_HandleTypeDef htim6;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* TIM6 init function */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">MX_TIM6_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    TIM_MasterConfigTypeDef sMasterConfig = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    htim6.Instance = TIM6;</span><br><span class="line">    htim6.Init.Prescaler = <span class="number">7200</span> - <span class="number">1</span>;</span><br><span class="line">    htim6.Init.CounterMode = TIM_COUNTERMODE_UP;</span><br><span class="line">    htim6.Init.Period = <span class="number">10000</span> - <span class="number">1</span>;</span><br><span class="line">    htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;</span><br><span class="line">    <span class="keyword">if</span> (HAL_TIM_Base_Init(&amp;htim6) != HAL_OK)</span><br><span class="line">    &#123;</span><br><span class="line">        Error_Handler();</span><br><span class="line">    &#125;</span><br><span class="line">    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;</span><br><span class="line">    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;</span><br><span class="line">    <span class="keyword">if</span> (HAL_TIMEx_MasterConfigSynchronization(&amp;htim6, &amp;sMasterConfig) != HAL_OK)</span><br><span class="line">    &#123;</span><br><span class="line">        Error_Handler();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_TIM_Base_MspInit</span><span class="params">(TIM_HandleTypeDef *tim_baseHandle)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (tim_baseHandle-&gt;Instance == TIM6)</span><br><span class="line">    &#123;</span><br><span class="line">        __HAL_RCC_TIM6_CLK_ENABLE();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* TIM6 interrupt Init */</span></span><br><span class="line">        HAL_NVIC_SetPriority(TIM6_IRQn, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        HAL_NVIC_EnableIRQ(TIM6_IRQn);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><strong>添加定时器6的中断\</strong>*<em>回调函数*</em></li></ol><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172553413981322.png" alt="img"></p><p>在 tim.c 中添加HAL库的定时器<strong>溢出中断</strong>回调函数。（定时器的回调函数比较多，这次我们只使用到了溢出中断回调函数）。</p><ol><li><h5 id="tim-c"><a href="#tim-c" class="headerlink" title="tim.c"></a>tim.c</h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN 1 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_TIM_PeriodElapsedCallback</span><span class="params">(TIM_HandleTypeDef *htim)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 定时器6产生中断。任何一个定时器产生中断都会进入到这个方法中，所以需要判断下定时器实例</span></span><br><span class="line">    <span class="keyword">if</span> (htim-&gt;Instance == TIM6)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 翻转LEDB</span></span><br><span class="line">        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;1\r\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* USER CODE END 1 */</span></span><br></pre></td></tr></table></figure><ol><li><h5 id="main-c-3"><a href="#main-c-3" class="headerlink" title="main.c"></a>main.c</h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_Init();</span><br><span class="line">    SystemClock_Config();</span><br><span class="line">    MX_GPIO_Init();</span><br><span class="line">    MX_TIM6_Init();</span><br><span class="line">       </span><br><span class="line">    <span class="comment">// 启动定时器6</span></span><br><span class="line">    HAL_TIM_Base_Start_IT(&amp;htim6);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Start\r\n&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h4 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h4></li></ol><p>这个程序没有问题吗？</p><p>当然有，单片机一上电，”Start” 和 “1” 几乎同时出现，之后每过 1s 串口打印 “1” ,这是我们调试出来的问题！为啥？</p><p><strong>别忘了，预\</strong>**分频器**<em>\</em>的特点，它也有影子寄存器，但只有计数器溢出，触发一次更新事件后，才能将设置的预分频器的值更新到其影子寄存器上，由于我们使能了中断，因此第一次的中断没有分频，频率特别快（72*<em>\</em>*MHz**<em>\</em>）,使得计数器的值加到10000速率极快。**</p><p>所以如何解决呢？</p><p>用 <strong>TIMx_EGR </strong>寄存器操作，提前设置一个 <strong>更新事件</strong> ，让第一次中断前有一次更新事件，从而更新预分频器的影子寄存器。</p><ol><li><h5 id="寄存器版本："><a href="#寄存器版本：" class="headerlink" title="寄存器版本："></a><strong>寄存器版本：</strong></h5><ol><li><h6 id="Driver-TIM6-c-1"><a href="#Driver-TIM6-c-1" class="headerlink" title="Driver_TIM6.c"></a>Driver_TIM6.c</h6></li></ol></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Driver_TIM6.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 给定时器6进行初始化</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_TIM6_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 给定时器6开启时钟*/</span></span><br><span class="line">    RCC-&gt;APB1ENR |= RCC_APB1ENR_TIM6EN;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 2. 设置预分频值: 分频值7199表示7200分频。分频后频率10K，周期100us */</span></span><br><span class="line">    TIM6-&gt;PSC = <span class="number">7200</span> - <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 3. 设置自动重转载寄存器的值，决定中断发生的频率。</span></span><br><span class="line"><span class="comment">        假设设置为9999，表示计数器计数10000次发生一次中断。</span></span><br><span class="line"><span class="comment">        计数一次100us，10000次1000000us，正好1s */</span></span><br><span class="line">    TIM6-&gt;ARR = <span class="number">10000</span> - <span class="number">1</span>;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">/* 为了避免一启动立即进入更新中断,可以先产生一个更新事件 */</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//法一</span></span><br><span class="line">    TIM6-&gt;EGR |= TIM_EGR_UG;</span><br><span class="line">    TIM6-&gt;SR &amp;= ~TIM_SR_UIF;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//法二</span></span><br><span class="line">    TIM6-&gt;CR1 |= TIM_CR1_URS;</span><br><span class="line">    TIM6-&gt;EGR |= TIM_EGR_UG;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 使能更新中断前而不是后 */</span></span><br><span class="line">    <span class="comment">/* 4. 使能更新中断 (小中断开关) */</span></span><br><span class="line">    TIM6-&gt;DIER |= TIM_DIER_UIE;<span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* NVIC配置 */</span></span><br><span class="line">    <span class="comment">/* 5. 设置中断优先级分组 */</span></span><br><span class="line">    NVIC_SetPriorityGrouping(<span class="number">3</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 6. 设置中断优先级 */</span></span><br><span class="line">    NVIC_SetPriority(TIM6_IRQn, <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 7. 使能定时器6的中断 (大中断开关) */</span></span><br><span class="line">    NVIC_EnableIRQ(TIM6_IRQn);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 8. 使能计数器 */</span></span><br><span class="line">    TIM6-&gt;CR1 |= TIM_CR1_CEN;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><p>为啥加完 TIM6-&gt;EGR |= TIM_EGR_UG; 后还要清 UIF 标志位？</p><p>这是因为，TIM6 和 TIM7 的状态寄存器(TIMx_SR)中的UIF（Update Interrupt Flag）会在产生更新事件时被置为 1，中断看的也是 UIF 标志位，如果不清除也是会进入中断的。</p><p>还有一个寄存器也可以解决这个问题，那就是 <strong>CR1 </strong>中的 <strong>URS </strong>位！</p><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172553413981323.png" alt="img"></p><p>因此将 “ URS “ 置为 1 ，由于我们使能了中断，所以 <strong>只有定时器溢出产生更新事件才可将 “ UIF “ 置为 1 </strong> ，<strong>软件产生的更新事件无法将 “ UIF “ 置为 1</strong> ！</p><ol><li><h5 id="HAL-版本："><a href="#HAL-版本：" class="headerlink" title="HAL\*版本：*"></a><strong>HAL\</strong>*<em>版本：*</em></h5><ol><li><h6 id="main-c-4"><a href="#main-c-4" class="headerlink" title="main.c"></a>main.c</h6></li></ol></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_Init();</span><br><span class="line">    SystemClock_Config();</span><br><span class="line">    MX_GPIO_Init();</span><br><span class="line">    MX_TIM6_Init();</span><br><span class="line">    MX_USART1_UART_Init();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Start\r\n&quot;</span>);</span><br><span class="line">   <span class="comment">/* 启动定时器: 使能计数器 */</span></span><br><span class="line">   <span class="comment">//</span></span><br><span class="line">    __HAL_TIM_CLEAR_FLAG(&amp;htim6, TIM_FLAG_UPDATE);</span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">    HAL_TIM_Base_Start_IT(&amp;htim6);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>点开 <strong>MX_TIM6_Init </strong>函数中的 *<em>HAL_TIM_Base_Init*<em> ，在其中找到 *<em>TIM_Base_SetConfig ，*<em> 在这个函数最后<strong>官方已经加了 </strong></em></em>TIMx-&gt;EGR = TIM_EGR_UG; 这句话，</em></em>因此我们只需要在HAL库里清除标志位就行了，法一即可！</p><p><strong>总之，无论怎样，软件生成更新事件是必须的！！</strong></p><p>为了避免一启动立即进入更新中断,可以先产生一个更新事件一定要先放使能更新上面，不然软件产生更新事件后会立即进入中断，这时预分频影子寄存器仍是0（也就是一分频），大约139us就可以加到10000的数，从而 139 us就进入中断（这种软件设置中断可以粗略地认为与定时器溢出中断等价），同时预分频和重装载寄存器会同时更新到对应的影子寄存器，之后就会正常。</p><p><em>当你设置 TIM6-&gt;CR1 |= TIM_CR1_URS; 之后，更新事件将仅由计数器溢出/下溢引发，而不会由预**分频器</em> <em>变化或手动生成的更新事件引发。因此，手动生成更新事件 TIM6-&gt;EGR |= TIM_EGR_UG;</em> 会更新影子寄存器，但不会触发更新事件中断，因为此时的更新事件并不包括手动生成的更新事件。</p><p>因此，无论是否触发更新事件中断，影子寄存器的值都会在更新事件发生时得到更新。</p><ol><li><h3 id="基本定时器案例：基本定时器延时"><a href="#基本定时器案例：基本定时器延时" class="headerlink" title="基本定时器案例：基本定时器延时"></a>基本定时器案例：基本定时器延时</h3><ol><li><strong>Driver_TIM6.c</strong></li></ol></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Delay_ms</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 给定时器6开启时钟*/</span></span><br><span class="line">    RCC-&gt;APB1ENR |= RCC_APB1ENR_TIM6EN;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 2. 设置预分频值: 分频值7199表示7200分频。分频后频率10K，周期100us */</span></span><br><span class="line">    TIM6-&gt;PSC = <span class="number">7200</span> - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 3. 设置自动重转载寄存器的值，决定中断发生的频率。*/</span></span><br><span class="line">    TIM6-&gt;ARR = <span class="number">10</span> * us - <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 4. 计数器使能前产生更新事件，让硬件更新预分频影子寄存器 */</span></span><br><span class="line">    TIM6-&gt;EGR |= TIM_EGR_UG;<span class="comment">//设置更新事件</span></span><br><span class="line">    TIM6-&gt;SR &amp;= ~TIM_SR_UIF;<span class="comment">//清除 UIF 标志位</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 5. 使能计数器 */</span></span><br><span class="line">    TIM6-&gt;CR1 |= TIM_CR1_CEN;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 6. 等待计数器溢出产生更新中断改变UIF位 */</span>    </span><br><span class="line">    <span class="keyword">while</span>((TIM6-&gt;SR &amp;TIM_SR_UIF) == <span class="number">0</span>);</span><br><span class="line">    <span class="comment">//while((TIM6-&gt;CNT &lt; us - 1) == 0);</span></span><br><span class="line">    </span><br><span class="line">    TIM6-&gt;SR &amp;= ~TIM_SR_UIF;<span class="comment">//清除 UIF 标志位</span></span><br><span class="line">    <span class="comment">/* 7. 关闭计数器 */</span></span><br><span class="line">    TIM6-&gt;CR1 &amp;= ~TIM_CR1_CEN;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实系统嘀嗒定时器本质与基本定时器一样，区别仅仅是每一次基本定时器溢出会产生更新事件，UIF 标志位需要清除！</p><ol><li><h2 id="通用定时器"><a href="#通用定时器" class="headerlink" title="通用定时器"></a>通用定时器</h2></li></ol><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172553413981324.png" alt="img"></p><ol><li><h3 id="通用定时器介绍"><a href="#通用定时器介绍" class="headerlink" title="通用定时器介绍"></a>通用定时器介绍</h3></li></ol><p>通用定时器有4个分别是：TIM2、TIM3、TIM4、TIM5。它们拥有基本定时器所有功能。并增加如下功能：</p><ol><li><strong>多种\</strong>**时钟源**<em>\</em>。**</li></ol><p>对于时钟源来说有三种选项：</p><ul><li>1、内部时钟模式（默认时钟源是内部时钟），一般都是72MHz，与基本定时器一致。</li><li>2、外部时钟源模式 1 ：<ul><li>1、使用定时器自身通道的输出引脚作为时钟源。</li><li>2、每个定时器都有4个通道。</li><li>3、只有<strong>通道1 </strong>和<strong>通道 2 </strong>才能作为是时钟信号源。</li></ul></li><li>3、外部时钟源模式 2 ：<ul><li>1、使用定时器的特殊引脚 <strong>ETR </strong>引脚的信号作为时钟源。</li><li>2、每个通用定时器都有 <strong>ETR </strong>引脚，可以看芯片手册查找。</li></ul></li></ul><p>注意：</p><p>1、外部时钟源一般用于定时器级联。</p><p>2、不配置时钟源默认就是内部时钟（72MHz）。</p><p>3、大部分情况下，内部时钟源够用，这些知识要懂，面试可能用的到。</p><ol><li><strong>向上计数（加），向下计数（减），向上/向下（先加后减）。\</strong>当然我们使用的时候更喜欢*<em>向上计数*</em>。</li></ol><ul><li>向下计数：</li></ul><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172553413981425.png" alt="img"></p><p>从自动重装载寄存器值开始计数，一直减到0，然后再来一个时钟周期，定时器溢出产生更新事件，UIF 位置 1 ，之后循环。</p><ul><li>向上计数（<strong>默认，可以不配置</strong>）：</li></ul><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172553413981426.png" alt="img"></p><p>与基本定时器（只能向上计数）一样，都是从0开始加，一直加到自动重装载寄存器值，然后再来一个时钟信号，计数器溢出，产生更新事件，UIF 位置 1，之后循环。</p><ul><li>中央对齐模式：</li></ul><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172553413981427.png" alt="img"></p><p><strong>从0开始向上计数</strong> ，一直计数到 <strong>自动重装载寄存器值 - 1</strong> ，再来一个时钟信号，计数器溢出，产生更新事件；再从 <strong>自动重装载寄存器值</strong> 开始 <strong>向下递减到1，</strong> 再来一个时钟信号，计数器溢出，产生更新事件，然后继续从0开始计数，之后循环。</p><p>根据手册上的通用定时器框图可知，输入比较和输入捕获不能同时发生！</p><ol><li><strong>输入捕获。</strong></li></ol><ul><li>此功能可以捕获输入通道上信号的上升沿或下降沿。</li><li>多用于测量<strong>PWM</strong> <strong>的周期|频率</strong> ，只要测出连续两个上升沿或下降沿的时间间隔就可以计算 <strong>周期|频率</strong> ；只要再测出有效电平的时间再除以周期，便可以算出占空比。</li><li>输入捕获部分：<ul><li>1、计数器部分。</li><li>2、捕获比较寄存器。（也有影子寄存器，分析方法和自动重装载寄存器一样）</li><li>3、输入部分：<ul><li>共四路输入信号。</li><li>每路都有自己的输入引脚。</li><li>注意：四路输入捕获引脚和四路输出比较引脚是一致的。</li><li>对于同一路引脚，只能处于输入捕获或输出比较，不可兼得。</li><li>可以配置输入捕获的极性（即上升沿、下降沿或两者）。</li></ul></li><li>捕获：即信号来到捕获比较寄存器的同时，计数器CNT的值会更新到输入捕获比较寄存器。（CCR1包含了由上一次输入捕获1事件(IC1)传输的计数器值，也就是<strong>捕获比较寄存器的值一直保留上一次的值，直到下一次更新，计数器的值可是瞬息万变的，别搞混了</strong>）</li><li>捕获中断通常在计数器值被存储到捕获寄存器之后触发。也就是说，当捕获事件发生并且计数器值被更新到捕获寄存器时，如果捕获中断使能并且中断条件满足，捕获中断就会被触发。</li><li>注意：计数器会在捕获边沿之前持续计数。输入捕获事件仅在检测到设置的边沿时才会将当前计数器的值记录下来。</li></ul></li></ul><ol><li><strong>输出比较。</strong></li></ol><ul><li>主要是输出方波。（因为数字芯片无法输出正弦波这种信号）</li><li>输出比较部分：<ul><li>1、计数器部分。</li><li>2、捕获比较寄存器。（也有影子寄存器，分析方法和自动重装载寄存器一样）</li><li>3、输出部分：<ul><li>每个定时器有四个通道。</li><li>可以同时比较四路通道。</li></ul></li></ul></li><li>输出比较八种模式：</li></ul><p>由CCMR1寄存器的 <strong>OC1M[2,0]</strong> ,共3位来控制</p><p>假设计数器的值为CNT，捕获比较寄存器的值是CCRx = 60</p><ol><li><p><strong>OC1M[2,0] = 000 </strong><br><strong>输出冻结，</strong> <strong>CNT\</strong>**与**<em>\</em>CCR*<em>*<em>比较的结果不影响输出。</em></em></p></li><li><p><strong>OC1M[2,0] = 001</strong><br><strong>强制输出有效电平，一旦\</strong>**CNT**<em>\</em> = CCR（满足条件下），强制输出有效电平再也不改变。**</p></li><li><p><strong>OC1M[2,0] = 010</strong><br><strong>强制输出无效电平，一旦\</strong>**CNT**<em>\</em> = CCR（满足条件下），强制输出无效电平再也不改变。**</p></li><li><p><strong>OC1M[2,0] = 011</strong><br><strong>输出翻转，一旦CNT = CCR，则翻转输出。高-&gt;低，低-&gt;高。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">**输出结果其实就是一个****方波** **，** **频率为计数器溢出频率的一半** **，** **占空比****为60%。**![](https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=ZTQ1MThlZGJjM2I1NzBjNDBmNzU0YWJlYzRjM2Y0NDdfWnFRTWtzY0MyZGE5VXZnR3F4R09ibGkxRG1mejY1NGRfVG9rZW46WFhGSGJMR1d1b1VwNTh4QzlvTGMwTngwbkFkXzE3MjU1MzM1ODE6MTcyNTUzNzE4MV9WNA)</span><br></pre></td></tr></table></figure></li><li><p><strong>OC1M[2,0] = 100</strong><br><strong>强制输出低电平，只要定时器启动，无论CNT 是否等于 \</strong>**CCR**<em>\</em> 都会输出低电平。相当于一整个周期都是低电平1**</p></li><li><p><strong>OC1M[2,0] = 101</strong><br><strong>强制输出高电平，只要定时器启动，无论\</strong>**CNT**<em>\</em> 是否等于 *<em>\</em>*CCR**<em>\</em> 都会输出高电平。相当于一整个周期都是高电平！**</p></li><li><p><strong>OC1M[2,0] = 110</strong><br><strong>PWM**</strong> 模式一:<strong> </strong>CNT<strong>** &lt; CCR 输出有效电平</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">**CNT &gt;= CCR 输出无效电平**</span><br></pre></td></tr></table></figure></li><li><p><strong>OC1M[2,0] = 111</strong><br><strong>PWM**</strong> 模式二:<strong> </strong>CNT<strong>** &lt; CCR 输出无效电平</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">**CNT**** &gt;= CCR 输出有效电平**</span><br></pre></td></tr></table></figure></li></ol><ul><li><strong>PWM\</strong>**模式一和二的**<em>\</em>占空比*<em>*<em>相加为100%！</em></em></li><li><strong>注意：</strong>以通道 1 为例，IC1进入预分频器，可以对高频信号选择分频。<br>信号从预分频器出来，信号为IC1PS* 会产生捕获比较事件。<ul><li>如果使能中断，也会产生捕获比较中断。</li><li>此时计数器CNT的值会更新到捕获比较寄存器（因为信号进入滤波器和边沿检测器时，一旦有设置的边沿信号被检测，在其检测期间，计数器 CNT 的值会被同步捕获并存储到捕获比较寄存器，同时计数器会继续正常递增）。</li></ul></li></ul><p><strong>与基本定时器一样，计数器溢每一次溢出，事件都是必须产生的，而只有使能相应中断位后，对应的中断才会产生，同时对应的中断标志位也会置为 1 。</strong></p><ol><li><p>PWM生成。</p></li><li><p>支持针对定位的增量（正交）编码器和霍尔传感器电路。</p></li><li><h3 id="通用定时器案例1：LED呼吸灯——PWM脉冲"><a href="#通用定时器案例1：LED呼吸灯——PWM脉冲" class="headerlink" title="通用定时器案例1：LED呼吸灯——PWM脉冲"></a>通用定时器案例1：LED呼吸灯——PWM脉冲</h3></li></ol><p>使用通用定时器的输出比较功能。</p><ol><li><h4 id="需求描述-2"><a href="#需求描述-2" class="headerlink" title="需求描述"></a>需求描述</h4></li></ol><p>输出占空比可调的PWM波形，作用到二极管，使二极管（LED2）呈现呼吸灯的效果。</p><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172553413981428.png" alt="img"></p><p><strong>PA1</strong>复用的是TIM5<em>CH2和TIM2</em> CH2，我们选择TIM5_CH2。</p><ol><li><h4 id="如何生成PWM"><a href="#如何生成PWM" class="headerlink" title="如何生成PWM"></a>如何生成PWM</h4><ol><li>PWM介绍</li><li>定时器的输出比较功能</li></ol></li><li><h4 id="硬件电路设计-2"><a href="#硬件电路设计-2" class="headerlink" title="硬件电路设计"></a>硬件电路设计</h4></li></ol><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172553413981429.png" alt="img"></p><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172553413981430.png" alt="img"></p><ol><li><h4 id="软件设计（寄存器）-2"><a href="#软件设计（寄存器）-2" class="headerlink" title="软件设计（寄存器）"></a>软件设计（寄存器）</h4><p><a href="https://xiza3i1x6q4.feishu.cn/wiki/HEL4wVxrGibeJAksRJKcPHfDnzg">通用定时器生成PWM案例用到的寄存器详解</a></p></li><li><h5 id="Driver-TIM5-h"><a href="#Driver-TIM5-h" class="headerlink" title="Driver_TIM5.h"></a>Driver_TIM5.h</h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __DRIVER_TIM5_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __DRIVER_TIM5_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_TIM5_Init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_TIM5_Start</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_TIM5_Stop</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_TIM5_SetDutyCycle</span><span class="params">(<span class="type">uint8_t</span> dutyCycle)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><ol><li><h5 id="Driver-TIM5-c"><a href="#Driver-TIM5-c" class="headerlink" title="Driver_TIM5.c"></a>Driver_TIM5.c</h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Driver_TIM5.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_TIM5_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1.  开启时钟*/</span></span><br><span class="line">    <span class="comment">/* 1.1 定时器5的时钟 */</span></span><br><span class="line">    RCC-&gt;APB1ENR |= RCC_APB1ENR_TIM5EN;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 1.2 GPIO的时钟 PA */</span></span><br><span class="line">    RCC-&gt;APB2ENR |= RCC_APB2ENR_IOPAEN;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 2. 设置GPIO的复用推挽输出 PA1 CNF = 10 MODE = 11*/</span></span><br><span class="line">    GPIOA-&gt;CRL |= (GPIO_CRL_CNF1_1 | GPIO_CRL_MODE1);</span><br><span class="line">    GPIOA-&gt;CRL &amp;= ~GPIO_CRL_CNF1_0;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 3. 定时器配置 */</span></span><br><span class="line">    <span class="comment">/* 3.1 预分频器的配置 */</span></span><br><span class="line">    TIM5-&gt;PSC = <span class="number">7200</span> - <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 3.2 自动重装载寄存器的配置 */</span></span><br><span class="line">    TIM5-&gt;ARR = <span class="number">100</span> - <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 3.3 计数器的计数方向 0 = 向上 1 = 向下*/</span></span><br><span class="line">    TIM5-&gt;CR1 &amp;= ~TIM_CR1_DIR;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 3.4 配置通道2的捕获比较寄存器 */</span></span><br><span class="line">    TIM5-&gt;CCR2 = <span class="number">97</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 3.5 把通道2配置为输出  CCMR1_CC2S = 00 */</span></span><br><span class="line">    TIM5-&gt;CCMR1 &amp;= ~TIM_CCMR1_CC2S;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 3.6 配置通道的输出比较模式 CCMR1_OC2M = 110*/</span></span><br><span class="line">    TIM5-&gt;CCMR1 |= TIM_CCMR1_OC2M_2;</span><br><span class="line">    TIM5-&gt;CCMR1 |= TIM_CCMR1_OC2M_1;</span><br><span class="line">    TIM5-&gt;CCMR1 &amp;= ~TIM_CCMR1_OC2M_0;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 3.7 使能通道2比较  CCER_CC2E = 1 */</span></span><br><span class="line">    TIM5-&gt;CCER |= TIM_CCER_CC2E;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 3.8 设置通道的极性 0 = 高电平有效  1 = 低电平有效 */</span></span><br><span class="line">    TIM5-&gt;CCER &amp;= ~TIM_CCER_CC2P;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_TIM5_Start</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 使能计数器 */</span></span><br><span class="line">    TIM5-&gt;CR1 |= TIM_CR1_CEN;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_TIM5_Stop</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 关闭计数器 */</span></span><br><span class="line">    TIM5-&gt;CR1 &amp;= ~TIM_CR1_CEN;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_TIM5_SetDutyCycle</span><span class="params">(<span class="type">uint8_t</span> dutyCycle)</span></span><br><span class="line">&#123;</span><br><span class="line">    TIM5-&gt;CCR2 = dutyCycle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h5 id="Driver-LED-h-1"><a href="#Driver-LED-h-1" class="headerlink" title="Driver_LED.h"></a>Driver_LED.h</h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __DRIVER_LED_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __DRIVER_LED_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED_1 GPIO_ODR_ODR0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED_2 GPIO_ODR_ODR1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED_3 GPIO_ODR_ODR8</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_Init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_On</span><span class="params">(<span class="type">uint32_t</span> led)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_Off</span><span class="params">(<span class="type">uint32_t</span> led)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_Toggle</span><span class="params">(<span class="type">uint32_t</span> led)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_OnAll</span><span class="params">(<span class="type">uint32_t</span> leds[], <span class="type">uint8_t</span> size)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_OffAll</span><span class="params">(<span class="type">uint32_t</span> leds[], <span class="type">uint8_t</span> size)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><ol><li><h5 id="Driver-LED-c-1"><a href="#Driver-LED-c-1" class="headerlink" title="Driver_LED.c"></a>Driver_LED.c</h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Driver_LED.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 对LED进行初始化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 打开GPIOA的时钟 */</span></span><br><span class="line">    RCC-&gt;APB2ENR |= RCC_APB2ENR_IOPAEN;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 2. 给用到的端口的所有 PIN (PA0 PA1 PA8) 设置工作模式: 通用推挽输出 MODE:11  CNF:00 */</span></span><br><span class="line">    GPIOA-&gt;CRL |= (GPIO_CRL_MODE0 | GPIO_CRL_MODE1);</span><br><span class="line">    GPIOA-&gt;CRL &amp;= ~(GPIO_CRL_CNF0 | GPIO_CRL_CNF1);</span><br><span class="line"></span><br><span class="line">    GPIOA-&gt;CRH |= GPIO_CRH_MODE8;</span><br><span class="line">    GPIOA-&gt;CRH &amp;= ~GPIO_CRH_CNF8;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 3. 关闭所有灯  */</span></span><br><span class="line">    Driver_LED_Off(LED_1);</span><br><span class="line">    Driver_LED_Off(LED_2);</span><br><span class="line">    Driver_LED_Off(LED_3);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 点亮指定的LED</span></span><br><span class="line"><span class="comment"> * @param &#123;uint32_t&#125; led 要点亮的LED</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_On</span><span class="params">(<span class="type">uint32_t</span> led)</span></span><br><span class="line">&#123;</span><br><span class="line">    GPIOA-&gt;ODR &amp;= ~led;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 关闭指定的LED</span></span><br><span class="line"><span class="comment"> * @param &#123;uint32_t&#125; led 要关闭的LED</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_Off</span><span class="params">(<span class="type">uint32_t</span> led)</span></span><br><span class="line">&#123;</span><br><span class="line">    GPIOA-&gt;ODR |= led;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 翻转LED的状态</span></span><br><span class="line"><span class="comment"> * @param &#123;uint32_t&#125; led 要翻转的LED</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_Toggle</span><span class="params">(<span class="type">uint32_t</span> led)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 读取引脚的电平,如果是1(目前是关闭), 打开, 否则就关闭 */</span></span><br><span class="line">    <span class="keyword">if</span> ((GPIOA-&gt;IDR &amp; led) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Driver_LED_Off(led);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        Driver_LED_On(led);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 打开数组中所有的灯</span></span><br><span class="line"><span class="comment"> * @param &#123;uint32_t&#125; leds 所有灯</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; size 灯的个数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_OnAll</span><span class="params">(<span class="type">uint32_t</span> leds[], <span class="type">uint8_t</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint8_t</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Driver_LED_On(leds[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 关闭数组中所有的灯</span></span><br><span class="line"><span class="comment"> * @param &#123;uint32_t&#125; leds 所有灯</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; size 灯的个数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_OffAll</span><span class="params">(<span class="type">uint32_t</span> leds[], <span class="type">uint8_t</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint8_t</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Driver_LED_Off(leds[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h5 id="main-c-5"><a href="#main-c-5" class="headerlink" title="main.c"></a>main.c</h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Driver_USART.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Driver_SysTick.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Driver_LED.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Driver_TIM5.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Driver_USART1_Init();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;系统定时器实验开始...\r\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Driver_TIM5_Init();</span><br><span class="line"></span><br><span class="line">    Driver_TIM5_Start();</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> dutyCycle = <span class="number">0</span>;</span><br><span class="line">    <span class="type">uint8_t</span> dir = <span class="number">0</span>;<span class="comment">// 变大</span></span><br><span class="line"></span><br><span class="line">    Driver_TIM5_SetDutyCycle(dutyCycle);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (dir == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            dutyCycle += <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (dutyCycle &gt;= <span class="number">99</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                dir = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            dutyCycle -= <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (dutyCycle &lt;= <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                dir = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        Driver_TIM5_SetDutyCycle(dutyCycle);</span><br><span class="line">        Delay_ms(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h4 id="软件设计（HAL库）-2"><a href="#软件设计（HAL库）-2" class="headerlink" title="软件设计（HAL库）"></a>软件设计（HAL库）</h4></li><li><p><strong>STM32CubeMX配置</strong></p></li></ol><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172553413981431.png" alt="img"></p><ol><li>定时器配置代码展示（tim.c）</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">TIM_HandleTypeDef htim5;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* TIM5 init function */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">MX_TIM5_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* USER CODE BEGIN TIM5_Init 0 */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* USER CODE END TIM5_Init 0 */</span></span><br><span class="line"></span><br><span class="line">    TIM_ClockConfigTypeDef sClockSourceConfig = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    TIM_MasterConfigTypeDef sMasterConfig = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    TIM_OC_InitTypeDef sConfigOC = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* USER CODE BEGIN TIM5_Init 1 */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* USER CODE END TIM5_Init 1 */</span></span><br><span class="line">    htim5.Instance = TIM5;</span><br><span class="line">    htim5.Init.Prescaler = <span class="number">7200</span> - <span class="number">1</span>;</span><br><span class="line">    htim5.Init.CounterMode = TIM_COUNTERMODE_UP;</span><br><span class="line">    htim5.Init.Period = <span class="number">100</span> - <span class="number">1</span>;</span><br><span class="line">    htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;</span><br><span class="line">    htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;</span><br><span class="line">    <span class="keyword">if</span> (HAL_TIM_Base_Init(&amp;htim5) != HAL_OK)</span><br><span class="line">    &#123;</span><br><span class="line">        Error_Handler();</span><br><span class="line">    &#125;</span><br><span class="line">    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;</span><br><span class="line">    <span class="keyword">if</span> (HAL_TIM_ConfigClockSource(&amp;htim5, &amp;sClockSourceConfig) != HAL_OK)</span><br><span class="line">    &#123;</span><br><span class="line">        Error_Handler();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (HAL_TIM_PWM_Init(&amp;htim5) != HAL_OK)</span><br><span class="line">    &#123;</span><br><span class="line">        Error_Handler();</span><br><span class="line">    &#125;</span><br><span class="line">    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;</span><br><span class="line">    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;</span><br><span class="line">    <span class="keyword">if</span> (HAL_TIMEx_MasterConfigSynchronization(&amp;htim5, &amp;sMasterConfig) != HAL_OK)</span><br><span class="line">    &#123;</span><br><span class="line">        Error_Handler();</span><br><span class="line">    &#125;</span><br><span class="line">    sConfigOC.OCMode = TIM_OCMODE_PWM1;</span><br><span class="line">    sConfigOC.Pulse = <span class="number">0</span>;</span><br><span class="line">    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;</span><br><span class="line">    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;</span><br><span class="line">    <span class="keyword">if</span> (HAL_TIM_PWM_ConfigChannel(&amp;htim5, &amp;sConfigOC, TIM_CHANNEL_2) != HAL_OK)</span><br><span class="line">    &#123;</span><br><span class="line">        Error_Handler();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* USER CODE BEGIN TIM5_Init 2 */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* USER CODE END TIM5_Init 2 */</span></span><br><span class="line">    HAL_TIM_MspPostInit(&amp;htim5);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_TIM_Base_MspInit</span><span class="params">(TIM_HandleTypeDef *tim_baseHandle)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (tim_baseHandle-&gt;Instance == TIM5)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* USER CODE BEGIN TIM5_MspInit 0 */</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* USER CODE END TIM5_MspInit 0 */</span></span><br><span class="line">        <span class="comment">/* TIM5 clock enable */</span></span><br><span class="line">        __HAL_RCC_TIM5_CLK_ENABLE();</span><br><span class="line">        <span class="comment">/* USER CODE BEGIN TIM5_MspInit 1 */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* USER CODE END TIM5_MspInit 1 */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_TIM_MspPostInit</span><span class="params">(TIM_HandleTypeDef *timHandle)</span></span><br><span class="line">&#123;</span><br><span class="line">    GPIO_InitTypeDef GPIO_InitStruct = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">if</span> (timHandle-&gt;Instance == TIM5)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* USER CODE BEGIN TIM5_MspPostInit 0 */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* USER CODE END TIM5_MspPostInit 0 */</span></span><br><span class="line"></span><br><span class="line">        __HAL_RCC_GPIOA_CLK_ENABLE();</span><br><span class="line">        <span class="comment">/* TIM5 GPIO Configuration</span></span><br><span class="line"><span class="comment">        PA1     ------&gt; TIM5_CH2 */</span></span><br><span class="line">        GPIO_InitStruct.Pin = GPIO_PIN_1;</span><br><span class="line">        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;</span><br><span class="line">        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;</span><br><span class="line">        HAL_GPIO_Init(GPIOA, &amp;GPIO_InitStruct);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* USER CODE BEGIN TIM5_MspPostInit 1 */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* USER CODE END TIM5_MspPostInit 1 */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>添加其他代码</p></li><li><h5 id="tim-c-1"><a href="#tim-c-1" class="headerlink" title="tim.c"></a>tim.c</h5></li></ol><p>添加修改占空比的函数，并在tim.h中声明。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN 1 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">setDutyCycle</span><span class="params">(<span class="type">uint16_t</span> dutyCycle)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 设置捕获比较寄存器的值</span></span><br><span class="line">    __HAL_TIM_SetCompare(&amp;htim5, TIM_CHANNEL_2, dutyCycle);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* USER CODE END 1 */</span></span><br></pre></td></tr></table></figure><ol><li><h5 id="main-c-6"><a href="#main-c-6" class="headerlink" title="main.c"></a>main.c</h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_Init();</span><br><span class="line">    SystemClock_Config();</span><br><span class="line">    MX_GPIO_Init();</span><br><span class="line">    MX_TIM5_Init();</span><br><span class="line">    </span><br><span class="line">    HAL_TIM_PWM_Start(&amp;htim5, TIM_CHANNEL_2);</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> dutyCycle = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int8_t</span> step = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (dutyCycle &lt;= <span class="number">0</span> || dutyCycle &gt;= <span class="number">99</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            step = -step;</span><br><span class="line">        &#125;</span><br><span class="line">        dutyCycle += step;</span><br><span class="line">        setDutyCycle(dutyCycle);</span><br><span class="line">        HAL_Delay(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h3 id="通用定时器实验2：测量PWM的频率-周期"><a href="#通用定时器实验2：测量PWM的频率-周期" class="headerlink" title="通用定时器实验2：测量PWM的频率/周期"></a>通用定时器实验2：测量PWM的频率/周期</h3></li><li><h4 id="需求描述-3"><a href="#需求描述-3" class="headerlink" title="需求描述"></a>需求描述</h4></li></ol><p>上一个案例我们输出了PWM波，这个案例我们使用<strong>输入捕获</strong>功能，来测试PWM波的频率/周期。把测到的结果通过串口发送到电脑，检查测试的结果。</p><ol><li><h4 id="如何测量PWM周期-频率"><a href="#如何测量PWM周期-频率" class="headerlink" title="如何测量PWM周期/频率"></a>如何测量PWM周期/频率</h4></li><li><h4 id="硬件电路设计-3"><a href="#硬件电路设计-3" class="headerlink" title="硬件电路设计"></a>硬件电路设计</h4></li></ol><p>TIM5的CH2输出PWM波。</p><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172553413981432.png" alt="img"></p><p>使用TIM4的CH1来捕获PWM信号。</p><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172553413981433.png" alt="img"></p><p>使用杜邦线把PA1连接到PB6，就可以完成我们的测量任务。</p><p>测量时设置一个周期使其在此期间计数器不溢出。</p><p>且测量频率不能高于设置的 <strong>计数器的频率（</strong> <strong>时钟频率</strong> <strong>分频到计数器的频率）</strong> ，不然，一个周期到了，但此时计数器连一个数也记不上。解决方法：多测几个周期，测量的频率再分频。</p><ol><li><h4 id="软件设计（寄存器）-3"><a href="#软件设计（寄存器）-3" class="headerlink" title="软件设计（寄存器）"></a>软件设计（寄存器）</h4></li></ol><p><strong>暂时无法在飞书文档外展示此内容</strong></p><ol><li><h5 id="Driver-TIM4-h"><a href="#Driver-TIM4-h" class="headerlink" title="Driver_TIM4.h"></a>Driver_TIM4.h</h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __DRIVER_TIM4_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __DRIVER_TIM4_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_TIM4_Init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_TIM4_Start</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">double</span> <span class="title function_">Driver_TIM4_GetPWMCycle</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">double</span> <span class="title function_">Driver_TIM4_GetPWMFreq</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><ol><li><h5 id="Driver-TIM4-c"><a href="#Driver-TIM4-c" class="headerlink" title="Driver_TIM4.c"></a>Driver_TIM4.c</h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Driver_TIM4.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_TIM4_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 开启时钟 */</span></span><br><span class="line">    <span class="comment">/* 1.1 TIM4的时钟 */</span></span><br><span class="line">    RCC-&gt;APB1ENR |= RCC_APB1ENR_TIM4EN;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 1.2 把引脚(PB6) 对应的端口开启时钟*/</span></span><br><span class="line">    RCC-&gt;APB2ENR |= RCC_APB2ENR_IOPBEN;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 2. PB6设置为输入: 浮空输入 CNF=01 MODE=00 */</span></span><br><span class="line">    GPIOB-&gt;CRL &amp;= ~(GPIO_CRL_CNF6_1 | GPIO_CRL_MODE6);</span><br><span class="line">    GPIOB-&gt;CRL |= GPIO_CRL_CNF6_0;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 3. 配置定时器的时基部分 */</span></span><br><span class="line">    <span class="comment">/* 3.1 预分频系数配置 分频后计数器的时钟时1MHz 周期:1us*/</span></span><br><span class="line">    TIM4-&gt;PSC = <span class="number">72</span> - <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 3.2 自动重装载寄存器的值: 设置最大,尽量避免溢出 */</span></span><br><span class="line">    TIM4-&gt;ARR = <span class="number">65535</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 3.3 计数方向: 向上计数 */</span></span><br><span class="line">    TIM4-&gt;CR1 &amp;= ~TIM_CR1_DIR;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 4. 输入捕获部分 */</span></span><br><span class="line">    <span class="comment">/* 4.1 TI1的选择: 把CH1直接连接到TI1 */</span></span><br><span class="line">    TIM4-&gt;CR2 &amp;= ~TIM_CR2_TI1S;<span class="comment">//默认，可以不用配</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 4.2 信号的输入滤波器: 不滤波  CCMR1_IC1F=0000 */</span></span><br><span class="line">    TIM4-&gt;CCMR1 &amp;= ~TIM_CCMR1_IC1F;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 4.3 配置边沿检测器: 上升沿 CCER_CC1P=0  1下降沿捕获*/</span></span><br><span class="line">    TIM4-&gt;CCER &amp;= ~TIM_CCER_CC1P;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 4.4 通道1配置为输入,并把信号映射到IC1  CC1S=01 */</span></span><br><span class="line">    TIM4-&gt;CCMR1 &amp;= ~TIM_CCMR1_CC1S_1;</span><br><span class="line">    TIM4-&gt;CCMR1 |= TIM_CCMR1_CC1S_0;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 4.5 对信号做分频(信号频率比较高的时候) CCMR1_IC1PSC=00不分频 01=2分频 10=4分频 11=8分频*/</span></span><br><span class="line">    TIM4-&gt;CCMR1 &amp;= ~TIM_CCMR1_IC1PSC;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 4.6 通道1输入捕获使能 CCER_CC1E=1 */</span></span><br><span class="line">    TIM4-&gt;CCER |= TIM_CCER_CC1E;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 4.7 开启捕获中断 DIER_CC1IE=1 */</span></span><br><span class="line">    TIM4-&gt;DIER |= TIM_DIER_CC1IE;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 5. NVIC的配置 */</span></span><br><span class="line">    <span class="comment">/* 5.1 优先级组 */</span></span><br><span class="line">    NVIC_SetPriorityGrouping(<span class="number">3</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 5.2 优先级 */</span></span><br><span class="line">    NVIC_SetPriority(TIM4_IRQn, <span class="number">3</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 5.3 使能中断 */</span></span><br><span class="line">    NVIC_EnableIRQ(TIM4_IRQn);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_TIM4_Start</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    TIM4-&gt;CR1 |= TIM_CR1_CEN;<span class="comment">/* 计数器使能 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_TIM4_Stop</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    TIM4-&gt;CR1 &amp;= ~TIM_CR1_CEN;<span class="comment">/* 计数器失能 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 记录上升沿的个数 */</span></span><br><span class="line"><span class="type">uint8_t</span> raiseEdgeCount = <span class="number">0</span>;</span><br><span class="line"><span class="comment">/* 存储信号的周期 */</span></span><br><span class="line"><span class="type">uint16_t</span> t = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* TIM4中断服务函数 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">TIM4_IRQHandler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 判断是否是TIM4的通道1发生了捕获中断 */</span></span><br><span class="line">    <span class="keyword">if</span> (TIM4-&gt;SR &amp; TIM_SR_CC1IF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* 中断标记位清除 */</span></span><br><span class="line">        TIM4-&gt;SR &amp;= ~TIM_SR_CC1IF;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 上升沿个数 */</span></span><br><span class="line">        raiseEdgeCount++;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* 如果是第1个上升沿,则清零计数器,让计数器从0开始计数 */</span></span><br><span class="line">        <span class="keyword">if</span> (raiseEdgeCount == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            TIM4-&gt;CNT = <span class="number">0</span>;<span class="comment">/* 计数器清零 */</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (raiseEdgeCount == <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">/* 读取捕获寄存器的值,就是周期 单位是us*/</span></span><br><span class="line">            t = TIM4-&gt;CCR1;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">/* 上升沿的计数从0重新计数 */</span></span><br><span class="line">            raiseEdgeCount = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 返回PWM的周期 ms*/</span></span><br><span class="line"><span class="type">double</span> <span class="title function_">Driver_TIM4_GetPWMCycle</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> t / <span class="number">1000.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 返回PWM的频率 */</span></span><br><span class="line"><span class="type">double</span> <span class="title function_">Driver_TIM4_GetPWMFreq</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1000000</span> / t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h5 id="main-c-7"><a href="#main-c-7" class="headerlink" title="main.c"></a>main.c</h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Driver_USART.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Delay.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Driver_TIM5.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Driver_TIM4.h&quot;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Driver_USART1_Init();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;系统定时器实验开始...\r\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Driver_TIM5_Init();</span><br><span class="line">    Driver_TIM5_Start();</span><br><span class="line"></span><br><span class="line">    Driver_TIM4_Init();</span><br><span class="line">    Driver_TIM4_Start();</span><br><span class="line">    <span class="type">double</span> t, f;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        t = Driver_TIM4_GetPWMCycle();</span><br><span class="line">        f = Driver_TIM4_GetPWMFreq();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;t=%.4fms, f=%.4fHz\r\n&quot;</span>, t, f);</span><br><span class="line"></span><br><span class="line">        Delay_ms(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为啥将引脚配置为浮空输入啊？因为测信号频率是通过检测信号边沿实现的，高低电平是待测频率控制的！</p><p>将输入捕获通道引脚配置为浮空输入，主要是为了优化信号的捕获和测量效果。这里有几个关键原因：</p><ol><li>减少干扰</li></ol><p>   ：</p><ol><li><strong>减少噪声</strong> ：未连接的引脚可能会受到周围噪声的影响，配置为浮空输入可以减少这些噪声对信号捕获的干扰。通过将引脚设置为浮空输入，可以避免未连接引脚上的噪声干扰导致不准确的计数。</li><li><strong>防止错误触发</strong> ：如果引脚没有正确连接到信号源，未连接状态可能会产生随机的电平波动。将引脚配置为浮空输入有助于减少这种潜在的干扰，从而提高捕获事件的可靠性。</li></ol><ol><li>信号稳定性</li></ol><p>   ：</p><ol><li><strong>边沿检测</strong> ：频率测量通常基于信号的边沿（上升沿或下降沿）。如果信号引脚配置为浮空输入，捕获模块仅在实际信号边沿到达时才会触发，而不会受到<strong>电平稳定性</strong>问题的影响。这样可以确保捕获到的边沿信息是准确的。</li></ol><ol><li>电平</li></ol><p>   兼容性</p><p>   ：</p><ol><li><strong>避免干扰电平</strong> ：当引脚配置为浮空输入时，它不会被内部电路或者外部干扰源所驱动，因此不容易被意外的高电平或低电平影响。这对于频率测量特别重要，因为信号的变化（边沿）是关键，而不是静态电平。</li></ol><ol><li>优化测量精度</li></ol><p>   ：</p><ol><li><strong>精确捕获</strong> ：在测量高频信号时，浮空输入模式可以减少由于输入信号不稳定导致的测量误差。这样可以提高捕获精度，特别是在频率和时间精度要求较高的应用中。</li></ol><p>总之，浮空输入模式在处理频率测量和边沿捕获时，能够有效地提高信号捕获的准确性和稳定性，避免潜在的干扰和测量误差。</p><ol><li><h4 id="软件设计（HAL库）-3"><a href="#软件设计（HAL库）-3" class="headerlink" title="软件设计（HAL库）"></a>软件设计（HAL库）</h4></li><li><h5 id="STM32CubeMX配置"><a href="#STM32CubeMX配置" class="headerlink" title="STM32CubeMX配置"></a><strong>STM32CubeMX配置</strong></h5></li></ol><p>复制上一个工程。</p><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172553413981434.png" alt="img"></p><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172553413981435.png" alt="img"></p><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172553413981436.png" alt="img"></p><ol><li><h5 id="TIM4初始化代码（HAL库自动生成）"><a href="#TIM4初始化代码（HAL库自动生成）" class="headerlink" title="TIM4初始化代码（HAL库自动生成）"></a>TIM4初始化代码（HAL库自动生成）</h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">MX_TIM4_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* USER CODE BEGIN TIM4_Init 0 */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* USER CODE END TIM4_Init 0 */</span></span><br><span class="line"></span><br><span class="line">    TIM_ClockConfigTypeDef sClockSourceConfig = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    TIM_MasterConfigTypeDef sMasterConfig = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    TIM_IC_InitTypeDef sConfigIC = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* USER CODE BEGIN TIM4_Init 1 */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* USER CODE END TIM4_Init 1 */</span></span><br><span class="line">    htim4.Instance = TIM4;</span><br><span class="line">    htim4.Init.Prescaler = <span class="number">72</span> - <span class="number">1</span>;</span><br><span class="line">    htim4.Init.CounterMode = TIM_COUNTERMODE_UP;</span><br><span class="line">    htim4.Init.Period = <span class="number">65536</span> - <span class="number">1</span>;</span><br><span class="line">    htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;</span><br><span class="line">    htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;</span><br><span class="line">    <span class="keyword">if</span> (HAL_TIM_Base_Init(&amp;htim4) != HAL_OK)</span><br><span class="line">    &#123;</span><br><span class="line">        Error_Handler();</span><br><span class="line">    &#125;</span><br><span class="line">    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;</span><br><span class="line">    <span class="keyword">if</span> (HAL_TIM_ConfigClockSource(&amp;htim4, &amp;sClockSourceConfig) != HAL_OK)</span><br><span class="line">    &#123;</span><br><span class="line">        Error_Handler();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (HAL_TIM_IC_Init(&amp;htim4) != HAL_OK)</span><br><span class="line">    &#123;</span><br><span class="line">        Error_Handler();</span><br><span class="line">    &#125;</span><br><span class="line">    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;</span><br><span class="line">    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;</span><br><span class="line">    <span class="keyword">if</span> (HAL_TIMEx_MasterConfigSynchronization(&amp;htim4, &amp;sMasterConfig) != HAL_OK)</span><br><span class="line">    &#123;</span><br><span class="line">        Error_Handler();</span><br><span class="line">    &#125;</span><br><span class="line">    sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;</span><br><span class="line">    sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;</span><br><span class="line">    sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;</span><br><span class="line">    sConfigIC.ICFilter = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (HAL_TIM_IC_ConfigChannel(&amp;htim4, &amp;sConfigIC, TIM_CHANNEL_1) != HAL_OK)</span><br><span class="line">    &#123;</span><br><span class="line">        Error_Handler();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* USER CODE BEGIN TIM4_Init 2 */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* USER CODE END TIM4_Init 2 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h5 id="添加其他代码"><a href="#添加其他代码" class="headerlink" title="添加其他代码"></a>添加其他代码</h5></li><li><h6 id="tim-c-2"><a href="#tim-c-2" class="headerlink" title="tim.c"></a><strong>tim.c</strong></h6></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 记录上升沿的个数 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 提前配置好了上升沿触发，因此每来一个上升沿会触发输入捕获</span></span><br><span class="line"><span class="comment">中断，raiseEdgeCount++，从而用raiseEdgeCount模拟上升沿个数*/</span></span><br><span class="line"><span class="type">uint8_t</span> raiseEdgeCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 存储信号的周期 */</span></span><br><span class="line"><span class="type">uint16_t</span> t = <span class="number">0</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_TIM_IC_CaptureCallback</span><span class="params">(TIM_HandleTypeDef *htim)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (htim-&gt;Instance == TIM4)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (htim-&gt;Channel == HAL_TIM_ACTIVE_CHANNEL_1)<span class="comment">//这里是输入捕获中断的回调函数，所以可以判断通道，如果是是更新中断的回调函数可不敢判断通道啊！</span></span><br><span class="line">        &#123;</span><br><span class="line">    <span class="comment">/* 上升沿个数 */</span></span><br><span class="line">            raiseEdgeCount++;</span><br><span class="line">           <span class="comment">/* 如果是第1个上升沿,则清零计数器,让计数器从0开始计数 */</span></span><br><span class="line">            <span class="keyword">if</span> (raiseEdgeCount == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">             <span class="comment">// TIM4-&gt;CNT = 0; /* 计数器清零 */</span></span><br><span class="line">                __HAL_TIM_SetCounter(htim, <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (raiseEdgeCount == <span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line"><span class="comment">/* 读取捕获寄存器的值,就是周期 单位是us*/</span></span><br><span class="line"><span class="comment">//t = TIM4-&gt;CCR1;</span></span><br><span class="line">                t = __HAL_TIM_GetCompare(htim, TIM_CHANNEL_1);</span><br><span class="line">                <span class="comment">/* 上升沿的计数从0重新计数 */</span></span><br><span class="line">                raiseEdgeCount = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 返回PWM的周期 ms */</span></span><br><span class="line"><span class="type">double</span> <span class="title function_">Driver_TIM4_GetPWMCycle</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> t / <span class="number">1000.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 返回PWM的频率 （对应换算的周期 s）*/</span></span><br><span class="line"><span class="type">double</span> <span class="title function_">Driver_TIM4_GetPWMFreq</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1000000</span> / t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><p><strong>以后类似频率、周期这种数，一定要想着不能用uint8_t,要不然溢出了。</strong></p><ol><li><h6 id="main-c-8"><a href="#main-c-8" class="headerlink" title="main.c"></a><strong>main.c</strong></h6></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    HAL_Init();</span><br><span class="line">    SystemClock_Config();</span><br><span class="line">    MX_GPIO_Init();</span><br><span class="line">    MX_TIM4_Init();</span><br><span class="line">    MX_TIM5_Init();</span><br><span class="line">    MX_USART1_UART_Init();</span><br><span class="line">    </span><br><span class="line">    HAL_TIM_PWM_Start(&amp;htim5, TIM_CHANNEL_2);<span class="comment">// 让tim5产生pwm</span></span><br><span class="line"></span><br><span class="line">    HAL_TIM_IC_Start_IT(&amp;htim4, TIM_CHANNEL_1);</span><br><span class="line"></span><br><span class="line">    <span class="type">double</span> t, f;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        t = Driver_TIM4_GetPWMCycle();</span><br><span class="line">        f = Driver_TIM4_GetPWMFreq();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;t=%.4fms, f=%.4fHz\r\n&quot;</span>, t, f);</span><br><span class="line"></span><br><span class="line">        HAL_Delay(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相比，输出比较没有必要开中断。原因是我们不需要处理输出比较过程中的信号，而我们需要处理输入捕获过程中的边沿信号来计算周期、占空比等数据！</p><p>因此，输入捕获需要精确记录时间点并处理捕获事件，而输出比较只是产生预设的信号，不涉及实时数据处理。</p><ol><li><h4 id="思考-1"><a href="#思考-1" class="headerlink" title="思考"></a>思考</h4></li></ol><p>回到定时器有关于输入捕获的介绍，可知CCRx的值会保持不变直到下一次输入捕获发生，为啥不直接读 <strong>CCRx寄存器 </strong>而是用 <strong>全局变量T </strong>来接收？</p><p>原因：我们<strong>TIM5设置的\</strong>**PWM**<em>\</em>的周期为10<strong> </strong>ms<strong> </strong>，<strong> 分频后TIM4每次计数耗费 </strong>1us** ，因此CNT如果从0开始，需要TIM4的CNT计10000次才能到达一个周期。</p><p><strong>假设将 tim.c 中的 变量t 换成CCR1寄存器，raiseEdgeCount = 2的情况就舍弃了，只有raiseEdgeCount = 1，初始CNT清0。</strong></p><p>首先第一个上升沿没有问题， <strong>捕获比较完后进入中断</strong> ， <strong>CNT清0</strong> ，此时没有读<strong>CCR1寄存器</strong>的值，其次，第二个上升沿来临后，CNT肯定加到10000，之后并没有CNT清0这一步骤 <strong>，</strong> 然后第二个上升沿来临<strong>，此时CNT的值从10000已经增到20000，将CNT的20000捕获到CCR1后，进入中断，此时 raiseEdgeCount = 1，CNT清0。</strong></p><p>因此最终会导致测出的数为 10ms，20ms，10ms，20ms 循环下去。</p><p>有无更好的方法，当然？</p><ol><li><h5 id="tim-c-3"><a href="#tim-c-3" class="headerlink" title="tim.c"></a><strong>tim.c</strong></h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN 1 */</span></span><br><span class="line"><span class="comment">/* 记录上升沿的个数 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 提前配置好了上升沿触发，因此每来一个上升沿会触发输入捕获</span></span><br><span class="line"><span class="comment">中断，raiseEdgeCount++，从而用raiseEdgeCount模拟上升沿个数*/</span></span><br><span class="line"><span class="type">uint8_t</span> raiseEdgeCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 存储信号的周期 */</span></span><br><span class="line"><span class="type">uint16_t</span> t = <span class="number">0</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_TIM_IC_CaptureCallback</span><span class="params">(TIM_HandleTypeDef *htim)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (htim-&gt;Instance == TIM4)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (htim-&gt;Channel == HAL_TIM_ACTIVE_CHANNEL_1)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// TIM4-&gt;CNT = 0; /* 计数器清零 */</span></span><br><span class="line">            __HAL_TIM_SetCounter(&amp;htim4, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 返回PWM的周期 ms */</span></span><br><span class="line"><span class="type">double</span> <span class="title function_">Driver_TIM4_GetPWMCycle</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> __HAL_TIM_GetCompare(&amp;htim4, TIM_CHANNEL_1) / <span class="number">1000.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 返回PWM的频率 （对应换算的周期 s）*/</span></span><br><span class="line"><span class="type">double</span> <span class="title function_">Driver_TIM4_GetPWMFreq</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1000000.0</span> / __HAL_TIM_GetCompare(&amp;htim4, TIM_CHANNEL_1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE END 1 */</span></span><br></pre></td></tr></table></figure><p>其实这样做与后面的实验3是一个思路。</p><ol><li><h3 id="通用定时器实验3：同时测量PWM的频率-周期和占空比"><a href="#通用定时器实验3：同时测量PWM的频率-周期和占空比" class="headerlink" title="通用定时器实验3：同时测量PWM的频率/周期和占空比"></a>通用定时器实验3：同时测量PWM的频率/周期和占空比</h3></li><li><h4 id="需求描述-4"><a href="#需求描述-4" class="headerlink" title="需求描述"></a>需求描述</h4></li></ol><p>用一个定时器的2个通道<strong>同时测量频率和\</strong>*<em>占空比*</em>。</p><p>测试频率好理解，连续的两个上升沿就可以了。测试占空比就需要<strong>连续的一个上升沿和一个下降沿</strong>，用前面的知识是无法实现了，因为需要在这个通道即要检测上升沿，也要检测下降沿，是无法实现的。</p><p>所以，要测量占空比，需要用到新的知识：定时器的<strong>从模式</strong>和PWM输入模式。</p><ol><li><h4 id="触发输入和从模式"><a href="#触发输入和从模式" class="headerlink" title="触发输入和从模式"></a>触发输入和从模式</h4></li><li><h5 id="触发输入："><a href="#触发输入：" class="headerlink" title="触发输入："></a><strong>触发输入：</strong></h5></li></ol><p>定时器触发信号分为两类：</p><ul><li>1、<strong>触发输入信号（TRGI）</strong> <strong>（一般用于定时器从模式）</strong> ：<br>从外部过来（也可能从自己的通道过来）到本定时器的信号。可以用来控制本定时器的一些动作，比如复位。这种情况下<strong>本定时器</strong>就处于 <strong>从模式</strong> 。被别人控制。</li><li>第一类：</li></ul><p><strong>TS</strong> <strong>[2:0] = 000 - 011 共四个</strong></p><p>这四种分别为内部触发0 - 3 （TR0 - TR4），来源于<strong>其他定时器</strong>的<strong>TRGO</strong>信号，经过芯片内部连接来到本定时器 <strong>ITR0/1/2/3</strong> 。 <strong>内部连接是定死的，无法更改</strong> 。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">例：TIM2的TRGO信号连到了TIM1的ITR0，最终ITRx中的某个信号经过信号选择器成为TRGI。</span><br></pre></td></tr></table></figure><ul><li><p>第二类：</p><p><strong>TS</strong> <strong>[2:0] = 111 共一个*</strong> 来源于外部触发引脚 <strong>ETR </strong> 。ETR是外部固定的引脚与第一类的引脚不是一回事！</p></li><li><p>经过极性选择，边沿检测器和预分频器，输入滤波器，成为TRGI信号。</p></li><li><p>第三类：</p><p><strong>TS</strong> <strong>[2:0] = 100 共一个*</strong> 来源于<strong>定时器自身通道 1 </strong>信号。</p></li><li><p>经过输入滤波器和边沿检测器，得到TI1F_ED信号。</p></li><li><p><strong>上升沿和下降沿都会产生TI1F_ED信号。</strong></p></li><li><p><strong>第四类</strong> ：</p><p><strong>TS</strong> <strong>[2:0] = 101 - 110 共二个*</strong> 来源于<strong>定时器自身的通道 1 </strong>或<strong>通道 2 </strong>信号。</p></li><li><p>结果输入滤波器和边沿检测器的，得到TI1FP1 和 TI2FP2 信号。</p></li><li><p>上升沿或下降沿都会产生， <strong>只能选择一种边沿触发方式</strong> ，最终成为TRGI信号。</p></li></ul><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172553413981437.png" alt="img"></p><ul><li><p>2、</p><p>触发输出信号（TRGO）</p></li></ul><p>  （一般用于定时器主模式）</p><p>  ：</p><ul><li>是本定时器输出到其他定时器或其他外设的信号。</li><li>用于与其他定时器的级联（触发其他定时器或外设的工作）。</li><li>可以控制别人。</li></ul><ol><li><h5 id="定时器从模式："><a href="#定时器从模式：" class="headerlink" title="定时器从模式："></a><strong>定时器从模式：</strong></h5></li></ol><p>前面介绍八个TRGI信号，<strong>这些TRGI信号要控制定时器，必须将被控制的定时器设置为从模式。</strong></p><p>从模式控制寄存器 <strong>SMCR \</strong>的 **SMS** **[2:0]** 位，来配置从模式工作模式。*<em>（默认 000 关闭状态）*</em></p><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172553413981438.png" alt="img"></p><p><strong>上述手册表述不准确，不一定是上升沿，也可以是下降沿。</strong></p><ul><li>1、 <strong>SMS</strong> <strong>[2:0] = 000</strong></li></ul><p><strong>关闭从模式</strong> 。</p><ul><li>2、<strong>SMS[2:0] = 001 - 011</strong></li></ul><p><strong>编码器\</strong>*<em>模式 1 - 3*</em> 在平衡车项目中可以用到。</p><ul><li>3、 <strong>SMS</strong> <strong>[2:0] = 100</strong></li></ul><p><strong>复位模式</strong> 。触发输入的边沿（上升沿或下降沿）会重新初始化计数器（就相当于<strong>让计数器从 0 </strong>开始计数），这样 <strong>就不需要手动清0计数器，也不需要（</strong> <strong>像实验2一样）</strong> <strong>数上升沿个数，从而硬件实现自动完成测量，比手动清0更精确</strong> 。</p><ul><li>4、 <strong>SMS</strong> <strong>[2:0] = 101</strong></li></ul><p><strong>门控模式</strong> 。TRGI上升沿启动计数器，下降沿停止计数器。</p><ul><li>5、 <strong>SMS</strong> <strong>[2:0] = 110</strong></li></ul><p><strong>触发模式</strong> 。TRGI上升沿启动计数器，但是不会停止计数器。</p><ul><li>6、 <strong>SMS</strong> <strong>[2:0] = 111</strong></li></ul><p><strong>外部时钟模式1。</strong></p><ol><li><h4 id="PWM输入模式"><a href="#PWM输入模式" class="headerlink" title="PWM输入模式"></a>PWM输入模式</h4></li></ol><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172553413981439.png" alt="img"></p><p>以信号从通道1输入为例，经过输入滤波器和边沿检测器得到两路信号： <strong>TI1FP1 和 TI2FP2</strong> ，这二者极性相反，一个得到输入的上升沿（TI1FP1 ），一个得到输入的下降沿（TI2FP2）。</p><p>为啥可以实现自动测量？</p><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172553413981440.png" alt="img"></p><p>解释：第一次上升沿来临，IC1捕获，IC2不捕获（因为是下降沿触发），但由于设置了IC1为复位模式（上升沿复位），所以IC1的值会清空。然后下降沿来临，IC2捕获，第二次上升沿来临，IC1捕获，从而根据捕获值，算出数据。<strong>（自动）</strong></p><p>不用管上图标红处。</p><p><strong>因此，在此过程中我们无需使用中断。</strong></p><ol><li><h4 id="软件设计（寄存器）-4"><a href="#软件设计（寄存器）-4" class="headerlink" title="软件设计（寄存器）"></a>软件设计（寄存器）</h4></li></ol><p><strong>暂时无法在飞书文档外展示此内容</strong></p><ol><li><h5 id="Driver-TIM4-h-1"><a href="#Driver-TIM4-h-1" class="headerlink" title="Driver_TIM4.h"></a>Driver_TIM4.h</h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __DRIVER_TIM4_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __DRIVER_TIM4_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_TIM4_Init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_TIM4_Start</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">double</span> <span class="title function_">Driver_TIM4_GetPWMCycle</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">double</span> <span class="title function_">Driver_TIM4_GetPWMFreq</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">double</span> <span class="title function_">Driver_TIM4_GetDutyCycle</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><ol><li><h5 id="Driver-TIM4-c-1"><a href="#Driver-TIM4-c-1" class="headerlink" title="Driver_TIM4.c"></a>Driver_TIM4.c</h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Driver_TIM4.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_TIM4_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 开启时钟 */</span></span><br><span class="line">    <span class="comment">/* 1.1 TIM4的时钟 */</span></span><br><span class="line">    RCC-&gt;APB1ENR |= RCC_APB1ENR_TIM4EN;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 1.2 把引脚(PB6) 对应的端口开启时钟*/</span></span><br><span class="line">    RCC-&gt;APB2ENR |= RCC_APB2ENR_IOPBEN;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 2. PB6设置为输入: 浮空输入 CNF=01 MODE=00 */</span></span><br><span class="line">    GPIOB-&gt;CRL &amp;= ~(GPIO_CRL_CNF6_1 | GPIO_CRL_MODE6);</span><br><span class="line">    GPIOB-&gt;CRL |= GPIO_CRL_CNF6_0;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 3. 配置定时器的时基部分 */</span></span><br><span class="line">    <span class="comment">/* 3.1 预分频系数配置 分频后计数器的时钟时1MHz 周期:1us*/</span></span><br><span class="line">    TIM4-&gt;PSC = <span class="number">72</span> - <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 3.2 自动重装载寄存器的值: 设置最大,尽量避免溢出 */</span></span><br><span class="line">    TIM4-&gt;ARR = <span class="number">65535</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 3.3 计数方向: 向上计数 */</span></span><br><span class="line">    TIM4-&gt;CR1 &amp;= ~TIM_CR1_DIR;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 4. 输入捕获部分 */</span></span><br><span class="line">    <span class="comment">/* 4.1 输入信号不滤波 */</span></span><br><span class="line">    TIM4-&gt;CCMR1 &amp;= ~TIM_CCMR1_IC1F;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 4.2 配置边缘检测: 去IC1上升沿 去IC2的下降沿 */</span></span><br><span class="line">    TIM4-&gt;CCER &amp;= ~TIM_CCER_CC1P;</span><br><span class="line">    TIM4-&gt;CCER |= TIM_CCER_CC2P;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 4.3 把 IC1映射到TI1 CCMR1_CC1S=01 上升沿*/</span></span><br><span class="line">    TIM4-&gt;CCMR1 &amp;= ~TIM_CCMR1_CC1S_1;</span><br><span class="line">    TIM4-&gt;CCMR1 |= TIM_CCMR1_CC1S_0;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 4.4 把 IC2映射到TI1 CCMR1_CC2S=10 下降沿*/</span></span><br><span class="line">    TIM4-&gt;CCMR1 |= TIM_CCMR1_CC2S_1;</span><br><span class="line">    TIM4-&gt;CCMR1 &amp;= ~TIM_CCMR1_CC2S_0;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 4.5 IC1和IC2的预分频 都不分频 */</span></span><br><span class="line">    TIM4-&gt;CCMR1 &amp;= ~TIM_CCMR1_IC1PSC;</span><br><span class="line">    TIM4-&gt;CCMR1 &amp;= ~TIM_CCMR1_IC2PSC;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 4.6 配置TRGI信号:  TI1FP1（TI1FP1作为触发定时器从模式复位模式源）   SMCR_TS = 101 */</span></span><br><span class="line">    TIM4-&gt;SMCR |= (TIM_SMCR_TS_2 | TIM_SMCR_TS_0);</span><br><span class="line">    TIM4-&gt;SMCR &amp;= ~TIM_SMCR_TS_1;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 4.7 配置从模式: 为复位模式 SMCR_SMS = 100 */</span></span><br><span class="line">    TIM4-&gt;SMCR |= TIM_SMCR_SMS_2;</span><br><span class="line">    TIM4-&gt;SMCR &amp;= ~(TIM_SMCR_SMS_1 | TIM_SMCR_SMS_0);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 4.8 使能通道1捕获和通道2捕获 */</span></span><br><span class="line">    TIM4-&gt;CCER |= TIM_CCER_CC1E;</span><br><span class="line">    TIM4-&gt;CCER |= TIM_CCER_CC2E;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_TIM4_Start</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    TIM4-&gt;CR1 |= TIM_CR1_CEN;<span class="comment">/* 计数器使能 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_TIM4_Stop</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    TIM4-&gt;CR1 &amp;= ~TIM_CR1_CEN;<span class="comment">/* 计数器失能 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 返回PWM的周期 ms*/</span></span><br><span class="line"><span class="type">double</span> <span class="title function_">Driver_TIM4_GetPWMCycle</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> TIM4-&gt;CCR1 / <span class="number">1000.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 返回PWM的频率 */</span></span><br><span class="line"><span class="type">double</span> <span class="title function_">Driver_TIM4_GetPWMFreq</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1000000.0</span> / TIM4-&gt;CCR1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回占空比</span></span><br><span class="line"><span class="type">double</span> <span class="title function_">Driver_TIM4_GetDutyCycle</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> TIM4-&gt;CCR2 * <span class="number">1.0</span> / TIM4-&gt;CCR1;<span class="comment">//一定要注意，不然相除就是0了</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h5 id="main-c-9"><a href="#main-c-9" class="headerlink" title="main.c"></a>main.c</h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Driver_USART.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Driver_SysTick.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Driver_TIM5.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Driver_TIM4.h&quot;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Driver_USART1_Init();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;系统定时器实验开始...\r\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Driver_TIM5_Init();</span><br><span class="line">    Driver_TIM5_Start();</span><br><span class="line">    </span><br><span class="line">    Driver_TIM4_Init();</span><br><span class="line">    Driver_TIM4_Start();</span><br><span class="line">    <span class="type">double</span> t, f, dutyCycle;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        t = Driver_TIM4_GetPWMCycle();</span><br><span class="line">        f = Driver_TIM4_GetPWMFreq();</span><br><span class="line">        dutyCycle = Driver_TIM4_GetDutyCycle();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;t=%.4fms, f=%.4fHz, dutyCycle=%.2f%%\r\n&quot;</span>, t, f, dutyCycle * <span class="number">100</span>);  <span class="comment">// 40%</span></span><br><span class="line"></span><br><span class="line">        Delay_ms(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此代码实现全自动测量，不需要像实验2一样专门用输入捕获中断。</p><ol><li><h4 id="软件设计（HAL库）-4"><a href="#软件设计（HAL库）-4" class="headerlink" title="软件设计（HAL库）"></a>软件设计（HAL库）</h4></li><li><h5 id="STM32CubeMX配置-1"><a href="#STM32CubeMX配置-1" class="headerlink" title="STM32CubeMX配置"></a>STM32CubeMX配置</h5></li></ol><p>TIM5的配置参考前面案例。</p><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172553413981441.png" alt="img"></p><ol><li><h5 id="添加其他代码-1"><a href="#添加其他代码-1" class="headerlink" title="添加其他代码"></a>添加其他代码</h5></li><li><h6 id="tim-c-4"><a href="#tim-c-4" class="headerlink" title="tim.c"></a>tim.c</h6></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN 1 */</span></span><br><span class="line"><span class="comment">/* 返回PWM的周期 ms*/</span></span><br><span class="line"><span class="type">double</span> <span class="title function_">Driver_TIM4_GetPWMCycle</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// return TIM4-&gt;CCR1 / 1000.0;;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (__HAL_TIM_GetCompare(&amp;htim4, TIM_CHANNEL_1) + <span class="number">1</span>) / <span class="number">1000.0</span>;</span><br><span class="line">&#125;</span><br><span class="line">doubleDriver_TIM4_GetPWMFreq(<span class="type">void</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// return 1000000.0 / TIM4-&gt;CCR1;</span></span><br><span class="line"></span><br><span class="line">return1000000<span class="number">.0</span> / (__HAL_TIM_GetCompare(&amp;htim4, TIM_CHANNEL_1) + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回占空比</span></span><br><span class="line"><span class="type">double</span> <span class="title function_">Driver_TIM4_GetDutyCycle</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// return TIM4-&gt;CCR2 * 1.0 / TIM4-&gt;CCR1;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (<span class="number">1</span> + __HAL_TIM_GetCompare(&amp;htim4, TIM_CHANNEL_2)) * <span class="number">1.0</span> / (<span class="number">1</span> + __HAL_TIM_GetCompare(&amp;htim4, TIM_CHANNEL_1));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE END 1 */</span></span><br></pre></td></tr></table></figure><ol><li><h6 id="main-c-10"><a href="#main-c-10" class="headerlink" title="main.c"></a>main.c</h6></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_Init();</span><br><span class="line">    SystemClock_Config();</span><br><span class="line">    MX_GPIO_Init();</span><br><span class="line">    MX_TIM4_Init();</span><br><span class="line">    MX_TIM5_Init();</span><br><span class="line">    MX_USART1_UART_Init();</span><br><span class="line">    </span><br><span class="line">    HAL_TIM_PWM_Start(&amp;htim5, TIM_CHANNEL_2);</span><br><span class="line"></span><br><span class="line">    HAL_TIM_IC_Start(&amp;htim4, TIM_CHANNEL_1);</span><br><span class="line">    HAL_TIM_IC_Start(&amp;htim4, TIM_CHANNEL_2);</span><br><span class="line">    <span class="type">double</span> t, f, dutyCycle;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        t = Driver_TIM4_GetPWMCycle();</span><br><span class="line">        f = Driver_TIM4_GetPWMFreq();</span><br><span class="line">        dutyCycle = Driver_TIM4_GetDutyCycle();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;t=%.4fms, f=%.4fHz, dutyCycle=%.2f%%\r\n&quot;</span>, t, f, dutyCycle * <span class="number">100</span>);<span class="comment">// 40%</span></span><br><span class="line">        HAL_Delay(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为啥获取CCR1和CCR2的值还要手动+1？</p><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172553413981442.png" alt="img"></p><p>比我们设定的相差一个<strong>1us（计数器少计了1个数，相当于\</strong>*<em>少一个计数周期<strong> </strong>）<strong> 。因为TIM4配置的预分频值是 </strong>72 - 1*</em> ，并不是看TIM5生成PWM的配置（因为PWM配好了且已经确定了）。</p><p>为啥？</p><p>TIM4计数周期是1us，来一个上升沿记一个数，被测信号是来一个上升沿计数器复位，然后再来一个上升沿定时器捕获。可能被测信号的上升沿在计数周期前来临（在下一个1us之间），那么此时计数周期没有计数，所以计数器CNT的时间值实际要小于被测信号的值， <strong>少一个计数周期</strong> 。</p><p>可以这样理解，待测信号第二个上升沿与计数器的时钟周期不一定同时来临。因为待测信号的上升沿和计数器的时钟周期之间可能存在对齐问题，导致计数器记录的时间小于实际经过的时间。</p><ol><li><h2 id="高级定时器"><a href="#高级定时器" class="headerlink" title="高级定时器"></a>高级定时器</h2></li><li><h3 id="高级定时器介绍"><a href="#高级定时器介绍" class="headerlink" title="高级定时器介绍"></a>高级定时器介绍</h3></li></ol><p>高级定时器有2个分别是：<strong>TIM1、TIM8</strong>。</p><p>如图：</p><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172553413981443.png" alt="img"></p><p>高级定时器除了拥有通用定时器的所有功能外，还具有以下功能：</p><ol><li>死区时间可编程的互补输出。</li><li>断路输入信号（刹车输入信号）。</li><li>重复次数计数器：<ol><li>重复次数计数器（REP寄存器），硬件上也叫RCR寄存器，也有对应影子寄存器。重复次数计数器的初始化来源于<strong>RCR</strong>寄存器<strong>REP</strong>位。</li><li>有了重复次数计数器之后，此时计数器CNT溢出后，不会产生更新事件及中断（前提使能相应的中断），在高级定时器中，计数器每溢出，会产生一个信号，让 <strong>重复次数计数器的值 - 1。</strong> 只有重复次数计数器溢出后才会产生更新事件及中断。</li><li><strong>当重复次数计数器的值减到 0 ，如果CNT计数器再溢出 1 次，重复次数计数器再减 1 次，则产生更新事件。</strong></li></ol></li><li>互补输出：<ol><li>高级定时器的通道1/2/3可以分别输出2路互补信号：CH1和CH1N（通道4没有）。</li><li>互补信号：频率周期相等，相位差180°。</li><li>互补输出一般用于驱动H桥电路，而H桥通常用于驱动较大电流的负载，比如电机。</li></ol></li></ol><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172553413981444.png" alt="img"></p><ul><li>CH1高电平，Q1和Q4导通，电机正转。</li><li>CH1N高电平，Q2和Q3导通，电机反转。</li></ul><p>理论上CH1和CH1N永远反相，但是会出现 <strong>开通比较快，关闭比较慢（惯性）</strong> 的现象。假设电机在正转，关断后，让电机反转，由于惯性，四个mos管全导通，直接烧毁器件。</p><p>解决方法：开通的时间（高电平的时间）出现的晚一点<strong>（先关后通）</strong>。例如上下车，先下后上，先出再入。</p><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172553413981445.png" alt="img"></p><ul><li>有效电平（默认高电平）要延时。</li><li>死区时间可配置。</li></ul><ol><li><h3 id="高级定时器实验：输出有限个周期的PWM波"><a href="#高级定时器实验：输出有限个周期的PWM波" class="headerlink" title="高级定时器实验：输出有限个周期的PWM波"></a>高级定时器实验：输出有限个周期的PWM波</h3></li><li><h4 id="需求描述-5"><a href="#需求描述-5" class="headerlink" title="需求描述"></a>需求描述</h4></li></ol><p>用寄存器实现。输出5个周期的PWM波，频率2Hz，观察发光二极管闪烁5次，或者用示波器观察波形。</p><p><strong>需求实现思路：</strong> 使用高级定时器的重复计数器，当计数器溢出时，在溢出中断中停止定时器工作。重复计数器寄存器的值设置为4，即可输出5个周期的PWM波，发光二极管会闪烁5次。</p><ol><li><h4 id="硬件电路设计-4"><a href="#硬件电路设计-4" class="headerlink" title="硬件电路设计"></a>硬件电路设计</h4></li></ol><p>设置高级定时器TIM1的CH1。</p><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172553413981446.png" alt="img"></p><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172553413981447.png" alt="img"></p><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172553413981448.png" alt="img"></p><ol><li><h4 id="软件设计（寄存器）-5"><a href="#软件设计（寄存器）-5" class="headerlink" title="软件设计（寄存器）"></a>软件设计（寄存器）</h4></li><li><h5 id="main-c-11"><a href="#main-c-11" class="headerlink" title="main.c"></a>main.c</h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Driver_USART.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Driver_TIM1.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Driver_USART1_Init();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;高级定时器实验开始...\r\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Driver_TIM1_Init();</span><br><span class="line">    Driver_TIM1_Start();</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h5 id="Driver-TIM1-h"><a href="#Driver-TIM1-h" class="headerlink" title="Driver_TIM1.h"></a>Driver_TIM1.h</h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __DRIVER_TIM1_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __DRIVER_TIM1_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_TIM1_Init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_TIM1_Start</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><ol><li><h5 id="Driver-TIM1-c"><a href="#Driver-TIM1-c" class="headerlink" title="Driver_TIM1.c"></a>Driver_TIM1.c</h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Driver_TIM1.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Driver_USART.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_TIM1_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 开启时钟 */</span></span><br><span class="line">    <span class="comment">/* 1.1 TIM1的时钟 */</span></span><br><span class="line">    RCC-&gt;APB2ENR |= RCC_APB2ENR_TIM1EN;</span><br><span class="line">    <span class="comment">/* 1.2 GPIO的时钟 */</span></span><br><span class="line">    RCC-&gt;APB2ENR |= RCC_APB2ENR_IOPAEN;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 2. 给PA8配置复用推挽输出 CNF=10  MODE=11*/</span></span><br><span class="line">    GPIOA-&gt;CRH |= (GPIO_CRH_CNF8_1 | GPIO_CRH_MODE8);</span><br><span class="line">    GPIOA-&gt;CRH &amp;= ~GPIO_CRH_CNF8_0;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 3. 时基单元的配置  频率是2Hz的PWM*/</span></span><br><span class="line">    <span class="comment">/* 3.1 预分频 */</span></span><br><span class="line">    TIM1-&gt;PSC = <span class="number">7200</span> - <span class="number">1</span>;</span><br><span class="line">    <span class="comment">/* 3.2 自动重装载寄存器的值 */</span></span><br><span class="line">    TIM1-&gt;ARR = <span class="number">5000</span> - <span class="number">1</span>;</span><br><span class="line">    <span class="comment">/* 3.3 计数方向 0=向上计数 1=向下计数*/</span></span><br><span class="line">    TIM1-&gt;CR1 &amp;= ~TIM_CR1_DIR;</span><br><span class="line">    <span class="comment">/* 3.4 重复寄存器 RCR=4 表示CNT计数器溢出5次,才会产生更新时间(中断)*/</span></span><br><span class="line">    TIM1-&gt;RCR = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 4. 输出部分配置 */</span></span><br><span class="line">    <span class="comment">/* 4.1 把通道1配置为输出*/</span></span><br><span class="line">    TIM1-&gt;CCMR1 &amp;= ~TIM_CCMR1_CC1S;</span><br><span class="line">    <span class="comment">/* 4.2 配置捕获比较寄存器的值 */</span>;</span><br><span class="line">    TIM1-&gt;CCR1 = <span class="number">2500</span>;<span class="comment">/* 占空比 50% */</span></span><br><span class="line">    <span class="comment">/* 4.3 输出的极性 0=高电平有效 1=低电平有效 */</span>;</span><br><span class="line">    TIM1-&gt;CCER &amp;= TIM_CCER_CC1P;</span><br><span class="line">    <span class="comment">/* 4.4 使能通道1 */</span>;</span><br><span class="line">    TIM1-&gt;CCER |= TIM_CCER_CC1E;</span><br><span class="line">    <span class="comment">/* 4.5 配置通道1输出模式: PWM1=110   */</span></span><br><span class="line">    TIM1-&gt;CCMR1 |= (TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1);</span><br><span class="line">    TIM1-&gt;CCMR1 &amp;= ~TIM_CCMR1_OC1M_0;</span><br><span class="line">    <span class="comment">/* 4.6 主输出使能(只有高级定时器需要配置)*/</span></span><br><span class="line">    TIM1-&gt;BDTR |= TIM_BDTR_MOE;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 4.7 防止一启动就进入更新中断: 1. 使用UG位产生一个更新事件 2.然后预分频和重复计数器的值更新到影子寄存器 */</span>;</span><br><span class="line">    TIM1-&gt;EGR |= TIM_EGR_UG;</span><br><span class="line">    TIM1-&gt;SR &amp;= ~TIM_SR_UIF;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 5. 配置中断 */</span></span><br><span class="line">    <span class="comment">/* 5.1 定时器更新中断使能 */</span></span><br><span class="line">    TIM1-&gt;DIER |= TIM_DIER_UIE;</span><br><span class="line">    <span class="comment">/* 5.2 NVIC的配置 */</span></span><br><span class="line">    NVIC_SetPriorityGrouping(<span class="number">3</span>);</span><br><span class="line">    NVIC_SetPriority(TIM1_UP_IRQn, <span class="number">3</span>);</span><br><span class="line">    NVIC_EnableIRQ(TIM1_UP_IRQn);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_TIM1_Start</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    TIM1-&gt;CR1 |= TIM_CR1_CEN;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_TIM1_Stop</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    TIM1-&gt;CR1 &amp;= ~TIM_CR1_CEN;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">TIM1_UP_IRQHandler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 停掉计数器</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a\r\n&quot;</span>);</span><br><span class="line">    TIM1-&gt;SR &amp;= ~TIM_SR_UIF;</span><br><span class="line">    Driver_TIM1_Stop();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h4 id="软件设计（HAL库）-5"><a href="#软件设计（HAL库）-5" class="headerlink" title="软件设计（HAL库）"></a>软件设计（HAL库）</h4></li><li><h5 id="STM32CubeMX配置-2"><a href="#STM32CubeMX配置-2" class="headerlink" title="STM32CubeMX配置"></a>STM32CubeMX配置</h5></li></ol><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172553413981449.png" alt="img"></p><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172553413981450.png" alt="img"></p><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172553413981451.png" alt="img"></p><ol><li><h5 id="添加其他代码-2"><a href="#添加其他代码-2" class="headerlink" title="添加其他代码"></a>添加其他代码</h5></li><li><h6 id="tim-c-5"><a href="#tim-c-5" class="headerlink" title="tim.c"></a>tim.c</h6></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN 1 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_TIM_PeriodElapsedCallback</span><span class="params">(TIM_HandleTypeDef *htim)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 关闭计数器 */</span></span><br><span class="line">    <span class="keyword">if</span> (htim-&gt;Instance == TIM1)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//HAL_TIM_PWM_Stop(&amp;htim1, TIM_CHANNEL_1);</span></span><br><span class="line">        </span><br><span class="line">       <span class="comment">//这三行做的事与 HAL_TIM_PWM_Stop 一样，少一个步骤都不行，这样才能保持 CubeMX 设置的空闲状态</span></span><br><span class="line">       TIM1-&gt;CCER &amp;= ~TIM_CCER_CC1E;</span><br><span class="line">       TIM1-&gt;BDTR &amp;= ~TIM_BDTR_MOE;</span><br><span class="line">       htim-&gt;Instance-&gt;CR1 &amp;= ~TIM_CR1_CEN;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* USER CODE END 1 */</span></span><br></pre></td></tr></table></figure><p>当重复寄存器向下递减5次后就进入中断，此时要停掉，不然重复寄存器递减后还会以原来初值重新循环递减， 导致LED灯一直闪。</p><p>有个疑问？为啥<strong><code>HAL_TIM_PWM_Stop</code></strong>有时候没有效果？</p><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172553413981452.png" alt="img"></p><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172553413981453.png" alt="img"></p><p><strong>因此想停计数器，必须先把对应通道关掉。</strong></p><ol><li><h6 id="main-c-12"><a href="#main-c-12" class="headerlink" title="main.c"></a>main.c</h6></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_Init();</span><br><span class="line">    SystemClock_Config();</span><br><span class="line">    MX_GPIO_Init();</span><br><span class="line">    MX_TIM1_Init();</span><br><span class="line">    MX_USART1_UART_Init();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*初始化的时候 UG已经被置位.  先清除中断标志位,防止一启动就进入中断 */</span></span><br><span class="line">     __HAL_TIM_CLEAR_IT(&amp;htim1, TIM_IT_UPDATE);</span><br><span class="line">    <span class="comment">/* 启用更新中断 */</span></span><br><span class="line">    __HAL_TIM_ENABLE_IT(&amp;htim1, TIM_IT_UPDATE);</span><br><span class="line">    </span><br><span class="line">    HAL_TIM_PWM_Start(&amp;htim1, TIM_CHANNEL_1);</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用更新中断来实现需求，因此需要提前产生更新事件并将标志位清除。</p><p>一方面是为了不让第一次中断来的过快，另一方面<strong>REP</strong>寄存器也有影子寄存器，不提前产生更新事件将REP寄存器的值更新到对应影子寄存器，REP的默认值就是0，此时就瞬间产生更新事件（重复次数寄存器溢出才会产生更新事件），进入更新中断。</p><p><strong>举例：</strong></p><p>定时器里的计数器里的值就是过了一定时间后，此时的计数值！！</p><p>计数器的值通常是指定时器计数器的当前数值，该数值代表定时器自启动以来所经过的计数周期数。它既不是时间也不是频率，但它与时间和频率都有直接关系。</p><p>为了更清晰地解释这一点，我们可以进行一个详细的计算，结合你的定时器配置来说明：</p><ol><li><strong>基准</strong> <strong>时钟频率</strong> ：72 MHz</li><li><strong>预\</strong>*<em>分频器<strong> </strong>值*</em> ：7200</li><li><strong>重装载寄存器值</strong> ：100</li></ol><p>首先，我们确定定时器的计数频率：</p><p>计数频率 = 基准时钟频率 \ 预分频器值</p><p>将基准时钟频率和预分频器值代入公式：</p><p>计数频率 = 72MHZ \ 7200= 10,000Hz</p><p>这意味着定时器每秒钟计数10,000次。</p><p>接下来，重装载寄存器值决定了定时器在达到该值后重新从0开始计数的周期。重装载寄存器值为100意味着定时器计数从0到100（实际上是从0到99，总共100个计数周期），然后自动重置。</p><p>当重装载寄存器值为100时，一个完整的计数周期所花费的时间为：</p><p>将之前计算出的计数频率和重装载寄存器值代入公式：</p><p>一个计数周期的时间 = 10,000Hz \ 100 = 0.01秒 = 10毫秒</p><p>因此，每10毫秒定时器会从0计数到100（实际上是从0到99）。</p><p>此时计数器里的值就是10。</p><p>所以，计数器的值本身不是直接的时间或频率，但通过定时器的配置（基准时钟、预分频器、重装载寄存器值等），我们可以将计数值转换为相应的时间间隔。这就解释了计数器值如何与时间和频率相关联。</p><ol><li><h1 id="DMA直接存储访问"><a href="#DMA直接存储访问" class="headerlink" title="DMA直接存储访问"></a>DMA直接存储访问</h1></li><li><h2 id="DMA介绍"><a href="#DMA介绍" class="headerlink" title="DMA介绍"></a>DMA介绍</h2></li></ol><p>直接存储器存取（direct memory access，DMA）用来提供在外设和存储器之间或者存储器和存储器之间的高速数据传输。无须CPU干预，数据可以通过DMA快速地移动，这就节省了CPU的资源来做其他操作。</p><p>2个DMA控制器有12个通道（DMA1有7个通道，DMA2有5个通道，一般已经被硬件写死），每个通道专门用来管理来自于一个或多个外设对存储器访问的请求（但不能同时处理多个请求）。还有一个仲裁器来协调各个DMA请求的优先权。</p><p>DMA控制器和Cortex™-M3核心共享系统数据总线，执行直接存储器数据传输。当CPU和DMA同时访问相同的目标（RAM或外设）时，DMA请求会暂停CPU访问系统总线达若干个周期，总线仲裁器执行循环调度，以保证CPU至少可以得到一半的系统总线（存储器或外设）带宽。</p><p>要注意的是DMA2只存在于大容量产品和互联型产品中（看手册）。</p><p><strong>严格来说，</strong> <strong>DMA\</strong>*<em>不算外设，而是系统核心。*</em></p><ol><li><h2 id="DMA框图"><a href="#DMA框图" class="headerlink" title="DMA框图"></a>DMA框图</h2></li></ol><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172553413981454.png" alt="img"></p><ol><li>DMA请求</li></ol><p>如果外设要想通过DMA来传输数据，必须先给DMA控制器发送DMA请求，DMA控制器收到请求信号之后，控制器会给外设一个应答信号，当外设得到控制器的应答信号后，外设会立即释放它的请求。</p><p>DMA有DMA1和DMA2两个控制器，DMA1有7个通道，DMA2有5个通道，不同DMA控制器的通道对应着不同的外设请求，这决定了我们在软件编程上该怎么设置。</p><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172553413981455.png" alt="img"></p><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172553413981456.png" alt="img"></p><ol><li>通道</li></ol><p>DMA具有12个独立可编程的通道，其中 DMA1有7个通道，DMA2有5个通道，每个通道对应不同的外设的DMA请求。虽然每个通道可以接收多个外设的请求，但是<strong>同一时间只能接收一个</strong>，不能同时接收多个。</p><ol><li>仲裁器</li></ol><p>当发生多个DMA通道请求时，就意味着有先后响应处理的顺序问题，这个就由仲裁器管理。仲裁器管理DMA通道请求分为两个阶段。</p><p><strong>第一阶段属于软件阶段，可以在DMA_CCRx寄存器中设置，有4个等级：非常高、高、中和低四个优先级。</strong></p><p><strong>第二阶段属于硬件阶段，如果两个或以上的\</strong>**DMA**<em>\</em>通道请求设置的软件优先级一样，则他们优先级取决于通道编号，编号越低优先权越高，比如通道 0 高于通道 1。**</p><p>在大容量产品和互联型产品中，DMA1控制器拥有高于DMA2控制器的优先级。</p><ol><li>传输方向</li></ol><p><strong>存储器到外设，外设到存储器，存储器到存储器。这里的存储器指的是\</strong>**ROM**<em>\</em>和<strong> </strong>RAM<strong> </strong>。注意*<em>\</em>*DMA**<em>\</em>没有办法把数据从RAM传输到ROM（flash）。**</p><ol><li><h2 id="DMA案例1：ROM到RAM"><a href="#DMA案例1：ROM到RAM" class="headerlink" title="DMA案例1：ROM到RAM"></a>DMA案例1：ROM到RAM</h2></li><li><h3 id="需求描述-6"><a href="#需求描述-6" class="headerlink" title="需求描述"></a>需求描述</h3></li></ol><p>使用寄存器操作把ROM中的数据通过DMA传输到RAM，然后把数据通过printf发送到串口验证是否正确。</p><p>DMA传输不涉及外设，所以通道随便选。我们选DMA1的1通道。</p><ol><li><h3 id="软件设计（寄存器）-6"><a href="#软件设计（寄存器）-6" class="headerlink" title="软件设计（寄存器）"></a>软件设计（寄存器）</h3><p><a href="https://xiza3i1x6q4.feishu.cn/wiki/XjvywD2iwimlXBkDibScsajWnDf">DMA案例从ROM到RAM用到的寄存器详解</a></p></li><li><h4 id="main-c-13"><a href="#main-c-13" class="headerlink" title="main.c"></a>main.c</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Driver_USART.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Driver_TIM1.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Driver_DMA.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">uint8_t</span> src[] = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>&#125;;</span><br><span class="line"><span class="type">uint8_t</span> des[<span class="number">4</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Driver_USART1_Init();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;DMA实验: ROM-&gt;RAM...\r\n&quot;</span>);</span><br><span class="line">     </span><br><span class="line">    Driver_DMA1_Init();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;src=%p, des=%p\r\n&quot;</span>, src, des);</span><br><span class="line">    </span><br><span class="line">    Driver_DMA1_TransimitData((<span class="type">uint32_t</span>)&amp;src[<span class="number">0</span>], (<span class="type">uint32_t</span>)&amp;des[<span class="number">0</span>], <span class="number">8</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(isTransmitFinished == <span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d, %d, %d, %d\r\n&quot;</span>, des[<span class="number">0</span>], des[<span class="number">1</span>], des[<span class="number">2</span>], des[<span class="number">3</span>]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">            </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h4 id="Driver-DMA-h"><a href="#Driver-DMA-h" class="headerlink" title="Driver_DMA.h"></a>Driver_DMA.h</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __DRIVER_DMA_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __DRIVER_DMA_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="type">uint8_t</span> isTransmitFinished;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_DMA1_Init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_DMA1_TransimitData</span><span class="params">(<span class="type">uint32_t</span> srcAddr, <span class="type">uint32_t</span> desAddr, <span class="type">uint16_t</span> dataLen)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><ol><li><h4 id="Driver-DMA-c"><a href="#Driver-DMA-c" class="headerlink" title="Driver_DMA.c"></a>Driver_DMA.c</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Driver_DMA.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 初始化DMA1_Channel1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_DMA1_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 开启 DAM 时钟 */</span></span><br><span class="line">    RCC-&gt;AHBENR |= RCC_AHBENR_DMA1EN;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 2. DMA相关的配置 */</span></span><br><span class="line">    <span class="comment">/* 2.1 DMA方向: 从存储器(ROM)到存储器(RAM) . 通道随意*/</span></span><br><span class="line">    DMA1_Channel1-&gt;CCR &amp;= ~DMA_CCR1_DIR;<span class="comment">// 0: 从外设读 1:从存储器读</span></span><br><span class="line">    DMA1_Channel1-&gt;CCR |= DMA_CCR1_MEM2MEM;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 2.2 设置存储器和外设的数据宽度:  8位(一个字节) 16位(半字) 32位(字) */</span></span><br><span class="line">    DMA1_Channel1-&gt;CCR &amp;= ~DMA_CCR1_PSIZE;<span class="comment">/* 00:8位 01:16位 10:32位 11:保留 */</span></span><br><span class="line">    DMA1_Channel1-&gt;CCR &amp;= ~DMA_CCR1_MSIZE;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 2.3 设置外设和存储器的地址是否自增 */</span></span><br><span class="line">    DMA1_Channel1-&gt;CCR |= DMA_CCR1_PINC;<span class="comment">/* 外设地址自增 */</span></span><br><span class="line">    DMA1_Channel1-&gt;CCR |= DMA_CCR1_MINC;<span class="comment">/* 存储器地址自增 */</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 2.4 开启传输完成的中断 */</span></span><br><span class="line">    DMA1_Channel1-&gt;CCR |= DMA_CCR1_TCIE;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 2.5 NVIC的设置 */</span></span><br><span class="line">    NVIC_SetPriorityGrouping(<span class="number">3</span>);</span><br><span class="line">    NVIC_SetPriority(DMA1_Channel1_IRQn, <span class="number">3</span>);</span><br><span class="line">    NVIC_EnableIRQ(DMA1_Channel1_IRQn);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 启动DMA传输数据</span></span><br><span class="line"><span class="comment"> * @param &#123;uint32_t&#125; srcAddr 源地址</span></span><br><span class="line"><span class="comment"> * @param &#123;uint32_t&#125; desAddr 目的地址</span></span><br><span class="line"><span class="comment"> * @param &#123;uint16_t&#125; dataLen 要传输的数据长度</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_DMA1_TransimitData</span><span class="params">(<span class="type">uint32_t</span> srcAddr, <span class="type">uint32_t</span> desAddr, <span class="type">uint16_t</span> dataLen)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 设置外设地址 */</span></span><br><span class="line">    DMA1_Channel1-&gt;CPAR = srcAddr;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 2. 设置存储器地址 */</span></span><br><span class="line">    DMA1_Channel1-&gt;CMAR = desAddr;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 3. 设置要传输的数据量 */</span></span><br><span class="line">    DMA1_Channel1-&gt;CNDTR = dataLen;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 4. 开启通道,开始传输 */</span></span><br><span class="line">    DMA1_Channel1-&gt;CCR |= DMA_CCR1_EN;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> isTransmitFinished = <span class="number">0</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">DMA1_Channel1_IRQHandler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 所有DMA通道共用一个ISR标志位 */</span></span><br><span class="line">    <span class="keyword">if</span> (DMA1-&gt;ISR &amp; DMA_ISR_TCIF1)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* 清除传输完成中断完成标志位 */</span></span><br><span class="line">        DMA1-&gt;IFCR |= DMA_IFCR_CGIF1;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* 通道不需要了,可以关闭 */</span></span><br><span class="line">        DMA1_Channel1-&gt;CCR &amp;= ~DMA_CCR1_EN;</span><br><span class="line">        isTransmitFinished = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RAM当成外设也是可以的，需要改两个地方，要改都改，必须保证数据从ROM读，写到RAM。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">DMA1_Channel1-&gt;CCR |= DMA_CCR1_DIR;<span class="comment">// 0: 从外设读 1:从存储器读</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 1. 设置外设地址 */</span></span><br><span class="line">    DMA1_Channel1-&gt;CPAR = desAddr;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 2. 设置存储器地址 */</span></span><br><span class="line">    DMA1_Channel1-&gt;CMAR = srcAddr;</span><br></pre></td></tr></table></figure><ol><li><h3 id="软件设计（HAL库）-6"><a href="#软件设计（HAL库）-6" class="headerlink" title="软件设计（HAL库）"></a>软件设计（HAL库）</h3></li><li><h4 id="DMA配置"><a href="#DMA配置" class="headerlink" title="DMA配置"></a>DMA配置</h4></li></ol><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172553413981457.png" alt="img"></p><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172553413981458.png" alt="img"></p><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172553413981459.png" alt="img"></p><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172553413981560.png" alt="img"></p><ol><li><h4 id="DMA初始化代码"><a href="#DMA初始化代码" class="headerlink" title="DMA初始化代码"></a>DMA初始化代码</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">MX_DMA_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* DMA controller clock enable */</span></span><br><span class="line">    __HAL_RCC_DMA1_CLK_ENABLE();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* Configure DMA request hdma_memtomem_dma1_channel1 on DMA1_Channel1 */</span></span><br><span class="line">    hdma_memtomem_dma1_channel1.Instance = DMA1_Channel1;</span><br><span class="line">    hdma_memtomem_dma1_channel1.Init.Direction = DMA_MEMORY_TO_MEMORY;</span><br><span class="line">    hdma_memtomem_dma1_channel1.Init.PeriphInc = DMA_PINC_ENABLE;</span><br><span class="line">    hdma_memtomem_dma1_channel1.Init.MemInc = DMA_MINC_ENABLE;</span><br><span class="line">    hdma_memtomem_dma1_channel1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;</span><br><span class="line">    hdma_memtomem_dma1_channel1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;</span><br><span class="line">    hdma_memtomem_dma1_channel1.Init.Mode = DMA_NORMAL;</span><br><span class="line">    hdma_memtomem_dma1_channel1.Init.Priority = DMA_PRIORITY_LOW;</span><br><span class="line">    <span class="keyword">if</span> (HAL_DMA_Init(&amp;hdma_memtomem_dma1_channel1) != HAL_OK)</span><br><span class="line">    &#123;</span><br><span class="line">        Error_Handler();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h4 id="具体实现代码"><a href="#具体实现代码" class="headerlink" title="具体实现代码"></a>具体实现代码</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">__IO <span class="type">uint8_t</span> isFinished = <span class="number">0</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">dmaCompleteCallBack</span><span class="params">(DMA_HandleTypeDef *hdma)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a\r\n&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (hdma-&gt;Instance == DMA1_Channel1)</span><br><span class="line">    &#123;</span><br><span class="line">        isFinished = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;b\r\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">uint8_t</span> src[] = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>&#125;;</span><br><span class="line"><span class="type">uint8_t</span> des[<span class="number">4</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_Init();</span><br><span class="line">    SystemClock_Config();</span><br><span class="line">    MX_GPIO_Init();</span><br><span class="line">    MX_DMA_Init();</span><br><span class="line">    MX_USART1_UART_Init();</span><br><span class="line">    <span class="comment">/* 注册中断回调函数 */</span></span><br><span class="line">    HAL_DMA_RegisterCallback(&amp;hdma_memtomem_dma1_channel1, HAL_DMA_XFER_CPLT_CB_ID, dmaCompleteCallBack);</span><br><span class="line">    </span><br><span class="line">    HAL_DMA_Start_IT(&amp;hdma_memtomem_dma1_channel1, (<span class="type">uint32_t</span>)src, (<span class="type">uint32_t</span>)des, <span class="number">4</span>);</span><br><span class="line">    <span class="keyword">while</span> (isFinished == <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\r\n&quot;</span>, des);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h2 id="DMA实验2：RAM到外设（串口）"><a href="#DMA实验2：RAM到外设（串口）" class="headerlink" title="DMA实验2：RAM到外设（串口）"></a>DMA实验2：RAM到外设（串口）</h2></li><li><h3 id="需求描述-7"><a href="#需求描述-7" class="headerlink" title="需求描述"></a>需求描述</h3></li></ol><p>使用寄存器实现把RAM中的数据直接传输到usart1的Tx引脚，然后数据被发送到电脑端。</p><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172553413981561.png" alt="img"></p><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172553413981562.png" alt="img"></p><p>由于不同的通道对应着不同的外设，根据上表知道，我们应该选择DMA1的通道4。</p><ol><li><h3 id="软件设计（寄存器）-7"><a href="#软件设计（寄存器）-7" class="headerlink" title="软件设计（寄存器）"></a>软件设计（寄存器）</h3></li><li><h4 id="main-c-14"><a href="#main-c-14" class="headerlink" title="main.c"></a>main.c</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Driver_USART.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Driver_TIM1.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Driver_DMA.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Delay.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> src[] = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Driver_USART1_Init();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;DMA实验: RAM-&gt;USART...\r\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    Driver_DMA1_Init();</span><br><span class="line">    Delay_ms(<span class="number">10</span>);</span><br><span class="line">    Driver_DMA1_TransimitData((<span class="type">uint32_t</span>)&amp;src[<span class="number">0</span>], (<span class="type">uint32_t</span>)(&amp;(USART1-&gt;DR)), <span class="number">4</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加延时函数的目的：防止串口接收数据太快，导致丢失数据，或者判断标志位<strong>TXE</strong>也可以。</p><ol><li><h4 id="Driver-DMA-h-1"><a href="#Driver-DMA-h-1" class="headerlink" title="Driver_DMA.h"></a>Driver_DMA.h</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __DRIVER_DMA_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __DRIVER_DMA_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_DMA1_Init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_DMA1_TransimitData</span><span class="params">(<span class="type">uint32_t</span> srcAddr, <span class="type">uint32_t</span> desAddr, <span class="type">uint16_t</span> dataLen)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><ol><li><h4 id="Driver-DMA-c-1"><a href="#Driver-DMA-c-1" class="headerlink" title="Driver_DMA.c"></a>Driver_DMA.c</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Driver_DMA.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 初始化DMA1_Channel4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_DMA1_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 开启 DAM 时钟 */</span></span><br><span class="line">    RCC-&gt;AHBENR |= RCC_AHBENR_DMA1EN;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 2. DMA相关的配置 */</span></span><br><span class="line">    <span class="comment">/* 2.1 DMA方向: 从存储器(RAM)到串口(外设) . 通道4*/</span></span><br><span class="line">    DMA1_Channel4-&gt;CCR |= DMA_CCR4_DIR;<span class="comment">// 0: 从外设读 1:从存储器读</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 2.2 设置存储器和外设的数据宽度:  8位(一个字节) 16位(半字) 32位(字) */</span></span><br><span class="line">    DMA1_Channel4-&gt;CCR &amp;= ~DMA_CCR4_PSIZE;<span class="comment">/* 00:8位 01:16位 10:32位 11:保留 */</span></span><br><span class="line">    DMA1_Channel4-&gt;CCR &amp;= ~DMA_CCR4_MSIZE;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 2.3 设置外设和存储器的地址是否自增 */</span></span><br><span class="line">    DMA1_Channel4-&gt;CCR &amp;= ~DMA_CCR4_PINC;<span class="comment">/* 串口外设地址不能自增 */</span></span><br><span class="line">    DMA1_Channel4-&gt;CCR |= DMA_CCR4_MINC;<span class="comment">/* 存储器地址自增 */</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 2.4 开启传输完成的中断 */</span></span><br><span class="line">    DMA1_Channel4-&gt;CCR |= DMA_CCR4_TCIE;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 2.5 使能串口的DMA传输 */</span></span><br><span class="line">    USART1-&gt;CR3 |= USART_CR3_DMAT;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 2.6 开启循环模式 */</span></span><br><span class="line">    DMA1_Channel4-&gt;CCR |= DMA_CCR4_CIRC;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 2.5 NVIC的设置 */</span></span><br><span class="line">    NVIC_SetPriorityGrouping(<span class="number">3</span>);</span><br><span class="line">    NVIC_SetPriority(DMA1_Channel4_IRQn, <span class="number">3</span>);</span><br><span class="line">    NVIC_EnableIRQ(DMA1_Channel4_IRQn);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 启动DMA传输数据</span></span><br><span class="line"><span class="comment"> * @param &#123;uint32_t&#125; srcAddr 源地址</span></span><br><span class="line"><span class="comment"> * @param &#123;uint32_t&#125; desAddr 目的地址</span></span><br><span class="line"><span class="comment"> * @param &#123;uint16_t&#125; dataLen 要传输的数据长度</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_DMA1_TransimitData</span><span class="params">(<span class="type">uint32_t</span> srcAddr, <span class="type">uint32_t</span> desAddr, <span class="type">uint16_t</span> dataLen)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 设置外设地址 */</span></span><br><span class="line">    DMA1_Channel4-&gt;CPAR = desAddr;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 2. 设置存储器地址 */</span></span><br><span class="line">    DMA1_Channel4-&gt;CMAR = srcAddr;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 3. 设置要传输的数据量 */</span>;</span><br><span class="line">    DMA1_Channel4-&gt;CNDTR = dataLen;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 4. 开启通道,开始传输 */</span></span><br><span class="line">    DMA1_Channel4-&gt;CCR |= DMA_CCR4_EN;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>中断可以丢了，毕竟我们直接用DMA将数据送到串口DR寄存器，直接就能发送了，不需要用<strong>printf</strong>函数。但是DMA中断默认是开的，不要关掉，关掉会有影响。</p><h3 id="为什么配置-DMA-不需要使能-GPIO"><a href="#为什么配置-DMA-不需要使能-GPIO" class="headerlink" title="为什么配置 **DMA* 不需要使能 *GPIO**"></a><strong>为什么配置 *</strong>*DMA*<strong><em> 不需要使能 *</em></strong>GPIO**</h3><ol><li><strong>DMA**</strong> 本身不直接操控 <strong> </strong>GPIO** ：DMA 的工作是基于内存和外设之间的数据传输，不涉及直接操控 GPIO 的电平或方向。DMA 配置主要关注数据传输过程中的配置，而不是引脚电平控制。</li><li><strong>GPIO</strong> <strong> 的作用是确保外设的引脚配置正确</strong> ：在使用 DMA 之前，需要确保与 DMA 交互的外设的 GPIO 引脚被正确配置。例如，如果你要使用 DMA 从一个 ADC 读取数据，必须确保 ADC 的引脚被配置为模拟输入模式。但是，这些配置是为了确保外设的引脚能够正确地进行数据采样或传输，与 DMA 的直接配置无关。</li></ol><p><strong>因此，用到\</strong>**GPIO**<em>\</em>端口*<em>\</em>*复用功能的外设要单独配置。不和**<em>\</em>DMA*<em>*<em>配置在一起。</em></em></p><ol><li><h3 id="软件设计（HAL库）-7"><a href="#软件设计（HAL库）-7" class="headerlink" title="软件设计（HAL库）"></a>软件设计（HAL库）</h3></li><li><h4 id="配置DMA"><a href="#配置DMA" class="headerlink" title="配置DMA"></a>配置DMA</h4></li></ol><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172553413981563.png" alt="img"></p><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172553413981564.png" alt="img"></p><ol><li><h4 id="增加的代码"><a href="#增加的代码" class="headerlink" title="增加的代码"></a>增加的代码</h4></li><li><h5 id="main-c-15"><a href="#main-c-15" class="headerlink" title="main.c"></a>main.c</h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint8_t</span> src[] = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_Init();</span><br><span class="line">    SystemClock_Config();</span><br><span class="line">    MX_GPIO_Init();</span><br><span class="line">    MX_DMA_Init();</span><br><span class="line">    MX_USART1_UART_Init();</span><br><span class="line">    </span><br><span class="line">    HAL_UART_Transmit_DMA(&amp;huart1, src, <span class="number">5</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2></li></ol><p>STM32的DMA（Direct Memory Access，直接内存访问）控制器在许多场景下都非常有用，特别是在需要高效数据传输和处理的应用中。以下是一些常见的STM32 DMA使用场景：</p><p>1.数据传输：外设到内存：例如，从ADC（模数转换器）或者其他外设（如UART、SPI）直接将数据传输到内存，而无需CPU介入。这种情况下，DMA可以大大减轻CPU的负担，提高系统的响应速度。内存到外设：将数据从内存传输到外设，例如向DAC（数字模拟转换器）发送音频数据或向LCD显示器发送图形数据。</p><p>2.数据处理：DMA可以用于在内存之间进行快速的数据移动和处理，例如在缓冲区之间进行数据交换或数据处理操作，而无需CPU的直接干预。</p><p>3.存储器管理：在存储器管理方面，DMA可以用于高效地执行内存拷贝、填充和初始化操作，这些操作通常需要<strong>大量数据</strong>的处理。</p><p>4.高速通信：在需要大量数据通过高速接口（如USB、Ethernet等）传输的应用中，DMA可以有效地管理数据流，确保数据的<strong>实时传输和处理</strong>。</p><p>5.中断处理：DMA可以与中断结合使用，以处理大量数据时的异步通知和事件响应，从而减少CPU的负载，提高系统的并发处理能力。</p><p>6.多通道操作：STM32的DMA控制器通常<strong>支持多个通道</strong>，可以<strong>同时管理多个数据流</strong>，这在需要同时处理多个数据源或目标时非常有用。</p><p>7.功耗优化：通过使用DMA，可以<strong>减少\</strong>**CPU**<em>\</em>频繁唤醒和处理数据的次数，从而降低系统的功耗**，特别是在需要长时间运行的电池供电设备中尤为重要。</p><p>总之，STM32的DMA功能非常灵活且适用于各种需要高效数据传输和处理的场景，能够显著提升系统性能和效率，同时减少CPU的负载。</p><ol><li><h1 id="ADC（模数转换）"><a href="#ADC（模数转换）" class="headerlink" title="ADC（模数转换）"></a>ADC（模数转换）</h1></li><li><h2 id="ADC概述"><a href="#ADC概述" class="headerlink" title="ADC概述"></a>ADC概述</h2></li><li><h3 id="ADC介绍"><a href="#ADC介绍" class="headerlink" title="ADC介绍"></a>ADC介绍</h3></li></ol><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172553413981565.png" alt="img"></p><ul><li>VDDA：模拟电源正。</li><li>VSSA：模拟电源负。</li><li>VREF+：模拟参考电压正。</li><li>VREF-：模拟参考电压负。</li></ul><p>在实际电路设计中：</p><ol><li>一般VREF+和VDDA接3.3V。</li><li>一般VREF-和VSSA接GND。</li></ol><p>因此，ADC测量范围是 <strong>[0,3.3]</strong> 。</p><ul><li><strong>输入通道：</strong></li></ul><ol><li>用来输入模拟电压的通道，多达18个。</li><li>16个外部通道 <strong>（ADCx_IN0 - ADCx_IN15）</strong> ，对应16个IO口。</li><li>内部温度传感器（测量芯片温度），通道16。</li><li>内部参考电压，通道17。<ol><li>规则通道：<ul><li>规则通道组内的通道转换完成后，会立刻将转换后的结果存储到规则通道数据寄存器里。</li><li>规则组最多允许16个通道。</li><li><strong>规则通道数据寄存器只有一个，当多路\</strong>**ADC**<em>\</em>通道要转换时，规则通道数据寄存器的值应及时读走，否则后面通道转换值会覆盖上次值。**</li><li>一般会使用DMA直接将数据寄存器的值读走。</li></ul></li><li>注入通道：<ul><li>注入通道组内的通道转换完成后，会立刻将转换的结果存储到注入通道数据寄存器里。</li><li>注入组最多允许4个通道。</li><li>注入通道数据寄存器有4个，不用担心数据被覆盖的问题。</li></ul></li><li>规则通道和注入通道：<ul><li><strong>注入通道的转换可以打断规则通道的转换。</strong></li><li>在实际使用中，<strong>规则组</strong>已经够用，再配合DMA更好。</li></ul></li></ol></li></ol><ul><li>触发源：<ul><li>软件触发：操作控制寄存器<strong>ADC_CR2</strong>的相关位。</li><li>硬件触发：使用定时器的<strong>TRGO</strong>触发。</li></ul></li></ul><p>在实际使用中，<strong>软件触发基本够用</strong>。</p><ul><li><p>转换方式：</p><ul><li>ADC_CR1寄存器SCAN：</li></ul></li></ul><pre><code>扫描模式（Scan Mode）- 开启扫描模式：多通道，顺序扫描，挨个转换。- 关闭扫描模式：只能转换通道组中的第一个通道。</code></pre><ul><li>ADC_CR2寄存器CONT：</li></ul><pre><code>连续转换模式（Continuous Conversation）- 开启连续转换模式：通道组内转换一轮后，继续转换下一轮， **不会停** 。- 关闭连续转换模式：通道组内转换一轮后，停止转换，等待下次启动， **单次转换** 。  **如果同时关闭扫描模式和连续转换模式，相当于歌单单曲播放后停止，如果同时打开扫描模式和连续转换模式，相当于歌单列表循环。**</code></pre><ol><li><h3 id="STM32的ADC"><a href="#STM32的ADC" class="headerlink" title="STM32的ADC"></a>STM32的ADC</h3></li></ol><p>STM32F103系列提供了3个ADC，精度为12位，每个ADC最多有16个通道和2个内部信号源。</p><p>STM32F103的ADC是一种逐次逼近型模拟数字转换器。各通道的A/D转换可以单次、连续、扫描或间断模式执行。ADC的结果可以左对齐或右对齐方式存储在16位数据寄存器中。模拟看门狗特性允许应用程序检测输入电压是否超出用户定义的高/低阀值。ADC的输入时钟不得超过14MHz，它是由PCLK2经分频产生。</p><p>两个阶段：</p><ul><li>采样阶段：<ul><li>模拟量的信号是连续的，无法区分开，甚至可以无限细分。因此，如果我们将模拟量交付数字系统处理时，在时间维度上，无法取便每个时间，只能隔一段时间，采集不同的时间点的数据（离散），只要采样频率达到要求（ <strong>采样频率 &gt;= 2 * 信号最大频率分量</strong> ），就能初步得到原始信号（并不能完全恢复到原始模拟量）。</li><li>采样的本质即在一定时间内获取信号的瞬时值！</li></ul></li><li>量化阶段：<ul><li>采集后的模拟信号通过量化器，将其转化为相应的数字形式。</li><li>这个数字形式是二进制代码。</li><li>精度（二进制代码难免准确表达小数）</li></ul></li></ul><p><strong>ADC\</strong>*<em>主要参数：*</em></p><ul><li><strong>参考电压：</strong> ADC使用参考电压来确定模拟信号幅度范围。通常来说，ADC需要一个已知电压来作为参考，以便将 <strong>模拟电压映射到数字代码</strong> 。</li><li><strong>通道数</strong> <strong>：</strong> 表示ADC能够<strong>同时</strong>处理的模拟输入通道的数量。 <strong>多通道ADC可以同时转换多个信号</strong> 。</li><li><strong>采样率</strong> <strong>：</strong> 表示ADC每秒可以进行多少次采样。 <strong>采样率越高，ADC能够捕获更高频率的信号</strong> 。信号范围也就更广，更能接近原始模拟信号。</li><li><strong>分辨率：</strong> 表示ADC可以将模拟信号分成多少个离散级别（类似刻度）。其实就跟数字信号位数有关，以其位数N表示，一般有10位、12位、16位。常用用的也就是12位，4096的离散级别。</li><li><strong>转换时间：</strong> 表示ADC从开始到完成转换所需的时间。转换时间通常由ADC的 <strong>时钟频率</strong> <strong>（衡量高低电平翻转速率快慢）</strong> 和<strong>分辨率</strong>决定的。</li></ul><ol><li><h3 id="ADC常见工作类型"><a href="#ADC常见工作类型" class="headerlink" title="ADC常见工作类型"></a>ADC常见工作类型</h3></li><li><p><strong>逐次逼近型：最常见的\</strong>**ADC**<em>\</em>类型之一，通过逼近法来*<em>\</em>*模拟信号**<em>\</em>的大小。STM32的ADC通常使用这个类型。（下面两种的兼容类型）**</p><ol><li>逐次逼近转换过程和天平称物重非常相似。</li></ol></li></ol><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172553413981566.png" alt="img"></p><p>转换过程分析：</p><ol><li>八位寄存器最高位置 <strong>1（0x80）</strong> 。</li><li>传递给DA转换器，得到电压位 <strong>（0x80 = 128V）</strong> 。</li><li>比较器进行比较 33V &lt; 128V， <strong>输出低电平</strong> 。（砝码用大了）</li><li>逻辑控制电路将八位寄存器刚才位置 <strong>0</strong> ，下一个位置 <strong> 1（0x40）</strong> 。</li><li>传递给DA转换器，得到电压位 <strong>（0x40 = 64V）</strong> 。</li><li>比较器进行比较 33V &lt; 64V， <strong>输出低电平</strong> 。（砝码用大了）</li><li>逻辑控制电路将八位寄存器刚才位置 <strong>0</strong> ，下一个位置<strong> 1（0x20）。</strong></li><li>传递给DA转换器，得到电压位 <strong>（0x20 = 32V）</strong> 。</li><li>比较器进行比较 33V &gt; 32V，输出高电平。（砝码用小了）</li><li>逻辑控制电路将八位寄存器刚才位置 <strong>1（保留1）</strong> ，下一个位置<strong> 1（0x30）。</strong></li><li>传递给DA转换器，得到电压位<strong>（0x30 = 48V）。</strong></li><li>比较器进行比较 33V &lt; 48V， <strong>输出低电平</strong> 。（砝码用大了）</li><li>逻辑控制电路将八位寄存器刚才位置 <strong>0（去掉1）</strong> ，下一个位置<strong> 1（0x28）。</strong></li><li>前四位确定 <strong>0010。</strong></li><li>。。。。。。。</li><li>经过逐次逼近，一直比较到最后一位： <strong>0x21 = 33V </strong>为止。</li></ol><p>可以借助下图理解：</p><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172553413981567.png" alt="img"></p><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172553413981568.png" alt="img"></p><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172553413981569.png" alt="img"></p><ol><li><p><strong>Sigma-Delta型：通过比较信号的累积值和参考值，产生一个高精度的输出（转换速度慢，精度高）。</strong></p></li><li><p><strong>flash型：通过一组\</strong>**比较器**<em>\</em>和<strong> </strong>编码器<strong> </strong>，以高速*<em>\</em>*并行**<em>\</em>方式进行转换，适用于高速应用（转换速度快，精度低）。**</p></li><li><h3 id="STM32-ADC外设"><a href="#STM32-ADC外设" class="headerlink" title="STM32 ADC外设"></a>STM32 ADC外设</h3></li><li><p>中断</p><ol><li>转换结束中断</li></ol></li></ol><p>数据转换结束后，可以产生中断，中断分为三种：规则通道转换结束中断，注入转换通道转换结束中断，模拟看门狗中断。其中转换结束中断很好理解，跟我们平时接触的中断一样，有相应的中断标志位和中断使能位，我们还可以根据中断类型写相应配套的中断服务程序。</p><ol><li>模拟看门狗中断</li></ol><p>当被 ADC 转换的模拟电压低于低阈值或者高于高阈值时，就会产生中断，前提是我们开启了模拟看门狗中断，其中低阈值和高阈值由 ADC_LTR 和 ADC_HTR 设置。例如我们设置高阈值是2.5V，那么模拟电压超过 2.5V 的时候，就会产生模拟看门狗中断，反之低阈值也一样。</p><ol><li>DMA 请求</li></ol><p>规则和注入通道转换结束后，除了产生中断外，还可以产生DMA请求，把转换好的数据直接存储在内存里面。要注意的是只有<strong>ADC1和ADC3可以产生DMA请求</strong>。</p><ol><li>数据对齐</li></ol><p>16位的寄存器只用到了其中的12位。</p><p>可以使用高12位，数据就是左对齐。</p><p>也可以使用低12位，数据就是右对齐。</p><p><strong>右对齐：</strong>高4位补零，读取的值就是实际值。</p><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172553413981570.png" alt="img"></p><p><strong>左对齐：</strong>低4位补零，读取的值是实际值的16倍。</p><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172553413981571.png" alt="img"></p><p>实际使用中，最好使用<strong>低16位</strong>，这样就得到数据可以直接使用。</p><ol><li>转换时间</li></ol><ul><li>ADC使用若干个ADC_CLK周期对输入电压采样总转换时间如下计算：</li><li>TCONV = 采样时间 + 12.5个ADC周期。</li><li>当ADCCLK=14MHz，假设采样时间为1.5周期。</li><li>TCONV = 1.5 + 12.5 = 14周期 = 1μs。</li></ul><ol><li>电压转换</li></ol><p>模拟电压经过ADC转换后，是一个12位的数字值，如果通过串口以16进制打印出来的话，可读性比较差，那么有时候我们就需要把数字电压转换成模拟电压，也可以跟实际的模拟电压（用万用表测）对比，看看转换是否准确。</p><p>我们一般在设计原理图的时候会把ADC的输入电压范围设定在：0~3.3v，因为ADC是12位的，那么12位满量程对应的就是 3.3V，12位满量程（全部是1）对应的数字值是：2^12-1。数值 0 对应的就是0V。</p><p>如果转换后的数值为X ，X对应的模拟电压为 Y，那么会有这么一个等式成立：（2^12 -1）/ 3.3 = X / Y，所以Y =（3.3 <em> X ）/（2^12 – 1）= 3.3 </em> X / 4095。</p><ol><li><h2 id="ADC案例1：独立模式单通道采集"><a href="#ADC案例1：独立模式单通道采集" class="headerlink" title="ADC案例1：独立模式单通道采集"></a>ADC案例1：独立模式单通道采集</h2></li><li><h3 id="需求描述-8"><a href="#需求描述-8" class="headerlink" title="需求描述"></a>需求描述</h3></li></ol><p>基于寄存器操作，采集可变电阻器的电压，并通过串口把电压数据发送到电脑端。</p><ol><li><h3 id="硬件电路设计-5"><a href="#硬件电路设计-5" class="headerlink" title="硬件电路设计"></a>硬件电路设计</h3></li></ol><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172553413981572.png" alt="img"></p><p>PC0口为ADC的10通道，范围是0-3.3V。只需要一个ADC，使用独立模式即可。</p><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172553413981573.png" alt="img"></p><ol><li><h3 id="软件设计（寄存器）-8"><a href="#软件设计（寄存器）-8" class="headerlink" title="软件设计（寄存器）"></a>软件设计（寄存器）</h3></li><li><h4 id="main-c-16"><a href="#main-c-16" class="headerlink" title="main.c"></a><strong>main.c</strong></h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Driver_USART.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Driver_ADC.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Driver_USART1_Init();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ADC转换实验: 单通道\r\n&quot;</span>);</span><br><span class="line">    Driver_ADC1_Init();</span><br><span class="line">    Driver_ADC1_StartConvert();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">double</span> v = Driver_ADC1_ReadV();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;v = %.2f\r\n&quot;</span>, v);</span><br><span class="line">        Delay_s(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h4 id="Driver-ADC-h"><a href="#Driver-ADC-h" class="headerlink" title="Driver_ADC.h"></a><strong>Driver_ADC.h</strong></h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __DRIVER_ADC_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __DRIVER_ADC_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_ADC1_Init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_ADC1_StartConvert</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">double</span> <span class="title function_">Driver_ADC1_ReadV</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">double</span> <span class="title function_">Driver_ADC1_ReadV</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><ol><li><h4 id="Driver-ADC-c"><a href="#Driver-ADC-c" class="headerlink" title="Driver_ADC.c"></a><strong>Driver_ADC.c</strong></h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Driver_ADC.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_ADC1_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 时钟配置 */</span></span><br><span class="line">    <span class="comment">/* 1.1 ADC时钟 */</span></span><br><span class="line">    RCC-&gt;APB2ENR |= RCC_APB2ENR_ADC1EN;</span><br><span class="line">    </span><br><span class="line">  <span class="comment">/* 1.1.1 CFGR：ADCPRE - 10，6分频，得到12MHz*/</span></span><br><span class="line">    RCC-&gt;CFGR |= RCC_CFGR_ADCPRE_1;</span><br><span class="line">    RCC-&gt;CFGR &amp;= ~RCC_CFGR_ADCPRE_0;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 1.2 GPIO的时钟 */</span></span><br><span class="line">    RCC-&gt;APB2ENR |= RCC_APB2ENR_IOPCEN;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 2. GPIO工作模式: PC0 模拟输入  CNF=00 MODE=00 */</span></span><br><span class="line">    GPIOC-&gt;CRL &amp;= ~(GPIO_CRL_CNF0 | GPIO_CRL_MODE0);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 3. ADC相关配置 */</span></span><br><span class="line">    <span class="comment">/* 3.1 禁用扫描模式. 只有一个通道不用扫描 */</span></span><br><span class="line">    ADC1-&gt;CR1 &amp;= ~ADC_CR1_SCAN;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 3.2 启用连续转换模式 CR2=CONT 1 */</span></span><br><span class="line">    ADC1-&gt;CR2 |= ADC_CR2_CONT;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 3.3 数据对齐方式: 右对齐 左对齐 */</span></span><br><span class="line">    ADC1-&gt;CR2 &amp;= ~ADC_CR2_ALIGN;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 3.4 设置采样时间 ADC_SMPR1  010=13.5 周期 */</span></span><br><span class="line">    ADC1-&gt;SMPR1 &amp;= ~(ADC_SMPR1_SMP10_2 | ADC_SMPR1_SMP10_0);</span><br><span class="line">    ADC1-&gt;SMPR1 |= ADC_SMPR1_SMP10_1;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 3.5 通道组的配置 */</span></span><br><span class="line">    <span class="comment">/* 3.5.1 配置几个通道需要转换 */</span></span><br><span class="line">    ADC1-&gt;SQR1 &amp;= ~ADC_SQR1_L;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 3.5.1 把通道号配置到组里面.  */</span></span><br><span class="line">    ADC1-&gt;SQR3 &amp;= ~ADC_SQR3_SQ1; <span class="comment">/* 先把5位清零 */</span></span><br><span class="line">    ADC1-&gt;SQR3 |= <span class="number">10</span> &lt;&lt; <span class="number">0</span>; <span class="comment">/* 设置最后5位 */</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 3.6 选择软件触发 */</span></span><br><span class="line">    ADC1-&gt;CR2 &amp;= ~ADC_CR2_EXTTRIG; <span class="comment">/* 禁用规则组的外部转换 */</span></span><br><span class="line">    ADC1-&gt;CR2 |= ADC_CR2_EXTSEL; <span class="comment">/* 选择使用软件触发ADC */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_ADC1_StartConvert</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 上电: 把ADC从休眠模式唤醒 */</span></span><br><span class="line">    ADC1-&gt;CR2 |= ADC_CR2_ADON;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 2. 执行校准 */</span></span><br><span class="line">    ADC1-&gt;CR2 |= ADC_CR2_CAL;</span><br><span class="line">    <span class="keyword">while</span> (ADC1-&gt;CR2 &amp; ADC_CR2_CAL);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 3. ADON = 1, 开始转换 0&gt;1 从休眠模式唤醒 1-&gt;1 开始 */</span></span><br><span class="line">    ADC1-&gt;CR2 |= ADC_CR2_ADON;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 4. 使用软件开始转换规则通道 */</span>;</span><br><span class="line">    ADC1-&gt;CR2 |= ADC_CR2_SWSTART;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 5. 等待首次转换完成 */</span></span><br><span class="line">    <span class="keyword">while</span>((ADC1-&gt;SR &amp; ADC_SR_EOC) == <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">double</span> <span class="title function_">Driver_ADC1_ReadV</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 12位的ADC 范围 [0, 4095]</span></span><br><span class="line">    <span class="keyword">return</span> ADC1-&gt;DR * <span class="number">3.3</span> / <span class="number">4095</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h3 id="软件设计（HAL库）-8"><a href="#软件设计（HAL库）-8" class="headerlink" title="软件设计（HAL库）"></a>软件设计（HAL库）</h3></li><li><h4 id="STM32CubeMx设置"><a href="#STM32CubeMx设置" class="headerlink" title="STM32CubeMx设置"></a>STM32CubeMx设置</h4></li></ol><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172553413981574.png" alt="img"></p><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172553413981575.png" alt="img"></p><ol><li><h4 id="添加其他代码-3"><a href="#添加其他代码-3" class="headerlink" title="添加其他代码"></a>添加其他代码</h4><ul><li><strong>main.c</strong></li></ul></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_Init();</span><br><span class="line">    SystemClock_Config();</span><br><span class="line">    MX_GPIO_Init();</span><br><span class="line">    MX_ADC1_Init();</span><br><span class="line">    MX_USART1_UART_Init();</span><br><span class="line">    <span class="comment">// 启动ADC转换</span></span><br><span class="line">    HAL_ADC_Start(&amp;hadc1);</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">float</span> v = HAL_ADC_GetValue(&amp;hadc1) / <span class="number">4095.0</span> * <span class="number">3.3</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;电压=%.2fV\r\n&quot;</span>, v);</span><br><span class="line">        HAL_Delay(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如图：</p><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172553413981576.png" alt="img"></p><p>为啥采集的模拟电压值只能到3.25V？</p><p>当然是忘了ADC校准，HAL库配置时并没有发现校准位，所以应该调用HAL库的函数来对当前采集信号进行校准。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_Init();</span><br><span class="line">    SystemClock_Config();</span><br><span class="line">    MX_GPIO_Init();</span><br><span class="line">    MX_ADC1_Init();</span><br><span class="line">    MX_USART1_UART_Init();</span><br><span class="line">  <span class="comment">// 校准</span></span><br><span class="line">    HAL_ADCEx_Calibration_Start(&amp;hadc1);</span><br><span class="line">    <span class="comment">// 启动ADC转换</span></span><br><span class="line">    HAL_ADC_Start(&amp;hadc1);</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">float</span> v = HAL_ADC_GetValue(&amp;hadc1) / <span class="number">4095.0</span> * <span class="number">3.3</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;电压=%.2fV\r\n&quot;</span>, v);</span><br><span class="line">        HAL_Delay(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>转换前校准，不然就毫无意义了，不是吗？</p><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172553413981577.png" alt="img"></p><p>成功解决问题。</p><ol><li><h2 id="ADC案例2：独立模式多通道采集"><a href="#ADC案例2：独立模式多通道采集" class="headerlink" title="ADC案例2：独立模式多通道采集"></a>ADC案例2：独立模式多通道采集</h2></li><li><h3 id="需求描述-9"><a href="#需求描述-9" class="headerlink" title="需求描述"></a>需求描述</h3></li></ol><p>基于寄存器操作，用一个ADC同时采集多个通道模拟电压。</p><p>PC0是10通道，采集的是可变电阻器的电压。PC1对应的是12通道，使用杜邦线连接到电源或地，测试他们的电压。</p><p>当多个通道同时采集时，一般就需要使用DMA来传输数据，否则数据如果来不及取出，则会导致数据被覆盖。</p><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172553413981578.png" alt="img"></p><ol><li><h3 id="软件设计（寄存器）-9"><a href="#软件设计（寄存器）-9" class="headerlink" title="软件设计（寄存器）"></a>软件设计（寄存器）</h3></li><li><h4 id="main-c-17"><a href="#main-c-17" class="headerlink" title="main.c"></a><strong>main.c</strong></h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Driver_USART.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Driver_ADC.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">uint16_t</span> data[<span class="number">2</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Driver_USART1_Init();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ADC转换实验: 多通道\r\n&quot;</span>);</span><br><span class="line">    Driver_ADC1_Init();</span><br><span class="line">    Driver_ADC1_DMA_Init();</span><br><span class="line">    Driver_ADC1_DMA_Start((<span class="type">uint32_t</span>)data, <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;滑动变阻器=%.2f, 电源电压=%.2f\r\n&quot;</span>, data[<span class="number">0</span>] * <span class="number">3.3</span> / <span class="number">4095</span>, data[<span class="number">1</span>] * <span class="number">3.3</span> / <span class="number">4095</span>);</span><br><span class="line">        Delay_s(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h4 id="Driver-ADC-h-1"><a href="#Driver-ADC-h-1" class="headerlink" title="Driver_ADC.h"></a><strong>Driver_ADC.h</strong></h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __DRIVER_ADC_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __DRIVER_ADC_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_ADC1_Init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_ADC1_DMA_Init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_ADC1_DMA_Start</span><span class="params">(<span class="type">uint32_t</span> desAddr, <span class="type">uint8_t</span> len)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><ol><li><h4 id="Driver-ADC-c-1"><a href="#Driver-ADC-c-1" class="headerlink" title="Driver_ADC.c"></a><strong>Driver_ADC.c</strong></h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Driver_ADC.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_ADC1_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 时钟配置 */</span></span><br><span class="line">    <span class="comment">/* 1.1 ADC时钟 */</span></span><br><span class="line">    RCC-&gt;APB2ENR |= RCC_APB2ENR_ADC1EN;</span><br><span class="line">    RCC-&gt;CFGR |= RCC_CFGR_ADCPRE_1;</span><br><span class="line">    RCC-&gt;CFGR &amp;= ~RCC_CFGR_ADCPRE_0;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 1.2 GPIO的时钟 */</span></span><br><span class="line">    RCC-&gt;APB2ENR |= RCC_APB2ENR_IOPCEN;<span class="comment">//不配GPIOC也可以，要配置模拟输入，只需内部连线即可</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 2. GPIO工作模式: PC0 PC2 模拟输入  CNF=00 MODE=00 */</span></span><br><span class="line">    GPIOC-&gt;CRL &amp;= ~(GPIO_CRL_CNF0 | GPIO_CRL_MODE0);</span><br><span class="line">    GPIOC-&gt;CRL &amp;= ~(GPIO_CRL_CNF2 | GPIO_CRL_MODE2);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 2. ADC相关配置 */</span></span><br><span class="line">    <span class="comment">/* 2.1 启用扫描模式. 有多个通道 */</span></span><br><span class="line">    ADC1-&gt;CR1 |= ADC_CR1_SCAN;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 2.2 启用连续转换模式 CR2=CONT 1*/</span></span><br><span class="line">    ADC1-&gt;CR2 |= ADC_CR2_CONT;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 2.3 数据对齐方式: 右对齐 左对齐 */</span></span><br><span class="line">    ADC1-&gt;CR2 &amp;= ~ADC_CR2_ALIGN;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 2.4 设置采样时间 ADC_SMPR1  010=13.5周期 */</span></span><br><span class="line">    ADC1-&gt;SMPR1 &amp;= ~(ADC_SMPR1_SMP10_2 | ADC_SMPR1_SMP10_0);</span><br><span class="line">    ADC1-&gt;SMPR1 |= ADC_SMPR1_SMP10_1;</span><br><span class="line">    ADC1-&gt;SMPR1 &amp;= ~(ADC_SMPR1_SMP12_2 | ADC_SMPR1_SMP12_0);</span><br><span class="line">    ADC1-&gt;SMPR1 |= ADC_SMPR1_SMP12_1;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 2.5 通道组的配置 */</span></span><br><span class="line">    <span class="comment">/* 2.5.1 配置几个通道需要转换  2个通道*/</span></span><br><span class="line">    ADC1-&gt;SQR1 &amp;= ~ADC_SQR1_L;</span><br><span class="line">    ADC1-&gt;SQR1 |= ADC_SQR1_L_0;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 2.5.2 把通道号配置到组里面 */</span></span><br><span class="line">    ADC1-&gt;SQR3 &amp;= ~ADC_SQR3_SQ1;<span class="comment">/* 先把5位清零 */</span></span><br><span class="line">    ADC1-&gt;SQR3 |= <span class="number">10</span> &lt;&lt; <span class="number">0</span>;       <span class="comment">/* 设置最后5位 */</span>    </span><br><span class="line">    ADC1-&gt;SQR3 &amp;= ~ADC_SQR3_SQ2;<span class="comment">/* 先把5位清零 */</span></span><br><span class="line">    ADC1-&gt;SQR3 |= <span class="number">12</span> &lt;&lt; <span class="number">5</span>;       <span class="comment">/* 设置最后5位 */</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 2.6 选择软件触发 */</span></span><br><span class="line">    ADC1-&gt;CR2 &amp;= ~ADC_CR2_EXTTRIG;<span class="comment">/* 禁用规则组的外部转换 */</span></span><br><span class="line">    ADC1-&gt;CR2 |= ADC_CR2_EXTSEL;   <span class="comment">/* 选择使用软件触发ADC */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_ADC1_DMA_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 开启DMA时钟 */</span></span><br><span class="line">    RCC-&gt;AHBENR |= RCC_AHBENR_DMA1EN;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 2. 设置传输方向 从外设读0 从内存读1*/</span></span><br><span class="line">    DMA1_Channel1-&gt;CCR &amp;= ~DMA_CCR1_DIR;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 3. 数据宽度 16位 = 01 */</span></span><br><span class="line">    DMA1_Channel1-&gt;CCR &amp;= ~DMA_CCR1_PSIZE_1;</span><br><span class="line">    DMA1_Channel1-&gt;CCR |= DMA_CCR1_PSIZE_0;</span><br><span class="line">    DMA1_Channel1-&gt;CCR &amp;= ~DMA_CCR1_MSIZE_1;</span><br><span class="line">    DMA1_Channel1-&gt;CCR |= DMA_CCR1_MSIZE_0;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 4. 外设和内存的地址是否增 外设不增  内存要增*/</span></span><br><span class="line">    DMA1_Channel1-&gt;CCR &amp;= ~DMA_CCR1_PINC;</span><br><span class="line">    DMA1_Channel1-&gt;CCR |= DMA_CCR1_MINC;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 5. 开启循环模式 */</span></span><br><span class="line">    DMA1_Channel1-&gt;CCR |= DMA_CCR1_CIRC;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 6. 给ADC1开启DMA模式 */</span>;</span><br><span class="line">    ADC1-&gt;CR2 |= ADC_CR2_DMA;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_ADC1_DMA_Start</span><span class="params">(<span class="type">uint32_t</span> desAddr, <span class="type">uint8_t</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 0. DMA 配置 */</span></span><br><span class="line">    DMA1_Channel1-&gt;CPAR = (<span class="type">uint32_t</span>)(&amp;(ADC1-&gt;DR));</span><br><span class="line">    DMA1_Channel1-&gt;CMAR = desAddr;</span><br><span class="line">    DMA1_Channel1-&gt;CNDTR = len;</span><br><span class="line">    DMA1_Channel1-&gt;CCR |= DMA_CCR1_EN;<span class="comment">/* 使能通道 */</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 1. 上电: 把ADC从休眠模式唤醒 */</span></span><br><span class="line">    ADC1-&gt;CR2 |= ADC_CR2_ADON;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 2. 执行校准 */</span></span><br><span class="line">    ADC1-&gt;CR2 |= ADC_CR2_CAL;</span><br><span class="line">    <span class="keyword">while</span> (ADC1-&gt;CR2 &amp; ADC_CR2_CAL);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 3. ADON = 1, 开始转换 0&gt;1 从休眠模式唤醒 1-&gt;1 开始 */</span></span><br><span class="line">    ADC1-&gt;CR2 |= ADC_CR2_ADON;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 4. 使用软件开始转换规则通道 */</span>;</span><br><span class="line">    ADC1-&gt;CR2 |= ADC_CR2_SWSTART;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 5. 等待全部转换完成 */</span></span><br><span class="line">    <span class="keyword">while</span> ((ADC1-&gt;SR &amp; ADC_SR_EOC) == <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h3 id="软件设计（HAL库）-9"><a href="#软件设计（HAL库）-9" class="headerlink" title="软件设计（HAL库）"></a>软件设计（HAL库）</h3></li><li><h4 id="STM32CubeMx设置-1"><a href="#STM32CubeMx设置-1" class="headerlink" title="STM32CubeMx设置"></a>STM32CubeMx设置</h4></li></ol><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172553413981579.png" alt="img"></p><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172553413981580.png" alt="img"></p><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172553413981581.png" alt="img"></p><ol><li><h4 id="添加其他代码-4"><a href="#添加其他代码-4" class="headerlink" title="添加其他代码"></a>添加其他代码</h4></li><li><h5 id="main-c-18"><a href="#main-c-18" class="headerlink" title="main.c"></a><strong>main.c</strong></h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_Init();</span><br><span class="line">    SystemClock_Config();</span><br><span class="line">    MX_GPIO_Init();</span><br><span class="line">    MX_DMA_Init();</span><br><span class="line">    MX_ADC1_Init();</span><br><span class="line">    MX_USART1_UART_Init();</span><br><span class="line">    <span class="type">uint16_t</span> Dest[<span class="number">2</span>];</span><br><span class="line">    HAL_ADC_Start_DMA(&amp;hadc1, (<span class="type">uint32_t</span> *)data, <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;滑动变阻器=%.2f, 电源电压=%.2f\r\n&quot;</span>, data[<span class="number">0</span>] * <span class="number">3.3</span> / <span class="number">4095</span>, data[<span class="number">1</span>] * <span class="number">3.3</span> / <span class="number">4095</span>);</span><br><span class="line">        HAL_Delay(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>时刻注意，</strong> <strong>ADC\</strong>*<em>精度为12，不能选uint8_t。*</em></p>]]></content>
      
      
      <categories>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STM32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构</title>
      <link href="/2024/09/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>/2024/09/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<ol><li><h1 id="基础顺序表"><a href="#基础顺序表" class="headerlink" title="基础顺序表"></a>基础顺序表</h1></li><li><h2 id="顺序表分类"><a href="#顺序表分类" class="headerlink" title="顺序表分类"></a><strong>顺序表分类</strong></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">顺序表分为动态顺序表和静态顺序表，他们的基本结构是怎么展现的呢？</span><br></pre></td></tr></table></figure></li><li><p><strong>静态顺序表</strong></p></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> N 100</span></span><br><span class="line"><span class="comment">//静态顺序表</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Seqlist</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">        <span class="type">int</span> arr[N];<span class="comment">//存放数组大小</span></span><br><span class="line">        <span class="type">int</span> size;<span class="comment">//有效存储数据个数</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>静态顺序表只有两个成员，首先是存放数据数组，其次我们还要知道有效的数据个数,其存放数据大小是一开始便已经确定的，并不灵活，实际开发中根本不会用这种方式。</p><ol><li><strong>动态顺序表</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Seqlist</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span>* arr;<span class="comment">//存放数组大小</span></span><br><span class="line">    <span class="type">int</span> size;<span class="comment">//有效存储数据个数</span></span><br><span class="line">    <span class="type">int</span> capacity;<span class="comment">//开辟空间大小</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>为啥这里用 <strong>int</strong> <strong>*</strong> ？当然是因为需要动态开辟内存空间。既然是动态，当然要用到动态内存管理的知识 ，让我们的<strong>arr</strong>依据存储数据<strong>size</strong>需求量，对数组空间进行扩容或缩容。这里多了一个<strong>capacity</strong>表示开辟空间的大小。为啥要这样设计，因为有效存储数据size的大小并不一定等于空间capacity的大小，这样便于逻辑书写。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">诚然，动态和静态都能解决问题，可是对于静态顺序表来说，一开始我们也不知道到底需要存储多少数据，就像短视频的老板一样，他也不知道自己的产品需要存储多少用户信息。万一初始空间给小了，就放不了太多，容易导致数据丢失；万一初始空间给大了，会占用很大的内存空间，导致代码低效！</span><br><span class="line"></span><br><span class="line">    因此，对比动态和静态顺序表，我们可以清楚的知道动态顺序表更有优势，接下来就是实现一个简单的动态顺序表。</span><br></pre></td></tr></table></figure><ol><li><h2 id="动态顺序表的具体实现"><a href="#动态顺序表的具体实现" class="headerlink" title="动态顺序表的具体实现"></a>动态顺序表的具体实现</h2></li><li><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3></li></ol><p>上述定义其实不太完美。改良一下，将int重定义为SLDataType，其目的是为了以后方便<strong>修改</strong> <strong>数据类型</strong> 。</p><p><img src="/2024/09/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/-172554078033116.png" alt="img"></p><p>试想一下，万一以后要往顺序表里存储字符串咋办，很多涉及到int这个关键字的地方肯定不能全用VS的替换吧，有些变量可能本身用int来定义，以后代码万一增多，手动修改出现错误或误操作，代码可能直接崩溃，这是很可怕的事情。</p><p>因此，提前做好防范。同时为了避免每次传结构体都要加上struct，把它重新命名为SL，这样会很方便！</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 动态顺序表</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> SLDataType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Seqlist</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    SLDataType *arr; <span class="comment">// 存放数组大小</span></span><br><span class="line">    <span class="type">int</span> size;        <span class="comment">// 有效存储数据个数</span></span><br><span class="line">    <span class="type">int</span> capacity;    <span class="comment">// 开辟空间的大小</span></span><br><span class="line">&#125; SL;</span><br></pre></td></tr></table></figure><ol><li><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3></li></ol><p>初始化其实很简单，用一个封装函数，让arr指针为空，size和capacity都置为0，也可以用malloc初始扩充一定的空间，不多赘述。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Seqlist_Init</span><span class="params">(SL* ps)</span></span><br><span class="line">&#123;</span><br><span class="line">    ps-&gt;arr = <span class="literal">NULL</span>;</span><br><span class="line">    ps-&gt;capacity = ps-&gt;size = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那我初始化函数这样写对不对？</p><p>当然是不对的，我们渴望修改结构体里的数据，从而初始化。根据函数调用中实参和形参的关系可知，形参只是形参的临时拷贝，改变形参不会改变实参，所以传值调用是不合法的（建议可以了解一下函数栈帧的知识），对于用函数交换两个变量，我们是不是只能传两个变量的地址啊，这里也一样。</p><p>经过调试，成功实现顺序表初始化。</p><p><img src="/2024/09/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/-17255407803301.png" alt="img"></p><ol><li><h3 id="销毁"><a href="#销毁" class="headerlink" title="销毁"></a>销毁</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">有初始化必然就有销毁！销毁就必然要将开辟的内存空间重新还给操作系统，并将size和capacity置为0。</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Seqlist_Destroy</span><span class="params">(SL* ps)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (ps-&gt;arr) <span class="comment">//等价于  if(ps-&gt;arr != NULL)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">free</span>(ps-&gt;arr);</span><br><span class="line">    &#125;</span><br><span class="line">    ps-&gt;arr = <span class="literal">NULL</span>;</span><br><span class="line">    ps-&gt;size = ps-&gt;capacity = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>勿忘将arr置为 <strong>NULL</strong> 。我们用free函数将内存释放只是失去了访问之前开辟空间的能力，首地址还是那个地址没有变，可是已经没有明确的指向，构成野指针，而且free不会自动置空。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">补充一点，例如return 返回值，我们调用一个函数来返回一个结果，我们是不是一般都是返回一个值啊，万一返回一个地址咋办，而且这个地址是正常的吗？</span><br></pre></td></tr></table></figure><p>以一道题目为例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> *<span class="title function_">GetMemory</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> p[] = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Test</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> *str = <span class="literal">NULL</span>;</span><br><span class="line">    str = GetMemory();</span><br><span class="line">    <span class="built_in">printf</span>(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以运行吗？</p><p><img src="/2024/09/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/-17255407803302.png" alt="img"></p><p>编译器直接报错。原因嘛和上面一样啊，这个p地址还是那个地址，但是GetMemory函数执行完后p指向的空间还给操作系统了，没有访问权限，就会指向不明确，所以p为野指针，不能正确执行程序。就算有些编译器可以成功运行此程序，那也是非法访问。</p><ol><li><h3 id="打印数据"><a href="#打印数据" class="headerlink" title="打印数据"></a>打印数据</h3></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//打印</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">PrintSeqlist</span><span class="params">(SL* ps)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ps-&gt;size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, ps-&gt;arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/09/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/-17255407803303.png" alt="img"></p><p><strong>注意：</strong></p><ol><li><p><strong>不需要考虑\</strong>**arr**<em>\</em>里面的数据是啥，所以我们只需要打印有效数据就可以。并不需要对要删除的数据做处理。**</p></li><li><p><strong>要断言一下，如果ps为空指针，删除就无意义了。</strong></p></li><li><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">插入方法各种各样。</span><br></pre></td></tr></table></figure></li><li><h4 id="尾插"><a href="#尾插" class="headerlink" title="尾插"></a>尾插</h4></li></ol><p><img src="/2024/09/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/-17255407803314.png" alt="img"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//尾插</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SLPushBack</span><span class="params">(SL* ps, SLDataType x)</span><span class="comment">//x为插入数据</span></span><br><span class="line">&#123;</span><br><span class="line">    assert(ps);</span><br><span class="line">    ps-&gt;arr[ps-&gt;size++] = x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接这样写行不行？试想，万一<strong>capacity</strong>和<strong>size</strong>相等，即空间大小等于有效个数大小，是不是没有空间了，需要扩容。还有如果capacity为0，arr的地址是无效的哦，也不能插入数据吧！</p><p>每一次插入数据我都需要判断顺序表空是否的存在，从而决定是否扩容。</p><p><strong>因此需要实现一个通用的判断函数：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">SLCheckOut</span><span class="params">(SL* ps)</span></span><br><span class="line">&#123;   </span><br><span class="line">    <span class="keyword">if</span> (ps-&gt;capacity == ps-&gt;size)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> NEWCapacity = (!ps-&gt;capacity) ? <span class="number">4</span> : <span class="number">2</span> * ps-&gt;capacity;</span><br><span class="line">        SLDataType* tmp = (SLDataType*)<span class="built_in">realloc</span>(ps-&gt;arr, NEWCapacity * <span class="keyword">sizeof</span>(SLDataType));</span><br><span class="line">        <span class="comment">//空间开辟失败</span></span><br><span class="line">        <span class="keyword">if</span> (!tmp)</span><br><span class="line">        &#123;</span><br><span class="line">            perror(<span class="string">&quot;realloc&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//空间开辟成功</span></span><br><span class="line">        ps-&gt;arr = tmp;</span><br><span class="line">        ps-&gt;capacity = NEWCapacity;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><ol><li><strong>capacity</strong> <strong> == size怎么办？</strong> 说明此时需要先扩容再插入数据。</li><li><strong>capacity</strong> <strong>为0怎么办？</strong> 所以要单独先判断capacity，为0就给个初始空间为4（随便给，别太离谱），不为0，扩容两倍。</li><li><strong>realloc万一开辟失败怎么办？</strong> 需要报错，来终止程序,开辟内存成功后，才能进行插入数据操作。因为一旦realloc开辟失败，不光不能解决问题，同时还有极大可能把我原来的数据删掉，这不是帮倒忙吗，因此我们使用realloc必须考虑这一点。</li><li><strong>万一ps接收到空指针怎么办？</strong> 那就无法实现插入数据，因此要用assert断言一下（可以去网上找一下assert的用法）其他插入删除数据同理。</li><li><strong>exit(1)</strong> :只是一个简单的退出程序语句。</li><li><strong>size</strong>表示有效数据个数，其初始值为0，所以插入完要++，因为是后置++，在插入数据前不会影响，也可以分开写，无所谓。</li></ol><p>测试一下：</p><p><img src="/2024/09/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/-17255407803315.png" alt="img"></p><p>成功插入数据。</p><ol><li><h4 id="头插"><a href="#头插" class="headerlink" title="头插"></a>头插</h4></li></ol><p>如图，方便理解：</p><p><img src="/2024/09/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/-17255407803316.png" alt="img"></p><p>看到这里是不是就明白了，简单：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//头插</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SLPushFront</span><span class="params">(SL* ps, SLDataType x)</span></span><br><span class="line">&#123;</span><br><span class="line">    assert(ps);</span><br><span class="line">    SLCheckOut(ps);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = ps-&gt;size; i &gt; <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        ps-&gt;arr[i] = ps-&gt;arr[i - <span class="number">1</span>];<span class="comment">//最终arr[1] = arr[0]</span></span><br><span class="line">    &#125;</span><br><span class="line">    ps-&gt;arr[<span class="number">0</span>] = x;</span><br><span class="line">    ps-&gt;size++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试成功！</p><p>注意：</p><p>ps-&gt;size++为啥最后写？<strong>只要顺序表有空间，ps-&gt;size一定小于ps-&gt;**</strong>capacity**，我们这样设计便于理解，删除数据涉及到的ps-&gt;size—同理。</p><ol><li><h4 id="任插"><a href="#任插" class="headerlink" title="任插"></a>任插</h4></li></ol><p>如图，方便理解：</p><p><img src="/2024/09/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/-17255407803317.png" alt="img"></p><p>因此，就是要将pos位之后的数据向右移动一位，再把要放入的数据赋值给数组第pos位，最后有效数据个数加一，并不是将原来pos位的数据替换。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//任意位置插入</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SLInsert</span><span class="params">(SL* ps, <span class="type">int</span> pos, SLDataType x)</span></span><br><span class="line">&#123;</span><br><span class="line">    assert(ps);</span><br><span class="line">    <span class="comment">//不能让顺序表为空</span></span><br><span class="line">    assert(pos &gt;= <span class="number">0</span> &amp;&amp; pos &lt;= ps-&gt;size);</span><br><span class="line">    SLCheckOut(ps);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = ps-&gt;size; i &gt;= pos + <span class="number">1</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        ps-&gt;arr[i] = ps-&gt;arr[i - <span class="number">1</span>];<span class="comment">//ps-&gt;arr[pos + 1] = ps-&gt;arr[pos]</span></span><br><span class="line">    &#125;</span><br><span class="line">    ps-&gt;arr[pos] = x;</span><br><span class="line">    ps-&gt;size++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试一下：</p><p><img src="/2024/09/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/-17255407803318.png" alt="img"></p><p>由此观知，头插尾插也是这种任插的特殊情况。</p><ol><li><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3></li></ol><p>删除不需要考虑那么多，只要传入的顺序表不为空即可。</p><ol><li><h4 id="尾删"><a href="#尾删" class="headerlink" title="尾删"></a>尾删</h4></li></ol><p>如图，方便理解：</p><p><img src="/2024/09/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/-17255407803319.png" alt="img"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//尾删</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SLPopBack</span><span class="params">(SL* ps)</span></span><br><span class="line">&#123;</span><br><span class="line">    assert(ps);</span><br><span class="line">    ps-&gt;size--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试一下：</p><p><img src="/2024/09/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/-172554078033110.png" alt="img"></p><ol><li><h4 id="头删"><a href="#头删" class="headerlink" title="头删"></a>头删</h4></li></ol><p>如图，方便理解：</p><p><img src="/2024/09/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/-172554078033111.png" alt="img"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//头删</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SLPopFront</span><span class="params">(SL* ps)</span></span><br><span class="line">&#123;</span><br><span class="line">    assert(ps);</span><br><span class="line">    <span class="comment">//判断顺序表是否为空</span></span><br><span class="line">    assert(ps-&gt;size);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ps-&gt;size - <span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ps-&gt;arr[i] = ps-&gt;arr[i + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    ps-&gt;size--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>assert(ps-&gt;size)是判断顺序表是否为空，要是size为0，虽然打印有一个数据，但是此时无效数据为0。</strong></p><p>测试一下：</p><p><img src="/2024/09/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/-172554078033112.png" alt="img"></p><ol><li><h4 id="任删"><a href="#任删" class="headerlink" title="任删"></a>任删</h4></li></ol><p>如图，方便理解：</p><p><img src="/2024/09/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/-172554078033113.png" alt="img"></p><p>将pos位之后的数据向前移动，移动位置不在pos位前，最后有效数据个数减一。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//任意位置删除</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SLErase</span><span class="params">(SL* ps, <span class="type">int</span> pos)</span></span><br><span class="line">&#123;</span><br><span class="line">    assert(ps);</span><br><span class="line">    assert(pos &gt;= <span class="number">0</span> &amp;&amp; pos &lt; ps-&gt;size);</span><br><span class="line">    SLCheckOut(ps);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = pos; i &lt; ps-&gt;size - <span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ps-&gt;arr[i] = ps-&gt;arr[i + <span class="number">1</span>];<span class="comment">//ps-&gt;arr[ps-&gt;size - 2] = ps-&gt;arr[ps-&gt;size - 1]</span></span><br><span class="line">    &#125;</span><br><span class="line">    ps-&gt;size--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试一下：</p><p><img src="/2024/09/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/-172554078033114.png" alt="img"></p><p><strong>注意：</strong></p><ol><li><strong>用assert断言\</strong>**pos**<em>\</em>，让pos在安全且合法的范围内。**</li><li><strong>插入数据时，可以把数据插入到下标size上，而删除数据时，不能删除下标size-1后面的数据。</strong></li></ol><p><strong>上图说明：</strong></p><p><img src="/2024/09/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/-172554078033115.png" alt="img"></p><p>简洁明了。</p><ol><li><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3></li></ol><p>遍历查找。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查找</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">FindSL</span><span class="params">(SL* ps, SLDataType x)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ps-&gt;size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (ps-&gt;arr[i] == x)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//找到了</span></span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//没有找到</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>这里我用下标i来遍历数组中的元素，如果找到数据返回下标，如果没找到返回-1，其中-1是随便给的数，目的是为了与数组下标区分开。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第2篇文章</title>
      <link href="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/MCU/mm/"/>
      <url>/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/MCU/mm/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 蓝桥杯51 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>测试</title>
      <link href="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/"/>
      <url>/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/</url>
      
        <content type="html"><![CDATA[<ol><li><h2 id="STM32最小系统"><a href="#STM32最小系统" class="headerlink" title="STM32最小系统"></a>STM32最小系统</h2></li></ol><p>STM32单片机能工作的最小外围电路就叫<strong>最小系统</strong>。</p><p>最小系统通常包括：<strong>STM32芯片、电源、时钟、下载调试和复位</strong>5部分组成。</p><ol><li>STM32芯片</li></ol><p>选用的是<strong>STM32F103ZET6</strong>这款芯片。</p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-1725522045635140.png" alt="img"></p><ol><li>电源<ol><li>采用3.3V电源供电。我们电路采用了两路供电。</li><li>一路是USB的TypeC供电， TypeC提供的是5V，使用芯片AMS1117把5V转成3.3V。</li><li>另一路是STLink下载器直接提供3.3V供电（下载器内部已经把5V转成了3.3V）。</li></ol></li></ol><ul><li>MCU电源</li></ul><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-17255220456171.png" alt="img"></p><ul><li>USB供电转3.3v</li></ul><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-17255220456172.png" alt="img"></p><ul><li>MCU调试口</li></ul><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-17255220456173.png" alt="img"></p><p>不用额外再接串口模块。</p><ol><li>时钟</li></ol><p>SMT32提供了两路外部时钟：<strong>外部高速时钟和外部低速时钟</strong>。</p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-17255220456174.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-17255220456175.png" alt="img"></p><ol><li>复位</li></ol><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-17255220456176.png" alt="img"></p><ol><li>下载调试</li></ol><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-17255220456177.png" alt="img"></p><ol><li><h1 id="点亮LED灯案例（寄存器）"><a href="#点亮LED灯案例（寄存器）" class="headerlink" title="点亮LED灯案例（寄存器）"></a>点亮LED灯案例（寄存器）</h1><p> 我们首先使用基于寄存器开发方式点亮第一个LED灯。</p></li></ol><p>在代码期间会涉及到一些寄存器知识，先不要深究，后面再详细介绍。现在要做的就是点亮第一个LED灯。</p><ol><li><h2 id="需求描述"><a href="#需求描述" class="headerlink" title="需求描述"></a>需求描述</h2></li></ol><p>快速体验STM32开发：点亮LED1。</p><ol><li><h2 id="硬件电路设计"><a href="#硬件电路设计" class="headerlink" title="硬件电路设计"></a>硬件电路设计</h2></li></ol><p>LED1-LED3是普通LED灯，LED4为电源指示灯。</p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-17255220456178.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-17255220456179.png" alt="img"></p><p>说明：</p><ol><li>LED1连接的是端口PA0</li><li><p>只要让PA0引脚输出低电平就可以点亮LED1。</p></li><li><h2 id="创建项目工程"><a href="#创建项目工程" class="headerlink" title="创建项目工程"></a>创建项目工程</h2></li><li><h3 id="创建工程准备"><a href="#创建工程准备" class="headerlink" title="创建工程准备"></a>创建工程准备</h3></li><li><p>创建需要的目录</p></li></ol><p>在磁盘上创建一个目录 atguigu，然后再在atguigu目录下创建我们的第一个工程目录 led_register。</p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561710.png" alt="img"></p><ol><li>准备启动文件</li></ol><p>STM32程序需要启动文件，我们需要提前准备好。先去ST官网下载官方提供的外设标准库，里面有提供标准的启动文件，我们从里面copy一份出来。</p><p>标准外设库下载地址：<strong><a href="https://www.st.com/zh/embedded-software/stm32-standard-peripheral-libraries/products.html">https://www.st.com/zh/embedded-software/stm32-standard-peripheral-libraries/products.html</a></strong></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561711.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561712.png" alt="img"></p><p>下载完成之后解压，后面我们需要从里面copy文件出来。</p><ol><li>创建目录放入启动文件和其他核心文件</li></ol><p>为了方便管理，我们把启动文件放入专门目录中。在刚才创建的工程目录中创建一个目录：Start（名字没有强制要求，随意，但是最好不要有中文）。</p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561713.png" alt="img"></p><p>去到我们刚才下载的标准外设库目录，找到我们需要的启动文件和其他核心文件copy到Start目录。</p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561814.png" alt="img"></p><p>启动文件选择标准：</p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561815.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561816.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561817.png" alt="img"></p><p>Copy完之后：</p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561818.png" alt="img"></p><ol><li>创建工程</li></ol><p>打开Keil MDK创建工程。</p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561819.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561820.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561821.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561822.png" alt="img"></p><ol><li><h3 id="工程配置"><a href="#工程配置" class="headerlink" title="工程配置"></a>工程配置</h3></li><li><p>添加两个Project Group方便管理代码文件。</p></li></ol><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561823.png" alt="img"></p><ol><li>先删除默认的Source Group 1，再添加两个：Start（启动相关的文件），User（我们自己写的代码）。</li></ol><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561824.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561825.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561826.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561827.png" alt="img"></p><ol><li>创建main.c 文件</li></ol><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561828.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561829.png" alt="img"></p><p>User路径不存在，让它帮我们创建。</p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561830.png" alt="img"></p><ol><li><h3 id="编译配置"><a href="#编译配置" class="headerlink" title="编译配置"></a>编译配置</h3></li><li><p>编译器版本改为5</p></li></ol><p>目前最新的Keil ARM用的是 Compiler version 6，与前面的core_cm3.c不兼容，所以需要提前准备好Compiler version 5。</p><p>下载地址：<strong><a href="https://developer.arm.com/downloads/view/ACOMP5">https://developer.arm.com/downloads/view/ACOMP5</a></strong></p><p>解压之后，把解压的后文件夹放入到<strong>Keil</strong> <strong>MDK**</strong>的安装目录**下：</p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561831.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561832.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561833.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561834.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561835.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561836.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561837.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561838.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561839.png" alt="img"></p><ol><li>一些其他配置</li></ol><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561840.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561841.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561942.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561943.png" alt="img"></p><ol><li><h2 id="软件设计"><a href="#软件设计" class="headerlink" title="软件设计"></a>软件设计</h2></li><li><h3 id="main-c"><a href="#main-c" class="headerlink" title="main.c"></a>main.c</h3></li></ol><p>根据前面硬件电路设计，我们只要让<strong>GPIOA的0口输出低电平就行了</strong>。代码需要按照下面的步骤来实现。</p><ol><li>开启时钟</li></ol><p>在STM32中，让IO口工作，必须先开启对应的时钟。所以需要先查找到开启时钟的寄存器，然后通过该寄存器操作时钟的开启或关闭。我们要打开的是GPIOA的时钟。</p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561944.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561945.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561946.png" alt="img"></p><p>我们需要知道RCC_APB2ENR这个寄存器的地址。如何查找呢？先知道RCC这个外设的基地址，然后加上这个寄存器的偏移地址就行了。</p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561947.png" alt="img"></p><p>从上面可以看出来，RCC的基地址是0x4002 1000，APB2ENR的偏移量是0x18，所以<strong>APB2ENR的地址值是0x4002 1000 + 0x18</strong></p><p>有了地址，在这个地址写入一个数据，这个数据的二进制第2是1就行了。其他位暂时不管。我们写入4。这样就开启了GPIOA的时钟。</p><p>在代码中，我们需要把地址强转成指针才能给这个地址赋值。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*(<span class="type">uint32_t</span> *)(<span class="number">0x40021000</span> + <span class="number">0x18</span>) = <span class="number">4</span>;</span><br></pre></td></tr></table></figure><ol><li>给IO口设置输出模式</li></ol><p>在STM32中，如果要让IO口输出低电平或高电平，必须给要使用的IO设置为输出模式。</p><p>根据前面的思路，需要先找到GPIOA的基地址，再根据偏移地址找到要使用的寄存器的地址。GPIOA的基地址是<strong>0x4001 0800</strong>。</p><p>配置PA0口的输出模式的寄存器是GPIOA_CRL。</p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561948.png" alt="img"></p><p>只需要让这个寄存器的最后4位是 0011，就是最大速度的推挽输出。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*(<span class="type">uint32_t</span> *)(<span class="number">0x40010800</span> + <span class="number">0x00</span>) = <span class="number">3</span>;</span><br></pre></td></tr></table></figure><ol><li>给PA0口输出0</li></ol><p>给指定PA0口输出0就可以点亮LED1了。用到的寄存器是ODR数据输出寄存器。</p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561949.png" alt="img"></p><p>ODR寄存器的地址是 <strong>0x40010800 + 0x0c</strong> 。给这个地址的第0位写0，其他位写1。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*(<span class="type">uint32_t</span> *)((<span class="number">0x40010800</span> + <span class="number">0x0c</span>)) = <span class="number">0xfffe</span>;</span><br></pre></td></tr></table></figure><p><strong>main.c具体代码清单。</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdint.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 开启GPIOA的时钟 */</span></span><br><span class="line">    *(<span class="type">uint32_t</span> *)(<span class="number">0x40021000</span> + <span class="number">0x18</span>) = <span class="number">4</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 给PA0设置为通用推挽输出 */</span></span><br><span class="line">    *(<span class="type">uint32_t</span> *)(<span class="number">0x40010800</span> + <span class="number">0x00</span>) = <span class="number">3</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 给输出寄存器赋值 */</span></span><br><span class="line">    *(<span class="type">uint32_t</span> *)(<span class="number">0x40010800</span> + <span class="number">0x0c</span>) = <span class="number">0xfffe</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h3 id="编译工程"><a href="#编译工程" class="headerlink" title="编译工程"></a>编译工程</h3></li></ol><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561950.png" alt="img"></p><ol><li><h3 id="安装ST-LINK驱动"><a href="#安装ST-LINK驱动" class="headerlink" title="安装ST-LINK驱动"></a>安装ST-LINK驱动</h3></li><li><p>我们使用ST-LINK仿真器下载程序。</p></li></ol><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561951.png" alt="img"></p><ol><li>Keil的安装目录下自带了ST-LINK的USB驱动，双击安装即可。</li></ol><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561952.png" alt="img"></p><ol><li>升级STLink固件</li></ol><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561953.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561954.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561955.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561956.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561957.png" alt="img"></p><ol><li><h3 id="Keil中配置ST-LINK"><a href="#Keil中配置ST-LINK" class="headerlink" title="Keil中配置ST-LINK"></a>Keil中配置ST-LINK</h3></li></ol><p>还需要在Keil软件中，对仿真器做一些必要的配置。</p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561958.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561959.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561960.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561961.png" alt="img"></p><ol><li><h3 id="下载程序"><a href="#下载程序" class="headerlink" title="下载程序"></a>下载程序</h3></li></ol><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561962.png" alt="img"></p><ol><li><h3 id="操作寄存器方式的”进化”"><a href="#操作寄存器方式的”进化”" class="headerlink" title="操作寄存器方式的”进化”"></a>操作寄存器方式的”进化”</h3></li><li><h4 id="“进化1”"><a href="#“进化1”" class="headerlink" title="“进化1”"></a>“进化1”</h4></li></ol><p>在操作寄存器的时候，如果每次都查手册计算地址，是相当麻烦且无聊。ST公司早就考虑到了这个问题，已经提前把每个外设寄存器的地址提前给我们用<strong>宏定义</strong>的方式给算好了，我只需要直接使用即可。比如下面是定义的RCC各个寄存器地址。（stm32f10x.h中定义）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> PERIPH_BASE                ((uint32_t)0x40000000) </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AHBPERIPH_BASE             (PERIPH_BASE + 0x20000)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RCC_BASE                   (AHBPERIPH_BASE + 0x1000)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RCC                        ((RCC_TypeDef *) RCC_BASE)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    __IO <span class="type">uint32_t</span> CR;</span><br><span class="line">    __IO <span class="type">uint32_t</span> CFGR;</span><br><span class="line">    __IO <span class="type">uint32_t</span> CIR;</span><br><span class="line">    __IO <span class="type">uint32_t</span> APB2RSTR;</span><br><span class="line">    __IO <span class="type">uint32_t</span> APB1RSTR;</span><br><span class="line">    __IO <span class="type">uint32_t</span> AHBENR;</span><br><span class="line">    __IO <span class="type">uint32_t</span> APB2ENR;</span><br><span class="line">    __IO <span class="type">uint32_t</span> APB1ENR;</span><br><span class="line">    __IO <span class="type">uint32_t</span> BDCR;</span><br><span class="line">    __IO <span class="type">uint32_t</span> CSR;</span><br><span class="line">&#125; RCC_TypeDef;</span><br></pre></td></tr></table></figure><p>这里还巧妙的运用了<strong>结构体中各个成员地址是连续的特征</strong>。CR寄存器是RCC第0个32位寄存器，所以它相对于基地址的偏移是0。CFGR相对于基地址的偏移是4，…</p><p>APB2ENR的相对于基地址的偏移是6*4=24=0x18，和我们前面查找手册的结果是一致的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    RCC-&gt;APB2ENR = <span class="number">4</span>;</span><br><span class="line">    GPIOA-&gt;CRL = <span class="number">3</span>;</span><br><span class="line">    GPIOA-&gt;ODR = <span class="number">0xfffe</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样写起来是不是可读性就好很多了，而且也简单了很多。</p><ol><li><h4 id="“进化2”"><a href="#“进化2”" class="headerlink" title="“进化2”"></a>“进化2”</h4></li></ol><p>其实在上面的代码中还有一些问题。在STM32中一个寄存器是32位的，我们在编写代码的时候只是需要给某位或某几位赋值。由于STM32不支持位寻址，所以在前面的操作中，我们其实是修改了所有位。这是非常不合理的，也许其他位在其他地方有赋值，我们重新赋值势必会覆盖了其他值，带来的后果也是很严重的。</p><p>如何只修改特定的位的值，而不影响其他位呢？我们需要先回顾下一些常见的位操作，再来继续进化上面的代码。</p><ol><li>常用的一些位操作回顾</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdlib.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> buffer[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printfBinary</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *op, <span class="type">unsigned</span> <span class="type">char</span> result)</span></span><br><span class="line">&#123;</span><br><span class="line">    itoa(result, buffer, <span class="number">2</span>); <span class="comment">// 把result转成2进制字符串</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s = %s\r\n&quot;</span>, op, buffer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 左移 8&lt;&lt;1 = 1000&lt;&lt;1 = 10000*/</span></span><br><span class="line">    printfBinary(<span class="string">&quot;8 &lt;&lt; 1&quot;</span>, <span class="number">8</span> &lt;&lt; <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 右移 8&gt;&gt;1 = 1000&gt;&gt;1 = 100*/</span></span><br><span class="line">    printfBinary(<span class="string">&quot;8 &gt;&gt; 1&quot;</span>, <span class="number">8</span> &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 按位或 8|7 = 1000|0111 = 1111 */</span></span><br><span class="line">    printfBinary(<span class="string">&quot;8 | 7&quot;</span>, <span class="number">8</span> | <span class="number">7</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 按位或 8&amp;7 = 1000&amp;0111 = 0000 */</span></span><br><span class="line">    printfBinary(<span class="string">&quot;8 &amp; 7&quot;</span>, <span class="number">8</span> &amp; <span class="number">7</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 按位取反 ~8 = ~1000 = 0111 */</span></span><br><span class="line">    printfBinary(<span class="string">&quot;~8&quot;</span>, ~<span class="number">8</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        把某位置 1  (0 位 1位 ...)</span></span><br><span class="line"><span class="comment">            比如把 mum 的第 2 位置 1</span></span><br><span class="line"><span class="comment">                1. 得到一个数第 2 位是 1 其他都为 0</span></span><br><span class="line"><span class="comment">                   a =  0000 0100  是由 1&lt;&lt;2 得到</span></span><br><span class="line"><span class="comment">                2. 让 num | a</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    printfBinary(<span class="string">&quot;8置第 2 位为 1 &quot;</span>, <span class="number">8</span> | (<span class="number">1</span> &lt;&lt; <span class="number">2</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        把连续的多位同时置 1  (0 位 1位 ...)</span></span><br><span class="line"><span class="comment">            比如把 mum 的第 1和2 位置 1</span></span><br><span class="line"><span class="comment">                1  a =  3 &lt;&lt; 1</span></span><br><span class="line"><span class="comment">                2. num | a</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    printfBinary(<span class="string">&quot;8置第 1和2 位为 1 &quot;</span>, <span class="number">8</span> | (<span class="number">3</span> &lt;&lt; <span class="number">1</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        把某位置 0  (0位 1位 ...)</span></span><br><span class="line"><span class="comment">            比如把 mum 的第 2 位置 0</span></span><br><span class="line"><span class="comment">                1. 得到一个数第 2 位是 0 其他都为 1</span></span><br><span class="line"><span class="comment">                   a =  1111 0100  是由 ~(1&lt;&lt;2) 得到</span></span><br><span class="line"><span class="comment">                2. 让 num &amp; a</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    printfBinary(<span class="string">&quot;7置第 2 位为 0 &quot;</span>, <span class="number">7</span> &amp; ~(<span class="number">1</span> &lt;&lt; <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        把连续多位同时置 0  (0位 1位 ...)</span></span><br><span class="line"><span class="comment">            比如把 mum 的第 1和2 位置 0</span></span><br><span class="line"><span class="comment">                1. a = ~(3&lt;&lt;1)</span></span><br><span class="line"><span class="comment">                2. 让 num &amp; a</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    printfBinary(<span class="string">&quot;7置第 1和2 位为 0 &quot;</span>, <span class="number">7</span> &amp; ~(<span class="number">3</span> &lt;&lt; <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        把连续的多位同时置位  101 (二进制)</span></span><br><span class="line"><span class="comment">            比如把 mum 的第 1,2,3 位置为 101</span></span><br><span class="line"><span class="comment">            1. num的 1,2,3位置为0</span></span><br><span class="line"><span class="comment">                num &amp;= ~(7&lt;&lt;1)</span></span><br><span class="line"><span class="comment">            2. num |= (5 &lt;&lt; 1);    (5 = 101)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> num = <span class="number">13</span>;</span><br><span class="line">    num &amp;= ~(<span class="number">7</span> &lt;&lt; <span class="number">1</span>);</span><br><span class="line">    num |= <span class="number">5</span> &lt;&lt; <span class="number">1</span>;</span><br><span class="line">    printfBinary(<span class="string">&quot;13&quot;</span>, <span class="number">13</span>);</span><br><span class="line">    printfBinary(<span class="string">&quot;10的123位置为101 &quot;</span>, num);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>继续进化</li></ol><p>根据前面基本位操作的回顾，我们综合使用这些位操作，可以把代码进化为下面的形式。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 开启GPIOA的时钟 第2位置1*/</span></span><br><span class="line">    RCC-&gt;APB2ENR |= <span class="number">0x1</span> &lt;&lt; <span class="number">2</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* GPIOA_CRL的最后4位置 0011 */</span></span><br><span class="line">    GPIOA-&gt;CRL &amp;= ~(<span class="number">0x1</span> &lt;&lt; <span class="number">3</span>);</span><br><span class="line">    GPIOA-&gt;CRL &amp;= ~(<span class="number">0x1</span> &lt;&lt; <span class="number">2</span>);</span><br><span class="line">    GPIOA-&gt;CRL |= <span class="number">0x1</span> &lt;&lt; <span class="number">1</span>;</span><br><span class="line">    GPIOA-&gt;CRL |= <span class="number">0x1</span> &lt;&lt; <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* GPIOA_ODR的第0位置0 */</span></span><br><span class="line">    GPIOA-&gt;ODR &amp;= ~(<span class="number">0x1</span> &lt;&lt; <span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h4 id="“进化3”"><a href="#“进化3”" class="headerlink" title="“进化3”"></a>“进化3”</h4></li></ol><p>在上次的进化中，我们是给寄存器“或等”和“与等”了一些值，这些值都是通过相应的“移位”操作得到的。比如要操作第2位，就需要把0x1左移2位得到。我们需要查找手册才能知道要移位几。也是很不方便。</p><p>其实ST公司也把我们需要的<strong>移位后的值给提前计算好</strong>了，用宏定义的方式供我们使用。</p><p>比如前面的开启时钟，已经定义了好了这个值。正好就是1&lt;&lt;2</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span>    RCC_APB2ENR_IOPAEN        ((uint32_t)0x00000004)</span></span><br></pre></td></tr></table></figure><p>利用ST公司提前预定义的这些值，可以进一步进化代码为下面的形式。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    RCC-&gt;APB2ENR |= RCC_APB2ENR_IOPAEN;</span><br><span class="line">    </span><br><span class="line">    GPIOA-&gt;CRL &amp;= ~GPIO_CRL_CNF0_1;</span><br><span class="line">    GPIOA-&gt;CRL &amp;= ~GPIO_CRL_CNF0_0;</span><br><span class="line">    GPIOA-&gt;CRL |= GPIO_CRL_MODE0_1;</span><br><span class="line">    GPIOA-&gt;CRL |= GPIO_CRL_MODE0_0;</span><br><span class="line"></span><br><span class="line">    GPIOA-&gt;ODR &amp;= ~GPIO_ODR_ODR0;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样可读性就好多了，等操作熟练之后，很多操作不查找寄存器手册也能直接操作了。</p><ol><li><h1 id="GPIO外设"><a href="#GPIO外设" class="headerlink" title="GPIO外设"></a>GPIO外设</h1></li><li><h2 id="GPIO概述"><a href="#GPIO概述" class="headerlink" title="GPIO概述"></a>GPIO概述</h2></li></ol><p>GPIO<strong>（General-purpose</strong> <strong>input**</strong>/<strong><strong>output</strong></strong>）<strong>，通用型输入输出。简单理解就是我们可以</strong>控制输入输出**的STM32引脚，统称为GPIO。</p><p>GPIO存在的意义就是<strong>用程序控制或读取</strong>他们的<strong>输出或输入</strong>。</p><ol><li><h3 id="GPIO总体说明"><a href="#GPIO总体说明" class="headerlink" title="GPIO总体说明"></a>GPIO总体说明</h3></li></ol><p>STM32有多组GPIO，比如我们使用的芯片：STM32F103ZET6共有<strong>7组GPIO**</strong>端口<strong>，他们分别是</strong>GPIOx（x从A-G）<strong>，</strong>每组控制16个引脚，<strong>共有</strong>112<strong>个GPIO引脚。具体一个其他STM32芯片有多少组GPIO，可以去查看他们的对应的</strong>数据手册**。</p><p>每个引脚的电平是<strong>0-3.3V</strong>，部分引脚最高可以兼容到<strong>5V</strong>。</p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561963.png" alt="img"></p><ol><li><h3 id="GPIO的主要特点"><a href="#GPIO的主要特点" class="headerlink" title="GPIO的主要特点"></a>GPIO的主要特点</h3></li><li><p>不同型号，IO口的数量可能不一样。</p></li><li>快速翻转。最快可以达到每2个时钟周期翻转一次。（STM32F1系列最快可以达到50MHz的翻转速度）。</li><li>每个IO都可以作为外部中断。</li><li><p>支持8种工作模式。</p></li><li><h3 id="GPIO的8种工作模式"><a href="#GPIO的8种工作模式" class="headerlink" title="GPIO的8种工作模式"></a>GPIO的8种工作模式</h3></li></ol><p>GPIO端口的每个位（引脚）可以由<strong>软件</strong>分别<strong>配置</strong>成8种模式，当然对同一个引脚同一时间只能处于某一种模式中。</p><ol><li><strong>输入浮空（**</strong>Input<strong> </strong>floating<strong>**）</strong></li><li><strong>输入上拉（**</strong>Input<strong> </strong>pull-up）<strong>**信号默认高电平</strong></li><li><strong>输入下拉（Input-pull-down）**</strong>信号默认低电平**</li><li><strong>模拟输入（**</strong>Analog<strong>**）</strong></li><li><strong>通用开漏式输出（**</strong>Output<strong> </strong>open-drain）**</li><li><strong>通用推挽式输出（**</strong>Output<strong> </strong>push-pull）**</li><li><strong>复用推挽式功能（Alternate function push-pull）</strong></li><li><strong>复用开漏式功能（Alternate function open-drain）</strong></li></ol><p>每个I/O端口位可以自由编程，然而I/0端口寄存器必须按<strong>32位字</strong>被访问。</p><p><strong>输出模式</strong>下可以<strong>控制**</strong>端口<strong>**输出</strong>高电平低电平，用于驱动LED，蜂鸣器等，如果是大功率器件（比如电机），还需要加上驱动器（小电流控制大电流）。</p><p><strong>输入模式</strong>下可以<strong>读取**</strong>端口**的高低电平，用于读取外接按键，外接模拟信号的输入，ADC电压采集，模拟通信协议接受数据等。</p><ol><li><h2 id="GPIO工作模式"><a href="#GPIO工作模式" class="headerlink" title="GPIO工作模式"></a>GPIO工作模式</h2></li><li><h3 id="GPIO每位的具体电路结构"><a href="#GPIO每位的具体电路结构" class="headerlink" title="GPIO每位的具体电路结构"></a>GPIO每位的具体电路结构</h3></li></ol><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561964.png" alt="img"></p><ol><li><h3 id="每种模式详解"><a href="#每种模式详解" class="headerlink" title="每种模式详解"></a>每种模式详解</h3></li><li><h4 id="输出模式"><a href="#输出模式" class="headerlink" title="输出模式"></a>输出模式</h4></li><li><p><strong>输出**</strong>缓冲器<strong>**被激活。</strong></p></li><li><strong>推挽模式：输出寄存器上的 1 将激活P-MOS，输出高电平。0 将激活N-MOS，输出低电平。</strong></li><li><strong>开漏模式：P-MOS永远关闭。 输出寄存器上的 0 激活N-MOS，而输出寄存器上的 1 将**</strong>端口<strong><strong>置于高阻状态，所以外部必须要接</strong></strong>上拉电阻<strong>**。</strong></li><li><strong>施密特触发输入被激活。</strong></li><li><strong>弱上拉和下拉电阻被禁止。</strong></li><li><strong>出现在**</strong>I/O<strong>**脚上的数据在每个APB2时钟被采样到输入数据寄存器。</strong></li><li><strong>在开漏模式时，对输入数据寄存器的读访问可得到**</strong>I/O<strong>**状态。</strong></li><li><p><strong>在推挽模式时，对输出数据寄存器的读访问得到最后一次写的值。</strong></p></li><li><h4 id="复用输出模式"><a href="#复用输出模式" class="headerlink" title="复用输出模式"></a>复用输出模式</h4></li></ol><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561965.png" alt="img"></p><ol><li><strong>在开漏或推挽式配置中，输出**</strong>缓冲器<strong>**被打开。</strong></li><li><strong>内置外设的信号驱动输出**</strong>缓冲器<strong>**（复用功能输出）。</strong></li><li><strong>施密特触发输入被激活。</strong></li><li><strong>弱上拉和下拉电阻被禁止。</strong></li><li><strong>在每个APB2**</strong>时钟周期<strong><strong>，出现在</strong></strong>I/O<strong>**脚上的数据被采样到输入数据寄存器。</strong></li><li><strong>开漏模式时，读输入数据寄存器时可得到**</strong>I/O<strong>**口状态。</strong></li><li><p><strong>在推挽模式时，读输出数据寄存器时可得到最后一次写的值。</strong></p></li><li><h4 id="输入模式"><a href="#输入模式" class="headerlink" title="输入模式"></a>输入模式</h4></li></ol><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561966.png" alt="img"></p><ol><li><strong>2个保护**</strong>二极管<strong>**的作用是保护我们的芯片不会由于电压过高或过低而烧毁。</strong></li></ol><p>VDD是接电源（3.3V），VSS接地（0V）。如果IO引脚的输入电压高于VDD的值到一定程度，上方保护二极管导通，则引脚电压被拉低到VDD。如果IO引脚的输入电压（负电压）低于VSS到一定程度，则下方保护二极管导通，电压被拉高到VSS。</p><ol><li>2个开关控制引脚没有输入的时候是上拉，下拉还是浮空。</li></ol><p>当上面的开关闭合的时候，输入被拉高到高电平。当下面的开关闭合的时候，入被拉低到低电平。如果两个都不闭合，输入就是悬空状态。<strong>两个同时闭合，就是费电了，不会这么做的</strong>。</p><ol><li>施密特（图中翻译成肖特基触发器应该是翻译错误，英文版手册是TTL Schmitt trigger）触发器是包含正反馈的比较器电路。可以对信号进行波形整形。</li></ol><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561967.png" alt="img"></p><ol><li><p>从施密特触发起出来的数据，进入到输入数据寄存器中，我们就可以从中读取数据了。</p></li><li><h4 id="模拟输入模式"><a href="#模拟输入模式" class="headerlink" title="模拟输入模式"></a>模拟输入模式</h4></li></ol><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561968.png" alt="img"></p><p>当配置为<strong>模拟输入</strong>时：</p><ol><li>输出部分被禁止。</li><li><strong>禁止施密特触发输入</strong>，实现了每个模拟I/O引脚上的零消耗。施密特触发输出值被强置为0，此时也可以不用开启对应GPIO的时钟。</li><li>弱上拉和下拉电阻被禁止。</li><li><p>读取输入数据寄存器时数值永远为0。</p></li><li><h2 id="与GPIO相关的7个寄存器（重要）"><a href="#与GPIO相关的7个寄存器（重要）" class="headerlink" title="与GPIO相关的7个寄存器（重要）"></a>与GPIO相关的7个寄存器（重要）</h2></li></ol><p>每个GPI/O端口有7个相关的：</p><ul><li>2个32位配置寄存器<strong>（GPIOx_CRL，GPIOx_CRH）</strong>。</li><li>2个32位数据寄存器<strong>（GPIOx_IDR和GPIOx_ODR）</strong>。</li><li>1个32位置位/复位寄存器<strong>（GPIOx_BSRR）</strong>。</li><li>1个16位复位寄存器<strong>（GPIOx_BRR）</strong>。</li><li>1个32位锁定寄存器<strong>（GPIOx_LCKR）</strong>。</li></ul><ol><li><h3 id="GPIOx-CRL（端口配置低寄存器）"><a href="#GPIOx-CRL（端口配置低寄存器）" class="headerlink" title="GPIOx_CRL（端口配置低寄存器）"></a>GPIOx_CRL（端口配置低寄存器）</h3></li></ol><p><strong>GPIOx_CRL（Port configuration register low）</strong>，<strong>x</strong>可以是<strong>A-G</strong>。</p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561969.png" alt="img"></p><p>该寄存器配置的每个GPIO的 0-7 这个8个位，所以叫低寄存器。</p><ol><li>MODE：每个端口有2个MODE位进行控制。<ol><li>00：输入模式（复位后的状态） </li><li>01：输出模式，最大速度10MHz </li><li>10：输出模式，最大速度2MHz </li><li>11：输出模式，最大速度50MHz</li></ol></li><li><p>CNF：每个端口有2个CNF位进行控制。</p><ol><li>当MODE是00 （输入模式）<ol><li>00：模拟输入模式 </li><li>01：浮空输入模式(复位后的状态) </li><li>10：上拉/下拉输入模式 </li><li>11：保留 </li></ol></li><li>当MODE&gt;00（输出模式）<ol><li>00：通用推挽输出模式 </li><li>01：通用开漏输出模式 </li><li>10：复用功能推挽输出模式 </li><li>11：复用功能开漏输出模式</li></ol></li></ol></li><li><h3 id="GPIOx-CRH（端口配置高寄存器）"><a href="#GPIOx-CRH（端口配置高寄存器）" class="headerlink" title="GPIOx_CRH（端口配置高寄存器）"></a>GPIOx_CRH（端口配置高寄存器）</h3></li></ol><p><strong>GPIOx_CRH（Port configuration register high）</strong>。</p><p>该寄存器配置的是每个端口的 8-15引脚，配置方式和低位寄存器完全一样。</p><ol><li><h3 id="GPIOx-IDR（端口输入数据寄存器）"><a href="#GPIOx-IDR（端口输入数据寄存器）" class="headerlink" title="GPIOx_IDR（端口输入数据寄存器）"></a>GPIOx_IDR（端口输入数据寄存器）</h3></li></ol><p><strong>Port</strong> <strong>i**</strong>nput<strong> </strong>d<strong>**ata</strong> <strong>r**</strong>egister**</p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561970.png" alt="img"></p><p>保留位始终读为0。剩下的分别对应每个引脚的输入值。</p><ol><li><h3 id="GPIOx-ODR（端口输出数据寄存器）"><a href="#GPIOx-ODR（端口输出数据寄存器）" class="headerlink" title="GPIOx_ODR（端口输出数据寄存器）"></a>GPIOx_ODR（端口输出数据寄存器）</h3></li></ol><p><strong>Port</strong> <strong>o**</strong>utput<strong> </strong>d<strong>**ata</strong> <strong>r**</strong>egister**</p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561971.png" alt="img"></p><p>保留位始终读为0。剩下的分别对应每个引脚的输出值。</p><ol><li><h3 id="GPIOx-BSRR（端口位设置-清除寄存器）"><a href="#GPIOx-BSRR（端口位设置-清除寄存器）" class="headerlink" title="GPIOx_BSRR（端口位设置/清除寄存器）"></a>GPIOx_BSRR（端口位设置/清除寄存器）</h3></li></ol><p><strong>Port</strong> <strong>b**</strong>it<strong> </strong>s<strong><strong>et/</strong></strong>r<strong>**eset</strong> <strong>r**</strong>egister**</p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204562072.png" alt="img"></p><ol><li>高16位是用清除对应的数据输出寄存器的位（0-15）的值：设置为0不影响，设置为1会清除ODR对应的位的值（置为0）。</li><li><p>低16位是用设置对应的数据输出寄存器的位（0-15）的值：设置为0不影响，设置为1会设置ODR对应的位的值（置为1）。</p></li><li><h3 id="GPIOx-BRR（端口位清除寄存器）"><a href="#GPIOx-BRR（端口位清除寄存器）" class="headerlink" title="GPIOx_BRR（端口位清除寄存器）"></a>GPIOx_BRR（端口位清除寄存器）</h3></li></ol><p>这个寄存器具有了<strong>GPIOx_BSRR一半的功能：清除</strong>。</p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204562073.png" alt="img"></p><ol><li><h3 id="GPIOx-LCKR（端口配置锁定寄存器）"><a href="#GPIOx-LCKR（端口配置锁定寄存器）" class="headerlink" title="GPIOx_LCKR（端口配置锁定寄存器）"></a>GPIOx_LCKR（端口配置锁定寄存器）</h3></li></ol><p><strong>Port configuration</strong> <strong>l**</strong>o<strong>**ck</strong> <strong>r**</strong>egister**</p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204562074.png" alt="img"></p><p>该寄存器用来锁定端口位的配置。位[15:0]用于锁定GPIO端口的配置。在规定的写入操作期间，不能改变LCKP[15:0]。当对相应的端口位执行了LOCK序列后，在下次系统复位之前将不能再更改端口位的配置。</p><p>每个锁定位锁定控制寄存器（CRL，CRH）中相应的4个位（CNF2位和MODE2位）。</p><p>第16位用来激活锁定寄存器，必须按照规定的时序来操作才行: 写1 -&gt; 写0 -&gt; 写1 -&gt; 读0 -&gt; 读1。</p><p>对0-15位：</p><ul><li>0：不锁定对应端口的配置。</li><li>1：锁定对应端口的配置。</li></ul><ol><li><h2 id="GPIO案例：流水灯"><a href="#GPIO案例：流水灯" class="headerlink" title="GPIO案例：流水灯"></a>GPIO案例：流水灯</h2></li><li><h3 id="需求描述-1"><a href="#需求描述-1" class="headerlink" title="需求描述"></a>需求描述</h3></li></ol><p>在3个LED上实现流水灯效果。</p><ol><li><h3 id="硬件电路设计-1"><a href="#硬件电路设计-1" class="headerlink" title="硬件电路设计"></a>硬件电路设计</h3></li></ol><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204562075.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204562076.png" alt="img"></p><ol><li><h3 id="软件设计（寄存器）"><a href="#软件设计（寄存器）" class="headerlink" title="软件设计（寄存器）"></a>软件设计（寄存器）</h3></li><li><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4></li><li><p>copy上一个项目</p></li><li>并做如下操作</li></ol><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204562077.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204562078.png" alt="img"></p><ol><li>创建一个目录： Hardware/Led 存储我们的LED驱动文件。</li><li>在 Hardware/Led下创建2个文件 led.h和led.c。</li><li>使用keil打开项目，做下简单配置。</li></ol><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204562079.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204562080.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204562081.png" alt="img"></p><ol><li><h4 id="具体代码"><a href="#具体代码" class="headerlink" title="具体代码"></a>具体代码</h4></li><li><h5 id="main-c-1"><a href="#main-c-1" class="headerlink" title="main.c"></a>main.c</h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Driver_LED.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Delay.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint32_t</span> leds[] = &#123;LED_1, LED_2, LED_3&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 1. 初始化LED */</span></span><br><span class="line">    Driver_LED_Init();</span><br><span class="line">    Driver_LED_OffAll(leds, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">uint8_t</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            Driver_LED_OffAll(leds, <span class="number">3</span>);</span><br><span class="line">            Driver_LED_On(leds[i]);</span><br><span class="line">            Delay_ms(<span class="number">500</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        Driver_LED_OffAll(leds, <span class="number">3</span>);</span><br><span class="line">        Driver_LED_On(leds[<span class="number">1</span>]);</span><br><span class="line">        Delay_ms(<span class="number">500</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h5 id="Delay-h"><a href="#Delay-h" class="headerlink" title="Delay.h"></a>Delay.h</h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __delay_h</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __delay_h</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span>    <span class="comment">// Device header</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay_us</span><span class="params">(<span class="type">uint16_t</span> us)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay_ms</span><span class="params">(<span class="type">uint16_t</span> ms)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay_s</span><span class="params">(<span class="type">uint16_t</span> s)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><ol><li><h5 id="Delay-c"><a href="#Delay-c" class="headerlink" title="Delay.c"></a>Delay.c</h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//延时函数使用到了系统定时器，大家先使用，到提高篇时再学习具体为什么这么写。</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;delay.h&quot;</span> <span class="comment">// Device header</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay_us</span><span class="params">(<span class="type">uint16_t</span> us)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 定时器重装值 */</span></span><br><span class="line">    SysTick-&gt;LOAD = <span class="number">72</span> * us;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 清除当前计数值 */</span></span><br><span class="line">    SysTick-&gt;VAL = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*设置内部时钟源（2位-&gt;1）,不需要中断（1位-&gt;0），并启动定时器(0位-&gt;1)*/</span></span><br><span class="line">    SysTick-&gt;CTRL = <span class="number">0x5</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*等待计数到0， 如果计数到0则16位会置为1*/</span>   </span><br><span class="line">    <span class="keyword">while</span> (!(SysTick-&gt;CTRL &amp; SysTick_CTRL_COUNTFLAG));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 关闭定时器 */</span></span><br><span class="line">    SysTick-&gt;CTRL &amp;= ~SysTick_CTRL_ENABLE; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay_ms</span><span class="params">(<span class="type">uint16_t</span> ms)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (ms--)</span><br><span class="line">    &#123;</span><br><span class="line">        Delay_us(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay_s</span><span class="params">(<span class="type">uint16_t</span> s)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (s--)</span><br><span class="line">    &#123;</span><br><span class="line">        Delay_ms(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h5 id="Driver-LED-h"><a href="#Driver-LED-h" class="headerlink" title="Driver_LED.h"></a>Driver_LED.h</h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __DRIVER_LED_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __DRIVER_LED_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED_1 GPIO_ODR_ODR0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED_2 GPIO_ODR_ODR1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED_3 GPIO_ODR_ODR8</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_Init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_On</span><span class="params">(<span class="type">uint32_t</span> led)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_Off</span><span class="params">(<span class="type">uint32_t</span> led)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_Toggle</span><span class="params">(<span class="type">uint32_t</span> led)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_OnAll</span><span class="params">(<span class="type">uint32_t</span> leds[], <span class="type">uint8_t</span> size)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_OffAll</span><span class="params">(<span class="type">uint32_t</span> leds[], <span class="type">uint8_t</span> size)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><ol><li><h5 id="Driver-LED-c"><a href="#Driver-LED-c" class="headerlink" title="Driver_LED.c"></a>Driver_LED.c</h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Driver_LED.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 对LED进行初始化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 打开GPIOA的时钟 */</span></span><br><span class="line">    RCC-&gt;APB2ENR |= RCC_APB2ENR_IOPAEN;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 2. 给用到的端口的所有 PIN (PA0 PA1 PA8) 设置工作模式: 通用推挽输出 MODE:11  CNF:00 */</span></span><br><span class="line">    GPIOA-&gt;CRL |= (GPIO_CRL_MODE0 | GPIO_CRL_MODE1);</span><br><span class="line">    GPIOA-&gt;CRL &amp;= ~(GPIO_CRL_CNF0 | GPIO_CRL_CNF1);</span><br><span class="line"></span><br><span class="line">    GPIOA-&gt;CRH |= GPIO_CRH_MODE8;</span><br><span class="line">    GPIOA-&gt;CRH &amp;= ~GPIO_CRH_CNF8;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 3. 关闭所有灯  */</span></span><br><span class="line">    Driver_LED_Off(LED_1);</span><br><span class="line">    Driver_LED_Off(LED_2);</span><br><span class="line">    Driver_LED_Off(LED_3);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 点亮指定的LED</span></span><br><span class="line"><span class="comment"> * @param &#123;uint32_t&#125; led 要点亮的LED</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_On</span><span class="params">(<span class="type">uint32_t</span> led)</span></span><br><span class="line">&#123;</span><br><span class="line">    GPIOA-&gt;ODR &amp;= ~led;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 关闭指定的LED</span></span><br><span class="line"><span class="comment"> * @param &#123;uint32_t&#125; led 要关闭的LED</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_Off</span><span class="params">(<span class="type">uint32_t</span> led)</span></span><br><span class="line">&#123;</span><br><span class="line">    GPIOA-&gt;ODR |= led;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 翻转LED的状态</span></span><br><span class="line"><span class="comment"> * @param &#123;uint32_t&#125; led 要翻转的LED</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_Toggle</span><span class="params">(<span class="type">uint32_t</span> led)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 读取引脚的电平,如果是1(目前是关闭), 打开, 否则就关闭 */</span></span><br><span class="line">    <span class="keyword">if</span> ((GPIOA-&gt;IDR &amp; led) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Driver_LED_Off(led);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        Driver_LED_On(led);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 打开数组中所有的灯</span></span><br><span class="line"><span class="comment"> * @param &#123;uint32_t&#125; leds 所有灯</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; size 灯的个数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_OnAll</span><span class="params">(<span class="type">uint32_t</span> leds[], <span class="type">uint8_t</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint8_t</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Driver_LED_On(leds[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 关闭数组中所有的灯</span></span><br><span class="line"><span class="comment"> * @param &#123;uint32_t&#125; leds 所有灯</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; size 灯的个数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_OffAll</span><span class="params">(<span class="type">uint32_t</span> leds[], <span class="type">uint8_t</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint8_t</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Driver_LED_Off(leds[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h1 id="总体架构和时钟系统"><a href="#总体架构和时钟系统" class="headerlink" title="总体架构和时钟系统"></a>总体架构和时钟系统</h1></li><li><h2 id="STM32总体架构"><a href="#STM32总体架构" class="headerlink" title="STM32总体架构"></a>STM32总体架构</h2></li></ol><p>经过一段时间的学习，我们需要从宏观上了解下它的系统架构，各个模块之间的层级关系以及相互的影响。</p><ol><li><h2 id="时钟系统"><a href="#时钟系统" class="headerlink" title="时钟系统"></a>时钟系统</h2></li><li><h3 id="时钟树"><a href="#时钟树" class="headerlink" title="时钟树"></a>时钟树</h3></li></ol><p>在STM32中有3种不同的时钟源用来驱动系统时钟(SYSCLK)：</p><ul><li>HSI振荡器时钟（High Speed Internal oscillator，高速内部时钟）</li><li>HSE振荡器时钟（High Speed External（Oscillator / Clock），高速外部时钟）</li><li>PLL时钟（Phase Locked Loop 锁相环/倍频器）</li></ul><p>还有2种2级时钟：</p><ul><li>LSI时钟（Low Speed Internal，低速内部时钟）</li><li>LSE时钟（Low Speed External oscillator，低速外部时钟）。</li></ul><p>为什么提供这么多的时钟？<strong>节能！</strong>高速设备接高速时钟，低速设备接低速时钟，可以最大程度的达到节能效果。详见下图时钟树。</p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204562082.png" alt="img"></p><p>可以看这个简图：</p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204562083.png" alt="img"></p><p><strong>该时钟树目前不要求记住，等以后编程时，只需要时不时回头翻看即可。代码写多了，这些知识自会烂熟于胸。</strong></p><ol><li><h3 id="各个时钟介绍"><a href="#各个时钟介绍" class="headerlink" title="各个时钟介绍"></a>各个时钟介绍</h3></li><li><p>HSE时钟</p></li></ol><p>高速外部时钟是由外部时钟源提供，目前几乎所有的STM32单片机的设计都是在外部接一个8MHz的晶振，经过PLL倍频（9倍频）后得到一个72MHz的系统时钟。我们系统默认就是这个时钟。这个在启动文件可以看到。</p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204562084.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204562085.png" alt="img"></p><ol><li>HSI时钟</li></ol><p>HSI时钟信号由内部8MHz的RC振荡器产生，可直接作为系统时钟或在2分频后作为PLL输入。HSI RC振荡器能够在不需要任何外部器件的条件下提供系统时钟。它的启动时间比HSE晶体振荡器短。然而，即使在校准之后它的时钟频率<strong>精度仍较差</strong>。</p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204562086.png" alt="img"></p><ol><li>PLL时钟</li></ol><p>内部PLL用来倍频<strong>HSI</strong> <strong>RC</strong>的输出时钟或<strong>HSE</strong>晶体输出时钟。PLL的设置必须在其被激活前完成。<strong>一旦PLL被激活，这些参数就不能被改动</strong>。如果PLL中断在时钟中断寄存器里被允许，当PLL准备就绪时，可产生中断申请。</p><p>PLL时钟一般都是对外部的8MHz的时钟信号经过9倍频后，得到72MHz的时钟频率，这是STM32F1系列允许的最高时钟频率。</p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204562087.png" alt="img"></p><ol><li>LSE时钟</li></ol><p>LSE晶体是一个32.768kHz的低速外部晶体或陶瓷谐振器。它为实时时钟或者其他定时功能提供一个低功耗且精确的时钟源。</p><p>LSE是<strong>不能**</strong>驱动系统<strong>**时钟</strong>的。</p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204562088.png" alt="img"></p><ol><li>LSI时钟</li></ol><p>LSI RC担当一个低功耗时钟源的角色，它可以在停机和待机模式下保持运行，为独立看门狗和自动唤醒单元提供时钟。LSI时钟频率大约40kHz（在30kHz和60kHz之间）。</p><p>LSI也是<strong>不能**</strong>驱动系统<strong>**时钟</strong>的。</p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204562089.png" alt="img"></p><ol><li><h1 id="HAL库开发入门"><a href="#HAL库开发入门" class="headerlink" title="HAL库开发入门"></a>HAL库开发入门</h1></li><li><h2 id="HAL介绍"><a href="#HAL介绍" class="headerlink" title="HAL介绍"></a>HAL介绍</h2></li><li><p>为什么要学习HAL库开发</p></li></ol><p>到目前我们已经学会1种开发SMT32程序的姿势：基于寄存器开发。</p><p>寄存器开发效率比较低，在工作中如果想<strong>快速开发</strong>还是要会用到HAL库开发。</p><p>HAL库是目前ST主力推广的开发方式，所以你如果还<strong>要用ST的芯片</strong>，会使用HAL库开发是势在必行的。而且最最关键的是，使用HAL开发有诸多的好处。</p><p>目前，HAL库已经支持STM32全线产品。</p><ol><li>什么是HAL库</li></ol><p>HAL库的全称是Hardware Abstraction Layer，翻译成<strong>硬件抽象层</strong>。HAL库是ST为STM32最新推出的抽象层嵌入式软件，可以更好的确保跨STM32产品的最大可移植性。该库提供了一整套一致的中间件组件，如RTOS，USB，TCP/IP和图形等。</p><p>HAL库是基于一个非限制性的BSD许可协议（Berkeley Software Distribution）而发布的开源代码。 ST制作的中间件堆栈（USB主机和设备库，STemWin）带有允许轻松重用的许可模式，只要是在ST公司的MCU 芯片上使用，库中的中间件(USB 主机/设备库,STemWin)协议栈即被允许随便修改，并可以反复使用。至于基于其它著名的开源解决方案商的中间件（FreeRTOS，FatFs，LwIP和PolarSSL）也都具有友好的用户许可条款。</p><ol><li>CMSIS和HAL库的关系</li></ol><p><strong>CMSIS**</strong>（<strong><strong>Cortex Microcontroller Software Interface Standard</strong></strong>）**是 Cortex-M 处理器系列的与供应商无关的硬件抽象层。它是ARM公司制定的一个标准。它可以为处理器和外设实现一致且简单的软件接口，从而简化软件的重用、缩短微控制器新开发人员的学习过程，并缩短新设备的上市时间。简单来说，就是ARM公司制定标准，芯片厂商按照此标准编写相应的程序，实现统一的接口，方便开发人员的使用。</p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204562090.png" alt="img"></p><ol><li><h2 id="HAL库开发环境搭建"><a href="#HAL库开发环境搭建" class="headerlink" title="HAL库开发环境搭建"></a>HAL库开发环境搭建</h2></li><li><h3 id="安装Java运行环境"><a href="#安装Java运行环境" class="headerlink" title="安装Java运行环境"></a>安装Java运行环境</h3></li></ol><p>STM32CubeMX 要求java8的运行环境。下载地址：<strong><a href="https://www.oracle.com/java/technologies/javase/javase8u211-later-archive-downloads.html">https://www.oracle.com/java/technologies/javase/javase8u211-later-archive-downloads.html</a></strong></p><ol><li><h3 id="安装STM32CubeMX"><a href="#安装STM32CubeMX" class="headerlink" title="安装STM32CubeMX"></a>安装STM32CubeMX</h3></li></ol><p>ST公司提供的一个工具，非常方便的用图形化的方式帮我们创建工程，和完成各种配置。</p><p>下载地址：<strong><a href="https://www.st.com/zh/development-tools/stm32cubemx.html">https://www.st.com/zh/development-tools/stm32cubemx.html#get-software</a></strong></p><p>双击安装即可。</p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204562091.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204562092.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204562093.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204562094.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204562095.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204562096.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204562097.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204562098.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204562099.png" alt="img"></p><ol><li><h3 id="在线下载芯片支持包"><a href="#在线下载芯片支持包" class="headerlink" title="在线下载芯片支持包"></a>在线下载芯片支持包</h3></li></ol><p>双击<strong>CubeMX</strong>进入如下界面。</p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-1725522045620100.png" alt="img"></p><p>先安装下软件支持包：</p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-1725522045620101.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-1725522045620102.png" alt="img"></p><p>点击安装之后，需要先登录你的ST账号，没有就先注册一个。</p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-1725522045620103.png" alt="img"></p><ol><li><h3 id="离线安装芯片支持包"><a href="#离线安装芯片支持包" class="headerlink" title="离线安装芯片支持包"></a>离线安装芯片支持包</h3></li></ol><p>如果网速不好，下载会比较慢。也可以选择离线安装。</p><ol><li>下载离线芯片支持包</li></ol><p>下载地址：<strong><a href="https://www.st.com/zh/development-tools/stm32cubemx.html#tools-software">https://www.st.com/zh/development-tools/stm32cubemx.html#tools-software</a></strong></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-1725522045620104.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-1725522045620105.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-1725522045620106.png" alt="img"></p><ol><li>导入芯片支持包</li></ol><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-1725522045621107.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-1725522045621108.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-1725522045621109.png" alt="img"></p><p><strong>注意:</strong></p><ol><li><strong>上面的离线安装方式只能安装基础包(en.stm32cubef1.zip),升级包(en.stm32cubef1-v1-8-5.zip)无法安装.</strong></li><li><p><strong>把en.stm32cubef1-v1-8-5.zip拷贝到stm32cube的仓库中,直接解压就行了.仓库位置: C:\Users\你的用户名\STM32Cube**</strong>Repository<strong>**. 用解压的文件覆盖原来的基础包.</strong></p></li><li><h2 id="LED流水灯案例（HAL库）"><a href="#LED流水灯案例（HAL库）" class="headerlink" title="LED流水灯案例（HAL库）"></a>LED流水灯案例（HAL库）</h2></li><li><h3 id="需求描述-2"><a href="#需求描述-2" class="headerlink" title="需求描述"></a>需求描述</h3></li></ol><p>实现LED流水灯。用的GPIOA的 0、1、8口。</p><ol><li><h3 id="硬件电路设计-2"><a href="#硬件电路设计-2" class="headerlink" title="硬件电路设计"></a>硬件电路设计</h3></li></ol><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-1725522045621110.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-1725522045621111.png" alt="img"></p><ol><li><h3 id="软件设计-1"><a href="#软件设计-1" class="headerlink" title="软件设计"></a>软件设计</h3></li><li><h4 id="创建HAL库工程"><a href="#创建HAL库工程" class="headerlink" title="创建HAL库工程"></a>创建HAL库工程</h4></li><li><p>操作页面介绍</p></li></ol><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-1725522045621112.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-1725522045621113.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-1725522045621114.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-1725522045621115.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-1725522045621116.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-1725522045621117.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-1725522045621118.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-1725522045621119.png" alt="img"></p><ol><li>根据需求设置参数</li></ol><ul><li>Debug参数选择</li></ul><p>默认debug选项没有设置，需要开启。<strong>选择**</strong>串口<strong><strong>即可。这个地方务必设置好，否则只能下载一次程序到</strong></strong>MCU<strong>**，以后就无法下载了。</strong></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-1725522045621120.png" alt="img"></p><ul><li>RCC时钟选择</li></ul><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-1725522045621121.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-1725522045621122.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-1725522045621123.png" alt="img"></p><ol><li>GPIO配置</li></ol><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-1725522045621124.png" alt="img"></p><ol><li>配置PA0引脚。</li></ol><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-1725522045621125.png" alt="img"></p><ol><li>同样的方式配置PA1和PA8，然后可以看到这3个引脚。</li></ol><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-1725522045621126.png" alt="img"></p><ol><li>分别对他们进行设置。</li></ol><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-1725522045621127.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-1725522045621128.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-1725522045621129.png" alt="img"></p><ol><li>工程配置</li></ol><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-1725522045621130.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-1725522045621131.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-1725522045621132.png" alt="img"></p><ol><li>生成代码</li></ol><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-1725522045621133.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-1725522045621134.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-1725522045621135.png" alt="img"></p><ol><li>生成的工程目录介绍</li></ol><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-1725522045621136.png" alt="img"></p><ol><li><h4 id="自动生成的代码解读"><a href="#自动生成的代码解读" class="headerlink" title="自动生成的代码解读"></a>自动生成的代码解读</h4></li></ol><p><strong>main</strong>函数中已经替我们调用了HAL的初始化，时钟的初始化，GPIO的初始化。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_Init();</span><br><span class="line">    SystemClock_Config();</span><br><span class="line">    MX_GPIO_Init();</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//下面是GPIO初始化的代码。</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">MX_GPIO_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    GPIO_InitTypeDef GPIO_InitStruct = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="comment">/* GPIO Ports Clock Enable */</span></span><br><span class="line">    __HAL_RCC_GPIOC_CLK_ENABLE();</span><br><span class="line">    __HAL_RCC_GPIOA_CLK_ENABLE();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*Configure GPIO pin Output Level */</span></span><br><span class="line">    HAL_GPIO_WritePin(GPIOA, LED1_Pin | LED2_Pin | LED3_Pin, GPIO_PIN_SET);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*Configure GPIO pins : PAPin PAPin PAPin */</span></span><br><span class="line">    GPIO_InitStruct.Pin = LED1_Pin | LED2_Pin | LED3_Pin;</span><br><span class="line">    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;</span><br><span class="line">    GPIO_InitStruct.Pull = GPIO_NOPULL;</span><br><span class="line">    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;</span><br><span class="line">    HAL_GPIO_Init(GPIOA, &amp;GPIO_InitStruct);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h4 id="构建LED驱动"><a href="#构建LED驱动" class="headerlink" title="构建LED驱动"></a>构建LED驱动</h4></li></ol><p>为了方便管理，我们把LED驱动放入单独的文件夹管理。在项目根目录下创建Hardware/led目录。</p><p>然后在Hardware/led目录下创建2个文件led.h和led.c。</p><p>并在Keil中添加如下配置。</p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-1725522045621137.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-1725522045621138.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-1725522045621139.png" alt="img"></p><ol><li><h5 id="led-h"><a href="#led-h" class="headerlink" title="led.h"></a>led.h</h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __led_h</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __led_h</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;gpio.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED uint16_t</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">LED_Turn_On</span><span class="params">(LED led)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">LED_Turn_Off</span><span class="params">(LED led)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">LED_Toggle</span><span class="params">(LED led)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">LED_Turn_Off_All</span><span class="params">(LED led[], <span class="type">uint8_t</span> len)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><ol><li><h5 id="led-c"><a href="#led-c" class="headerlink" title="led.c"></a>led.c</h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;led.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 点亮LED</span></span><br><span class="line"><span class="comment"> * @param &#123;LED&#125; led</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">LED_Turn_On</span><span class="params">(LED led)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_GPIO_WritePin(GPIOA, led, GPIO_PIN_RESET);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 熄灭LED</span></span><br><span class="line"><span class="comment"> * @param &#123;LED&#125; led</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">LED_Turn_Off</span><span class="params">(LED led)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_GPIO_WritePin(GPIOA, led, GPIO_PIN_SET);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 翻转LED的状态</span></span><br><span class="line"><span class="comment"> * @param &#123;LED&#125; led</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">LED_Toggle</span><span class="params">(LED led)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_GPIO_TogglePin(GPIOA, led);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 关闭所有LED</span></span><br><span class="line"><span class="comment"> * @param &#123;LED&#125; led</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; len</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">LED_Turn_Off_All</span><span class="params">(LED led[], <span class="type">uint8_t</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint8_t</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        LED_Turn_Off(led[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h5 id="main函数"><a href="#main函数" class="headerlink" title="main函数"></a>main函数</h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;LED.h&quot;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_Init();</span><br><span class="line">    SystemClock_Config();</span><br><span class="line">    MX_GPIO_Init();</span><br><span class="line">    <span class="type">uint16_t</span> leds[] = &#123;LED1_Pin, LED2_Pin, LED3_Pin&#125;;</span><br><span class="line">    <span class="type">uint8_t</span> i;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            LED_Turn_Off_All(leds, <span class="number">3</span>);</span><br><span class="line">            LED_Turn_On(leds[i]);</span><br><span class="line">            HAL_Delay(<span class="number">200</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            LED_Turn_Off_All(leds, <span class="number">3</span>);</span><br><span class="line">            LED_Turn_On(leds[<span class="number">2</span> - i]);</span><br><span class="line">            HAL_Delay(<span class="number">200</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4></li></ol><p>每新建一个工程，都需要<strong>重新配置**</strong>Include Path和Debug参数**。</p>]]></content>
      
      
      <categories>
          
          <category> 蓝桥杯32 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>STM32基础篇</title>
      <link href="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
      <url>/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<ol><li><h1 id="开发板简介"><a href="#开发板简介" class="headerlink" title="开发板简介"></a>开发板简介</h1></li><li><h2 id="开发板实物图"><a href="#开发板实物图" class="headerlink" title="开发板实物图"></a>开发板实物图</h2></li></ol><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515591.png" alt="img"></p><ol><li><h2 id="STM32最小系统"><a href="#STM32最小系统" class="headerlink" title="STM32最小系统"></a>STM32最小系统</h2></li></ol><p>STM32单片机能工作的最小外围电路就叫<strong>最小系统</strong>。</p><p>最小系统通常包括：<strong>STM32芯片、电源、时钟、下载调试和复位</strong>5部分组成。</p><ol><li>STM32芯片</li></ol><p>选用的是<strong>STM32F103ZET6</strong>这款芯片。</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-17255325651511.png" alt="img"></p><ol><li>电源<ol><li>采用3.3V电源供电。我们电路采用了两路供电。</li><li>一路是USB的TypeC供电， TypeC提供的是5V，使用芯片AMS1117把5V转成3.3V。</li><li>另一路是STLink下载器直接提供3.3V供电（下载器内部已经把5V转成了3.3V）。</li></ol></li></ol><ul><li>MCU电源</li></ul><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-17255325651522.png" alt="img"></p><ul><li>USB供电转3.3v</li></ul><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-17255325651523.png" alt="img"></p><ul><li>MCU调试口</li></ul><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-17255325651524.png" alt="img"></p><p>不用额外再接串口模块。</p><ol><li>时钟</li></ol><p>SMT32提供了两路外部时钟： <strong>外部高速时钟和外部低速时钟</strong> 。</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-17255325651525.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-17255325651526.png" alt="img"></p><ol><li>复位</li></ol><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-17255325651527.png" alt="img"></p><ol><li>下载调试</li></ol><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-17255325651528.png" alt="img"></p><ol><li><h1 id="点亮LED灯案例（寄存器）"><a href="#点亮LED灯案例（寄存器）" class="headerlink" title="点亮LED灯案例（寄存器）"></a>点亮LED灯案例（寄存器）</h1><p>我们首先使用基于寄存器开发方式点亮第一个LED灯。</p></li></ol><p>在代码期间会涉及到一些寄存器知识，先不要深究，后面再详细介绍。现在要做的就是点亮第一个LED灯。</p><ol><li><h2 id="需求描述"><a href="#需求描述" class="headerlink" title="需求描述"></a>需求描述</h2></li></ol><p>快速体验STM32开发：点亮LED1。</p><ol><li><h2 id="硬件电路设计"><a href="#硬件电路设计" class="headerlink" title="硬件电路设计"></a>硬件电路设计</h2></li></ol><p>LED1-LED3是普通LED灯，LED4为电源指示灯。</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-17255325651529.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515210.png" alt="img"></p><p>说明：</p><ol><li><p>LED1连接的是端口PA0</p></li><li><p>只要让PA0引脚输出低电平就可以点亮LED1。</p></li><li><h2 id="创建项目工程"><a href="#创建项目工程" class="headerlink" title="创建项目工程"></a>创建项目工程</h2></li><li><h3 id="创建工程准备"><a href="#创建工程准备" class="headerlink" title="创建工程准备"></a>创建工程准备</h3></li><li><p>创建需要的目录</p></li></ol><p>在磁盘上创建一个目录 atguigu，然后再在atguigu目录下创建我们的第一个工程目录 led_register。</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515211.png" alt="img"></p><ol><li>准备启动文件</li></ol><p>STM32程序需要启动文件，我们需要提前准备好。先去ST官网下载官方提供的外设标准库，里面有提供标准的启动文件，我们从里面copy一份出来。</p><p>标准外设库下载地址：<strong><a href="https://www.st.com/zh/embedded-software/stm32-standard-peripheral-libraries/products.html">https://www.st.com/zh/embedded-software/stm32-standard-peripheral-libraries/products.html</a></strong></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515212.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515213.png" alt="img"></p><p>下载完成之后解压，后面我们需要从里面copy文件出来。</p><ol><li>创建目录放入启动文件和其他核心文件</li></ol><p>为了方便管理，我们把启动文件放入专门目录中。在刚才创建的工程目录中创建一个目录：Start（名字没有强制要求，随意，但是最好不要有中文）。</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515214.png" alt="img"></p><p>去到我们刚才下载的标准外设库目录，找到我们需要的启动文件和其他核心文件copy到Start目录。</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515215.png" alt="img"></p><p>启动文件选择标准：</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515216.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515217.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515218.png" alt="img"></p><p>Copy完之后：</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515219.png" alt="img"></p><ol><li>创建工程</li></ol><p>打开Keil MDK创建工程。</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515220.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515221.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515222.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515223.png" alt="img"></p><ol><li><h3 id="工程配置"><a href="#工程配置" class="headerlink" title="工程配置"></a>工程配置</h3></li><li><p>添加两个Project Group方便管理代码文件。</p></li></ol><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515224.png" alt="img"></p><ol><li>先删除默认的Source Group 1，再添加两个：Start（启动相关的文件），User（我们自己写的代码）。</li></ol><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515225.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515226.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515227.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515328.png" alt="img"></p><ol><li>创建main.c 文件</li></ol><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515329.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515330.png" alt="img"></p><p>User路径不存在，让它帮我们创建。</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515331.png" alt="img"></p><ol><li><h3 id="编译配置"><a href="#编译配置" class="headerlink" title="编译配置"></a>编译配置</h3></li><li><p>编译器版本改为5</p></li></ol><p>目前最新的Keil ARM用的是 Compiler version 6，与前面的core_cm3.c不兼容，所以需要提前准备好Compiler version 5。</p><p>下载地址：<strong><a href="https://developer.arm.com/downloads/view/ACOMP5">https://developer.arm.com/downloads/view/ACOMP5</a></strong></p><p>解压之后，把解压的后文件夹放入到<strong>Keil MDK的安装目录</strong>下：</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515332.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515333.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515334.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515335.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515336.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515337.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515338.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515339.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515340.png" alt="img"></p><ol><li>一些其他配置</li></ol><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515341.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515342.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515343.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515344.png" alt="img"></p><ol><li><h2 id="软件设计"><a href="#软件设计" class="headerlink" title="软件设计"></a>软件设计</h2></li><li><h3 id="main-c"><a href="#main-c" class="headerlink" title="main.c"></a>main.c</h3></li></ol><p>根据前面硬件电路设计，我们只要让<strong>GPIOA的0口输出低电平就行了</strong>。代码需要按照下面的步骤来实现。</p><ol><li>开启时钟</li></ol><p>在STM32中，让IO口工作，必须先开启对应的时钟。所以需要先查找到开启时钟的寄存器，然后通过该寄存器操作时钟的开启或关闭。我们要打开的是GPIOA的时钟。</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515345.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515346.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515347.png" alt="img"></p><p>我们需要知道RCC_APB2ENR这个寄存器的地址。如何查找呢？先知道RCC这个外设的基地址，然后加上这个寄存器的偏移地址就行了。</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515348.png" alt="img"></p><p>从上面可以看出来，RCC的基地址是0x4002 1000，APB2ENR的偏移量是0x18，所以<strong>APB2ENR的地址值是0x4002 1000 + 0x18</strong></p><p>有了地址，在这个地址写入一个数据，这个数据的二进制第2是1就行了。其他位暂时不管。我们写入4。这样就开启了GPIOA的时钟。</p><p>在代码中，我们需要把地址强转成指针才能给这个地址赋值。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*(<span class="type">uint32_t</span> *)(<span class="number">0x40021000</span> + <span class="number">0x18</span>) = <span class="number">4</span>;</span><br></pre></td></tr></table></figure><ol><li>给IO口设置输出模式</li></ol><p>在STM32中，如果要让IO口输出低电平或高电平，必须给要使用的IO设置为输出模式。</p><p>根据前面的思路，需要先找到GPIOA的基地址，再根据偏移地址找到要使用的寄存器的地址。GPIOA的基地址是<strong>0x4001 0800</strong>。</p><p>配置PA0口的输出模式的寄存器是GPIOA_CRL。</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515349.png" alt="img"></p><p>只需要让这个寄存器的最后4位是 0011，就是最大速度的推挽输出。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*(<span class="type">uint32_t</span> *)(<span class="number">0x40010800</span> + <span class="number">0x00</span>) = <span class="number">3</span>;</span><br></pre></td></tr></table></figure><ol><li>给PA0口输出0</li></ol><p>给指定PA0口输出0就可以点亮LED1了。用到的寄存器是ODR数据输出寄存器。</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515350.png" alt="img"></p><p>ODR寄存器的地址是 <strong>0x40010800 + 0x0c</strong>。给这个地址的第0位写0，其他位写1。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*(<span class="type">uint32_t</span> *)((<span class="number">0x40010800</span> + <span class="number">0x0c</span>)) = <span class="number">0xfffe</span>;</span><br></pre></td></tr></table></figure><p><strong>main.c具体代码清单。</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;stdint.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 开启GPIOA的时钟 */</span></span><br><span class="line">    *(<span class="type">uint32_t</span> *)(<span class="number">0x40021000</span> + <span class="number">0x18</span>) = <span class="number">4</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 给PA0设置为通用推挽输出 */</span></span><br><span class="line">    *(<span class="type">uint32_t</span> *)(<span class="number">0x40010800</span> + <span class="number">0x00</span>) = <span class="number">3</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 给输出寄存器赋值 */</span></span><br><span class="line">    *(<span class="type">uint32_t</span> *)(<span class="number">0x40010800</span> + <span class="number">0x0c</span>) = <span class="number">0xfffe</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h3 id="编译工程"><a href="#编译工程" class="headerlink" title="编译工程"></a>编译工程</h3></li></ol><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515351.png" alt="img"></p><ol><li><h3 id="安装ST-LINK驱动"><a href="#安装ST-LINK驱动" class="headerlink" title="安装ST-LINK驱动"></a>安装ST-LINK驱动</h3></li><li><p>我们使用ST-LINK仿真器下载程序。</p></li></ol><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515352.png" alt="img"></p><ol><li>Keil的安装目录下自带了ST-LINK的USB驱动，双击安装即可。</li></ol><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515353.png" alt="img"></p><ol><li>升级STLink固件</li></ol><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515354.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515355.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515356.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515357.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515358.png" alt="img"></p><ol><li><h3 id="Keil中配置ST-LINK"><a href="#Keil中配置ST-LINK" class="headerlink" title="Keil中配置ST-LINK"></a>Keil中配置ST-LINK</h3></li></ol><p>还需要在Keil软件中，对仿真器做一些必要的配置。</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515459.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515460.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515461.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515462.png" alt="img"></p><ol><li><h3 id="下载程序"><a href="#下载程序" class="headerlink" title="下载程序"></a>下载程序</h3></li></ol><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515463.png" alt="img"></p><ol><li><h3 id="操作寄存器方式的”进化”"><a href="#操作寄存器方式的”进化”" class="headerlink" title="操作寄存器方式的”进化”"></a>操作寄存器方式的”进化”</h3></li><li><h4 id="“进化1”"><a href="#“进化1”" class="headerlink" title="“进化1”"></a>“进化1”</h4></li></ol><p>在操作寄存器的时候，如果每次都查手册计算地址，是相当麻烦且无聊。ST公司早就考虑到了这个问题，已经提前把每个外设寄存器的地址提前给我们用<strong>宏定义</strong>的方式给算好了，我只需要直接使用即可。比如下面是定义的RCC各个寄存器地址。（stm32f10x.h中定义）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> PERIPH_BASE                ((uint32_t)0x40000000)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AHBPERIPH_BASE             (PERIPH_BASE +0x20000)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RCC_BASE                   (AHBPERIPH_BASE +0x1000)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RCC                        ((RCC_TypeDef*) RCC_BASE)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    __IO <span class="type">uint32_t</span> CR;</span><br><span class="line">    __IO <span class="type">uint32_t</span> CFGR;</span><br><span class="line">    __IO <span class="type">uint32_t</span> CIR;</span><br><span class="line">    __IO <span class="type">uint32_t</span> APB2RSTR;</span><br><span class="line">    __IO <span class="type">uint32_t</span> APB1RSTR;</span><br><span class="line">    __IO <span class="type">uint32_t</span> AHBENR;</span><br><span class="line">    __IO <span class="type">uint32_t</span> APB2ENR;</span><br><span class="line">    __IO <span class="type">uint32_t</span> APB1ENR;</span><br><span class="line">    __IO <span class="type">uint32_t</span> BDCR;</span><br><span class="line">    __IO <span class="type">uint32_t</span> CSR;</span><br><span class="line">&#125; RCC_TypeDef;</span><br></pre></td></tr></table></figure><p>这里还巧妙的运用了<strong>结构体中各个成员地址是连续的特征</strong>。CR寄存器是RCC第0个32位寄存器，所以它相对于基地址的偏移是0。CFGR相对于基地址的偏移是4，…</p><p>APB2ENR的相对于基地址的偏移是6*4=24=0x18，和我们前面查找手册的结果是一致的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    RCC-&gt;APB2ENR = <span class="number">4</span>;</span><br><span class="line">    GPIOA-&gt;CRL = <span class="number">3</span>;</span><br><span class="line">    GPIOA-&gt;ODR = <span class="number">0xfffe</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样写起来是不是可读性就好很多了，而且也简单了很多。</p><ol><li><h4 id="“进化2”"><a href="#“进化2”" class="headerlink" title="“进化2”"></a>“进化2”</h4></li></ol><p>其实在上面的代码中还有一些问题。在STM32中一个寄存器是32位的，我们在编写代码的时候只是需要给某位或某几位赋值。由于STM32不支持位寻址，所以在前面的操作中，我们其实是修改了所有位。这是非常不合理的，也许其他位在其他地方有赋值，我们重新赋值势必会覆盖了其他值，带来的后果也是很严重的。</p><p>如何只修改特定的位的值，而不影响其他位呢？我们需要先回顾下一些常见的位操作，再来继续进化上面的代码。</p><ol><li>常用的一些位操作回顾</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;stdlib.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> buffer[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printfBinary</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *op, <span class="type">unsigned</span> <span class="type">char</span> result)</span></span><br><span class="line">&#123;</span><br><span class="line">    itoa(result, buffer, <span class="number">2</span>); <span class="comment">// 把result转成2进制字符串</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s = %s\r\n&quot;</span>, op, buffer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 左移 8&lt;&lt;1 = 1000&lt;&lt;1 = 10000*/</span></span><br><span class="line">    printfBinary(<span class="string">&quot;8 &lt;&lt; 1&quot;</span>, <span class="number">8</span> &lt;&lt; <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 右移 8&gt;&gt;1 = 1000&gt;&gt;1 = 100*/</span></span><br><span class="line">    printfBinary(<span class="string">&quot;8 &gt;&gt; 1&quot;</span>, <span class="number">8</span> &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 按位或 8|7 = 1000|0111 = 1111 */</span></span><br><span class="line">    printfBinary(<span class="string">&quot;8 | 7&quot;</span>, <span class="number">8</span> | <span class="number">7</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 按位或 8&amp;7 = 1000&amp;0111 = 0000 */</span></span><br><span class="line">    printfBinary(<span class="string">&quot;8 &amp; 7&quot;</span>, <span class="number">8</span> &amp; <span class="number">7</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 按位取反 ~8 = ~1000 = 0111 */</span></span><br><span class="line">    printfBinary(<span class="string">&quot;~8&quot;</span>, ~<span class="number">8</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        把某位置 1  (0 位 1位 ...)</span></span><br><span class="line"><span class="comment">            比如把 mum 的第 2 位置 1</span></span><br><span class="line"><span class="comment">                1. 得到一个数第 2 位是 1 其他都为 0</span></span><br><span class="line"><span class="comment">                   a =  0000 0100  是由 1&lt;&lt;2 得到</span></span><br><span class="line"><span class="comment">                2. 让 num | a</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    printfBinary(<span class="string">&quot;8置第 2 位为 1 &quot;</span>, <span class="number">8</span> | (<span class="number">1</span> &lt;&lt; <span class="number">2</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        把连续的多位同时置 1  (0 位 1位 ...)</span></span><br><span class="line"><span class="comment">            比如把 mum 的第 1和2 位置 1</span></span><br><span class="line"><span class="comment">                1  a =  3 &lt;&lt; 1</span></span><br><span class="line"><span class="comment">                2. num | a</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    printfBinary(<span class="string">&quot;8置第 1和2 位为 1 &quot;</span>, <span class="number">8</span> | (<span class="number">3</span> &lt;&lt; <span class="number">1</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        把某位置 0  (0位 1位 ...)</span></span><br><span class="line"><span class="comment">            比如把 mum 的第 2 位置 0</span></span><br><span class="line"><span class="comment">                1. 得到一个数第 2 位是 0 其他都为 1</span></span><br><span class="line"><span class="comment">                   a =  1111 0100  是由 ~(1&lt;&lt;2) 得到</span></span><br><span class="line"><span class="comment">                2. 让 num &amp; a</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    printfBinary(<span class="string">&quot;7置第 2 位为 0 &quot;</span>, <span class="number">7</span> &amp; ~(<span class="number">1</span> &lt;&lt; <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        把连续多位同时置 0  (0位 1位 ...)</span></span><br><span class="line"><span class="comment">            比如把 mum 的第 1和2 位置 0</span></span><br><span class="line"><span class="comment">                1. a = ~(3&lt;&lt;1)</span></span><br><span class="line"><span class="comment">                2. 让 num &amp; a</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    printfBinary(<span class="string">&quot;7置第 1和2 位为 0 &quot;</span>, <span class="number">7</span> &amp; ~(<span class="number">3</span> &lt;&lt; <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        把连续的多位同时置位  101 (二进制)</span></span><br><span class="line"><span class="comment">            比如把 mum 的第 1,2,3 位置为 101</span></span><br><span class="line"><span class="comment">            1. num的 1,2,3位置为0</span></span><br><span class="line"><span class="comment">                num &amp;= ~(7&lt;&lt;1)</span></span><br><span class="line"><span class="comment">            2. num |= (5 &lt;&lt; 1);    (5 = 101)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> num = <span class="number">13</span>;</span><br><span class="line">    num &amp;= ~(<span class="number">7</span> &lt;&lt; <span class="number">1</span>);</span><br><span class="line">    num |= <span class="number">5</span> &lt;&lt; <span class="number">1</span>;</span><br><span class="line">    printfBinary(<span class="string">&quot;13&quot;</span>, <span class="number">13</span>);</span><br><span class="line">    printfBinary(<span class="string">&quot;10的123位置为101 &quot;</span>, num);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>继续进化</li></ol><p>根据前面基本位操作的回顾，我们综合使用这些位操作，可以把代码进化为下面的形式。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 开启GPIOA的时钟 第2位置1*/</span></span><br><span class="line">    RCC-&gt;APB2ENR |= <span class="number">0x1</span> &lt;&lt; <span class="number">2</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* GPIOA_CRL的最后4位置 0011 */</span></span><br><span class="line">    GPIOA-&gt;CRL &amp;= ~(<span class="number">0x1</span> &lt;&lt; <span class="number">3</span>);</span><br><span class="line">    GPIOA-&gt;CRL &amp;= ~(<span class="number">0x1</span> &lt;&lt; <span class="number">2</span>);</span><br><span class="line">    GPIOA-&gt;CRL |= <span class="number">0x1</span> &lt;&lt; <span class="number">1</span>;</span><br><span class="line">    GPIOA-&gt;CRL |= <span class="number">0x1</span> &lt;&lt; <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* GPIOA_ODR的第0位置0 */</span></span><br><span class="line">    GPIOA-&gt;ODR &amp;= ~(<span class="number">0x1</span> &lt;&lt; <span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h4 id="“进化3”"><a href="#“进化3”" class="headerlink" title="“进化3”"></a>“进化3”</h4></li></ol><p>在上次的进化中，我们是给寄存器“或等”和“与等”了一些值，这些值都是通过相应的“移位”操作得到的。比如要操作第2位，就需要把0x1左移2位得到。我们需要查找手册才能知道要移位几。也是很不方便。</p><p>其实ST公司也把我们需要的<strong>移位后的值给提前计算好</strong>了，用宏定义的方式供我们使用。</p><p>比如前面的开启时钟，已经定义了好了这个值。正好就是1&lt;&lt;2</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span>    RCC_APB2ENR_IOPAEN        ((uint32_t)0x00000004)</span></span><br></pre></td></tr></table></figure><p>利用ST公司提前预定义的这些值，可以进一步进化代码为下面的形式。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    RCC-&gt;APB2ENR |= RCC_APB2ENR_IOPAEN;</span><br><span class="line">    </span><br><span class="line">    GPIOA-&gt;CRL &amp;= ~GPIO_CRL_CNF0_1;</span><br><span class="line">    GPIOA-&gt;CRL &amp;= ~GPIO_CRL_CNF0_0;</span><br><span class="line">    GPIOA-&gt;CRL |= GPIO_CRL_MODE0_1;</span><br><span class="line">    GPIOA-&gt;CRL |= GPIO_CRL_MODE0_0;</span><br><span class="line"></span><br><span class="line">    GPIOA-&gt;ODR &amp;= ~GPIO_ODR_ODR0;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样可读性就好多了，等操作熟练之后，很多操作不查找寄存器手册也能直接操作了。</p><ol><li><h1 id="GPIO外设"><a href="#GPIO外设" class="headerlink" title="GPIO外设"></a>GPIO外设</h1></li><li><h2 id="GPIO概述"><a href="#GPIO概述" class="headerlink" title="GPIO概述"></a>GPIO概述</h2></li></ol><p>GPIO <strong>（General-purpose input/output）</strong> ，通用型输入输出。简单理解就是我们可以<strong>控制输入输出</strong>的STM32引脚，统称为GPIO。</p><p>GPIO存在的意义就是<strong>用程序控制或读取</strong>他们的<strong>输出或输入</strong>。</p><ol><li><h3 id="GPIO总体说明"><a href="#GPIO总体说明" class="headerlink" title="GPIO总体说明"></a>GPIO总体说明</h3></li></ol><p>STM32有多组GPIO，比如我们使用的芯片：STM32F103ZET6共有 <strong>7组GPIO端口</strong> ，他们分别是 <strong>GPIOx（x从A-G）</strong> ，<strong>每组控制16个引脚，\</strong>共有*<em>112<strong>个GPIO引脚。具体一个其他STM32芯片有多少组GPIO，可以去查看他们的对应的</strong>数据手册*</em>。</p><p>每个引脚的电平是 <strong>0-3.3V</strong> ，部分引脚最高可以兼容到 <strong>5V</strong> 。</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515464.png" alt="img"></p><ol><li><h3 id="GPIO的主要特点"><a href="#GPIO的主要特点" class="headerlink" title="GPIO的主要特点"></a>GPIO的主要特点</h3></li><li><p>不同型号，IO口的数量可能不一样。</p></li><li><p>快速翻转。最快可以达到每2个时钟周期翻转一次。（STM32F1系列最快可以达到50MHz的翻转速度）。</p></li><li><p>每个IO都可以作为外部中断。</p></li><li><p>支持8种工作模式。</p></li><li><h3 id="GPIO的8种工作模式"><a href="#GPIO的8种工作模式" class="headerlink" title="GPIO的8种工作模式"></a>GPIO的8种工作模式</h3></li></ol><p>GPIO端口的每个位（引脚）可以由<strong>软件</strong>分别<strong>配置</strong>成8种模式，当然对同一个引脚同一时间只能处于某一种模式中。</p><ol><li><strong>输入浮空（Input floating）</strong></li><li><strong>输入上拉（Input pull-up）</strong> <strong>信号默认高电平</strong></li><li><strong>输入下拉（Input-pull-down）</strong> <strong>信号默认低电平</strong></li><li><strong>模拟输入（Analog）</strong></li><li><strong>通用开漏式输出（Output open-drain）</strong></li><li><strong>通用推挽式输出（Output push-pull）</strong></li><li><strong>复用推挽式功能（Alternate function push-pull）</strong></li><li><strong>复用开漏式功能（Alternate function open-drain）</strong></li></ol><p>每个I/O端口位可以自由编程，然而I/0端口寄存器必须按<strong>32位字</strong>被访问。</p><p><strong>输出模式</strong>下可以<strong>控制端口输出</strong>高电平低电平，用于驱动LED，蜂鸣器等，如果是大功率器件（比如电机），还需要加上驱动器（小电流控制大电流）。</p><p><strong>输入模式</strong>下可以<strong>读取端口</strong>的高低电平，用于读取外接按键，外接模拟信号的输入，ADC电压采集，模拟通信协议接受数据等。</p><ol><li><h2 id="GPIO工作模式"><a href="#GPIO工作模式" class="headerlink" title="GPIO工作模式"></a>GPIO工作模式</h2></li><li><h3 id="GPIO每位的具体电路结构"><a href="#GPIO每位的具体电路结构" class="headerlink" title="GPIO每位的具体电路结构"></a>GPIO每位的具体电路结构</h3></li></ol><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515465.png" alt="img"></p><ol><li><h3 id="每种模式详解"><a href="#每种模式详解" class="headerlink" title="每种模式详解"></a>每种模式详解</h3></li><li><h4 id="输出模式"><a href="#输出模式" class="headerlink" title="输出模式"></a>输出模式</h4></li><li><p><strong>输出缓冲器被激活。</strong></p></li><li><p><strong>推挽模式：输出寄存器上的 1 将激活P-MOS，输出高电平。0 将激活N-MOS，输出低电平。</strong></p></li><li><p><strong>开漏模式：P-MOS永远关闭。 输出寄存器上的 0 激活N-MOS，而输出寄存器上的 1 将端口置于高阻状态，所以外部必须要接上拉电阻。</strong></p></li><li><p><strong>施密特触发输入被激活。</strong></p></li><li><p><strong>弱上拉和下拉电阻被禁止。</strong></p></li><li><p><strong>出现在I/O脚上的数据在每个APB2时钟被采样到输入数据寄存器。</strong></p></li><li><p><strong>在开漏模式时，对输入数据寄存器的读访问可得到I/O状态。</strong></p></li><li><p><strong>在推挽模式时，对输出数据寄存器的读访问得到最后一次写的值。</strong></p></li><li><h4 id="复用输出模式"><a href="#复用输出模式" class="headerlink" title="复用输出模式"></a>复用输出模式</h4></li></ol><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515466.png" alt="img"></p><ol><li><p><strong>在开漏或推挽式配置中，输出缓冲器被打开。</strong></p></li><li><p><strong>内置外设的信号驱动输出缓冲器（复用功能输出）。</strong></p></li><li><p><strong>施密特触发输入被激活。</strong></p></li><li><p><strong>弱上拉和下拉电阻被禁止。</strong></p></li><li><p><strong>在每个APB2时钟周期，出现在I/O脚上的数据被采样到输入数据寄存器。</strong></p></li><li><p><strong>开漏模式时，读输入数据寄存器时可得到I/O口状态。</strong></p></li><li><p><strong>在推挽模式时，读输出数据寄存器时可得到最后一次写的值。</strong></p></li><li><h4 id="输入模式"><a href="#输入模式" class="headerlink" title="输入模式"></a>输入模式</h4></li></ol><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515467.png" alt="img"></p><ol><li><strong>2个保护二极管的作用是保护我们的芯片不会由于电压过高或过低而烧毁。</strong></li></ol><p>VDD是接电源（3.3V），VSS接地（0V）。如果IO引脚的输入电压高于VDD的值到一定程度，上方保护二极管导通，则引脚电压被拉低到VDD。如果IO引脚的输入电压（负电压）低于VSS到一定程度，则下方保护二极管导通，电压被拉高到VSS。</p><ol><li>2个开关控制引脚没有输入的时候是上拉，下拉还是浮空。</li></ol><p>当上面的开关闭合的时候，输入被拉高到高电平。当下面的开关闭合的时候，入被拉低到低电平。如果两个都不闭合，输入就是悬空状态。 <strong>两个同时闭合，就是费电了，不会这么做的</strong> 。</p><ol><li>施密特（图中翻译成肖特基触发器应该是翻译错误，英文版手册是TTL Schmitt trigger）触发器是包含正反馈的比较器电路。可以对信号进行波形整形。</li></ol><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515468.png" alt="img"></p><ol><li><p>从施密特触发起出来的数据，进入到输入数据寄存器中，我们就可以从中读取数据了。</p></li><li><h4 id="模拟输入模式"><a href="#模拟输入模式" class="headerlink" title="模拟输入模式"></a>模拟输入模式</h4></li></ol><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515469.png" alt="img"></p><p>当配置为<strong>模拟输入</strong>时：</p><ol><li><p>输出部分被禁止。</p></li><li><p><strong>禁止施密特触发输入</strong>，实现了每个模拟I/O引脚上的零消耗。施密特触发输出值被强置为0，此时也可以不用开启对应GPIO的时钟。</p></li><li><p>弱上拉和下拉电阻被禁止。</p></li><li><p>读取输入数据寄存器时数值永远为0。</p></li><li><h2 id="与GPIO相关的7个寄存器（重要）"><a href="#与GPIO相关的7个寄存器（重要）" class="headerlink" title="与GPIO相关的7个寄存器（重要）"></a>与GPIO相关的7个寄存器（重要）</h2></li></ol><p>每个GPI/O端口有7个相关的：</p><ul><li>2个32位配置寄存器 <strong>（GPIOx_CRL，GPIOx_CRH）</strong> 。</li><li>2个32位数据寄存器 <strong>（GPIOx_IDR和GPIOx_ODR）</strong> 。</li><li>1个32位置位/复位寄存器 <strong>（GPIOx_BSRR）</strong> 。</li><li>1个16位复位寄存器 <strong>（GPIOx_BRR）</strong> 。</li><li>1个32位锁定寄存器 <strong>（GPIOx_LCKR）</strong> 。</li></ul><ol><li><h3 id="GPIOx-CRL（端口配置低寄存器）"><a href="#GPIOx-CRL（端口配置低寄存器）" class="headerlink" title="GPIOx_CRL（端口配置低寄存器）"></a>GPIOx_CRL（端口配置低寄存器）</h3></li></ol><p><strong>GPIOx_CRL（Port configuration register low）</strong> ，<strong>x</strong>可以是 <strong>A-G</strong> 。</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515470.png" alt="img"></p><p>该寄存器配置的每个GPIO的 0-7 这个8个位，所以叫低寄存器。</p><ol><li><p>MODE：每个端口有2个MODE位进行控制。</p><ol><li>00：输入模式（复位后的状态）</li><li>01：输出模式，最大速度10MHz</li><li>10：输出模式，最大速度2MHz</li><li>11：输出模式，最大速度50MHz</li></ol></li><li><p>CNF：每个端口有2个CNF位进行控制。</p><ol><li>当MODE是00 （输入模式）<ol><li>00：模拟输入模式</li><li>01：浮空输入模式(复位后的状态)</li><li>10：上拉/下拉输入模式</li><li>11：保留</li></ol></li><li>当MODE&gt;00（输出模式）<ol><li>00：通用推挽输出模式</li><li>01：通用开漏输出模式</li><li>10：复用功能推挽输出模式</li><li>11：复用功能开漏输出模式</li></ol></li></ol></li><li><h3 id="GPIOx-CRH（端口配置高寄存器）"><a href="#GPIOx-CRH（端口配置高寄存器）" class="headerlink" title="GPIOx_CRH（端口配置高寄存器）"></a>GPIOx_CRH（端口配置高寄存器）</h3></li></ol><p><strong>GPIOx_CRH（Port configuration register high）</strong> 。</p><p>该寄存器配置的是每个端口的 8-15引脚，配置方式和低位寄存器完全一样。</p><ol><li><h3 id="GPIOx-IDR（端口输入数据寄存器）"><a href="#GPIOx-IDR（端口输入数据寄存器）" class="headerlink" title="GPIOx_IDR（端口输入数据寄存器）"></a>GPIOx_IDR（端口输入数据寄存器）</h3></li></ol><p><strong>Port**</strong> i<strong><em>*nput </em></strong>*d*<strong><em>ata </em></strong>*r*<strong>*egister</strong></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515471.png" alt="img"></p><p>保留位始终读为0。剩下的分别对应每个引脚的输入值。</p><ol><li><h3 id="GPIOx-ODR（端口输出数据寄存器）"><a href="#GPIOx-ODR（端口输出数据寄存器）" class="headerlink" title="GPIOx_ODR（端口输出数据寄存器）"></a>GPIOx_ODR（端口输出数据寄存器）</h3></li></ol><p><strong>Port \</strong>**o**<em>\</em>utput *<em>\</em>*d**<em>\</em>ata *<em>\</em>*r**<em>\</em>egister**</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515472.png" alt="img"></p><p>保留位始终读为0。剩下的分别对应每个引脚的输出值。</p><ol><li><h3 id="GPIOx-BSRR（端口位设置-清除寄存器）"><a href="#GPIOx-BSRR（端口位设置-清除寄存器）" class="headerlink" title="GPIOx_BSRR（端口位设置/清除寄存器）"></a>GPIOx_BSRR（端口位设置/清除寄存器）</h3></li></ol><p><strong>Port \</strong>**b**<em>\</em>it *<em>\</em>*s** **et/** **r*<em>*<em>eset *</em>\</em>*r**<em>\</em>egister**</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515473.png" alt="img"></p><ol><li><p>高16位是用清除对应的数据输出寄存器的位（0-15）的值：设置为0不影响，设置为1会清除ODR对应的位的值（置为0）。</p></li><li><p>低16位是用设置对应的数据输出寄存器的位（0-15）的值：设置为0不影响，设置为1会设置ODR对应的位的值（置为1）。</p></li><li><h3 id="GPIOx-BRR（端口位清除寄存器）"><a href="#GPIOx-BRR（端口位清除寄存器）" class="headerlink" title="GPIOx_BRR（端口位清除寄存器）"></a>GPIOx_BRR（端口位清除寄存器）</h3></li></ol><p>这个寄存器具有了 <strong>GPIOx_BSRR一半的功能：清除</strong> 。</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515474.png" alt="img"></p><ol><li><h3 id="GPIOx-LCKR（端口配置锁定寄存器）"><a href="#GPIOx-LCKR（端口配置锁定寄存器）" class="headerlink" title="GPIOx_LCKR（端口配置锁定寄存器）"></a>GPIOx_LCKR（端口配置锁定寄存器）</h3></li></ol><p><strong>Port configuration \</strong>**l**<em>\</em>o*<em>\</em>*ck**<em>\</em>r*<em>*<em>egister</em></em></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515475.png" alt="img"></p><p>该寄存器用来锁定端口位的配置。位[15:0]用于锁定GPIO端口的配置。在规定的写入操作期间，不能改变LCKP[15:0]。当对相应的端口位执行了LOCK序列后，在下次系统复位之前将不能再更改端口位的配置。</p><p>每个锁定位锁定控制寄存器（CRL，CRH）中相应的4个位（CNF2位和MODE2位）。</p><p>第16位用来激活锁定寄存器，必须按照规定的时序来操作才行: 写1 -&gt; 写0 -&gt; 写1 -&gt; 读0 -&gt; 读1。</p><p>对0-15位：</p><ul><li>0：不锁定对应端口的配置。</li><li>1：锁定对应端口的配置。</li></ul><ol><li><h2 id="GPIO案例：流水灯"><a href="#GPIO案例：流水灯" class="headerlink" title="GPIO案例：流水灯"></a>GPIO案例：流水灯</h2></li><li><h3 id="需求描述-1"><a href="#需求描述-1" class="headerlink" title="需求描述"></a>需求描述</h3></li></ol><p>在3个LED上实现流水灯效果。</p><ol><li><h3 id="硬件电路设计-1"><a href="#硬件电路设计-1" class="headerlink" title="硬件电路设计"></a>硬件电路设计</h3></li></ol><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515476.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515477.png" alt="img"></p><ol><li><h3 id="软件设计（寄存器）"><a href="#软件设计（寄存器）" class="headerlink" title="软件设计（寄存器）"></a>软件设计（寄存器）</h3></li><li><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4></li><li><p>copy上一个项目</p></li><li><p>并做如下操作</p></li></ol><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515478.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515479.png" alt="img"></p><ol><li>创建一个目录： Hardware/Led 存储我们的LED驱动文件。</li><li>在 Hardware/Led下创建2个文件 led.h和led.c。</li><li>使用keil打开项目，做下简单配置。</li></ol><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515480.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515481.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515482.png" alt="img"></p><ol><li><h4 id="具体代码"><a href="#具体代码" class="headerlink" title="具体代码"></a>具体代码</h4></li><li><h5 id="main-c-1"><a href="#main-c-1" class="headerlink" title="main.c"></a>main.c</h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Driver_LED.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Delay.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint32_t</span> leds[] = &#123;LED_1, LED_2, LED_3&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 1. 初始化LED */</span></span><br><span class="line">    Driver_LED_Init();</span><br><span class="line">    Driver_LED_OffAll(leds, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">uint8_t</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            Driver_LED_OffAll(leds, <span class="number">3</span>);</span><br><span class="line">            Driver_LED_On(leds[i]);</span><br><span class="line">            Delay_ms(<span class="number">500</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        Driver_LED_OffAll(leds, <span class="number">3</span>);</span><br><span class="line">        Driver_LED_On(leds[<span class="number">1</span>]);</span><br><span class="line">        Delay_ms(<span class="number">500</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h5 id="Delay-h"><a href="#Delay-h" class="headerlink" title="Delay.h"></a>Delay.h</h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __delay_h</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __delay_h</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;stm32f10x.h&quot;</span><span class="comment">// Device header</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay_us</span><span class="params">(<span class="type">uint16_t</span> us)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay_ms</span><span class="params">(<span class="type">uint16_t</span> ms)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay_s</span><span class="params">(<span class="type">uint16_t</span> s)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><ol><li><h5 id="Delay-c"><a href="#Delay-c" class="headerlink" title="Delay.c"></a>Delay.c</h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//延时函数使用到了系统定时器，大家先使用，到提高篇时再学习具体为什么这么写。</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;delay.h&quot;</span><span class="comment">// Device header</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay_us</span><span class="params">(<span class="type">uint16_t</span> us)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 定时器重装值 */</span></span><br><span class="line">    SysTick-&gt;LOAD = <span class="number">72</span> * us;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 清除当前计数值 */</span></span><br><span class="line">    SysTick-&gt;VAL = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*设置内部时钟源（2位-&gt;1）,不需要中断（1位-&gt;0），并启动定时器(0位-&gt;1)*/</span></span><br><span class="line">    SysTick-&gt;CTRL = <span class="number">0x5</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*等待计数到0， 如果计数到0则16位会置为1*/</span></span><br><span class="line">    <span class="keyword">while</span> (!(SysTick-&gt;CTRL &amp; SysTick_CTRL_COUNTFLAG));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 关闭定时器 */</span></span><br><span class="line">    SysTick-&gt;CTRL &amp;= ~SysTick_CTRL_ENABLE; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay_ms</span><span class="params">(<span class="type">uint16_t</span> ms)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (ms--)</span><br><span class="line">    &#123;</span><br><span class="line">        Delay_us(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay_s</span><span class="params">(<span class="type">uint16_t</span> s)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (s--)</span><br><span class="line">    &#123;</span><br><span class="line">        Delay_ms(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h5 id="Driver-LED-h"><a href="#Driver-LED-h" class="headerlink" title="Driver_LED.h"></a>Driver_LED.h</h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __DRIVER_LED_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __DRIVER_LED_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED_1 GPIO_ODR_ODR0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED_2 GPIO_ODR_ODR1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED_3 GPIO_ODR_ODR8</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_Init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_On</span><span class="params">(<span class="type">uint32_t</span> led)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_Off</span><span class="params">(<span class="type">uint32_t</span> led)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_Toggle</span><span class="params">(<span class="type">uint32_t</span> led)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_OnAll</span><span class="params">(<span class="type">uint32_t</span> leds[], <span class="type">uint8_t</span> size)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_OffAll</span><span class="params">(<span class="type">uint32_t</span> leds[], <span class="type">uint8_t</span> size)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><ol><li><h5 id="Driver-LED-c"><a href="#Driver-LED-c" class="headerlink" title="Driver_LED.c"></a>Driver_LED.c</h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Driver_LED.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 对LED进行初始化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 打开GPIOA的时钟 */</span></span><br><span class="line">    RCC-&gt;APB2ENR |= RCC_APB2ENR_IOPAEN;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 2. 给用到的端口的所有 PIN (PA0 PA1 PA8) 设置工作模式: 通用推挽输出 MODE:11  CNF:00 */</span></span><br><span class="line">    GPIOA-&gt;CRL |= (GPIO_CRL_MODE0 | GPIO_CRL_MODE1);</span><br><span class="line">    GPIOA-&gt;CRL &amp;= ~(GPIO_CRL_CNF0 | GPIO_CRL_CNF1);</span><br><span class="line"></span><br><span class="line">    GPIOA-&gt;CRH |= GPIO_CRH_MODE8;</span><br><span class="line">    GPIOA-&gt;CRH &amp;= ~GPIO_CRH_CNF8;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 3. 关闭所有灯  */</span></span><br><span class="line">    Driver_LED_Off(LED_1);</span><br><span class="line">    Driver_LED_Off(LED_2);</span><br><span class="line">    Driver_LED_Off(LED_3);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 点亮指定的LED</span></span><br><span class="line"><span class="comment"> * @param &#123;uint32_t&#125; led 要点亮的LED</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_On</span><span class="params">(<span class="type">uint32_t</span> led)</span></span><br><span class="line">&#123;</span><br><span class="line">    GPIOA-&gt;ODR &amp;= ~led;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 关闭指定的LED</span></span><br><span class="line"><span class="comment"> * @param &#123;uint32_t&#125; led 要关闭的LED</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_Off</span><span class="params">(<span class="type">uint32_t</span> led)</span></span><br><span class="line">&#123;</span><br><span class="line">    GPIOA-&gt;ODR |= led;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 翻转LED的状态</span></span><br><span class="line"><span class="comment"> * @param &#123;uint32_t&#125; led 要翻转的LED</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_Toggle</span><span class="params">(<span class="type">uint32_t</span> led)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 读取引脚的电平,如果是1(目前是关闭), 打开, 否则就关闭 */</span></span><br><span class="line">    <span class="keyword">if</span> ((GPIOA-&gt;IDR &amp; led) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Driver_LED_Off(led);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        Driver_LED_On(led);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 打开数组中所有的灯</span></span><br><span class="line"><span class="comment"> * @param &#123;uint32_t&#125; leds 所有灯</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; size 灯的个数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_OnAll</span><span class="params">(<span class="type">uint32_t</span> leds[], <span class="type">uint8_t</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint8_t</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Driver_LED_On(leds[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 关闭数组中所有的灯</span></span><br><span class="line"><span class="comment"> * @param &#123;uint32_t&#125; leds 所有灯</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; size 灯的个数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_OffAll</span><span class="params">(<span class="type">uint32_t</span> leds[], <span class="type">uint8_t</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint8_t</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Driver_LED_Off(leds[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h1 id="总体架构和时钟系统"><a href="#总体架构和时钟系统" class="headerlink" title="总体架构和时钟系统"></a>总体架构和时钟系统</h1></li><li><h2 id="STM32总体架构"><a href="#STM32总体架构" class="headerlink" title="STM32总体架构"></a>STM32总体架构</h2></li></ol><p>经过一段时间的学习，我们需要从宏观上了解下它的系统架构，各个模块之间的层级关系以及相互的影响。</p><ol><li><h2 id="时钟系统"><a href="#时钟系统" class="headerlink" title="时钟系统"></a>时钟系统</h2></li><li><h3 id="时钟树"><a href="#时钟树" class="headerlink" title="时钟树"></a>时钟树</h3></li></ol><p>在STM32中有3种不同的时钟源用来驱动系统时钟(SYSCLK)：</p><ul><li>HSI振荡器时钟（High Speed Internal oscillator，高速内部时钟）</li><li>HSE振荡器时钟（High Speed External（Oscillator / Clock），高速外部时钟）</li><li>PLL时钟（Phase Locked Loop 锁相环/倍频器）</li></ul><p>还有2种2级时钟：</p><ul><li>LSI时钟（Low Speed Internal，低速内部时钟）</li><li>LSE时钟（Low Speed External oscillator，低速外部时钟）。</li></ul><p>为什么提供这么多的时钟？<strong>节能！</strong>高速设备接高速时钟，低速设备接低速时钟，可以最大程度的达到节能效果。详见下图时钟树。</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515483.png" alt="img"></p><p>可以看这个简图：</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515484.png" alt="img"></p><p><strong>该时钟树目前不要求记住，等以后编程时，只需要时不时回头翻看即可。代码写多了，这些知识自会烂熟于胸。</strong></p><ol><li><h3 id="各个时钟介绍"><a href="#各个时钟介绍" class="headerlink" title="各个时钟介绍"></a>各个时钟介绍</h3></li><li><p>HSE时钟</p></li></ol><p>高速外部时钟是由外部时钟源提供，目前几乎所有的STM32单片机的设计都是在外部接一个8MHz的晶振，经过PLL倍频（9倍频）后得到一个72MHz的系统时钟。我们系统默认就是这个时钟。这个在启动文件可以看到。</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515485.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515486.png" alt="img"></p><ol><li>HSI时钟</li></ol><p>HSI时钟信号由内部8MHz的RC振荡器产生，可直接作为系统时钟或在2分频后作为PLL输入。HSI RC振荡器能够在不需要任何外部器件的条件下提供系统时钟。它的启动时间比HSE晶体振荡器短。然而，即使在校准之后它的时钟频率<strong>精度仍较差</strong>。</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515487.png" alt="img"></p><ol><li>PLL时钟</li></ol><p>内部PLL用来倍频<strong>HSI RC</strong>的输出时钟或<strong>HSE</strong>晶体输出时钟。PLL的设置必须在其被激活前完成。 <strong>一旦PLL被激活，这些参数就不能被改动</strong> 。如果PLL中断在时钟中断寄存器里被允许，当PLL准备就绪时，可产生中断申请。</p><p>PLL时钟一般都是对外部的8MHz的时钟信号经过9倍频后，得到72MHz的时钟频率，这是STM32F1系列允许的最高时钟频率。</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515488.png" alt="img"></p><ol><li>LSE时钟</li></ol><p>LSE晶体是一个32.768kHz的低速外部晶体或陶瓷谐振器。它为实时时钟或者其他定时功能提供一个低功耗且精确的时钟源。</p><p>LSE是<strong>不能驱动系统时钟</strong>的。</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515489.png" alt="img"></p><ol><li>LSI时钟</li></ol><p>LSI RC担当一个低功耗时钟源的角色，它可以在停机和待机模式下保持运行，为独立看门狗和自动唤醒单元提供时钟。LSI时钟频率大约40kHz（在30kHz和60kHz之间）。</p><p>LSI也是<strong>不能驱动系统时钟</strong>的。</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515490.png" alt="img"></p><ol><li><h1 id="HAL库开发入门"><a href="#HAL库开发入门" class="headerlink" title="HAL库开发入门"></a>HAL库开发入门</h1></li><li><h2 id="HAL介绍"><a href="#HAL介绍" class="headerlink" title="HAL介绍"></a>HAL介绍</h2></li><li><p>为什么要学习HAL库开发</p></li></ol><p>到目前我们已经学会1种开发SMT32程序的姿势：基于寄存器开发。</p><p>寄存器开发效率比较低，在工作中如果想<strong>快速开发</strong>还是要会用到HAL库开发。</p><p>HAL库是目前ST主力推广的开发方式，所以你如果还<strong>要用ST的芯片</strong>，会使用HAL库开发是势在必行的。而且最最关键的是，使用HAL开发有诸多的好处。</p><p>目前，HAL库已经支持STM32全线产品。</p><ol><li>什么是HAL库</li></ol><p>HAL库的全称是Hardware Abstraction Layer，翻译成<strong>硬件抽象层</strong>。HAL库是ST为STM32最新推出的抽象层嵌入式软件，可以更好的确保跨STM32产品的最大可移植性。该库提供了一整套一致的中间件组件，如RTOS，USB，TCP/IP和图形等。</p><p>HAL库是基于一个非限制性的BSD许可协议（Berkeley Software Distribution）而发布的开源代码。 ST制作的中间件堆栈（USB主机和设备库，STemWin）带有允许轻松重用的许可模式，只要是在ST公司的MCU 芯片上使用，库中的中间件(USB 主机/设备库,STemWin)协议栈即被允许随便修改，并可以反复使用。至于基于其它著名的开源解决方案商的中间件（FreeRTOS，FatFs，LwIP和PolarSSL）也都具有友好的用户许可条款。</p><ol><li>CMSIS和HAL库的关系</li></ol><p><strong>CMSIS</strong> <strong>（</strong> <strong>Cortex Microcontroller Software Interface Standard</strong> <strong>）</strong> 是 Cortex-M 处理器系列的与供应商无关的硬件抽象层。它是ARM公司制定的一个标准。它可以为处理器和外设实现一致且简单的软件接口，从而简化软件的重用、缩短微控制器新开发人员的学习过程，并缩短新设备的上市时间。简单来说，就是ARM公司制定标准，芯片厂商按照此标准编写相应的程序，实现统一的接口，方便开发人员的使用。</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735623183.png" alt="img"></p><ol><li><h2 id="HAL库开发环境搭建"><a href="#HAL库开发环境搭建" class="headerlink" title="HAL库开发环境搭建"></a>HAL库开发环境搭建</h2></li><li><h3 id="安装Java运行环境"><a href="#安装Java运行环境" class="headerlink" title="安装Java运行环境"></a>安装Java运行环境</h3></li></ol><p>STM32CubeMX 要求java8的运行环境。下载地址：<strong><a href="https://www.oracle.com/java/technologies/javase/javase8u211-later-archive-downloads.html">https://www.oracle.com/java/technologies/javase/javase8u211-later-archive-downloads.html</a></strong></p><ol><li><h3 id="安装STM32CubeMX"><a href="#安装STM32CubeMX" class="headerlink" title="安装STM32CubeMX"></a>安装STM32CubeMX</h3></li></ol><p>ST公司提供的一个工具，非常方便的用图形化的方式帮我们创建工程，和完成各种配置。</p><p>下载地址：<strong><a href="https://www.st.com/zh/development-tools/stm32cubemx.html">https://www.st.com/zh/development-tools/stm32cubemx.html#get-software</a></strong></p><p>双击安装即可。</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735623184.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735623185.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735623186.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735623187.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735623188.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735624189.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735624190.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735624191.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735624192.png" alt="img"></p><ol><li><h3 id="在线下载芯片支持包"><a href="#在线下载芯片支持包" class="headerlink" title="在线下载芯片支持包"></a>在线下载芯片支持包</h3></li></ol><p>双击<strong>CubeMX</strong>进入如下界面。</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735624193.png" alt="img"></p><p>先安装下软件支持包：</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735624194.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735624195.png" alt="img"></p><p>点击安装之后，需要先登录你的ST账号，没有就先注册一个。</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735624196.png" alt="img"></p><ol><li><h3 id="离线安装芯片支持包"><a href="#离线安装芯片支持包" class="headerlink" title="离线安装芯片支持包"></a>离线安装芯片支持包</h3></li></ol><p>如果网速不好，下载会比较慢。也可以选择离线安装。</p><ol><li>下载离线芯片支持包</li></ol><p>下载地址：<strong><a href="https://www.st.com/zh/development-tools/stm32cubemx.html#tools-software">https://www.st.com/zh/development-tools/stm32cubemx.html#tools-software</a></strong></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735624197.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735624198.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735624199.png" alt="img"></p><ol><li>导入芯片支持包</li></ol><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735624200.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735624201.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735624202.png" alt="img"></p><p><strong>注意:</strong></p><ol><li><p><strong>上面的离线安装方式只能安装基础包(en.stm32cubef1.zip),升级包(en.stm32cubef1-v1-8-5.zip)无法安装.</strong></p></li><li><p><strong>把en.stm32cubef1-v1-8-5.zip拷贝到stm32cube的仓库中,直接解压就行了.仓库位置: C:\Users\你的用户名\STM32Cube</strong> <strong>Repository</strong> <strong>. 用解压的文件覆盖原来的基础包.</strong></p></li><li><h2 id="LED流水灯案例（HAL库）"><a href="#LED流水灯案例（HAL库）" class="headerlink" title="LED流水灯案例（HAL库）"></a>LED流水灯案例（HAL库）</h2></li><li><h3 id="需求描述-2"><a href="#需求描述-2" class="headerlink" title="需求描述"></a>需求描述</h3></li></ol><p>实现LED流水灯。用的GPIOA的 0、1、8口。</p><ol><li><h3 id="硬件电路设计-2"><a href="#硬件电路设计-2" class="headerlink" title="硬件电路设计"></a>硬件电路设计</h3></li></ol><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735624203.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735624204.png" alt="img"></p><ol><li><h3 id="软件设计-1"><a href="#软件设计-1" class="headerlink" title="软件设计"></a>软件设计</h3></li><li><h4 id="创建HAL库工程"><a href="#创建HAL库工程" class="headerlink" title="创建HAL库工程"></a>创建HAL库工程</h4></li><li><p>操作页面介绍</p></li></ol><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735624205.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735624206.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735624207.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735624208.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735624209.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735624210.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735624211.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735624212.png" alt="img"></p><ol><li>根据需求设置参数</li></ol><ul><li>Debug参数选择</li></ul><p>默认debug选项没有设置，需要开启。<strong>选择\</strong>**串口**<em>\</em>即可。这个地方务必设置好，否则只能下载一次程序到*<em>\</em>*MCU**<em>\</em>，以后就无法下载了。**</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735624213.png" alt="img"></p><ul><li>RCC时钟选择</li></ul><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735624214.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735624215.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735624216.png" alt="img"></p><ol><li>GPIO配置</li></ol><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735624217.png" alt="img"></p><ol><li>配置PA0引脚。</li></ol><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735624218.png" alt="img"></p><ol><li>同样的方式配置PA1和PA8，然后可以看到这3个引脚。</li></ol><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735624219.png" alt="img"></p><ol><li>分别对他们进行设置。</li></ol><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735624220.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735624221.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735625222.png" alt="img"></p><ol><li>工程配置</li></ol><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735625223.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735625224.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735625225.png" alt="img"></p><ol><li>生成代码</li></ol><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735625226.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735625227.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735625228.png" alt="img"></p><ol><li>生成的工程目录介绍</li></ol><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735625229.png" alt="img"></p><ol><li><h4 id="自动生成的代码解读"><a href="#自动生成的代码解读" class="headerlink" title="自动生成的代码解读"></a>自动生成的代码解读</h4></li></ol><p><strong>main</strong>函数中已经替我们调用了HAL的初始化，时钟的初始化，GPIO的初始化。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_Init();</span><br><span class="line">    SystemClock_Config();</span><br><span class="line">    MX_GPIO_Init();</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//下面是GPIO初始化的代码。</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">MX_GPIO_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    GPIO_InitTypeDef GPIO_InitStruct = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="comment">/* GPIO Ports Clock Enable */</span></span><br><span class="line">    __HAL_RCC_GPIOC_CLK_ENABLE();</span><br><span class="line">    __HAL_RCC_GPIOA_CLK_ENABLE();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*Configure GPIO pin Output Level */</span></span><br><span class="line">    HAL_GPIO_WritePin(GPIOA, LED1_Pin | LED2_Pin | LED3_Pin, GPIO_PIN_SET);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*Configure GPIO pins : PAPin PAPin PAPin */</span></span><br><span class="line">    GPIO_InitStruct.Pin = LED1_Pin | LED2_Pin | LED3_Pin;</span><br><span class="line">    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;</span><br><span class="line">    GPIO_InitStruct.Pull = GPIO_NOPULL;</span><br><span class="line">    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;</span><br><span class="line">    HAL_GPIO_Init(GPIOA, &amp;GPIO_InitStruct);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h4 id="构建LED驱动"><a href="#构建LED驱动" class="headerlink" title="构建LED驱动"></a>构建LED驱动</h4></li></ol><p>为了方便管理，我们把LED驱动放入单独的文件夹管理。在项目根目录下创建Hardware/led目录。</p><p>然后在Hardware/led目录下创建2个文件led.h和led.c。</p><p>并在Keil中添加如下配置。</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735625230.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735625231.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735625232.png" alt="img"></p><ol><li><h5 id="led-h"><a href="#led-h" class="headerlink" title="led.h"></a>led.h</h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __led_h</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __led_h</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;gpio.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED uint16_t</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">LED_Turn_On</span><span class="params">(LED led)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">LED_Turn_Off</span><span class="params">(LED led)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">LED_Toggle</span><span class="params">(LED led)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">LED_Turn_Off_All</span><span class="params">(LED led[], <span class="type">uint8_t</span> len)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><ol><li><h5 id="led-c"><a href="#led-c" class="headerlink" title="led.c"></a>led.c</h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;led.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 点亮LED</span></span><br><span class="line"><span class="comment"> * @param &#123;LED&#125; led</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">LED_Turn_On</span><span class="params">(LED led)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_GPIO_WritePin(GPIOA, led, GPIO_PIN_RESET);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 熄灭LED</span></span><br><span class="line"><span class="comment"> * @param &#123;LED&#125; led</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">LED_Turn_Off</span><span class="params">(LED led)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_GPIO_WritePin(GPIOA, led, GPIO_PIN_SET);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 翻转LED的状态</span></span><br><span class="line"><span class="comment"> * @param &#123;LED&#125; led</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">LED_Toggle</span><span class="params">(LED led)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_GPIO_TogglePin(GPIOA, led);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 关闭所有LED</span></span><br><span class="line"><span class="comment"> * @param &#123;LED&#125; led</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; len</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">LED_Turn_Off_All</span><span class="params">(LED led[], <span class="type">uint8_t</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint8_t</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        LED_Turn_Off(led[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h5 id="main函数"><a href="#main函数" class="headerlink" title="main函数"></a>main函数</h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;LED.h&quot;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_Init();</span><br><span class="line">    SystemClock_Config();</span><br><span class="line">    MX_GPIO_Init();</span><br><span class="line">    <span class="type">uint16_t</span> leds[] = &#123;LED1_Pin, LED2_Pin, LED3_Pin&#125;;</span><br><span class="line">    <span class="type">uint8_t</span> i;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            LED_Turn_Off_All(leds, <span class="number">3</span>);</span><br><span class="line">            LED_Turn_On(leds[i]);</span><br><span class="line">            HAL_Delay(<span class="number">200</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            LED_Turn_Off_All(leds, <span class="number">3</span>);</span><br><span class="line">            LED_Turn_On(leds[<span class="number">2</span> - i]);</span><br><span class="line">            HAL_Delay(<span class="number">200</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4></li></ol><p>每新建一个工程，都需要<strong>重新配置</strong> <strong>Include Path和Debug参数</strong> 。</p><ol><li><h1 id="STM32的中断系统"><a href="#STM32的中断系统" class="headerlink" title="STM32的中断系统"></a>STM32的中断系统</h1></li><li><h2 id="中断概述"><a href="#中断概述" class="headerlink" title="中断概述"></a>中断概述</h2></li><li><h3 id="中断的概念"><a href="#中断的概念" class="headerlink" title="中断的概念"></a>中断的概念</h3></li></ol><p>在主程序运行过程中，出现了特定事件，使得CPU暂停当前正在运行的程序，转而去处理这个事件，等这个事件处理完成之后，CPU再回到刚才被打断的位置继续处理，这就是<strong>中断</strong>。</p><p>在ARM体系结构中，中断通常由外设或外部输入产生，有时也可以由软件触发。中断是单片机系统处理紧急或突发事件的重要方式，如定时器溢出、按键输入、串口数据到达等。</p><p>那个打断CPU执行的特定事件，我们一般称之为<strong>中断源</strong>。被中断源打断的位置我们称为<strong>断点</strong>。处理特定事件的过程，我们称为执行<strong>中断处理程序</strong>。</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735625233.png" alt="img"></p><p>正在执行中断程序的时候，这个时候有可能被另外一个中断源给中断，CPU转而去执行另外一个中断源的中断处理程序，这叫<strong>中断嵌套</strong>。</p><p>中断B能否打断中断A，要看他们的优先级，优先级高的可以打断优先级低的，优先级低的无法打断优先级高的。</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735625234.png" alt="img"></p><p>中断源可以是外部的，也可以是内部的。外部的叫<strong>外部中断源</strong>，内部的叫<strong>内部中断源（有时候也叫异常）</strong>。</p><ol><li><h3 id="为什么需要中断"><a href="#为什么需要中断" class="headerlink" title="为什么需要中断"></a>为什么需要中断</h3></li></ol><p>对单片机系统来说，<strong>中断至关重要</strong>。</p><p>中断的主要意义在于提高CPU的效率，而不会一直占用CPU，实现对突发事件的实时处理，以及实现程序的并行化和嵌入式系统进程之间的切换。相较于轮询方式（即按照一定的频率和周期不断地检测某些事件的发生），中断在处理一些偶然发生的事情时效率更高。</p><p>假设我们要检测按键是否按下，如果没有中断，则需要用循环的方式（阻塞）不断的去检测按键对应的IO口的电平，这是比较耗费CPU的时间的。如果要检测的更多的话，CPU有可能会导致阻塞。 <strong>中断则使这件事简单化</strong> ，主程序不需要循环不断的去检测按键，当有按键按下的时候，CPU执行被打断，去执行按键处理程序就行了。当没有按键按下的时候，CPU完全可以正常执行代码，丝毫不受任何的影响。</p><ol><li><h3 id="STM32的中断"><a href="#STM32的中断" class="headerlink" title="STM32的中断"></a>STM32的中断</h3></li></ol><p>Cortext-M3内核支持256个中断，其中包含了16个内核中断和240个外部中断，并且具有256级的可编程中断设置。</p><p>一般情况下，芯片厂商会对Cortex-M3的中断进行裁剪。</p><p>STM32有84个中断，包括16个内核中断和68个可屏蔽中断，具有16级可编程的中断优先级。</p><p>STM32F103系列70个中断（咱们目前使用的芯片）有10个内核中断和60个可编程的外部中断。</p><p>下面的列表中，灰色背景的是内部中断（或者异常），其他的为外部中断。</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735625235.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735626236.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735626237.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735626238.png" alt="img"></p><ol><li><h3 id="STM32的中断体系架构"><a href="#STM32的中断体系架构" class="headerlink" title="STM32的中断体系架构"></a>STM32的中断体系架构</h3></li></ol><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735626239.png" alt="img"></p><p><strong>这图已经无敌了！</strong></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735626240.png" alt="img"></p><ol><li><h3 id="NVIC嵌套向量中断控制器"><a href="#NVIC嵌套向量中断控制器" class="headerlink" title="NVIC嵌套向量中断控制器"></a>NVIC嵌套向量中断控制器</h3></li><li><h4 id="NVIC的介绍"><a href="#NVIC的介绍" class="headerlink" title="NVIC的介绍"></a>NVIC的介绍</h4></li></ol><p><strong>NVIC（Nested vectored \</strong>**interrupt**<em>\</em>controller<strong><em>* 嵌套向量中断控制器）和处理器核的接口紧密相连，可以实现</em></strong>*低延迟** **的中断处理和高效地处理中断。** 嵌套向量中断控制器管理着包括内核异常，外部中断等**所有中断**。**NVIC决定哪个中断的处理程序交给*<strong>*CPU</strong> <strong>来执行（秘书，大内总管）</strong> 。</p><p>每一个外部中断都可以被使能或者禁止，并且可以被设置为挂起状态或者清除状态。处理器的中断可以电平的形式的，也可以是脉冲形式的，这样中断控制器就可以处理任何中断源。</p><p>16个IO的中断与PVD(电源电压检测)，RTC(实时时钟)，USB，以太网检测这20个外部中断会通过EXTI来控制，然后交给NVIC。其他中断都是直接交给NVIC来处理。</p><p>NVIC提供了灵活、高效、可扩展的中断处理机制，支持多级优先级、多向中断、嵌套向量中断等特性。当一个中断请求到达时，NVIC会确定其优先级并决定是否应该中断当前执行的程序，以便及时响应和处理该中断 请求。这种设计有助于提高系统的响应速度和可靠性，特别是在需要处理大量中断请求的实时应用程序中。</p><ol><li><h4 id="NVIC原理"><a href="#NVIC原理" class="headerlink" title="NVIC原理"></a>NVIC原理</h4></li></ol><p>如图：</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735626241.png" alt="img"></p><ol><li><h4 id="中断优先级"><a href="#中断优先级" class="headerlink" title="中断优先级"></a>中断优先级</h4></li></ol><p>NVIC为了方便管理中断，可以通过软件给每个中断设置优先级。NVIC用4个位来控制优先级，值小的优先级高。把优先级分为两种：抢占优先级和响应优先级。</p><p>规则：</p><ul><li>优先级值越小，优先级越高。</li><li>如果不设置优先级，则默认优先级为0。</li><li>先比较抢占优先级。抢占优先级高的可以打断抢占优先级低的。</li><li>若抢占优先级一样，再比较响应优先级。<strong>但是响应优先级\</strong>**不会**<em>\</em>导致中断*<em>*<em>嵌套。</em></em></li><li>若<strong>抢占优先级一样</strong>的同时挂起，则优先处理<strong>响应抢占优先级高</strong>的。</li><li>若挂起的优先级（抢占和响应）都一样，则查找中断向量表，值小的先响应（看自然优先级优先级）。</li><li>NVIC对优先级分了5组，在程序中先对中断进行分组，优先级寄存器 IPR 有 8 位，但实际只使用到高 4 位，用于决定抢占优先级、响应优先级的等级。</li><li>具体这 4 位如何切割？由又由 AIRCR 寄存器控制，而且分组只能分一次，若多次分，只有最后一次生效。</li></ul><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735626242.png" alt="img"></p><div class="table-container"><table><thead><tr><th>分组</th><th>抢占优先级</th><th>响应优先级</th></tr></thead><tbody><tr><td>0</td><td>0位 取值范围：0</td><td>4位 取值范围：0-15</td></tr><tr><td>1</td><td>1位 取值范围：0-1</td><td>3位 取值范围：0-7</td></tr><tr><td>2</td><td>2位 取值范围：0-3</td><td>2位 取值范围：0-3</td></tr><tr><td>3</td><td>3位 取值范围：0-7</td><td>1位 取值范围：0-1</td></tr><tr><td>4</td><td>4位 取值范围：0-15</td><td>0位 取值范围：0</td></tr></tbody></table></div><p>抢占优先级和子优先级可通过CubeMX配置。</p><ol><li><h4 id="NVIC常用寄存器"><a href="#NVIC常用寄存器" class="headerlink" title="NVIC常用寄存器"></a>NVIC常用寄存器</h4></li></ol><p>如图：</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735626243.png" alt="img"></p><ol><li><h4 id="NVIC配置思路"><a href="#NVIC配置思路" class="headerlink" title="NVIC配置思路"></a>NVIC配置思路</h4></li></ol><p><strong>设置中断分组 → 设置中断优先级 → 使能中断</strong></p><ol><li><h3 id="中断向量表"><a href="#中断向量表" class="headerlink" title="中断向量表"></a>中断向量表</h3></li></ol><p><strong>STM32的\</strong>*<em>中断向量表<strong> </strong>是一个存储中断处理函数地址的数组，位于Flash区的起始位置。*</em> 每个数组元素对应一个中断源，其地址指向相应的中断服务程序。当中断发生时，处理器会根据中断号查找向量表，然后跳转到 对应的中断服务程序执行。</p><p>中断向量表的主要作用是解决中断函数地址不固定与中断必须跳转到固定地方执行程序之间的矛盾。由于编 译器每次编译都会为中断函数随机分配地址，但硬件要求中断必须跳转到固定的位置。</p><p>因此，中断向量表就作为这样一个固定的地址列表，其中包含了中断函数的地址以及跳转到这些地址的程序。当中断发生时，处理器会跳转到这个固定的中断向量表，然后根据其中的信息跳转到相应的中断处理函数，从而执行中断。</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735626244.png" alt="img"></p><p>注意：</p><p><strong>NVIC（Nested Vectored \</strong>*<em>Interrupt*<em> *<em>Controller*<em> *<em>）*</em> 和</em></em>中断向量表</em></em>不是一回事。NVIC是处理器中的一个组件，负责管理和响应中断请求，包括优先级和中断的嵌套处理。中断向量表则是一个存储中断服务程序（ISR）地址的表格，当中断发生时，NVIC使用这个表来找到对应的ISR。它们配合工作，NVIC通过中断向量表来确定应执行哪个中断处理程序。</p><ol><li><h3 id="中断执行流程"><a href="#中断执行流程" class="headerlink" title="中断执行流程"></a>中断执行流程</h3></li></ol><p>中断发生时，STM32的执行流程如下：</p><p>首先，由外设发出中断请求；然后，处理器暂停当前执行的任务，保护现场（如将当前位置的PC地址压栈）；接着，程序跳转到对应的中断服务程序（ISR）并执行；中断服务程序执行完毕后，恢复现场（如将栈顶的值送回PC）；最后，处理器返回到被中断的位置，继续执行下一个指令。</p><ol><li><h2 id="中断案例：检测按键按下"><a href="#中断案例：检测按键按下" class="headerlink" title="中断案例：检测按键按下"></a>中断案例：检测按键按下</h2></li><li><h3 id="需求描述-3"><a href="#需求描述-3" class="headerlink" title="需求描述"></a>需求描述</h3></li></ol><p>利用外部中断检测按键KEY3，当按键按下，翻转LED1显示。</p><ol><li><h3 id="硬件电路设计-3"><a href="#硬件电路设计-3" class="headerlink" title="硬件电路设计"></a>硬件电路设计</h3></li><li><h4 id="LED1的硬件电路"><a href="#LED1的硬件电路" class="headerlink" title="LED1的硬件电路"></a>LED1的硬件电路</h4></li></ol><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735626245.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735626246.png" alt="img"></p><ol><li><h4 id="KEY的硬件电路"><a href="#KEY的硬件电路" class="headerlink" title="KEY的硬件电路"></a>KEY的硬件电路</h4></li></ol><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735626247.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735626248.png" alt="img"></p><p>说明：</p><ol><li><p>PF10对应的是KEY_3(SW3),我们可以设置PF10的模式为<strong>下拉输入</strong>，则当按键没有按下的时候是低电平，当按键按下的时候是高电平。</p></li><li><p>由于按键没有设置硬件防抖，则我们需要软件设计防抖。一般延时10-15ms即可实现软件防抖。</p></li><li><h3 id="软件设计（寄存器）-1"><a href="#软件设计（寄存器）-1" class="headerlink" title="软件设计（寄存器）"></a>软件设计（寄存器）</h3></li></ol><p>复制我们第一个项目，在第一个项目的基础上修改，可以省去一些配置步骤。</p><p>另外文件如何创建以后不再说明。</p><ol><li><h4 id="main-c-2"><a href="#main-c-2" class="headerlink" title="main.c"></a>main.c</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Driver_LED.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Driver_Key.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123; </span><br><span class="line">    <span class="comment">/* 1. 初始化LED */</span></span><br><span class="line">    Driver_LED_Init();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 2. 初始化按键 */</span></span><br><span class="line">    Driver_Key_Init();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">            </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h4 id="Delay-h-1"><a href="#Delay-h-1" class="headerlink" title="Delay.h"></a>Delay.h</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __delay_h</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __delay_h</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;stm32f10x.h&quot;</span><span class="comment">// Device header</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay_us</span><span class="params">(<span class="type">uint16_t</span> us)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay_ms</span><span class="params">(<span class="type">uint16_t</span> ms)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay_s</span><span class="params">(<span class="type">uint16_t</span> s)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><ol><li><h4 id="Delay-c-1"><a href="#Delay-c-1" class="headerlink" title="Delay.c"></a>Delay.c</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;delay.h&quot;</span><span class="comment">// Device header</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay_us</span><span class="params">(<span class="type">uint16_t</span> us)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 定时器重装值 */</span></span><br><span class="line">    SysTick-&gt;LOAD = <span class="number">72</span> * us;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 清除当前计数值 */</span></span><br><span class="line">    SysTick-&gt;VAL = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*设置内部时钟源（2位-&gt;1）,不需要中断（1位-&gt;0），并启动定时器(0位-&gt;1)*/</span></span><br><span class="line">    SysTick-&gt;CTRL = <span class="number">0x5</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*等待计数到0， 如果计数到0则16位会置为1*/</span>   </span><br><span class="line">    <span class="keyword">while</span> (!(SysTick-&gt;CTRL &amp; SysTick_CTRL_COUNTFLAG));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 关闭定时器 */</span></span><br><span class="line">    SysTick-&gt;CTRL &amp;= ~SysTick_CTRL_ENABLE; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay_ms</span><span class="params">(<span class="type">uint16_t</span> ms)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (ms--)</span><br><span class="line">    &#123;</span><br><span class="line">        Delay_us(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay_s</span><span class="params">(<span class="type">uint16_t</span> s)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (s--)</span><br><span class="line">    &#123;</span><br><span class="line">        Delay_ms(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h4 id="Driver-LED-h-1"><a href="#Driver-LED-h-1" class="headerlink" title="Driver_LED.h"></a>Driver_LED.h</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __DRIVER_LED_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __DRIVER_LED_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED_1 GPIO_ODR_ODR0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED_2 GPIO_ODR_ODR1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED_3 GPIO_ODR_ODR8</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_Init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_On</span><span class="params">(<span class="type">uint32_t</span> led)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_Off</span><span class="params">(<span class="type">uint32_t</span> led)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_Toggle</span><span class="params">(<span class="type">uint32_t</span> led)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_OnAll</span><span class="params">(<span class="type">uint32_t</span> leds[], <span class="type">uint8_t</span> size)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_OffAll</span><span class="params">(<span class="type">uint32_t</span> leds[], <span class="type">uint8_t</span> size)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><ol><li><h4 id="Driver-LED-c-1"><a href="#Driver-LED-c-1" class="headerlink" title="Driver_LED.c"></a>Driver_LED.c</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Driver_LED.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 对LED进行初始化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 打开GPIOA的时钟 */</span></span><br><span class="line">    RCC-&gt;APB2ENR |= RCC_APB2ENR_IOPAEN;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 2. 给用到的端口的所有 PIN (PA0 PA1 PA8) 设置工作模式: 通用推挽输出 MODE:11  CNF:00 */</span></span><br><span class="line">    GPIOA-&gt;CRL |= (GPIO_CRL_MODE0 | GPIO_CRL_MODE1);</span><br><span class="line">    GPIOA-&gt;CRL &amp;= ~(GPIO_CRL_CNF0 | GPIO_CRL_CNF1);</span><br><span class="line"></span><br><span class="line">    GPIOA-&gt;CRH |= GPIO_CRH_MODE8;</span><br><span class="line">    GPIOA-&gt;CRH &amp;= ~GPIO_CRH_CNF8;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 3. 关闭所有灯  */</span></span><br><span class="line">    Driver_LED_Off(LED_1);</span><br><span class="line">    Driver_LED_Off(LED_2);</span><br><span class="line">    Driver_LED_Off(LED_3);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 点亮指定的LED</span></span><br><span class="line"><span class="comment"> * @param &#123;uint32_t&#125; led 要点亮的LED</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_On</span><span class="params">(<span class="type">uint32_t</span> led)</span></span><br><span class="line">&#123;</span><br><span class="line">    GPIOA-&gt;ODR &amp;= ~led;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 关闭指定的LED</span></span><br><span class="line"><span class="comment"> * @param &#123;uint32_t&#125; led 要关闭的LED</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_Off</span><span class="params">(<span class="type">uint32_t</span> led)</span></span><br><span class="line">&#123;</span><br><span class="line">    GPIOA-&gt;ODR |= led;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 翻转LED的状态</span></span><br><span class="line"><span class="comment"> * @param &#123;uint32_t&#125; led 要翻转的LED</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_Toggle</span><span class="params">(<span class="type">uint32_t</span> led)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 读取引脚的电平,如果是1(目前是关闭), 打开, 否则就关闭 */</span></span><br><span class="line">    <span class="keyword">if</span> ((GPIOA-&gt;IDR &amp; led) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Driver_LED_Off(led);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        Driver_LED_On(led);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 打开数组中所有的灯</span></span><br><span class="line"><span class="comment"> * @param &#123;uint32_t&#125; leds 所有灯</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; size 灯的个数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_OnAll</span><span class="params">(<span class="type">uint32_t</span> leds[], <span class="type">uint8_t</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint8_t</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Driver_LED_On(leds[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 关闭数组中所有的灯</span></span><br><span class="line"><span class="comment"> * @param &#123;uint32_t&#125; leds 所有灯</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; size 灯的个数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_OffAll</span><span class="params">(<span class="type">uint32_t</span> leds[], <span class="type">uint8_t</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint8_t</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Driver_LED_Off(leds[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h4 id="Driver-Key-h"><a href="#Driver-Key-h" class="headerlink" title="Driver_Key.h"></a>Driver_Key.h</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __DRIVER_KEY_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __DRIVER_KEY_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_Key_Init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><ol><li><h4 id="Driver-Key-c"><a href="#Driver-Key-c" class="headerlink" title="Driver_Key.c"></a>Driver_Key.c</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Driver_Key.&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Driver_LED.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Delay.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 初始化按键.</span></span><br><span class="line"><span class="comment"> *  1. 给按键对应的io口设置工作模式: 下拉输入</span></span><br><span class="line"><span class="comment"> *  2. 配置复用为外部中断</span></span><br><span class="line"><span class="comment"> *  3. 配置外部中断控制器 EXTI</span></span><br><span class="line"><span class="comment"> *  4. 配置NVIC</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_Key_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 开启时钟 */</span></span><br><span class="line">    <span class="comment">/* 1.1  GPIOF*/</span></span><br><span class="line">    RCC-&gt;APB2ENR |= RCC_APB2ENR_IOPFEN;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 1.2  AFIO*/</span></span><br><span class="line">    RCC-&gt;APB2ENR |= RCC_APB2ENR_AFIOEN;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 2. 配置 PF10为下拉输入: MODE=00 CNF=10  ODR=0 */</span></span><br><span class="line">    GPIOF-&gt;CRH &amp;= ~GPIO_CRH_MODE10;</span><br><span class="line">    GPIOF-&gt;CRH |= GPIO_CRH_CNF10_1;</span><br><span class="line">    GPIOF-&gt;CRH &amp;= ~GPIO_CRH_CNF10_0;</span><br><span class="line">    GPIOF-&gt;ODR &amp;= ~GPIO_ODR_ODR10;<span class="comment">/* ODR为0 下拉输入  ODR为1 上拉输入 */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 3. 配置AFIO 配置PF10引脚为外部中断  EXTICR3  0101 */</span></span><br><span class="line">    AFIO-&gt;EXTICR[<span class="number">2</span>] &amp;= ~AFIO_EXTICR3_EXTI10;</span><br><span class="line">    AFIO-&gt;EXTICR[<span class="number">2</span>] |= AFIO_EXTICR3_EXTI10_PF;</span><br><span class="line">    <span class="comment">/* 使用AFIO配置寄存器（AFIO-&gt;EXTICR[2]）将PF10引脚映射到外部中断线10（EXTI10）。*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 4. 配置EXTI */</span></span><br><span class="line">    <span class="comment">/* 4.1. 配置上升沿触发 RTSR TR10=1*/</span></span><br><span class="line">    EXTI-&gt;RTSR |= EXTI_RTSR_TR10;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 4.2 开启 LINE10, 配置的中断屏蔽寄存器 */</span></span><br><span class="line">    EXTI-&gt;IMR |= EXTI_IMR_MR10;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 5. 配置 NVIC */</span></span><br><span class="line">    <span class="comment">/* 5.1 配置优先级组 (3-7) 配置3表示4个二进制位全部用于表示抢占优先级*/</span></span><br><span class="line">    NVIC_SetPriorityGrouping(<span class="number">3</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 5.2 配置优先级 参数1:中断号*/</span></span><br><span class="line">    NVIC_SetPriority(EXTI15_10_IRQn, <span class="number">3</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 5.3 使能Line10 */</span></span><br><span class="line">    NVIC_EnableIRQ(EXTI15_10_IRQn);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: line 15-10的中断服务函数.</span></span><br><span class="line"><span class="comment"> *  一旦按键下按键1,则会执行一次这个函数</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">EXTI15_10_IRQHandler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 务必一定必须要清除中断标志位 */</span></span><br><span class="line">    EXTI-&gt;PR |= EXTI_PR_PR10;</span><br><span class="line"></span><br><span class="line">    Delay_ms(<span class="number">5</span>);<span class="comment">/* 务必一定必须要清除中断标志位 */</span> </span><br><span class="line">    <span class="keyword">if</span> ((GPIOF-&gt;IDR &amp; GPIO_IDR_IDR10) != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Driver_LED_Toggle(LED_1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3></li></ol><p><strong>为啥\</strong>**LED**<em>\</em>翻转电平这个函数的if条件判断必须要用*<em>*<em>if<strong> </strong> ((<strong> </strong>GPIOA<strong> </strong>-&gt;<strong> </strong>IDR<em>**</em> &amp; led) == *</em></em>*0*<strong><em>)，而不是*</em></strong>if*<em> *<em> ((*<em> *<em>GPIOA*<em> *<em>-&gt;*<em> *</em>IDR\</em></em></em></em> &amp; led) == 1)？</em></em></p><p>举个例子：</p><p><strong>假设 \</strong>**led**<em>\</em> 是一个位掩码**</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> LED1 (1 &lt;&lt; 0)  <span class="comment">// LED1对应GPIOA的第0位</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED2 (1 &lt;&lt; 1)  <span class="comment">// LED2对应GPIOA的第1位</span></span></span><br><span class="line"><span class="comment">// 可能还有其他LED定义...</span></span><br></pre></td></tr></table></figure><p><strong>而 GPIOA-&gt;IDR 是一个输入数据寄存器，其中的每一位对应一个特定的输入引脚的状态（通常是0或1）。</strong></p><p><strong>现在假设 GPIOA-&gt;</strong> <strong>IDR**</strong> 的值是 0b00000011，即第0位和第1位都为1。如果我们使用位掩码 <strong><em>\</em>led**</strong> = LED1 | LED2，即 led = (1 &lt;&lt; 0) | (1 &lt;&lt; 1)，那么 led 的值将是 0b00000011。**</p><p><strong>现在来看 (GPIOA-&gt;</strong> <strong>IDR**</strong> &amp; <strong> </strong>led<strong> </strong>) 的计算：**</p><p><strong>因此，(GPIOA-&gt;</strong> <strong>IDR**</strong> &amp; <strong> </strong>led<strong> </strong>) 的结果将是 0b00000011，而不是单纯的1。**</p><p><strong>如果\</strong>*<em>条件语句<strong> </strong>是 if ((GPIOA-&gt;<strong> </strong>IDR<strong>** &amp; </strong> <strong>led</strong> <em>*) == 1)，那么 (GPIOA-&gt;IDR &amp; led) 的值是 0b00000011，显然不等于1，因此条件将不会成立，这可能与预期的逻辑相悖。</em></em></p><p>因此，<strong>if</strong> <strong> ((</strong> <strong>GPIOA</strong> <strong>-&gt;</strong> <strong>IDR**</strong> &amp; <strong> </strong>led<strong> </strong>) == *<em>\</em>*0**<em>\</em>)是正解！**</p><ol><li><h3 id="软件设计（HAL库）"><a href="#软件设计（HAL库）" class="headerlink" title="软件设计（HAL库）"></a>软件设计（HAL库）</h3></li><li><h4 id="STM32CubeMX配置"><a href="#STM32CubeMX配置" class="headerlink" title="STM32CubeMX配置"></a>STM32CubeMX配置</h4></li></ol><p>配置LED1的PA0引脚。</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735626249.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735626250.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735626251.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735626252.png" alt="img"></p><p>调整滴答定时器和外部中断的优先级。否则使用延时消抖会卡死。</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735626253.png" alt="img"></p><ol><li><h4 id="GPIO初始化代码"><a href="#GPIO初始化代码" class="headerlink" title="GPIO初始化代码"></a>GPIO初始化代码</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">MX_GPIO_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    GPIO_InitTypeDef GPIO_InitStruct = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* GPIO Ports Clock Enable */</span></span><br><span class="line">    __HAL_RCC_GPIOE_CLK_ENABLE();</span><br><span class="line">    __HAL_RCC_GPIOC_CLK_ENABLE();</span><br><span class="line">    __HAL_RCC_GPIOG_CLK_ENABLE();</span><br><span class="line">    __HAL_RCC_GPIOA_CLK_ENABLE();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*Configure GPIO pin Output Level */</span></span><br><span class="line">    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*Configure GPIO pin : PE3 */</span></span><br><span class="line">    GPIO_InitStruct.Pin = GPIO_PIN_3;</span><br><span class="line">    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;</span><br><span class="line">    GPIO_InitStruct.Pull = GPIO_NOPULL;</span><br><span class="line">    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;</span><br><span class="line">    HAL_GPIO_Init(GPIOE, &amp;GPIO_InitStruct);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*Configure GPIO pin : PG6 */</span></span><br><span class="line">    GPIO_InitStruct.Pin = GPIO_PIN_6;</span><br><span class="line">    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;</span><br><span class="line">    GPIO_InitStruct.Pull = GPIO_PULLDOWN;</span><br><span class="line">    HAL_GPIO_Init(GPIOG, &amp;GPIO_InitStruct);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* EXTI interrupt init*/</span></span><br><span class="line">    HAL_NVIC_SetPriority(EXTI9_5_IRQn, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h4 id="添加中断处理函数"><a href="#添加中断处理函数" class="headerlink" title="添加中断处理函数"></a>添加中断处理函数</h4></li></ol><p>当有按键按下的时候，检测到上升沿会执行中断服务函数：EXTI15_10_IRQHandler，内部又会调用HAL库总的外部中断处理函数HAL_GPIO_EXTI_IRQHandler，然后会调用中断回调函数HAL_GPIO_EXTI_Callback，它是一个<strong>弱实现函数</strong>（用<strong>__weak</strong>修饰，如果有新的同名函数实现，则执行时会自动调用新的实现函数），我们重新实现这个函数就可以了。</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735626254.png" alt="img"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">EXTI15_10_IRQHandler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* USER CODE BEGIN EXTI15_10_IRQn 0 */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* USER CODE END EXTI15_10_IRQn 0 */</span></span><br><span class="line">    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);</span><br><span class="line">    <span class="comment">/* USER CODE BEGIN EXTI15_10_IRQn 1 */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* USER CODE END EXTI15_10_IRQn 1 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_GPIO_EXTI_IRQHandler</span><span class="params">(<span class="type">uint16_t</span> GPIO_Pin)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* EXTI line interrupt detected */</span></span><br><span class="line">    <span class="keyword">if</span> (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != <span class="number">0x00</span>u)</span><br><span class="line">    &#123;</span><br><span class="line">        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);</span><br><span class="line">        HAL_GPIO_EXTI_Callback(GPIO_Pin);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">__weak <span class="type">void</span> <span class="title function_">HAL_GPIO_EXTI_Callback</span><span class="params">(<span class="type">uint16_t</span> GPIO_Pin)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* Prevent unused argument(s) compilation warning */</span></span><br><span class="line">    UNUSED(GPIO_Pin);</span><br><span class="line">    <span class="comment">/* <span class="doctag">NOTE:</span> This function Should not be modified, when the callback is needed,</span></span><br><span class="line"><span class="comment">           the HAL_GPIO_EXTI_Callback could be implemented in the user file</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在gpio.c中实现中断回调函数即可。</span></span><br><span class="line"><span class="comment">/* USER CODE BEGIN 2 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_GPIO_EXTI_Callback</span><span class="params">(<span class="type">uint16_t</span> GPIO_Pin)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (GPIO_Pin == GPIO_PIN_10)</span><br><span class="line">    &#123;</span><br><span class="line">        HAL_Delay(<span class="number">15</span>);<span class="comment">//调整一下SYSTick的优先级，其默认是最低的！</span></span><br><span class="line">        <span class="comment">// 防抖： 延迟15ms之后再次检测是否仍然是高电平，</span></span><br><span class="line">        <span class="keyword">if</span> (HAL_GPIO_ReadPin(GPIOF, GPIO_Pin) == GPIO_PIN_SET)</span><br><span class="line">        &#123;</span><br><span class="line">            HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* USER CODE END 2 */</span></span><br></pre></td></tr></table></figure><ol><li><h1 id="USART串口通讯"><a href="#USART串口通讯" class="headerlink" title="USART串口通讯"></a>USART串口通讯</h1></li><li><h2 id="通讯基础知识"><a href="#通讯基础知识" class="headerlink" title="通讯基础知识"></a>通讯基础知识</h2></li><li><h3 id="串口介绍"><a href="#串口介绍" class="headerlink" title="串口介绍"></a>串口介绍</h3></li></ol><p>串口通讯（Serial Communication）是一种设备间非常常用的串行通讯方式，因为它简单便捷，因此大部分电子设备都支持该通讯方式，电子工程师在调试设备时也经常使用该通讯方式输出调试信息。</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532893314327.png" alt="img"></p><ol><li><h3 id="串口通讯协议"><a href="#串口通讯协议" class="headerlink" title="串口通讯协议"></a>串口通讯协议</h3></li></ol><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532893314328.png" alt="img"></p><p>六个重点：</p><ol><li><strong>波特率</strong></li></ol><p><strong>”波特“（Baudrate），它表示每秒钟传输了多少个码元。**</strong>在二进制的世界码元和位是等价的<strong>**。用每秒传输的比特数表示波特率。</strong></p><p><strong>STM32提供的是**</strong>串口<strong><strong>异步通讯，异步通讯中由于没有时钟信号，所以两个通讯设备之间需要</strong></strong>约定好波特率<strong>**，即每个码元的长度，以便对信号进行解码。常见的波特率为 4800、9600、115200等。</strong></p><ol><li><strong>通讯的起始位</strong></li></ol><p><strong>每开始一次通信时发送方先发出一个逻辑”0”的信号（低电平），表示传输字符的开始。因为总线空闲时为高电平所以开始一次通信时先发送一个明显区别于空闲状态的信号即低电平。</strong></p><ol><li><strong>通讯的停止位</strong></li></ol><p><strong>停止信号可由 0.5、1、1.5 或 2个逻辑1的数据位表示，只要双方约定一致即可。</strong></p><ol><li><strong>空闲位</strong></li></ol><p><strong>串口**</strong>协议规定，当总线处于空闲状态时信号线的状态为‘1’即高电平，表示当前线路上没有数据。**</p><ol><li><strong>有效数据位</strong></li></ol><p><strong>在数据包的起始位之后紧接着的就是要传输的主体数据内容，也称为有效数据，有效数据的长度常被约定为 5、6、7 或8位长。构成一个字符（一般都是8位）。**</strong>先发送最低位<strong><strong>，最后发送最高位（</strong></strong>LSB<strong> </strong>-&gt; MSB），使用低电平表示’0’高电平表示’1’完成数据位的传输。**</p><ol><li><strong>校验位</strong></li></ol><p><strong>数据位加上这一位后，使得“1”的位数应为偶数（偶校验）或奇数（奇校验），以此来校验数据传送的正确性。</strong></p><p><strong>串口**</strong>校验分几种方式：**</p><ol><li><strong>无校验（no</strong> <strong>parity**</strong>）。**</li><li><strong>奇校验（**</strong>odd<strong> </strong>parity<strong><strong>）：如果数据位中“1”的数目是偶数，则</strong></strong>校验位<strong>**为“1”，如果“1”的数目是奇数，校验位为“0”。</strong></li><li><strong>偶校验（even</strong> <strong>parity**</strong>）：如果数据为中“1”的数目是偶数，则<strong><strong>校验位</strong></strong>为“0”，如果为奇数，校验位为“1”。**</li></ol><p><strong>现在的通讯效率非常高，一般也不用**</strong>奇偶校验<strong>**，还有更复杂的检验算法！</strong></p><ol><li><h2 id="USART外设"><a href="#USART外设" class="headerlink" title="USART外设"></a>USART外设</h2></li></ol><p>STM32提供了USART（Universal Synchronous Asynchronous Receiver and Transmitter）通用同步异步收发器。是一个串行通信设备，可以灵活地与外部设备进行全双工数据交换。</p><p>还有UART相比USART去掉了同步通讯功能。</p><p>一共提供5个串口供开发者选择。 </p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532893314329.png" alt="img"></p><p>STM32的USART功能框图如下：</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532893314330.png" alt="img"></p><ol><li>功能引脚说明</li></ol><ul><li><strong>TX：发送数据输出引脚。</strong></li><li><strong>RX：接收数据输入引脚。</strong></li><li><strong>SW_RX：数据接收引脚，只用于单线和**</strong>智能卡<strong>**模式，属于内部引脚，没有具体外部引脚。</strong></li><li><strong>nRTS：请求以发送（**</strong>Request To Send<strong><strong>），n 表示低电平有效。如果使能</strong></strong>RTS<strong><strong>流控制，当 USART接收器准备好接收新数据时就会将nRTS变成低电平；当接收寄存器已满时，nRTS 将被设置为高电平。该</strong></strong>引脚<strong>**只适用于硬件流控制。</strong></li><li><strong>nCTS：清除以发送（**</strong>Clear To Send<strong><strong>），n 表示低电平有效。如果使能</strong></strong>CTS<strong><strong>流控制，发送器在发送下一帧数据之前会检测nCTS引脚，如果为低电平，表示可以发送数据，如果为高电平则在发送完当前</strong></strong>数据帧<strong>**之后停止发送。该引脚只适用于硬件流控制。</strong></li><li><strong>SCLK：发送器时钟输出引脚。这个引脚仅适用于同步模式。</strong></li></ul><ol><li>波特率的产生</li></ol><p>发送器和接收器的波特率是一致的，都是通过设置BRR寄存器来得到。</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532893314331.png" alt="img"></p><p>这里的是给外设的时钟（usart1在APB2上一般是72MHz，usart2，3，4，5在APB1上一般为36MHz）。</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532893314332.png" alt="img"></p><p>假设我们需要的波特率是<strong>115200</strong>，则对应的分频值应该是：<strong>39.0625</strong>，把这个值写入到BRR寄存器中。<strong>39.0625</strong>的小数部分：<strong>0.0625 * 16 = 1</strong>, 整数部分是：<strong>39(0x27)</strong>。</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532893314333.png" alt="img"></p><p>所以写入到BRR寄存器的值是：<strong>0x0271</strong>。</p><ol><li>相关寄存器</li></ol><p>查阅参考手册540页，这里就不一一列举了。</p><ol><li><h2 id="串口案例1：计算机和串口通讯"><a href="#串口案例1：计算机和串口通讯" class="headerlink" title="串口案例1：计算机和串口通讯"></a>串口案例1：计算机和串口通讯</h2></li><li><h3 id="需求描述-4"><a href="#需求描述-4" class="headerlink" title="需求描述"></a>需求描述</h3></li></ol><p>电脑通过串口向STM32发送数据，STM32原封不动的再发送过来。电脑可以借助串口助手来发送或接受数据。</p><ol><li><h3 id="硬件电路设计-4"><a href="#硬件电路设计-4" class="headerlink" title="硬件电路设计"></a>硬件电路设计</h3></li></ol><p>目前很多电脑已经没有串口接口了，为了使用串口，我们自制的下载器STLink2.1拥有USB转串口的功能。</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532893314334.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532893314335.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532893314336.png" alt="img"></p><ol><li><h3 id="软件设计：轮询的方式接收（寄存器）"><a href="#软件设计：轮询的方式接收（寄存器）" class="headerlink" title="软件设计：轮询的方式接收（寄存器）"></a>软件设计：轮询的方式接收（寄存器）</h3></li><li><h4 id="main-c-3"><a href="#main-c-3" class="headerlink" title="main.c"></a>main.c</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Driver_USART.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;string.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> buff[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">uint8_t</span> len = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Driver_USART1_Init();</span><br><span class="line">    <span class="comment">// Driver_USART1_SendChar(&#x27;a&#x27;);</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// uint8_t *str = &quot;Hello atguigu!\r\n&quot;;</span></span><br><span class="line">        <span class="comment">// Driver_USART1_SendString(str, strlen((char *)str));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* uint8_t *str = &quot;尚硅谷\r\n&quot;;</span></span><br><span class="line"><span class="comment">        Driver_USART1_SendString(str, strlen((char *)str));</span></span><br><span class="line"><span class="comment">        Delay_s(1); */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// uint8_t c =  Driver_USART1_ReceiveChar();</span></span><br><span class="line">        <span class="comment">// Driver_USART1_SendChar(c);</span></span><br><span class="line"></span><br><span class="line">        Driver_USART1_ReceiveString(buff, &amp;len);</span><br><span class="line">        Driver_USART1_SendString(buff, len);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h4 id="Driver-USART-h"><a href="#Driver-USART-h" class="headerlink" title="Driver_USART.h"></a>Driver_USART.h</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __DRVIER_USART_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __DRVIER_USART_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_USART1_Init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_USART1_SendChar</span><span class="params">(<span class="type">uint8_t</span> byte)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_USART1_SendString</span><span class="params">(<span class="type">uint8_t</span> *str, <span class="type">uint16_t</span> len)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">Driver_USART1_ReceiveChar</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_USART1_ReceiveString</span><span class="params">(<span class="type">uint8_t</span> buff[], <span class="type">uint8_t</span> *len)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><ol><li><h4 id="Driver-USART-c"><a href="#Driver-USART-c" class="headerlink" title="Driver_USART.c"></a>Driver_USART.c</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Driver_USART.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 初始化串口1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_USART1_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 开启时钟 */</span></span><br><span class="line">    <span class="comment">/* 1.1 串口1外设的时钟 */</span></span><br><span class="line">    RCC-&gt;APB2ENR |= RCC_APB2ENR_USART1EN;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 1.2 GPIO时钟 */</span></span><br><span class="line">    RCC-&gt;APB2ENR |= RCC_APB2ENR_IOPAEN;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 2. 配置GPIO引脚的工作模式  PA9=Tx(复用推挽 CNF=10 MODE=11)  PA10=Rx(浮空输入 CNF=01 MODE=00)*/</span></span><br><span class="line">    GPIOA-&gt;CRH |= GPIO_CRH_CNF9_1;</span><br><span class="line">    GPIOA-&gt;CRH &amp;= ~GPIO_CRH_CNF9_0;</span><br><span class="line">    GPIOA-&gt;CRH |= GPIO_CRH_MODE9;</span><br><span class="line"></span><br><span class="line">    GPIOA-&gt;CRH &amp;= ~GPIO_CRH_CNF10_1;</span><br><span class="line">    GPIOA-&gt;CRH |= GPIO_CRH_CNF10_0;   </span><br><span class="line">    GPIOA-&gt;CRH &amp;= ~GPIO_CRH_MODE10;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 3. 串口的参数配置 */</span>   </span><br><span class="line">    <span class="comment">/* 3.1 配置波特率 115200 */</span></span><br><span class="line">    USART1-&gt;BRR = <span class="number">0x271</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 3.2 配置一个字的长度 8位 */</span></span><br><span class="line">    USART1-&gt;CR1 &amp;= ~USART_CR1_M;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 3.3 配置不需要校验位 */</span></span><br><span class="line">    USART1-&gt;CR1 &amp;= ~USART_CR1_PCE;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 3.4 配置停止位的长度 */</span></span><br><span class="line">    USART1-&gt;CR2 &amp;= ~USART_CR2_STOP;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 3.5 使能接收和发送 */</span></span><br><span class="line">    USART1-&gt;CR1 |= USART_CR1_TE;</span><br><span class="line">    USART1-&gt;CR1 |= USART_CR1_RE;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 4. 使能串口 */</span></span><br><span class="line">    USART1-&gt;CR1 |= USART_CR1_UE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 发送一个字节</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; byte 要发送的字节</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_USART1_SendChar</span><span class="params">(<span class="type">uint8_t</span> byte)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 等待发送寄存器为空 */</span></span><br><span class="line">    <span class="keyword">while</span> ((USART1-&gt;SR &amp; USART_SR_TXE) == <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 2. 数据写出到数据寄存器 */</span></span><br><span class="line">    USART1-&gt;DR = byte;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 发送一个字符串</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; *str 要发送的字符串</span></span><br><span class="line"><span class="comment"> * @param &#123;uint16_t&#125; len 字符串中字节的长度</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_USART1_SendString</span><span class="params">(<span class="type">uint8_t</span> *str, <span class="type">uint16_t</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint16_t</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Driver_USART1_SendChar(str[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 接收一个字节的数据</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125; 接收到的字节</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">Driver_USART1_ReceiveChar</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 等待数据寄存器非空 */</span></span><br><span class="line">    <span class="keyword">while</span> ((USART1-&gt;SR &amp; USART_SR_RXNE) == <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> USART1-&gt;DR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 接收变长数据.接收到的数据存入到 buff中</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; buff 存放接收到的数据</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; *len 存放收到的数据的字节的长度</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_USART1_ReceiveString</span><span class="params">(<span class="type">uint8_t</span> buff[], <span class="type">uint8_t</span> *len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint8_t</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 等待接收非空</span></span><br><span class="line">        <span class="keyword">while</span> ((USART1-&gt;SR &amp; USART_SR_RXNE) == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//在等待期间, 判断是否收到空闲帧</span></span><br><span class="line">            <span class="keyword">if</span> (USART1-&gt;SR &amp; USART_SR_IDLE)</span><br><span class="line">            &#123;</span><br><span class="line">                *len = i;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        buff[i] = USART1-&gt;DR;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h3 id="软件设计：中断的方式接收（寄存器）"><a href="#软件设计：中断的方式接收（寄存器）" class="headerlink" title="软件设计：中断的方式接收（寄存器）"></a>软件设计：中断的方式接收（寄存器）</h3></li></ol><p>USART提供了多个中断事件。</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532893314337.png" alt="img"></p><ol><li><h4 id="Driver-USART-c-1"><a href="#Driver-USART-c-1" class="headerlink" title="Driver_USART.c"></a>Driver_USART.c</h4></li></ol><p>添加中断相关代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Driver_USART.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 初始化串口1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_USART1_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 开启时钟 */</span></span><br><span class="line">    <span class="comment">/* 1.1 串口1外设的时钟 */</span></span><br><span class="line">    RCC-&gt;APB2ENR |= RCC_APB2ENR_USART1EN;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 1.2 GPIO时钟 */</span></span><br><span class="line">    RCC-&gt;APB2ENR |= RCC_APB2ENR_IOPAEN;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 2. 配置GPIO引脚的工作模式  PA9=Tx(复用推挽 CNF=10 MODE=11)  PA10=Rx(浮空输入 CNF=01 MODE=00)*/</span></span><br><span class="line">    GPIOA-&gt;CRH |= GPIO_CRH_CNF9_1;</span><br><span class="line">    GPIOA-&gt;CRH &amp;= ~GPIO_CRH_CNF9_0;</span><br><span class="line">    GPIOA-&gt;CRH |= GPIO_CRH_MODE9;</span><br><span class="line"></span><br><span class="line">    GPIOA-&gt;CRH &amp;= ~GPIO_CRH_CNF10_1;</span><br><span class="line">    GPIOA-&gt;CRH |= GPIO_CRH_CNF10_0;   </span><br><span class="line">    GPIOA-&gt;CRH &amp;= ~GPIO_CRH_MODE10;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 3. 串口的参数配置 */</span>   </span><br><span class="line">    <span class="comment">/* 3.1 配置波特率 115200 */</span></span><br><span class="line">    USART1-&gt;BRR = <span class="number">0x271</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 3.2 配置一个字的长度 8位 */</span></span><br><span class="line">    USART1-&gt;CR1 &amp;= ~USART_CR1_M;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 3.3 配置不需要校验位 */</span></span><br><span class="line">    USART1-&gt;CR1 &amp;= ~USART_CR1_PCE;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 3.4 配置停止位的长度 */</span></span><br><span class="line">    USART1-&gt;CR2 &amp;= ~USART_CR2_STOP;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 3.5 使能接收和发送 */</span></span><br><span class="line">    USART1-&gt;CR1 |= USART_CR1_TE;</span><br><span class="line">    USART1-&gt;CR1 |= USART_CR1_RE;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 4. 使能串口 */</span></span><br><span class="line">    USART1-&gt;CR1 |= USART_CR1_UE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 发送一个字节</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; byte 要发送的字节</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_USART1_SendChar</span><span class="params">(<span class="type">uint8_t</span> byte)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 等待发送寄存器为空 */</span></span><br><span class="line">    <span class="keyword">while</span> ((USART1-&gt;SR &amp; USART_SR_TXE) == <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 2. 数据写出到数据寄存器 */</span></span><br><span class="line">    USART1-&gt;DR = byte;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 发送一个字符串</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; *str 要发送的字符串</span></span><br><span class="line"><span class="comment"> * @param &#123;uint16_t&#125; len 字符串中字节的长度</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_USART1_SendString</span><span class="params">(<span class="type">uint8_t</span> *str, <span class="type">uint16_t</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint16_t</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Driver_USART1_SendChar(str[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 接收一个字节的数据</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125; 接收到的字节</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">Driver_USART1_ReceiveChar</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 等待数据寄存器非空 */</span></span><br><span class="line">    <span class="keyword">while</span> ((USART1-&gt;SR &amp; USART_SR_RXNE) == <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> USART1-&gt;DR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 接收变长数据.接收到的数据存入到buff中</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; buff 存放接收到的数据</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; *len 存放收到的数据的字节的长度</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_USART1_ReceiveString</span><span class="params">(<span class="type">uint8_t</span> buff[], <span class="type">uint8_t</span> *len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint8_t</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 等待接收非空</span></span><br><span class="line">        <span class="keyword">while</span> ((USART1-&gt;SR &amp; USART_SR_RXNE) == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//在等待期间, 判断是否收到空闲帧</span></span><br><span class="line">            <span class="keyword">if</span> (USART1-&gt;SR &amp; USART_SR_IDLE)</span><br><span class="line">            &#123;</span><br><span class="line">                *len = i;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        buff[i] = USART1-&gt;DR;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 缓冲接收到的数据 */</span></span><br><span class="line"><span class="type">uint8_t</span> buff[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="comment">/* 存储接收到的字节的长度 */</span></span><br><span class="line"><span class="type">uint8_t</span> len = <span class="number">0</span>;</span><br><span class="line"><span class="type">uint8_t</span> isToSend = <span class="number">0</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">USART1_IRQHandler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 数据接收寄存器非空 */</span></span><br><span class="line">    <span class="keyword">if</span> (USART1-&gt;SR &amp; USART_SR_RXNE)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 对USART_DR的读操作可以将接收非空的中断位清零。 所以不用单独清除了.</span></span><br><span class="line">        <span class="comment">//USART1-&gt;SR &amp;= ~USART_SR_RXNE;</span></span><br><span class="line">        buff[len] = USART1-&gt;DR;</span><br><span class="line">        len++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (USART1-&gt;SR &amp; USART_SR_IDLE)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* 清除空闲中断标志位: 先读sr,再读dr.就可以实现清除了 */</span></span><br><span class="line">        USART1-&gt;SR;</span><br><span class="line">        USART1-&gt;DR;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* 变长数据接收完毕 */</span></span><br><span class="line">        <span class="comment">//Driver_USART1_SendString(buff, len);</span></span><br><span class="line">        </span><br><span class="line">        isToSend = <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* 把接收字节的长度清0 */</span></span><br><span class="line">        <span class="comment">// len = 0;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h4 id="main-c-4"><a href="#main-c-4" class="headerlink" title="main.c"></a>main.c</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Driver_USART.h&quot;</span></span></span><br><span class="line"><span class="comment">/* 缓冲接收到的数据 */</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">uint8_t</span> buff[<span class="number">100</span>];</span><br><span class="line"><span class="comment">/* 存储接收到的字节的长度 */</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">uint8_t</span> len;</span><br><span class="line"><span class="keyword">extern</span> <span class="type">uint8_t</span> isToSend;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Driver_USART1_Init();</span><br><span class="line">    Driver_USART1_SendString(<span class="string">&quot;abc&quot;</span>, <span class="number">3</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(isToSend)</span><br><span class="line">        &#123;</span><br><span class="line">            Driver_USART1_SendString(buff, len);</span><br><span class="line">            isToSend = <span class="number">0</span>;</span><br><span class="line">            len = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h3 id="软件设计（HAL库）-1"><a href="#软件设计（HAL库）-1" class="headerlink" title="软件设计（HAL库）"></a>软件设计（HAL库）</h3></li><li><h4 id="使用STM32CubeMx搭建工程"><a href="#使用STM32CubeMx搭建工程" class="headerlink" title="使用STM32CubeMx搭建工程"></a>使用STM32CubeMx搭建工程</h4></li><li><p>基本配置</p></li></ol><p>选择芯片，配置debug，配置时钟参考前面的内容。</p><ol><li>配置串口</li></ol><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532893314338.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532893314339.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532893315340.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532893315341.png" alt="img"></p><ol><li>添加我们的代码</li></ol><p>时钟初始化，串口初始化工具已经帮我们完成了。我们可以轮询方式收发数据，也可以采用中断的方式收发数据。 </p><ol><li><h4 id="轮询的方式收发"><a href="#轮询的方式收发" class="headerlink" title="轮询的方式收发"></a>轮询的方式收发</h4></li></ol><p><strong>轮询**</strong>的方式就是在循环中一直检测<strong><strong>串口</strong></strong>，是否有数据进来，如果有就读进来，然后再原封不动的发出。**</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint8_t</span> buff[<span class="number">10</span>];</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_Init();</span><br><span class="line">    SystemClock_Config();</span><br><span class="line">    MX_GPIO_Init();</span><br><span class="line">    MX_USART1_UART_Init();</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* 从串口读取数据：参数1 指定的串口 参数2：存储读取到的数据 参数3：一接收多少条数据 */</span></span><br><span class="line">        <span class="keyword">if</span> (HAL_UART_Receive(&amp;huart1, buff, <span class="number">10</span>, HAL_MAX_DELAY) == HAL_OK)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 把收到的数据原封不动的发出去</span></span><br><span class="line">            HAL_UART_Transmit(&amp;huart1, buff, <span class="number">10</span>, HAL_MAX_DELAY);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>轮询方式的一些问题：轮询模式使用起来最简单，但是会占用大量的CPU时间，在等待接收和等待发送完毕时，CPU不能去做别的运算，只能在这里空等，运行的效率很低。</p><ol><li><h4 id="中断的方式接收：定长数据"><a href="#中断的方式接收：定长数据" class="headerlink" title="中断的方式接收：定长数据"></a>中断的方式接收：定长数据</h4></li></ol><p><strong>stm32f1xx_hal_uart.c</strong>中关于中断回调函数的描述。</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532893315342.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532893315343.png" alt="img"></p><p>这里函数用了__weak 修饰，当有其他实现的时候，编译器会忽略这里的。我们只要在这个函数中写收发逻辑就行了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint8_t</span> buff[<span class="number">1</span>];    <span class="comment">// 接收缓冲， 一次接受一个字节的数据</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_UART_RxCpltCallback</span><span class="params">(UART_HandleTypeDef *huart)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (huart1.Instance == USART1)</span><br><span class="line">    &#123;</span><br><span class="line">        HAL_UART_Transmit(&amp;huart1, buff, <span class="number">1</span>, HAL_MAX_DELAY);</span><br><span class="line">        HAL_UART_Receive_IT(&amp;huart1, buff, <span class="number">1</span>); <span class="comment">// 继续接收</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_Init();</span><br><span class="line">    MX_GPIO_Init();</span><br><span class="line">    MX_USART1_UART_Init();   </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 用中断的方式接收一个字节的数据 */</span></span><br><span class="line">    HAL_UART_Receive_IT(&amp;huart1, buff, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h4 id="中断的方式接收：变长数据"><a href="#中断的方式接收：变长数据" class="headerlink" title="中断的方式接收：变长数据"></a>中断的方式接收：变长数据</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint8_t</span> rxBuff[<span class="number">1000</span>]; <span class="comment">// 接收缓冲区</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// size 实际接收的数据的长度</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_UARTEx_RxEventCallback</span><span class="params">(UART_HandleTypeDef *huart, <span class="type">uint16_t</span> Size)</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (huart1.Instance == USART1)</span><br><span class="line">    &#123;</span><br><span class="line">        HAL_UART_Transmit(&amp;huart1, rxBuff, Size, <span class="number">100</span>);</span><br><span class="line">        HAL_UARTEx_ReceiveToIdle_IT(&amp;huart1, rxBuff, <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_Init();</span><br><span class="line">    SystemClock_Config();</span><br><span class="line">    MX_GPIO_Init();</span><br><span class="line">    MX_USART1_UART_Init();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 当接收到1000个字符或者碰到空闲帧, 则接收结束 */</span></span><br><span class="line">    HAL_UARTEx_ReceiveToIdle_IT(&amp;huart1, rxBuff, <span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h2 id="串口案例2：重定向printf"><a href="#串口案例2：重定向printf" class="headerlink" title="串口案例2：重定向printf"></a>串口案例2：重定向printf</h2></li><li><h3 id="需求描述-5"><a href="#需求描述-5" class="headerlink" title="需求描述"></a>需求描述</h3></li></ol><p>C语言中经常使用printf来输出调试信息，打印到屏幕（控制台）。由于在单片机中没有屏幕，但是我们可以重定向printf，把数据<strong>打印到**</strong>串口**，从而在电脑端接收调试信息。这是除了debug外，另外一个非常有效的调试手段。</p><ol><li><h3 id="软件设计（寄存器）-2"><a href="#软件设计（寄存器）-2" class="headerlink" title="软件设计（寄存器）"></a>软件设计（寄存器）</h3></li><li><h4 id="Driver-USART-c-2"><a href="#Driver-USART-c-2" class="headerlink" title="Driver_USART.c"></a>Driver_USART.c</h4></li></ol><p>添加<strong>fputc</strong>函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">fputc</span><span class="params">(<span class="type">int</span> c, FILE *file)</span></span><br><span class="line">&#123;</span><br><span class="line">    Driver_USART1_SendChar(c);</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 当调用printf的时候,会自动调用这个方法来执行,只需要调用一个通过串口发送字符的函数</span></span><br></pre></td></tr></table></figure><ol><li><h4 id="main-c-5"><a href="#main-c-5" class="headerlink" title="main.c"></a>main.c</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Driver_USART.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Delay.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Driver_USART1_Init();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;hello world\r\n&quot;</span>);</span><br><span class="line">        Delay_ms(<span class="number">500</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h4 id="Keil设置"><a href="#Keil设置" class="headerlink" title="Keil设置"></a>Keil设置</h4></li></ol><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532893315344.png" alt="img"></p><ol><li><h3 id="软件设计（HAL库）-2"><a href="#软件设计（HAL库）-2" class="headerlink" title="软件设计（HAL库）"></a>软件设计（HAL库）</h3></li><li><h4 id="usart-h-代码清单"><a href="#usart-h-代码清单" class="headerlink" title="usart.h 代码清单"></a>usart.h 代码清单</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;main.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">extern</span> UART_HandleTypeDef huart1;</span><br><span class="line"><span class="type">void</span> <span class="title function_">MX_USART1_UART_Init</span><span class="params">(<span class="type">void</span>)</span>;</span><br></pre></td></tr></table></figure><ol><li><h4 id="usart-c-代码清单"><a href="#usart-c-代码清单" class="headerlink" title="usart.c 代码清单"></a>usart.c 代码清单</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">fputc</span><span class="params">(<span class="type">int</span> ch, FILE *f)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 发送一个字节数据到串口DEBUG_USART */</span></span><br><span class="line">    HAL_UART_Transmit(&amp;huart1, (<span class="type">uint8_t</span> *)&amp;ch, <span class="number">1</span>, <span class="number">1000</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> (ch);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h1 id="I2C-通讯"><a href="#I2C-通讯" class="headerlink" title="I2C 通讯"></a>I2C 通讯</h1></li><li><h2 id="I2C基础知识"><a href="#I2C基础知识" class="headerlink" title="I2C基础知识"></a>I2C基础知识</h2></li></ol><p>I2C 通讯协议（Inter-Integrated Circuit）是由Phiilps公司开发的，由于它引脚少，硬件实现简单，可扩展性强，不需要 USART、CAN等通讯协议的外部收发设备，现在被广泛地使用在系统内多个集成电路（IC）间的通讯。</p><p>I2C（Inter-Integrated Circuit）集成电路总线，是一种同步 串行 半双工通信总线。通信协议中，SDA（串行数据线）和SCL（串行时钟线）是两个主要的信号线。因为有SCL时钟线所以当然是同步的，只有一根SDA线且不可同时收发，I2C总线是一个多主设备、多从设备的总线，通常由主设备（比如微控制器）发起通信，而从设备（比如EEPROM芯片）响应。</p><p>I2C总线采用开漏（open-drain）或开集电极（open-collector）驱动方式，这意味着设备只能将信号线拉低，而不能主动拉高。相反，电平被拉高是通过上拉电阻实现的，是一种简单的双向两线制总线协议标准，支持<strong>同步串行**</strong>半双工**通讯。</p><p>I2C 通讯设备之间的常用连接方式：</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532893315345.png" alt="img"></p><p><a href="https://xiza3i1x6q4.feishu.cn/sync/J3r7d3lz1s5Mqjb5aGDcqo5pnFd">https://xiza3i1x6q4.feishu.cn/sync/J3r7d3lz1s5Mqjb5aGDcqo5pnFd</a></p><p>在I²C通信协议中，SDA（Serial Data Line）的电平状态确实用来表示通信的控制权归属。拉高（置高电平）SDA通常表示的是主设备（Master）释放了总线的控制权，让从设备（Slave）有机会在总线上发送数据或者响应主设备的请求。</p><p>1.开漏结构：<strong>I²C总线通常是开漏结构</strong>，这意味着在不同的设备之间，SDA和SCL都会被外部上拉电阻拉高，而设备在通信时通过拉低SDA和SCL来进行通信。因此，<strong>释放控制权通常是通过主设备放弃拉低SDA线实现的，SDA线由上拉电阻拉到高电平</strong>。 2.从设备响应：当主设备完成其通信操作后，它将SDA线拉高，这样从设备便能够知道主设备已经完成了其发送的数据或者请求。从设备此时可以在总线上发送数据回复或者等待下一次主设备的指令。 3.协议规定：根据I²C协议，<strong>SDA的高电平表示空闲状态或者主设备释放总线的意图</strong>。从设备检测到SDA被拉高后，会知道主设备当前没有在总线上发送数据或者请求，因此从设备有机会接管总线并发送数据或响应。</p><p>总之，SDA被拉高表示主设备不再活跃地发送数据或命令，从而让从设备可以在总线上接管，发送数据或者响应主设备。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ol><li>总线空闲状态：<ol><li>当总线空闲时，SDA和SCL都被上拉电阻拉高，表示没有设备在使用总线。这是总线的默认状态。</li></ol></li><li>启动和停止条件：<ol><li>I2C通信开始时，主设备会发出一个启动条件（Start Condition），这表现为SDA从高到低的跳变，而SCL保持高电平。</li><li>通信结束时，主设备会发出一个停止条件（Stop Condition），这表现为SDA从低到高的跳变，而SCL保持高电平。</li></ol></li><li>数据传输：<ol><li>在数据传输过程中，无论是主设备还是从设备，都在SCL时钟周期内驱动SDA线进行数据传输。当某个设备需要发送数据时，它会控制SDA线，在SCL的上升沿之前设置好数据。</li><li>主设备在发送完地址后，根据LSB的值（LSB是用来指示数据传输的读写方向的）继续进行数据传输。</li><li>如果是写操作，主设备会发送数据字节到从设备，然后等待从设备的确认信号。</li><li>如果是读操作，从设备要响应数据。在这种情况下，主设备释放SDA线，让SDA通过上拉电阻恢复到高电平，然后从设备在接下来的时钟周期内驱动SDA线，以发送数据。主设备会接收从设备发送的数据，并发送确认（ACK）或非确认（NACK）信号以告知从设备是否需要继续发送数据。</li></ol></li></ol><p>因为SDA被设计成开漏驱动，任何设备都只能拉低SDA，而不能直接拉高，这样也避免了多个设备同时驱动SDA线时的电平冲突，这样的一种机制保证了I2C总线上设备之间的协调和无冲突通信。</p><h2 id="通信方向"><a href="#通信方向" class="headerlink" title="通信方向"></a>通信方向</h2><ul><li>LSB为0时，表示主设备要向从设备写入数据。</li><li>LSB为1时，表示主设备要从从设备读取数据。</li></ul><p>主设备发送数据给从设备（写操作）</p><ul><li>SDA控制：主设备控制SDA线发送地址和数据字节。</li><li>SCL控制：主设备控制SCL线产生时钟信号，确定数据传输的时序。</li></ul><p>从设备发送数据给主设备（读操作）</p><ul><li>SDA控制：从设备控制SDA线发送数据字节。</li><li>SCL控制：主设备控制SCL线产生时钟信号，确定数据传输的时序。</li></ul><p>总的来说，主设备负责控制总线的时钟和发送地址/数据，而从设备负责在主设备的控制下发送数据。</p><ol><li><h2 id="I2C案例1：软件模拟I2C"><a href="#I2C案例1：软件模拟I2C" class="headerlink" title="I2C案例1：软件模拟I2C"></a>I2C案例1：软件模拟I2C</h2></li></ol><p>EEPROM芯片最常用的通讯方式就是I2C协议。我们使用的芯片是M24C02。</p><ol><li><h3 id="需求描述-6"><a href="#需求描述-6" class="headerlink" title="需求描述"></a>需求描述</h3></li></ol><p>我们向E2PROM写入一段数据，再读取出来，最后发送到串口，核对是否读写正确。</p><ol><li><h3 id="硬件电路设计-5"><a href="#硬件电路设计-5" class="headerlink" title="硬件电路设计"></a>硬件电路设计</h3></li><li><h4 id="硬件原理图"><a href="#硬件原理图" class="headerlink" title="硬件原理图"></a>硬件原理图</h4></li></ol><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532893315346.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532893315347.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532893315348.png" alt="img"></p><ol><li><h4 id="M24C02简介"><a href="#M24C02简介" class="headerlink" title="M24C02简介"></a>M24C02简介</h4></li><li><p>M24C02的SCL及SDA 引脚连接到了STM32对应的I2C引脚中，结合上拉电阻，构成了I2C通讯总线，它们通过I2C总线交互。</p></li><li>E2PROM芯片的设备地址一共有7位，其中高4位固定为：1010，低3位则由E3/E2/E1信号线的电平决定E2PROM设备地址。</li><li>R/W是读写方向控制位，与地址无关。</li></ol><p>在我们电路图中由于E1/E2/E3均是接的低电平，所以它的地址是1010000即0x50。</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532893315349.png" alt="img"></p><p>由于I2C通讯时常常是地址跟读写方向连在一起构成一个8位数，且当R/W位为0 时，表示写方向，所以加上7位地址，其值为“0xA0”，常称该值为I2C设备的“写地址”。</p><p>当R/W位为1时，表示读方向，加上7位地址，其值为“0xA1”，常称该值为“读地址”。</p><ol><li><h3 id="操作时序图整理"><a href="#操作时序图整理" class="headerlink" title="操作时序图整理"></a>操作时序图整理</h3></li><li><h4 id="起始和停止信号"><a href="#起始和停止信号" class="headerlink" title="起始和停止信号"></a>起始和停止信号</h4></li></ol><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532893315350.png" alt="img"></p><ol><li><h4 id="数据有效性"><a href="#数据有效性" class="headerlink" title="数据有效性"></a>数据有效性</h4></li></ol><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532893315351.png" alt="img"></p><ol><li><h4 id="响应和非响应"><a href="#响应和非响应" class="headerlink" title="响应和非响应"></a>响应和非响应</h4></li></ol><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532893315352.png" alt="img"></p><ol><li><h4 id="写入一个字节时序"><a href="#写入一个字节时序" class="headerlink" title="写入一个字节时序"></a>写入一个字节时序</h4></li></ol><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532893315353.png" alt="img"></p><ol><li><h4 id="读出一个字节时序"><a href="#读出一个字节时序" class="headerlink" title="读出一个字节时序"></a>读出一个字节时序</h4></li></ol><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532893315354.png" alt="img"></p><ol><li><h4 id="单次写入多个字节时序"><a href="#单次写入多个字节时序" class="headerlink" title="单次写入多个字节时序"></a>单次写入多个字节时序</h4></li></ol><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532893315355.png" alt="img"></p><p>一次性写入多个字节，也叫页写入（Page Write）。AT24C02每页只有16个字节，每次只能写入单独的一个页中，所以一次性最多只能写入16个字节。当一次性写入超过16个字节的时候，则超过的部分会重新从这页的首地址重新写入。</p><ol><li><h4 id="单次读出多个字节时序"><a href="#单次读出多个字节时序" class="headerlink" title="单次读出多个字节时序"></a>单次读出多个字节时序</h4></li></ol><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532893315356.png" alt="img"></p><p><strong>读出多个字节的时候没有限制，可以读出任意多个。</strong></p><ol><li><h3 id="软件设计（寄存器）-3"><a href="#软件设计（寄存器）-3" class="headerlink" title="软件设计（寄存器）"></a>软件设计（寄存器）</h3></li><li><h4 id="main-c-6"><a href="#main-c-6" class="headerlink" title="main.c"></a>main.c</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Driver_USART.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Inf_W24C02.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Driver_USART1_Init();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;尚硅谷 I2C 软件模式实验开始....\r\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    Inf_W24C02_Init();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//写数据</span></span><br><span class="line">    Inf_W24C02_WriteByte(<span class="number">0x00</span>, <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    Inf_W24C02_WriteByte(<span class="number">0x01</span>, <span class="string">&#x27;b&#x27;</span>);</span><br><span class="line">    Inf_W24C02_WriteByte(<span class="number">0x02</span>, <span class="string">&#x27;c&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//读数据</span></span><br><span class="line">    <span class="type">uint8_t</span> byte1 = Inf_W24C02_ReadByte(<span class="number">0x00</span>);</span><br><span class="line">    <span class="type">uint8_t</span> byte2 = Inf_W24C02_ReadByte(<span class="number">0x01</span>);</span><br><span class="line">    <span class="type">uint8_t</span> byte3 = Inf_W24C02_ReadByte(<span class="number">0x02</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c\r\n&quot;</span>, byte1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c\r\n&quot;</span>, byte2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c\r\n&quot;</span>, byte3);</span><br><span class="line"></span><br><span class="line">    Inf_W24C02_WriteBytes(<span class="number">0x00</span>, <span class="string">&quot;123456&quot;</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> buff[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    Inf_W24C02_ReadBytes(<span class="number">0x00</span>, buff, <span class="number">6</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\r\n&quot;</span>, buff);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清零缓冲区</span></span><br><span class="line">    <span class="built_in">memset</span>(buff, <span class="number">0</span>, <span class="keyword">sizeof</span>(buff));</span><br><span class="line">    </span><br><span class="line">    Inf_W24C02_WriteBytes(<span class="number">0x00</span>, <span class="string">&quot;0123456789abcdefghijk&quot;</span>, <span class="number">21</span>);</span><br><span class="line">    Inf_W24C02_ReadBytes(<span class="number">0x00</span>, buff, <span class="number">21</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\r\n&quot;</span>, buff);</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h4 id="Driver-I2C2-h"><a href="#Driver-I2C2-h" class="headerlink" title="Driver_I2C2.h"></a>Driver_I2C2.h</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __DRIVER_I2C2_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __DRIVER_I2C2_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Driver_USART.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ACK 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NACK 1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SCL_HIGH  (GPIOB-&gt;ODR |= GPIO_ODR_ODR10)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SCL_LOW  (GPIOB-&gt;ODR &amp;= ~GPIO_ODR_ODR10)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SDA_HIGH  (GPIOB-&gt;ODR |= GPIO_ODR_ODR11)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SDA_LOW  (GPIOB-&gt;ODR &amp;= ~GPIO_ODR_ODR11)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> READ_SDA (GPIOB-&gt;IDR &amp; GPIO_IDR_IDR11)</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_I2C2_Init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_I2C2_Start</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_I2C2_Stop</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_I2C2_Ack</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_I2C2_NAck</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">Driver_I2C2_WaitAck</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_I2C_SendByte</span><span class="params">(<span class="type">uint8_t</span> byte)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">Driver_I2C_ReadByte</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><ol><li><h4 id="Driver-I2C2-c"><a href="#Driver-I2C2-c" class="headerlink" title="Driver_I2C2.c"></a>Driver_I2C2.c</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Driver_I2C2.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Delay.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> I2C_DELAY Delay_us(10)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 初始化</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_I2C2_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/*  PB10-&gt;SCL</span></span><br><span class="line"><span class="comment">        PB11-&gt;SDA</span></span><br><span class="line"><span class="comment">        开漏输出: 既可以用于输出也可以输入. 外界要有上拉电阻.</span></span><br><span class="line"><span class="comment">        用于输入的时候,最好先输出一个1,把线的控制权交给外界.</span></span><br><span class="line"><span class="comment">        MODE=11 CNF=01 */</span></span><br><span class="line">    RCC-&gt;APB2ENR |= RCC_APB2ENR_IOPBEN;</span><br><span class="line"></span><br><span class="line">    GPIOB-&gt;CRH |= (GPIO_CRH_MODE10 | GPIO_CRH_MODE11 | GPIO_CRH_CNF10_0 | GPIO_CRH_CNF11_0);</span><br><span class="line">    GPIOB-&gt;CRH &amp;= ~(GPIO_CRH_CNF10_1 | GPIO_CRH_CNF11_1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 起始信号</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_I2C2_Start</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 拉高sda和scl */</span></span><br><span class="line">    SDA_HIGH;</span><br><span class="line">    SCL_HIGH;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 2. 延时 */</span></span><br><span class="line">    I2C_DELAY;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 3. 拉低sda */</span></span><br><span class="line">    SDA_LOW;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 4. 延时 */</span></span><br><span class="line">    I2C_DELAY;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 停止信号</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_I2C2_Stop</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. scl 拉高 sda拉低 */</span></span><br><span class="line">    SCL_HIGH;</span><br><span class="line">    SDA_LOW;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 2. 延时 */</span></span><br><span class="line">    I2C_DELAY;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 3. 拉高sda */</span></span><br><span class="line">    SDA_HIGH;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 4.  延时 */</span></span><br><span class="line">    I2C_DELAY;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 接收方产生应答信号</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_I2C2_Ack</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 拉高sda和拉低scl */</span></span><br><span class="line">    SDA_HIGH;</span><br><span class="line">    SCL_LOW;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 2. 延时 */</span></span><br><span class="line">    I2C_DELAY;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 3. sda拉低 */</span></span><br><span class="line">    SDA_LOW;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 4. 延时 */</span></span><br><span class="line">    I2C_DELAY;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 5. scl拉高 */</span></span><br><span class="line">    SCL_HIGH;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 6. 延时 */</span></span><br><span class="line">    I2C_DELAY;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 7. scl拉低 */</span></span><br><span class="line">    SCL_LOW;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 8. 延时 */</span></span><br><span class="line">    I2C_DELAY;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 9. sda 拉高 */</span></span><br><span class="line">    SDA_HIGH;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 10. 延时 */</span></span><br><span class="line">    I2C_DELAY;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 接收方产生非应答信号</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_I2C2_NAck</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 拉高sda和拉低scl */</span></span><br><span class="line">    SDA_HIGH;</span><br><span class="line">    SCL_LOW;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 2. 延时 */</span></span><br><span class="line">    I2C_DELAY;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 3. scl拉高 */</span></span><br><span class="line">    SCL_HIGH;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 4. 延时 */</span></span><br><span class="line">    I2C_DELAY;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 5. scl拉低*/</span></span><br><span class="line">    SCL_LOW;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 6. 延时 */</span></span><br><span class="line">    I2C_DELAY;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 等待接收方法的应答</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125; 应答或非应答</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">Driver_I2C2_WaitAck</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 把sda拉高, sda的主动权交给对方(e2prom芯片) </span></span><br><span class="line"><span class="comment">    等待应答的过程是主机操作时钟线scl，因此之后就读sda</span></span><br><span class="line"><span class="comment">    对应引脚的ODR寄存器 获得高低电平来判断应答非应答 */</span></span><br><span class="line">    SDA_HIGH;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 2. scl拉低  */</span></span><br><span class="line">    SCL_LOW;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 3. 延时 */</span></span><br><span class="line">    I2C_DELAY;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 4. 拉高scl */</span></span><br><span class="line">    SCL_HIGH;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 5. 延时 */</span></span><br><span class="line">    I2C_DELAY;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 6. 读取sda的电平 */</span></span><br><span class="line">    <span class="type">uint8_t</span> ack = ACK;</span><br><span class="line">    <span class="keyword">if</span> (READ_SDA)</span><br><span class="line">    &#123;</span><br><span class="line">        ack = NACK;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 7. 拉低scl */</span></span><br><span class="line">    SCL_LOW;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 8. 延时 */</span></span><br><span class="line">    I2C_DELAY;</span><br><span class="line">    <span class="keyword">return</span> ack;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 发送一个字节的数据</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; byte 要发送的字节</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_I2C_SendByte</span><span class="params">(<span class="type">uint8_t</span> byte)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint8_t</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* 1. sda和scl 拉低 */</span></span><br><span class="line">        SDA_LOW;</span><br><span class="line">        SCL_LOW;</span><br><span class="line"></span><br><span class="line">        I2C_DELAY;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 2. 向sda写数据 */</span></span><br><span class="line">        <span class="keyword">if</span> (byte &amp; <span class="number">0x80</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            SDA_HIGH;   </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            SDA_LOW;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        I2C_DELAY;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 3. 时钟拉高 */</span></span><br><span class="line">        SCL_HIGH;</span><br><span class="line"></span><br><span class="line">        I2C_DELAY;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 4. 时钟拉低 */</span></span><br><span class="line">        SCL_LOW;</span><br><span class="line"></span><br><span class="line">        I2C_DELAY;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 5. 左移1位, 为下一次发送做准备 */</span></span><br><span class="line">        byte &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 读一个字节的数据</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; byte 要发送的字节</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">Driver_I2C_ReadByte</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint8_t</span> data = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint8_t</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        SDA_HIGH;<span class="comment">/* 也可不加 */</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* 1. 拉低scl */</span></span><br><span class="line">        SCL_LOW;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* 2. 延时 */</span></span><br><span class="line">        I2C_DELAY;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* 3. 拉高scl */</span></span><br><span class="line">        SCL_HIGH;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* 4. 延时 */</span></span><br><span class="line">        I2C_DELAY;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* 5. 读取sda */</span></span><br><span class="line">        data &lt;&lt;= <span class="number">1</span>;    <span class="comment">/* 一定要放前面才能实现读一个字节(八位)，最低位移位7次 */</span></span><br><span class="line">        <span class="keyword">if</span> (READ_SDA)</span><br><span class="line">        &#123;</span><br><span class="line">            data |= <span class="number">0x01</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* 6. 拉低scl */</span></span><br><span class="line">        SCL_LOW;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 7. 延时 */</span></span><br><span class="line">        I2C_DELAY;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h4 id="Inf-W24C02-h"><a href="#Inf-W24C02-h" class="headerlink" title="Inf_W24C02.h"></a>Inf_W24C02.h</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __INF_W24C02_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __INF_W24C02_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Driver_I2C2.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;string.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ADDR 0xA0</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Inf_W24C02_Init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Inf_W24C02_WriteByte</span><span class="params">(<span class="type">uint8_t</span> innerAddr, <span class="type">uint8_t</span> byte)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">Inf_W24C02_ReadByte</span><span class="params">(<span class="type">uint8_t</span> innerAddr)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Inf_W24C02_WriteBytes</span><span class="params">(<span class="type">uint8_t</span> innerAddr, <span class="type">uint8_t</span> *bytes, <span class="type">uint8_t</span> len)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Inf_W24C02_ReadBytes</span><span class="params">(<span class="type">uint8_t</span> innerAddr, <span class="type">uint8_t</span> *bytes, <span class="type">uint8_t</span> len)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><ol><li><h4 id="Inf-W24C02-c"><a href="#Inf-W24C02-c" class="headerlink" title="Inf_W24C02.c"></a>Inf_W24C02.c</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Inf_W24C02.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Inf_W24C02_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Driver_I2C2_Init();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Inf_W24C02_WriteByte</span><span class="params">(<span class="type">uint8_t</span> innerAddr, <span class="type">uint8_t</span> byte)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 开始信号 */</span></span><br><span class="line">    Driver_I2C2_Start();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 2. 发送写地址 */</span></span><br><span class="line">    Driver_I2C_SendByte(ADDR);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 3. 等待响应 */</span></span><br><span class="line">    <span class="type">uint8_t</span> ack = Driver_I2C2_WaitAck();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (ack == ACK)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* 4. 发送内部地址 */</span></span><br><span class="line">        Driver_I2C_SendByte(innerAddr);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* 5. 等待响应 */</span></span><br><span class="line">        Driver_I2C2_WaitAck();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* 6. 发送具体数据 */</span></span><br><span class="line">        Driver_I2C_SendByte(byte);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* 7. 等待响应 */</span></span><br><span class="line">        Driver_I2C2_WaitAck();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* 8. 停止信号 */</span></span><br><span class="line">        Driver_I2C2_Stop();</span><br><span class="line">    &#125;</span><br><span class="line">    Delay_ms(<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">Inf_W24C02_ReadByte</span><span class="params">(<span class="type">uint8_t</span> innerAddr)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 起始信号 */</span></span><br><span class="line">    Driver_I2C2_Start();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 2. 发送一个写地址   假写 */</span></span><br><span class="line">    Driver_I2C_SendByte(ADDR);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 3. 等待响应 */</span></span><br><span class="line">    Driver_I2C2_WaitAck();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 4. 发送内部地址 */</span></span><br><span class="line">    Driver_I2C_SendByte(innerAddr);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 5. 等待响应 */</span></span><br><span class="line">    Driver_I2C2_WaitAck();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 6. 起始信号 */</span></span><br><span class="line">    Driver_I2C2_Start();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 7. 发送读地址  真读 */</span></span><br><span class="line">    Driver_I2C_SendByte(ADDR + <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 8. 等待响应 */</span></span><br><span class="line">    Driver_I2C2_WaitAck();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 9. 读取一个字节 */</span></span><br><span class="line">    <span class="type">uint8_t</span> byte = Driver_I2C_ReadByte();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 10. 给对方一个非应答 */</span></span><br><span class="line">    Driver_I2C2_NAck();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 11. 停止信号 */</span></span><br><span class="line">    Driver_I2C2_Stop();</span><br><span class="line">    <span class="keyword">return</span> byte;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 页写入.一次写入多个字节</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; innerAddr</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; *bytes</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; len</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Inf_W24C02_WriteBytes</span><span class="params">(<span class="type">uint8_t</span> innerAddr, <span class="type">uint8_t</span> *bytes, <span class="type">uint8_t</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 开始信号 */</span></span><br><span class="line">    Driver_I2C2_Start();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 2. 发送写地址 */</span></span><br><span class="line">    Driver_I2C_SendByte(ADDR);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 3. 等待响应 */</span></span><br><span class="line">    <span class="type">uint8_t</span> ack = Driver_I2C2_WaitAck();</span><br><span class="line">    <span class="keyword">if</span> (ack == ACK)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* 4. 发送内部地址 */</span></span><br><span class="line">        Driver_I2C_SendByte(innerAddr);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* 5. 等待响应 */</span></span><br><span class="line">        Driver_I2C2_WaitAck();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">uint8_t</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">/* 6. 发送具体数据 */</span></span><br><span class="line">            Driver_I2C_SendByte(bytes[i]);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">/* 7. 等待响应 */</span></span><br><span class="line">            Driver_I2C2_WaitAck();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* 8. 停止信号 */</span></span><br><span class="line">        Driver_I2C2_Stop();</span><br><span class="line">    &#125;</span><br><span class="line">    Delay_ms(<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 一次性读取多个字节的数据</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; innerAddr 起始位置</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; *bytes 存储读到的数据</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; len 读取的字节数</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Inf_W24C02_ReadBytes</span><span class="params">(<span class="type">uint8_t</span> innerAddr, <span class="type">uint8_t</span> *bytes, <span class="type">uint8_t</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 起始信号 */</span></span><br><span class="line">    Driver_I2C2_Start();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 2. 发送一个写地址   假写 */</span></span><br><span class="line">    Driver_I2C_SendByte(ADDR);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 3. 等待响应 */</span></span><br><span class="line">    Driver_I2C2_WaitAck();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 4. 发送内部地址 */</span></span><br><span class="line">    Driver_I2C_SendByte(innerAddr);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 5. 等待响应 */</span></span><br><span class="line">    Driver_I2C2_WaitAck();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 6. 起始信号 */</span></span><br><span class="line">    Driver_I2C2_Start();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 7. 发送读地址  真读 */</span></span><br><span class="line">    Driver_I2C_SendByte(ADDR + <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 8. 等待响应 */</span></span><br><span class="line">    Driver_I2C2_WaitAck();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint8_t</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* 9. 读取一个字节 */</span></span><br><span class="line">        bytes[i] = Driver_I2C_ReadByte();</span><br><span class="line">        <span class="keyword">if</span> (i &lt; len - <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Driver_I2C2_Ack();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            Driver_I2C2_NAck();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 11. 停止信号 */</span></span><br><span class="line">    Driver_I2C2_Stop();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h2 id="I2C案例2：硬件实现I2C"><a href="#I2C案例2：硬件实现I2C" class="headerlink" title="I2C案例2：硬件实现I2C"></a>I2C案例2：硬件实现I2C</h2></li><li><h3 id="需求描述-7"><a href="#需求描述-7" class="headerlink" title="需求描述"></a>需求描述</h3></li></ol><p>使用STM32的I2C外设读写E2PROM，基于寄存器操作。不需要手动控制引脚电平的输入输出，只需要操作I2C外设对应的寄存器即可。</p><ol><li><h3 id="硬件电路设计-6"><a href="#硬件电路设计-6" class="headerlink" title="硬件电路设计"></a>硬件电路设计</h3></li><li><h4 id="I2C外设简介"><a href="#I2C外设简介" class="headerlink" title="I2C外设简介"></a>I2C外设简介</h4></li></ol><p>前面我们用软件模拟I2C协议实现了通讯，代码写起来比较复杂。</p><p>起始STM32有专门负责协议的I2C外设，只要配置好该外设，它就会自动根据协议要求产生通讯信号，收发数据并缓存起来，CPU只要检测该外设的状态和访问数据寄存器，就能完成数据收发。</p><p>这种由硬件外设处理 I2C 协议的方式减轻了CPU的工作，且使软件设计更加简单。</p><p>STM32的 I2C 外设可用作通讯的主机及从机，支持100Kbit/s和400Kbit/s的速率，支持7位、10位设备地址，支持DMA数据传输，并具有数据校验功能。</p><p>它的I2C外设还支持 SMBus2.0协议，SMBus协议与I2C类似。</p><ol><li><h4 id="STM32的I2C外设的功能框图"><a href="#STM32的I2C外设的功能框图" class="headerlink" title="STM32的I2C外设的功能框图"></a>STM32的I2C外设的功能框图</h4></li></ol><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532893315357.png" alt="img"></p><p>I2C的所有硬件架构都是根据图中左侧SCL线和SDA线展开的（其中的SMBA线用于SMBUS的警告信号，I2C通讯没有使用）。STM32芯片有多个I2C外设，咱们现在用的这款有2个I2C外设，它们的I2C通讯信号引出到不同的GPIO引脚上，使用时必须配置到这些指定的引脚。</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532893315358.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532893315359.png" alt="img"></p><ol><li><h3 id="软件设计（寄存器）-4"><a href="#软件设计（寄存器）-4" class="headerlink" title="软件设计（寄存器）"></a>软件设计（寄存器）</h3></li><li><h4 id="main-c-7"><a href="#main-c-7" class="headerlink" title="main.c"></a>main.c</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Driver_USART.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Inf_W24C02.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Driver_USART1_Init();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;I2C 硬件 实验开始....\r\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Inf_W24C02_Init();</span><br><span class="line"></span><br><span class="line">    Inf_W24C02_WriteByte(<span class="number">0x00</span>, <span class="string">&#x27;x&#x27;</span>);</span><br><span class="line">    Inf_W24C02_WriteByte(<span class="number">0x01</span>, <span class="string">&#x27;y&#x27;</span>);</span><br><span class="line">    Inf_W24C02_WriteByte(<span class="number">0x02</span>, <span class="string">&#x27;z&#x27;</span>);</span><br><span class="line">    <span class="type">uint8_t</span> byte1 = Inf_W24C02_ReadByte(<span class="number">0x00</span>);</span><br><span class="line">    <span class="type">uint8_t</span> byte2 = Inf_W24C02_ReadByte(<span class="number">0x01</span>);</span><br><span class="line">    <span class="type">uint8_t</span> byte3 = Inf_W24C02_ReadByte(<span class="number">0x02</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c\r\n&quot;</span>, byte1);   </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c\r\n&quot;</span>, byte2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c\r\n&quot;</span>, byte3);</span><br><span class="line"></span><br><span class="line">    Inf_W24C02_WriteBytes(<span class="number">0x00</span>, <span class="string">&quot;123456&quot;</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> buff[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    Inf_W24C02_ReadBytes(<span class="number">0x00</span>, buff, <span class="number">6</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\r\n&quot;</span>, buff);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清零缓冲区</span></span><br><span class="line">    <span class="built_in">memset</span>(buff, <span class="number">0</span>, <span class="keyword">sizeof</span>(buff));</span><br><span class="line">    Inf_W24C02_WriteBytes(<span class="number">0x00</span>, <span class="string">&quot;0123456789abcdefghijk&quot;</span>, <span class="number">21</span>);</span><br><span class="line">    Inf_W24C02_ReadBytes(<span class="number">0x00</span>, buff, <span class="number">21</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\r\n&quot;</span>, buff);</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">            </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h4 id="Driver-I2C2-h-1"><a href="#Driver-I2C2-h-1" class="headerlink" title="Driver_I2C2.h"></a>Driver_I2C2.h</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __DRIVER_I2C2_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __DRIVER_I2C2_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Driver_USART.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ACK 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NACK 1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FAIL 0</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_I2C2_Init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">Driver_I2C2_Start</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_I2C2_Stop</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_I2C2_Ack</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_I2C2_NAck</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">Driver_I2C_SendAddr</span><span class="params">(<span class="type">uint8_t</span> addr)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">Driver_I2C_SendByte</span><span class="params">(<span class="type">uint8_t</span> byte)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">Driver_I2C_ReadByte</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><ol><li><h4 id="Driver-I2C2-c-1"><a href="#Driver-I2C2-c-1" class="headerlink" title="Driver_I2C2.c"></a>Driver_I2C2.c</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Driver_I2C2.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Delay.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> I2C_DELAY Delay_us(10)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 初始化</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_I2C2_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 1. 开启时钟 */</span></span><br><span class="line">    <span class="comment">/* 1.1 i2c硬件的时钟 */</span></span><br><span class="line">    RCC-&gt;APB1ENR |= RCC_APB1ENR_I2C2EN;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 1.2 GPIO时钟 */</span></span><br><span class="line">    RCC-&gt;APB2ENR |= RCC_APB2ENR_IOPBEN;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 2. 设置gpio的引脚的工作模式 */</span></span><br><span class="line">    <span class="comment">/* PB10-&gt;SCL PB11-&gt;SDA </span></span><br><span class="line"><span class="comment">    复用开漏输出: 既可以用于输出也可以输入. </span></span><br><span class="line"><span class="comment">    外界要有上拉电阻.用于输入的时候,最好先输出一个1,把线的控制权交给外界.</span></span><br><span class="line"><span class="comment">    MODE=11 CNF=11 */</span></span><br><span class="line">     </span><br><span class="line">    <span class="comment">/* 9.3.4.1 */</span></span><br><span class="line">    GPIOB-&gt;CRH |= (GPIO_CRH_MODE10 | GPIO_CRH_MODE11 | GPIO_CRH_CNF10 | GPIO_CRH_CNF11);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 3. 设置I2C2 */</span></span><br><span class="line">    <span class="comment">/* 3.1 配置硬件的工作模式  I2C  */</span></span><br><span class="line">    I2C2-&gt;CR1 &amp;= ~I2C_CR1_SMBUS;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 3.2 配置给I2C设备提供的时钟的频率 36MHz*/</span></span><br><span class="line">    I2C2-&gt;CR2 |= <span class="number">36</span> &lt;&lt; <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 万一前面CR2低五位并不全是0咋办，应该还要现清0再写入吧，为啥这里不用呢？*/</span></span><br><span class="line">    <span class="comment">/* 因为数据手册清楚地写了CR2的复位值为0X0000 */</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 3.3 设置标准模式=0 or 快速模式=1 */</span></span><br><span class="line">    I2C2-&gt;CCR &amp;= ~I2C_CCR_FS;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 3.3 配置I2C产生时钟的频率 100K or 400K</span></span><br><span class="line"><span class="comment">        Thigh=CCR * Tcplk1</span></span><br><span class="line"><span class="comment">        ccr = Thigh/=Tcplk1 = 5us / (1/36)us = 180 */</span></span><br><span class="line">    I2C2-&gt;CCR |= <span class="number">180</span> &lt;&lt; <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 3.4 时钟信号的上升沿100KHz的时候要求最大上升沿不超过1us(手册)。</span></span><br><span class="line"><span class="comment">        时钟频率是36MHz则 写入：1 /（1/36） + 1 = 37</span></span><br><span class="line"><span class="comment">        其实就是计算的 最大上升沿时间/时钟周期 + 1 */</span></span><br><span class="line">    I2C2-&gt;TRISE |= <span class="number">37</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 3.4 使能I2C */</span></span><br><span class="line">    I2C2-&gt;CR1 |= I2C_CR1_PE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 起始信号</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">Driver_I2C2_Start</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    I2C2-&gt;CR1 |= I2C_CR1_START;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint16_t</span> timeout = <span class="number">0xffff</span>;</span><br><span class="line">    <span class="keyword">while</span> (((I2C2-&gt;SR1 &amp; I2C_SR1_SB) == <span class="number">0</span>) &amp;&amp; timeout)</span><br><span class="line">    &#123;</span><br><span class="line">        timeout--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> timeout ? OK : FAIL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 停止信号</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_I2C2_Stop</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 产生终止条件 */</span></span><br><span class="line">    I2C2-&gt;CR1 |= I2C_CR1_STOP;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 接收方产生应答信号</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_I2C2_Ack</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 产生应答信号 */</span></span><br><span class="line">    I2C2-&gt;CR1 |= I2C_CR1_ACK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 接收方产生非应答信号</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_I2C2_NAck</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    I2C2-&gt;CR1 &amp;= ~I2C_CR1_ACK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 发送一个设备地址</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; byte</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">Driver_I2C_SendAddr</span><span class="params">(<span class="type">uint8_t</span> addr)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 把要发送的数据写入到数据寄存器，其实可以加上判断DR寄存器的TXE位，查看一下是否为空</span></span><br><span class="line">    I2C2-&gt;DR = addr;</span><br><span class="line"></span><br><span class="line">    timeout = <span class="number">0xffff</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将设备地址发送给数据寄存器后再判断SR1的ADDR位</span></span><br><span class="line">    <span class="keyword">while</span> (((I2C2-&gt;SR1 &amp; I2C_SR1_ADDR) == <span class="number">0</span>) &amp;&amp; timeout)</span><br><span class="line">    &#123;</span><br><span class="line">        timeout--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 9.3.4.2 */</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (timeout)</span><br><span class="line">    &#123;</span><br><span class="line">        I2C2-&gt;SR2;<span class="comment">/* 读取SR1寄存器后，对SR2寄存器的读操作将清除ADDR位 */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> timeout ? OK : FAIL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 发送一个字节的数据（数据和内部地址适用）</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; byte 要发送的字节</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">Driver_I2C_SendByte</span><span class="params">(<span class="type">uint8_t</span> byte)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint16_t</span> timeout = <span class="number">0xffff</span>;</span><br><span class="line">    <span class="comment">//1 先判断寄存器，假如寄存器不空就要等待至空状态（在超时时间内）后写入数据</span></span><br><span class="line">    <span class="keyword">while</span> (((I2C2-&gt;SR1 &amp; I2C_SR1_TXE) == <span class="number">0</span>) &amp;&amp; timeout)</span><br><span class="line">    &#123;</span><br><span class="line">        timeout--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 把要发送的数据写入到数据寄存器，由于上一次执行已经读取SR寄存器，这行代码执行完后便将BTF置0</span></span><br><span class="line">    I2C2-&gt;DR = byte;</span><br><span class="line"></span><br><span class="line">    timeout = <span class="number">0xffff</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//2 判断寄存器，假如数据没发送完成就要等待数据发送完成</span></span><br><span class="line">    <span class="keyword">while</span> (((I2C2-&gt;SR1 &amp; I2C_SR1_BTF) == <span class="number">0</span>) &amp;&amp; timeout)</span><br><span class="line">    &#123;</span><br><span class="line">        timeout--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> timeout ? OK : FAIL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 读一个字节的数据</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; byte 要发送的字节</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">Driver_I2C_ReadByte</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint16_t</span> timeout = <span class="number">0xffff</span>;</span><br><span class="line">    <span class="comment">// 等待SR1寄存器RXNE位，一旦非空表示收到数据（在超时时间内），可以读取数据</span></span><br><span class="line">    <span class="keyword">while</span> (((I2C2-&gt;SR1 &amp; I2C_SR1_RXNE) == <span class="number">0</span>) &amp;&amp; timeout)</span><br><span class="line">    &#123;</span><br><span class="line">        timeout--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 把数据寄存器的值返回</span></span><br><span class="line">    <span class="type">uint8_t</span> data = timeout ? I2C2-&gt;DR : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你可能很好奇为啥要加个超时时间？万一有多个主机同时操作，在while循环里就要一直等待，所以最好加个超时时间表示等待成功或失败！</p><ol><li><h4 id="Inf-W24C02-h-1"><a href="#Inf-W24C02-h-1" class="headerlink" title="Inf_W24C02.h"></a>Inf_W24C02.h</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __INF_W24C02_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __INF_W24C02_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Driver_I2C2.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;string.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ADDR 0xA0</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Inf_W24C02_Init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Inf_W24C02_WriteByte</span><span class="params">(<span class="type">uint8_t</span> innerAddr, <span class="type">uint8_t</span> byte)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">Inf_W24C02_ReadByte</span><span class="params">(<span class="type">uint8_t</span> innerAddr)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Inf_W24C02_WriteBytes</span><span class="params">(<span class="type">uint8_t</span> innerAddr, <span class="type">uint8_t</span> *bytes, <span class="type">uint8_t</span> len)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Inf_W24C02_ReadBytes</span><span class="params">(<span class="type">uint8_t</span> innerAddr, <span class="type">uint8_t</span> *bytes, <span class="type">uint8_t</span> len)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><ol><li><h4 id="Inf-W24C02-c-1"><a href="#Inf-W24C02-c-1" class="headerlink" title="Inf_W24C02.c"></a>Inf_W24C02.c</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Inf_W24C02.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Inf_W24C02_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Driver_I2C2_Init();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Inf_W24C02_WriteByte</span><span class="params">(<span class="type">uint8_t</span> innerAddr, <span class="type">uint8_t</span> byte)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint8_t</span> ack;<span class="comment">/* 用来测试写字节是否成功的变量，测完就注释掉要不然影响时序 */</span></span><br><span class="line">    <span class="comment">/* 1. 开始信号 */</span></span><br><span class="line">    ack = Driver_I2C2_Start();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// printf(&quot;start_ack=%d\r\n&quot;, ack);</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 2. 发送写地址 */</span></span><br><span class="line">    ack = Driver_I2C_SendAddr(ADDR);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// printf(&quot;addr_ack=%d\r\n&quot;, ack);</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 4. 发送内部地址 */</span></span><br><span class="line">    ack = Driver_I2C_SendByte(innerAddr);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// printf(&quot;inner_ack=%d\r\n&quot;, ack);</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 6. 发送具体数据 */</span></span><br><span class="line">    ack = Driver_I2C_SendByte(byte);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// printf(&quot;byte_ack=%d\r\n&quot;, ack);</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 8. 停止信号 */</span></span><br><span class="line">    Driver_I2C2_Stop();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 9.3.4.3 */</span></span><br><span class="line">    Delay_ms(<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">Inf_W24C02_ReadByte</span><span class="params">(<span class="type">uint8_t</span> innerAddr)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 起始信号 */</span></span><br><span class="line">    Driver_I2C2_Start();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 2. 发送一个写地址   假写 */</span></span><br><span class="line">    Driver_I2C_SendAddr(ADDR);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 4. 发送内部地址 */</span></span><br><span class="line">    Driver_I2C_SendByte(innerAddr);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 6. 起始信号 */</span></span><br><span class="line">    Driver_I2C2_Start();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 7. 发送读地址  真读 */</span></span><br><span class="line">    Driver_I2C_SendAddr(ADDR + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 10. 产生一个非应答信号 */</span></span><br><span class="line">    Driver_I2C2_NAck();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 11. 停止信号 */</span></span><br><span class="line">    Driver_I2C2_Stop();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 9. 读取一个字节 */</span></span><br><span class="line">    <span class="type">uint8_t</span> byte = Driver_I2C_ReadByte();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> byte;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 页写入.一次写入多个字节</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; innerAddr</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; *bytes</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; len</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Inf_W24C02_WriteBytes</span><span class="params">(<span class="type">uint8_t</span> innerAddr, <span class="type">uint8_t</span> *bytes, <span class="type">uint8_t</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 开始信号 */</span></span><br><span class="line">    Driver_I2C2_Start();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 2. 发送写地址 */</span></span><br><span class="line">    Driver_I2C_SendAddr(ADDR);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 4. 发送内部地址 */</span></span><br><span class="line">    Driver_I2C_SendByte(innerAddr);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint8_t</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* 6. 发送具体数据 */</span></span><br><span class="line">        Driver_I2C_SendByte(bytes[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 8. 停止信号 */</span></span><br><span class="line">    Driver_I2C2_Stop();</span><br><span class="line"></span><br><span class="line">    Delay_ms(<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 一次性读取多个字节的数据</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; innerAddr 起始位置</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; *bytes 存储读到的数据</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; len 读取的字节数</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Inf_W24C02_ReadBytes</span><span class="params">(<span class="type">uint8_t</span> innerAddr, <span class="type">uint8_t</span> *bytes, <span class="type">uint8_t</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 起始信号 */</span></span><br><span class="line">    Driver_I2C2_Start();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 2. 发送一个写地址   假写 */</span></span><br><span class="line">    Driver_I2C_SendAddr(ADDR);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 4. 发送内部地址 */</span></span><br><span class="line">    Driver_I2C_SendByte(innerAddr);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 6. 起始信号 */</span></span><br><span class="line">    Driver_I2C2_Start();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 9.3.4.3 */</span></span><br><span class="line">    <span class="comment">/* 7. 发送读地址  真读 */</span></span><br><span class="line">    Driver_I2C_SendAddr(ADDR + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint8_t</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* 9. 读取一个字节 都要产生一个应答信号*/</span></span><br><span class="line">        <span class="keyword">if</span> (i &lt; len - <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Driver_I2C2_Ack();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>    <span class="comment">/* EV7_1 */</span></span><br><span class="line">        &#123;</span><br><span class="line">            Driver_I2C2_NAck();</span><br><span class="line">            <span class="comment">/* 11. 停止信号 */</span></span><br><span class="line">            Driver_I2C2_Stop();</span><br><span class="line">        &#125;</span><br><span class="line">        bytes[i] = Driver_I2C_ReadByte();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h3 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h3></li><li><p><strong>GPIO**</strong>为复用功能**</p></li></ol><p><strong>涉及到寄存器的配置！注意：我们的PB10、PB11此时并不是两个普通的**</strong>GPIO<strong><strong>而是复用作</strong></strong>IIC<strong><strong>的</strong></strong>IO<strong>**输出。</strong></p><ol><li><strong>在I²C通信中，发送完设备地址后需要清除ADDR寄存器？</strong></li></ol><p><strong>清除ADDR寄存器的目的是为了确保下一次的I²C传输或操作不会受到上一次的地址信息的干扰。如果不清除ADDR寄存器，可能会导致通信错误或设备不正确响应。</strong></p><ol><li><strong>I²C地址传输阶段</strong>：<ol><li>在I²C通信中，主设备（通常是微控制器）需要向从设备发送数据或者请求数据。通信开始时，主设备首先发送一个设备地址和读写位（R/W位）给总线上的所有设备。</li></ol></li><li><strong>ADDR寄存器的作用</strong>：<ol><li>ADDR寄存器用于存储要发送的设备地址和读写位。当主设备开始传输设备地址后，这些信息会被加载到ADDR寄存器中。</li></ol></li><li><strong>ADDR寄存器的清除</strong>：<ol><li><strong>在I²C通信中，主设备发送完设备地址后，通常需要软件来清除ADDR寄存器中的地址信息。这是因为I²C控制器通常不会自动清除ADDR寄存器的内容。</strong></li></ol></li><li><strong>软件操作</strong>：<ol><li>在大多数情况下，软件需要在发送设备地址后显式地清除ADDR寄存器。这通常通过写入特定的控制位或寄存器来完成，具体的操作取决于使用的I²C控制器和微控制器。</li></ol></li><li><strong>硬件实现的例外</strong>：<ol><li>尽管大多数情况下需要软件操作来清除ADDR寄存器，有些特定的I²C控制器和微控制器可能提供了自动清除的功能，但这并不是通用情况。</li></ol></li></ol><p><strong>void Inf_W24C02_ReadBytes(uint8_t innerAddr, uint8_t *bytes, uint8_t len)的使用</strong></p><p><strong>多字节不能读取太快，不然会发生数据覆盖。</strong></p><p>还有就是最后为啥要先产生应答信号后再读取数据，而不是先读取数据之后产生应答信号（<strong>无论是写入数据还是读取数据，主机在发送完地址后等待从机的应答信号</strong>）？</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532893315360.png" alt="img"></p><ul><li><strong>实际是**</strong>用上一次的响应信号来设置这一次的响应<strong><strong>,</strong></strong>读完数据硬件就立即响应<strong><strong>，如果不先产生应答，硬件响应的是从机非应答信号，</strong></strong>这样读取多字节数据就可以了<strong><strong>,</strong></strong>而且<strong>**最后一个字节要注意EV7_1包括响应和停止！</strong></li><li><strong>主要是硬件响应太快，所以要**</strong>先准备好应答信号，再由硬件响应<strong>**。一个字节就不用考虑（就和做一次生意是一个意思，哈哈）！</strong></li></ul><ol><li><h3 id="软件设计（HAL库）-3"><a href="#软件设计（HAL库）-3" class="headerlink" title="软件设计（HAL库）"></a>软件设计（HAL库）</h3><ol><li><h4 id="STM32CubeMx中配置"><a href="#STM32CubeMx中配置" class="headerlink" title="STM32CubeMx中配置"></a>STM32CubeMx中配置</h4></li></ol></li></ol><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532893315361.png" alt="img"></p><ol><li><h4 id="main-c-8"><a href="#main-c-8" class="headerlink" title="main.c"></a>main.c</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_Init();</span><br><span class="line">    SystemClock_Config();</span><br><span class="line">    MX_GPIO_Init();</span><br><span class="line">    MX_USART1_UART_Init();</span><br><span class="line">    </span><br><span class="line">    Inf_W24C02_Init();</span><br><span class="line"></span><br><span class="line">    Inf_W24C02_WriteByte(<span class="number">0x00</span>, <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    <span class="type">uint8_t</span> c = Inf_W24C02_ReadByte(<span class="number">0x00</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;c=%c\r\n&quot;</span>, c);</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> wbuff[<span class="number">10</span>] = &#123;<span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;o&#x27;</span>&#125;;</span><br><span class="line">    Inf_W24C02_WriteBytes(<span class="number">0x01</span>, wbuff, <span class="number">5</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;c=%c\r\n&quot;</span>, Inf_W24C02_ReadByte(<span class="number">0x01</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;c=%c\r\n&quot;</span>, Inf_W24C02_ReadByte(<span class="number">0x02</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;c=%c\r\n&quot;</span>, Inf_W24C02_ReadByte(<span class="number">0x03</span>));</span><br><span class="line">    <span class="type">uint8_t</span> buff[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    Inf_W24C02_ReadBytes(<span class="number">0x00</span>, buff, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;buff=%s\r\n&quot;</span>, buff);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h4 id="Inf-W24C02-h-2"><a href="#Inf-W24C02-h-2" class="headerlink" title="Inf_W24C02.h"></a>Inf_W24C02.h</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __INF_W24C02_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __INF_W24C02_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;string.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;i2c.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ADDR 0xA0</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Inf_W24C02_Init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Inf_W24C02_WriteByte</span><span class="params">(<span class="type">uint8_t</span> innerAddr, <span class="type">uint8_t</span> byte)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">Inf_W24C02_ReadByte</span><span class="params">(<span class="type">uint8_t</span> innerAddr)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Inf_W24C02_WriteBytes</span><span class="params">(<span class="type">uint8_t</span> innerAddr, <span class="type">uint8_t</span> *bytes, <span class="type">uint8_t</span> len)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Inf_W24C02_ReadBytes</span><span class="params">(<span class="type">uint8_t</span> innerAddr, <span class="type">uint8_t</span> *bytes, <span class="type">uint8_t</span> len)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><ol><li><h4 id="Inf-W24C02-c-2"><a href="#Inf-W24C02-c-2" class="headerlink" title="Inf_W24C02.c"></a>Inf_W24C02.c</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Inf_W24C02.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Inf_W24C02_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    MX_I2C2_Init();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Inf_W24C02_WriteByte</span><span class="params">(<span class="type">uint8_t</span> innerAddr, <span class="type">uint8_t</span> byte)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_I2C_Mem_Write(&amp;hi2c2, ADDR, innerAddr, I2C_MEMADD_SIZE_8BIT, &amp;byte, <span class="number">1</span>, <span class="number">2000</span>);</span><br><span class="line">    </span><br><span class="line">    HAL_Delay(<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">Inf_W24C02_ReadByte</span><span class="params">(<span class="type">uint8_t</span> innerAddr)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint8_t</span> byte;</span><br><span class="line">    HAL_I2C_Mem_Read(&amp;hi2c2, ADDR + <span class="number">1</span>, innerAddr, I2C_MEMADD_SIZE_8BIT, &amp;byte, <span class="number">1</span>, <span class="number">2000</span>);</span><br><span class="line">    <span class="keyword">return</span> byte;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 页写入.一次写入多个字节</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; innerAddr</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; *bytes</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; len</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Inf_W24C02_WriteBytes</span><span class="params">(<span class="type">uint8_t</span> innerAddr, <span class="type">uint8_t</span> *bytes, <span class="type">uint8_t</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_I2C_Mem_Write(&amp;hi2c2, ADDR, innerAddr, I2C_MEMADD_SIZE_8BIT, bytes, len, <span class="number">2000</span>);</span><br><span class="line">    HAL_Delay(<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 一次性读取多个字节的数据</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; innerAddr 起始位置</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; *bytes 存储读到的数据</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; len 读取的字节数</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Inf_W24C02_ReadBytes</span><span class="params">(<span class="type">uint8_t</span> innerAddr, <span class="type">uint8_t</span> *bytes, <span class="type">uint8_t</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_I2C_Mem_Read(&amp;hi2c2, ADDR + <span class="number">1</span>, innerAddr, I2C_MEMADD_SIZE_8BIT, bytes, len, <span class="number">2000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STM32 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
