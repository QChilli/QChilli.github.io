<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>第2篇文章</title>
      <link href="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/MCU/mm/"/>
      <url>/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/MCU/mm/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 蓝桥杯51 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>STM32基础篇</title>
      <link href="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
      <url>/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<ol><li><h1 id="开发板简介"><a href="#开发板简介" class="headerlink" title="开发板简介"></a>开发板简介</h1></li><li><h2 id="开发板实物图"><a href="#开发板实物图" class="headerlink" title="开发板实物图"></a>开发板实物图</h2></li><li><h2 id="核心板原理图"><a href="#核心板原理图" class="headerlink" title="核心板原理图"></a>核心板原理图</h2></li><li><h2 id="扩展板原理图"><a href="#扩展板原理图" class="headerlink" title="扩展板原理图"></a>扩展板原理图</h2></li><li><h2 id="STM32最小系统"><a href="#STM32最小系统" class="headerlink" title="STM32最小系统"></a>STM32最小系统</h2></li></ol><p>STM32单片机能工作的最小外围电路就叫<strong>最小系统</strong>。</p><p>最小系统通常包括：<strong>STM32芯片、电源、时钟、下载调试和复位</strong>5部分组成。</p><ol><li>STM32芯片</li></ol><p>选用的是<strong>STM32F103ZET6</strong>这款芯片。</p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=MTM4MmEwYTI1ZTZlM2Q0ZGI0OGM2OGY2YTI2NDljM2VfRWVvcXVicGtKV2hvVzhhdHdjV1IyN2txekNFSWtMV05fVG9rZW46SWtKZmJ1V2xsb0YwZDV4aFczYmMwYmlSbk5RXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><ol><li>电源<ol><li>采用3.3V电源供电。 我们电路采用了两路供电。</li><li>一路是USB的TypeC供电， TypeC提供的是5V，使用芯片AMS1117把5V转成3.3V。</li><li>另一路是STLink下载器直接提供3.3V供电（下载器内部已经把5V转成了3.3V）。</li></ol></li></ol><ul><li>MCU电源</li></ul><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=ZDExYjg2MTBkY2M0N2RiNWY0OTM5MjAzYTQ3ZmNkYjhfdTdKV2cwTGRUMHIxamFxd3lyTzBaOGRNUmF2dG5pWVBfVG9rZW46T3hrdGJhQnM1b0dGM1l4WkR1dWNzeVNSbm9lXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><ul><li>USB供电转3.3v</li></ul><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=NWMzZjE0NmU1ZjgzMGJlOGZjZTBlZjBjMzY2NDg0YmVfdXl1WXBzbzczdnlHaExSTHdXTzlkSlM0RmNmb3NYTHZfVG9rZW46V2lVWmJSQVdhb0pWeEN4dGJ3VWNFeXRUbkFjXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><ul><li>MCU调试口</li></ul><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=ZjQ5MzU1OWFjY2E0ODBkYTY3ODQ5ODI3OWUyODM2YzJfcE95emxvZWl2cXJDMUFZSUVzZTE1aks4ZU0ydzl0cmtfVG9rZW46QXU5dGJRT0lLb2xaSnB4bFZ2d2NuWFlHbmJvXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><p>不用额外再接串口模块。</p><ol><li>时钟</li></ol><p>SMT32提供了两路外部时钟： <strong>外部高速时钟和外部低速时钟</strong> 。</p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=YzI0NDU3NzhkYTk3NzE1MzFmYmNmN2M3NGY3YWYyMmNfVHl0YnhYME4yc1NkaXc0ZnJuQ2Z0cE1UQW10V3oxQjNfVG9rZW46Rk1CV2JUVGtrb3RVSkV4NVljTmNHY25ObnBoXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=ODhmZDZjMWRkZTVlN2NhMGMxZWMyZjNjNDRkZTI4MWRfT1U2SEkxWlNwVFozTHRRbEJWeU9NcFBlRlZNTlRYUzBfVG9rZW46RHd0d2JrZnlEb2FKUzh4RG1TbmNQdDhlbmhkXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><ol><li>复位</li></ol><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=ODRjOWFjZjgwMjYxOTY1NTljMTkyZTI2MzRlNzAxZWRfaFJIUkgxeWJ6alFGaTdiSlJYVWpmZzVhYm50MnphblNfVG9rZW46RDd3M2JaQmFmbzBBWEt4QzBYZWMyc0IzbnZjXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><ol><li>下载调试</li></ol><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=ZTM5YTNjYWExMjM5ZmQxOTM2ZTM2MjAwMGYzOWRlNDlfbm9KQ3ZWQmZEU1REVXhlMVJxUlRRZk9ZaFJVNkZZdnBfVG9rZW46TUhzeWJHa1FHb245cTF4VEhNNGNQM3ZIbmxlXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><ol><li><h1 id="点亮LED灯案例（寄存器）"><a href="#点亮LED灯案例（寄存器）" class="headerlink" title="点亮LED灯案例（寄存器）"></a>点亮LED灯案例（寄存器）</h1><p>我们首先使用基于寄存器开发方式点亮第一个LED灯。</p></li></ol><p>在代码期间会涉及到一些寄存器知识，先不要深究，后面再详细介绍。 现在要做的就是点亮第一个LED灯。</p><ol><li><h2 id="需求描述"><a href="#需求描述" class="headerlink" title="需求描述"></a>需求描述</h2></li></ol><p>快速体验STM32开发：点亮LED1。</p><ol><li><h2 id="硬件电路设计"><a href="#硬件电路设计" class="headerlink" title="硬件电路设计"></a>硬件电路设计</h2></li></ol><p>LED1-LED3是普通LED灯，LED4为电源指示灯。</p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=M2VkNDA0ZGYxMTZjMjQ0NDcwMDg1YmVkZTg5ZGM3MzhfQVhKSnhNRVYycXBqQ0F4MFcyMXcxOVNTcm9aTUZYWFFfVG9rZW46RTI4VGIzdVJUb3VHdjd4SVdBeGM2WnJHbjVmXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=NjY0YjRkYTQ4Nzc5MGY2ZDI0ZTQ0MzAzZjgyMWJiMDBfTWZSRXNzZlNFZldPT2k3azFDTG1hNGVYdHZKVWtHN2pfVG9rZW46UHdYZ2J4aVhsb3ZwcDN4enBvR2NIQXJRbmFkXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><p>说明：</p><ol><li><p>LED1连接的是端口PA0</p></li><li><p>只要让PA0引脚输出低电平就可以点亮LED1。</p></li><li><h2 id="创建项目工程"><a href="#创建项目工程" class="headerlink" title="创建项目工程"></a>创建项目工程</h2></li><li><h3 id="创建工程准备"><a href="#创建工程准备" class="headerlink" title="创建工程准备"></a>创建工程准备</h3></li><li><p>创建需要的目录</p></li></ol><p>在磁盘上创建一个目录 atguigu，然后再在atguigu目录下创建我们的第一个工程目录 led_register。</p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=OTNmYzZkNTM5MmU3OGQ2ZTFlODAzNmZiOWIyMTA1NGFfNGY5NHgxUlJGMTA0ZFE5a2FHZnBTRVBrNTczVVVYM2dfVG9rZW46UUF0MGJPRjhob3JyR214MXhnaGNpTzRUbktVXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><ol><li>准备启动文件</li></ol><p>STM32程序需要启动文件，我们需要提前准备好。 先去ST官网下载官方提供的外设标准库，里面有提供标准的启动文件，我们从里面copy一份出来。</p><p>标准外设库下载地址：<strong><a href="https://www.st.com/zh/embedded-software/stm32-standard-peripheral-libraries/products.html">https://www.st.com/zh/embedded-software/stm32-standard-peripheral-libraries/products.html</a></strong></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=NGE4ZjZiZmJlNzBhOTAzM2IyYjNkZTA0NDkwYzk5ZGRfMU04UHpOcGF5aXhCQ1Q2ZGs0RzQzRHRMU1pDbjZOdW5fVG9rZW46TEV2VGJCVldNb0tvUll4WnM5Z2NOcXVjbnFiXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=N2YxN2Y5NzlkZTM4YzZhNmIyYWNmMmU2MDQyNzA4ZWNfN3ZOM091RlUzN0NTSmRJM25SVjhaWlJ1OEtRODV0ZlBfVG9rZW46RmNmZmJqMHAyb3hyTGd4SnhUdmM4ajB3bnlnXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><p>下载完成之后解压，后面我们需要从里面copy文件出来。</p><ol><li>创建目录放入启动文件和其他核心文件</li></ol><p>为了方便管理，我们把启动文件放入专门目录中。 在刚才创建的工程目录中创建一个目录：Start（名字没有强制要求，随意，但是最好不要有中文）。</p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=MDE3MjcyNTA1ZjQxZTU3OThjMjU0ZjJlODhmNGE2ZGJfQUhjWXhpTk80V09abTdWRG1CbHE3NU1CdDRSRXNpSkhfVG9rZW46QmE0SmJVNURvb3VLVFZ4WGd3amMyUUFGbjBnXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><p>去到我们刚才下载的标准外设库目录，找到我们需要的启动文件和其他核心文件copy到Start目录。</p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=NmYxM2I4Y2ZmNjRkNmZiNzdhYjVhZjYxNDNlNWQzOWNfbWxlMndwbTBERHhUTmZrbFNURHU4cGpScEVsMENxZVlfVG9rZW46Rkhsb2I5MHl4b09aV1J4UWJCV2Ntc2N6bnNmXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><p>启动文件选择标准：</p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=YWEwOThlYzBkYzJmNDk3NmVhNjIxZThhZjNlM2JkODFfU3h6Q1lRMTVUSGdaN0NZb3RkM0Z6YmZUQnBlWDhWVlZfVG9rZW46QWVtNWJxVkt5b2YzdHJ4d29aNGNhbVdVbnRnXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=MDc3YjI1NjQzYjg5ODY1NWJiODZiMjdlMTkyZmM2MzhfOXNiZmRuVU9aUFFnSGN5QmMwZXd0ZDlJbG5RbzFsVFRfVG9rZW46STlPU2I5R05sbzR4bXp4ck53aWN0ZXEybm1lXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=MGUzYjRiN2I0NzRlOGUwYzcyMzg3NWE2M2JiNTZmZGJfVlJET1U3a3FScTdXZGRMTmN3WWFHNlVNWENnTGFwSElfVG9rZW46Q0JGZmIxTkVob0FvVnB4aGxNZmNZZFdLbnlnXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><p>Copy完之后：</p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=MjUxMGZhNWYwYTUyOWM4NTQ0MjdlMWQxNzcxYWJkOWJfdHlyMmZLTGRiYnlBNndnc21QSXc2VDViSzhqVjVnbkxfVG9rZW46S3RZWGJKMzNzb0NPZE54T2pTdGNmT291bjdmXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><ol><li>创建工程</li></ol><p>打开Keil MDK创建工程。</p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=NzUyNmRlOTExNzRkZjRmNTYwNDE2NWQ1ZDYzMjNjNjdfdmJ3S2Z6UE8xbjhxVjRKNldzWGUySUdPblNWNHlGZldfVG9rZW46S0pNcmJsUkxGb2tKM3d4N0p5cmNlZ1ZBbmRlXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=NmVmMzQ1YTEzZjVjZWI1M2U1MDA3ZWUyZWI5MWQxMjlfMzVPRktlZnFwRlBuajlRZWVjdHNPWkYyU2wyRThyMlpfVG9rZW46SVloaWI5ZU1Fb0puUUl4S282a2N6cHpmbnliXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=N2FlODdiZTNjNmM3ZmMyYmM1YWNlZTk5ODc2ZTA1NzVfZEJoejlJRDJrajM3ZHhzMmhxSVVkWnlidXk1YUxESm5fVG9rZW46SkNaU2JNb1Yzb0lmSkJ4a1BoNmNwbmV6bnJnXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=MTUyM2YzZmFjMDdmNTJjN2E3ZGI4ZTRlZmMyZjIyZDFfa29TNG5rRDU1eG5HWW50djAxQmJycE9aaVQ0a3pGRGFfVG9rZW46Wldwa2I2TUlDb3E2M0V4Zm81MWNydXNBbmloXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><ol><li><h3 id="工程配置"><a href="#工程配置" class="headerlink" title="工程配置"></a>工程配置</h3></li><li><p>添加两个Project Group方便管理代码文件。</p></li></ol><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=MmZjMTNlZWUxMTEwY2JkZjY2YzM2MzNmY2IyNmFkYTBfT2FjWjAwYzkwZFhmd0dRendLRTVxMnVqbDNHTW5KVHNfVG9rZW46T0pSZmJTUjV5b2JOQTd4RGNOTWNhZ2tYbm1jXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><ol><li>先删除默认的Source Group 1，再添加两个：Start（启动相关的文件），User（我们自己写的代码）。</li></ol><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=ODI4MGNjNzAwOTQyZjNiYWY4ZDY2NTQzNWQwMTVhZGZfT0pUbFZNWU5zYVBicEVQN3RyeEZjaXJFNHloblVMR1FfVG9rZW46UHU4SWJyNU51bzdoU054VHViT2NFVmY3bjNiXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=NjIxNjY2MDZjZDc2YmQzMDU3MzViZTBjMGZjYTQzZThfQVRPTGx2YjVwMzNCZGI4MG1rSng0TUFlYldMZ0JNYlZfVG9rZW46UGVKWmJjaDRzb0t3RmZ4WVpFcGNFa3ZIbmhkXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=ZGNjOGE0MDNhODU0ZjUzOTdjZWQ3Y2IyOTcyMjhmYzdfQXg5YXZQdFFLYUZzcXVUWnhKTzFEV2RKcGVUZnJTUHRfVG9rZW46RThZdmJ3Nzkxb2ZWVFd4emdTQ2NmakpPbmxiXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=MzUwM2Y1MjQ2ZWY0OTI5OWExMThiNjhiYTJiN2Q3NzFfUVdLUXd3NUp5MUxRcGdudVlJUEdBdlpSZk03TElySllfVG9rZW46WGhzYWI2ZzVUb29WTE54UktHemM5VkVZbnJTXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><ol><li>创建main.c 文件</li></ol><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=NzU5NGQ4NzJhZmIzNDIyMTBjNmY3MDI1ZjhmOWYwZDdfZEVhbjBOSVlvUjZNam5GRnJCTFV5TGx1bGZKT1piUFFfVG9rZW46WUh5SWJOcHc2b25oeTl4Q1prVmM2MnZTbm1jXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=ZjE0ZGVkZWJjOWRmZWJhZDM3NzE3OWUzMjhlNjFiNDVfUlQ0T3k5UTRyWFNCTTBVaU9ObHRKU3lPb29STEpuYUxfVG9rZW46TEZtN2JaVFpkb0JPWG54U2ZxUWNjUVF1blJnXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><p>User路径不存在，让它帮我们创建。</p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=YTI0MzgxNjUwMGZmMzA4YjVmYjQ4NzczZjZmZmY5MDNfV3BBM09kUDVveXlqcUtKMlg2Y0Y5ZVBLN2RIUzlKc2NfVG9rZW46Rm82emJZTm5Obzk4eHh4d0hhMGNoYWo0bjRlXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><ol><li><h3 id="编译配置"><a href="#编译配置" class="headerlink" title="编译配置"></a>编译配置</h3></li><li><p>编译器版本改为5</p></li></ol><p>目前最新的Keil ARM用的是 Compiler version 6，与前面的core_cm3.c不兼容，所以需要提前准备好Compiler version 5。</p><p>下载地址：<strong><a href="https://developer.arm.com/downloads/view/ACOMP5">https://developer.arm.com/downloads/view/ACOMP5</a></strong></p><p>解压之后，把解压的后文件夹放入到<strong>Keil \</strong>**MDK**<em>\</em>的安装目录**下：</p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=MmRhZGJjYTk2NDNlYjcwMGU4ODNkNTA2NGFmNzVlOTNfNFFyY0U3R0VTd1R0azdtNUpTMkROS21jYjNRNmdocFBfVG9rZW46V3c2T2JqTm5sb0J2N0V4VlpGaGNxejRCbktmXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=ODMzM2E0ZmM2OGQwY2MyMzgyZWNmNWI4YWY5ODM4YmJfTXIwTzVUYWI2UzR2OVE2M2ozWGR1cDZFVmlCZkxnQzBfVG9rZW46WTh4cGJyaFNlb0F5Zmp4TzFVOGNUVHdQbjBmXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=MDg5NGZkYTI0YmExZjE5MmY4NDMzZjUxY2U1ZmM4MWJfWldMaDhhRkFiOENrenZSdTg1eXR0eXlZN2dwcGlHNExfVG9rZW46R1VVRmJXRlV2bzBFSDN4SzUxUWNlVWpyblRmXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=ZDg3Nzk5YmU0YjE1YTdjOGQzMzliZmM1ZDNkY2JlOTlfWk9hSDJaTjhkb1E2WG95dHVIV3VnUFdBSFNDWTVKaXFfVG9rZW46S0ZLUGJqZzJtb21YdDR4VWRVcWNmanM0bjVjXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=MGZmMGVhZmIwYmJkNTA2Y2JhNDQyZGY5ZDU5NGIwYzFfcjN5N3NpRUgxRHRtUjNPWHAyTzhZQmVBUnFsTndVUzZfVG9rZW46TXNuSGJJbGNjb2dxbmx4a3czZ2NsRVh0bmNoXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=MzM1ZjAxZDc4NzBiYTRkYTA0NmZlMTAxOWNhMzVlYzZfMGpxWG5OT0V4YmVVc3pwYVZaMmlmR0lLMlliRHNYSmJfVG9rZW46U3RoU2JtUXVWb21jZkF4WlhENmMzcmxWbk5oXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=YjA5MTI0YmJjODYzNGU0MTU4OWRiYTIzYWQ3OTdjMTRfVnV3d294ZGhuUGp4bkNIeVBuWWJGOU1LNGtCY0hkSG1fVG9rZW46UTJ2UWJPWE5Ub3JwNzN4ZExicGNNU21Bbk5kXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=N2RmMGEwODEzZjU1MmI3YWQzY2VkZWFkYWJiODBkZGJfTXh2d3c0T1o2a1RnbXJWSjJqbEhTY2I5RjBCQ3RjV1lfVG9rZW46SjRsTmIyd2kwb3M2d2l4bjdmWWNSYjVEbk9iXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=MTY0YmU1NjlhYTM3MDExMTI2OTA4YzM4MjgxMTI3YmJfNWtycThNZzNONk1Sc2puQzM0QnV0dGlXOWlaSXo1YnZfVG9rZW46TXJhTGJjVVZlb1Y5UWZ4UENmUmNFOWVPbktmXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><ol><li>一些其他配置</li></ol><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=MDA4NTBjM2NiYTFhNzk1OGVmMWFiYmVkZDIyNzg0MzlfSWdXdG1ueVJpb3FkUWY5UmowbkE1VHdDekMydUlJTEpfVG9rZW46WDRsWmJwNkgyb1hWN1N4UVFpSGN2UEkzbklnXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=NzExZmRkNGQyOTBlMTE4OGZlZTNlYjFlMGU2NzM0ODNfZHpkTkJQcXEzeXFYVFJWdkJiWGI2eWNZV2JsZzVRa1BfVG9rZW46T0k5bGJXeXFsb3VBbkd4V25tR2NRcGx0bnNlXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=MjVjMDljMjQ2YzQwZTM3ZmY3MDQ4ZDNiYWMwOTI3ODFfa3dYS2EydEREUzVkWHVhZEI5SElVbkxNRHFQQnhrU3BfVG9rZW46VTVlc2JKVTNPb05UZTF4WTZqcWNuVElqbjRnXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=NzlmNWM4MGU1NzNhZTQ4ZmFkMDkzMmEyODQ3NjNlNjRfSVdHcEtYRDFPOXRzZ1FyQVI0NzZCR0xzbDlUU2MyMXJfVG9rZW46RDN6aWJ5a3ptb3hya1R4dm1HemNBMkN2bmliXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><ol><li><h2 id="软件设计"><a href="#软件设计" class="headerlink" title="软件设计"></a>软件设计</h2></li><li><h3 id="main-c"><a href="#main-c" class="headerlink" title="main.c"></a>main.c</h3></li></ol><p>根据前面硬件电路设计，我们只要让<strong>GPIOA的0口输出低电平就行了</strong>。 代码需要按照下面的步骤来实现。</p><ol><li>开启时钟</li></ol><p>在STM32中，让IO口工作，必须先开启对应的时钟。 所以需要先查找到开启时钟的寄存器，然后通过该寄存器操作时钟的开启或关闭。 我们要打开的是GPIOA的时钟。</p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=NWNiZTBkMzlmZDc4MGIzYTdmYTJlNjViOTZjZWRkMWJfd21RQ2FVUWZOZ2Q0dWdwVmNQNHhicDBCSEM3b2txMkVfVG9rZW46VXZ2VWJQY0dLb3Y3RVd4N3FPb2NTRk5ublRoXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=ZTY5MWY5MDQ0ZWYyM2IyYTZiZDg0YjVkODY5M2NkZjJfdXdTT0dvMnJmOThheTBHTTJVYUV3emJqVkZ5T09IWWxfVG9rZW46VHEwdGJLdDRDb2wyS3Z4Z3ZFNGNiZ0t5bmg4XzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=MjZlM2MzNWJkZmY0OTI3YzE3NGY1NTlkNzAxNWNiNjVfa0hJT0RWTDZ6RXJOaW1PMHBwNmFheVFVN29QSnBibGNfVG9rZW46UG9uVGJoRHVnb01QbzJ4Nm5CZ2NpS0Y5blJiXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><p>我们需要知道RCC_APB2ENR这个寄存器的地址。 如何查找呢？ 先知道RCC这个外设的基地址，然后加上这个寄存器的偏移地址就行了。</p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=NDA0OGYyNTYzZjg5MWIyNWU4ZjVjNDQ4Nzk0OGUyYTVfbHZHWmVvZmVBSmI0RGpSVVBVbGJyUThUUmdCQVQ2Y3JfVG9rZW46REFpd2JjcHQ5b1ZPN0Z4RExUcmNhQUpmbmdjXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><p>从上面可以看出来，RCC的基地址是0x4002 1000，APB2ENR的偏移量是0x18，所以<strong>APB2ENR的地址值是0x4002 1000 + 0x18</strong></p><p>有了地址，在这个地址写入一个数据，这个数据的二进制第2是1就行了。 其他位暂时不管。 我们写入4。 这样就开启了GPIOA的时钟。</p><p>在代码中，我们需要把地址强转成指针才能给这个地址赋值。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*(<span class="type">uint32_t</span> *)(<span class="number">0x40021000</span> + <span class="number">0x18</span>) = <span class="number">4</span>;</span><br></pre></td></tr></table></figure><ol><li>给IO口设置输出模式</li></ol><p>在STM32中，如果要让IO口输出低电平或高电平，必须给要使用的IO设置为输出模式。</p><p>根据前面的思路，需要先找到GPIOA的基地址，再根据偏移地址找到要使用的寄存器的地址。 GPIOA的基地址是<strong>0x4001 0800</strong>。</p><p>配置PA0口的输出模式的寄存器是GPIOA_CRL。</p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=ZTYzNGY2ZmVlNjE3Njk2OWM5YzY0OTBiZTIxMmFlMTBfY3lmTFhBTDhKaDVpbVhkMTRYRlVVaHhDRFdna0M3eURfVG9rZW46QXA2b2JPQmYybzlFek54SlBHY2NqU1hQbkFmXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><p>只需要让这个寄存器的最后4位是 0011，就是最大速度的推挽输出。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*(<span class="type">uint32_t</span> *)(<span class="number">0x40010800</span> + <span class="number">0x00</span>) = <span class="number">3</span>;</span><br></pre></td></tr></table></figure><ol><li>给PA0口输出0</li></ol><p>给指定PA0口输出0就可以点亮LED1了。 用到的寄存器是ODR数据输出寄存器。</p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=NDQ1MzY0MTIyYTc5ZmI1OGMzNzVkZGFkMDNiNjAxMjBfZWh6akRKMndyVXZ2SjQ2TlFnenJtdURTZWhMUktUaWxfVG9rZW46Qk03WGIxWkxpb29lS2F4a0RTOWNsQ1VkbmRiXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><p>ODR寄存器的地址是 <strong>0x40010800 + 0x0c</strong>。 给这个地址的第0位写0，其他位写1。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*(<span class="type">uint32_t</span> *)((<span class="number">0x40010800</span> + <span class="number">0x0c</span>)) = <span class="number">0xfffe</span>;</span><br></pre></td></tr></table></figure><p><strong>main.c具体代码清单。</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;stdint.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 开启GPIOA的时钟 */</span></span><br><span class="line">    *(<span class="type">uint32_t</span> *)(<span class="number">0x40021000</span> + <span class="number">0x18</span>) = <span class="number">4</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 给PA0设置为通用推挽输出 */</span></span><br><span class="line">    *(<span class="type">uint32_t</span> *)(<span class="number">0x40010800</span> + <span class="number">0x00</span>) = <span class="number">3</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 给输出寄存器赋值 */</span></span><br><span class="line">    *(<span class="type">uint32_t</span> *)(<span class="number">0x40010800</span> + <span class="number">0x0c</span>) = <span class="number">0xfffe</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h3 id="编译工程"><a href="#编译工程" class="headerlink" title="编译工程"></a>编译工程</h3></li></ol><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=OTJhYTUwZmI2NGZiYzliZjcyYTM2ODE2OGFiNjNhNDFfWU9INkZxNHBEcEY2UHM1aGkyT2kzR2Y5dDJFUnBOdjdfVG9rZW46QkVEM2J5b0Rqb01ob3l4T0lvb2NaS2FrblRhXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><ol><li><h3 id="安装ST-LINK驱动"><a href="#安装ST-LINK驱动" class="headerlink" title="安装ST-LINK驱动"></a>安装ST-LINK驱动</h3></li><li><p>我们使用ST-LINK仿真器下载程序。</p></li></ol><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=NWRmMjk5NTQwMmUwZTliODYxM2MzN2RhZGU0NTc5OTBfVlJzNG5SR3Vza3Jxd2F0OEVhZ1Q5OFdIajJJVURUWlRfVG9rZW46QXphZ2J5SEZ2b0NsZDZ4M2F0N2NxUUM4bjdtXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><ol><li>Keil的安装目录下自带了ST-LINK的USB驱动，双击安装即可。</li></ol><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=ODRmY2EwNDBlMWYwZjYxMGQ4NzcwMjliOTUzYjgwMjdfV1ZUZXF5S1NCcmJMeXJaUm5FbFpmb3RwSnhPdW9SSlRfVG9rZW46RUdDdmJpeTNzb2IwQVh4bHpaOGNoMVhWblVjXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><ol><li>升级STLink固件</li></ol><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=ZDAxMzY1M2NhNWI5OWRiM2EzMGIzNzlkZWUwMjkzZjNfY1ZUT2lrVVZ4bFNjZUdSa3dreHd2U2pQV1h6SkJxVTBfVG9rZW46V0xseWJkcWNFb0NONkd4bUZCdWNNcWtHbmRiXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=NTY2Yjg0MjI3YWUwNjdkNTc4NzJjZDZmOTkwZjllNDRfcjZGUFg2YUw4MmI0ZDZSdGZ4NWx3ZDljNTJDVnFYcUpfVG9rZW46VFFnV2J5WUxkb2thZWp4VDlVZGNzWmVFbmNDXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=MzcwMDNkZThmZTUyOTEyZDYyOTYxYjk2YmNlZDMwMDdfR0FWbFdJa0FJT2lscTg2SGhqTHZ4ZUlXdFVTc3BVV2NfVG9rZW46V1FQcGI3dnZ4bzQ5bk94a3duZ2NYUGdzbmViXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=NjhlZDNlOGNkN2MzMTcyZWFlMjJhYzcwMmUwNGIwMTBfb1NxUndHYnpFa0w1RFVPZTZZMExTemJsOVAxOUtpaTJfVG9rZW46TWNrSmJRWmxsbzBzRmJ4eVZXNmNPZDNLbnNiXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=YjEyYzU0ZWM1NDBjY2FiMWQ0MDVmOTM4OTc5MGYzY2ZfSFo2dWI2dDNWU2c5WVdmakFzZlpjY1lJbWE3UFIyTXdfVG9rZW46VDNlcGJ4dEhEb2R5Q1F4TzFkNGNDVjNjbk9mXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><ol><li><h3 id="Keil中配置ST-LINK"><a href="#Keil中配置ST-LINK" class="headerlink" title="Keil中配置ST-LINK"></a>Keil中配置ST-LINK</h3></li></ol><p>还需要在Keil软件中，对仿真器做一些必要的配置。</p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=YjM2NDRhMzNkYzU3ODcyMGIxMzUyNTM1YzZhZGIwNTVfbUpiRUZTenVKcEljQ1A1V3FiSllqcG1JaHVwRFBaNGpfVG9rZW46VE1ya2JRU1pzb0cxNDJ4YXBtbWNxTUZBbnJOXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=YjY0MjhjN2IxYjRlMjA2NDk3OGQzODcyMjZhYmQwNjNfQlE3OU1IMGdvRTA1dG9OR2pkbUVvVnlhUXFncm5ScGJfVG9rZW46QU5ERmJ0Y1Bxb0V3SXd4UDBzbmNEbGttbklaXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=ZmFkZjY2NmNlMGEwMWEwYzAyMzExNGQzNWY4MDQ3NjZfcWRTckk0T2t3U1JiRWpqSkRWNldrUzBUazNkSFhDYnNfVG9rZW46VHV2UGJLZHVjb0dWc254WEhUaWM0dkF5bktjXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=OTVkNzA5ODNiZTliMjMyN2JjNjgwYjhkMThkNzhhZjVfVmxsRlFGWkxZSk1Ed1BielpueGlqMzdXWHZiMlZqMVVfVG9rZW46WWlyS2JNQnlXbzlVRmV4Z1F0TmNXSEUyblljXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><ol><li><h3 id="下载程序"><a href="#下载程序" class="headerlink" title="下载程序"></a>下载程序</h3></li></ol><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=MTQ0OTA3NjVlMTEzMzI1NTdhYTA5MTI1YWM0YWI4M2VfYURRN0Jnb1hCdnA5ZXpRdW9mR1VTbEZaQ1lTUUx4eTdfVG9rZW46RmNTU2JpNXdub29rNHp4UFdHT2NNZzMxblFnXzE3MjUzNjY0NTQ6MTcyNTM3MDA1NF9WNA" alt="img"></p><ol><li><h3 id="操作寄存器方式的”进化”"><a href="#操作寄存器方式的”进化”" class="headerlink" title="操作寄存器方式的”进化”"></a>操作寄存器方式的”进化”</h3></li><li><h4 id="“进化1”"><a href="#“进化1”" class="headerlink" title="“进化1”"></a>“进化1”</h4></li></ol><p>在操作寄存器的时候，如果每次都查手册计算地址，是相当麻烦且无聊。 ST公司早就考虑到了这个问题，已经提前把每个外设寄存器的地址提前给我们用<strong>宏定义</strong>的方式给算好了，我只需要直接使用即可。 比如下面是定义的RCC各个寄存器地址。 （stm32f10x.h中定义）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> PERIPH_BASE                ((uint32_t)0x40000000)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AHBPERIPH_BASE             (PERIPH_BASE +0x20000)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RCC_BASE                   (AHBPERIPH_BASE +0x1000)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RCC                        ((RCC_TypeDef*) RCC_BASE)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    __IO <span class="type">uint32_t</span> CR;</span><br><span class="line">    __IO <span class="type">uint32_t</span> CFGR;</span><br><span class="line">    __IO <span class="type">uint32_t</span> CIR;</span><br><span class="line">    __IO <span class="type">uint32_t</span> APB2RSTR;</span><br><span class="line">    __IO <span class="type">uint32_t</span> APB1RSTR;</span><br><span class="line">    __IO <span class="type">uint32_t</span> AHBENR;</span><br><span class="line">    __IO <span class="type">uint32_t</span> APB2ENR;</span><br><span class="line">    __IO <span class="type">uint32_t</span> APB1ENR;</span><br><span class="line">    __IO <span class="type">uint32_t</span> BDCR;</span><br><span class="line">    __IO <span class="type">uint32_t</span> CSR;</span><br><span class="line">&#125; RCC_TypeDef;</span><br></pre></td></tr></table></figure><p>这里还巧妙的运用了<strong>结构体中各个成员地址是连续的特征</strong>。 CR寄存器是RCC第0个32位寄存器，所以它相对于基地址的偏移是0。 CFGR相对于基地址的偏移是4，…</p><p>APB2ENR的相对于基地址的偏移是6*4=24=0x18，和我们前面查找手册的结果是一致的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    RCC-&gt;APB2ENR = <span class="number">4</span>;</span><br><span class="line">    GPIOA-&gt;CRL = <span class="number">3</span>;</span><br><span class="line">    GPIOA-&gt;ODR = <span class="number">0xfffe</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样写起来是不是可读性就好很多了，而且也简单了很多。</p><ol><li><h4 id="“进化2”"><a href="#“进化2”" class="headerlink" title="“进化2”"></a>“进化2”</h4></li></ol><p>其实在上面的代码中还有一些问题。 在STM32中一个寄存器是32位的，我们在编写代码的时候只是需要给某位或某几位赋值。 由于STM32不支持位寻址，所以在前面的操作中，我们其实是修改了所有位。 这是非常不合理的，也许其他位在其他地方有赋值，我们重新赋值势必会覆盖了其他值，带来的后果也是很严重的。</p><p>如何只修改特定的位的值，而不影响其他位呢？ 我们需要先回顾下一些常见的位操作，再来继续进化上面的代码。</p><ol><li>常用的一些位操作回顾</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;stdlib.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> buffer[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printfBinary</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *op, <span class="type">unsigned</span> <span class="type">char</span> result)</span></span><br><span class="line">&#123;</span><br><span class="line">    itoa(result, buffer, <span class="number">2</span>); <span class="comment">// 把result转成2进制字符串</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s = %s\r\n&quot;</span>, op, buffer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 左移 8&lt;&lt;1 = 1000&lt;&lt;1 = 10000*/</span></span><br><span class="line">    printfBinary(<span class="string">&quot;8 &lt;&lt; 1&quot;</span>, <span class="number">8</span> &lt;&lt; <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 右移 8&gt;&gt;1 = 1000&gt;&gt;1 = 100*/</span></span><br><span class="line">    printfBinary(<span class="string">&quot;8 &gt;&gt; 1&quot;</span>, <span class="number">8</span> &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 按位或 8|7 = 1000|0111 = 1111 */</span></span><br><span class="line">    printfBinary(<span class="string">&quot;8 | 7&quot;</span>, <span class="number">8</span> | <span class="number">7</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 按位或 8&amp;7 = 1000&amp;0111 = 0000 */</span></span><br><span class="line">    printfBinary(<span class="string">&quot;8 &amp; 7&quot;</span>, <span class="number">8</span> &amp; <span class="number">7</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 按位取反 ~8 = ~1000 = 0111 */</span></span><br><span class="line">    printfBinary(<span class="string">&quot;~8&quot;</span>, ~<span class="number">8</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        把某位置 1  (0 位 1位 ...)</span></span><br><span class="line"><span class="comment">            比如把 mum 的第 2 位置 1</span></span><br><span class="line"><span class="comment">                1. 得到一个数第 2 位是 1 其他都为 0</span></span><br><span class="line"><span class="comment">                   a =  0000 0100  是由 1&lt;&lt;2 得到</span></span><br><span class="line"><span class="comment">                2. 让 num | a</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    printfBinary(<span class="string">&quot;8置第 2 位为 1 &quot;</span>, <span class="number">8</span> | (<span class="number">1</span> &lt;&lt; <span class="number">2</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        把连续的多位同时置 1  (0 位 1位 ...)</span></span><br><span class="line"><span class="comment">            比如把 mum 的第 1和2 位置 1</span></span><br><span class="line"><span class="comment">                1  a =  3 &lt;&lt; 1</span></span><br><span class="line"><span class="comment">                2. num | a</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    printfBinary(<span class="string">&quot;8置第 1和2 位为 1 &quot;</span>, <span class="number">8</span> | (<span class="number">3</span> &lt;&lt; <span class="number">1</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        把某位置 0  (0位 1位 ...)</span></span><br><span class="line"><span class="comment">            比如把 mum 的第 2 位置 0</span></span><br><span class="line"><span class="comment">                1. 得到一个数第 2 位是 0 其他都为 1</span></span><br><span class="line"><span class="comment">                   a =  1111 0100  是由 ~(1&lt;&lt;2) 得到</span></span><br><span class="line"><span class="comment">                2. 让 num &amp; a</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    printfBinary(<span class="string">&quot;7置第 2 位为 0 &quot;</span>, <span class="number">7</span> &amp; ~(<span class="number">1</span> &lt;&lt; <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        把连续多位同时置 0  (0位 1位 ...)</span></span><br><span class="line"><span class="comment">            比如把 mum 的第 1和2 位置 0</span></span><br><span class="line"><span class="comment">                1. a = ~(3&lt;&lt;1)</span></span><br><span class="line"><span class="comment">                2. 让 num &amp; a</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    printfBinary(<span class="string">&quot;7置第 1和2 位为 0 &quot;</span>, <span class="number">7</span> &amp; ~(<span class="number">3</span> &lt;&lt; <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        把连续的多位同时置位  101 (二进制)</span></span><br><span class="line"><span class="comment">            比如把 mum 的第 1,2,3 位置为 101</span></span><br><span class="line"><span class="comment">            1. num的 1,2,3位置为0</span></span><br><span class="line"><span class="comment">                num &amp;= ~(7&lt;&lt;1)</span></span><br><span class="line"><span class="comment">            2. num |= (5 &lt;&lt; 1);    (5 = 101)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> num = <span class="number">13</span>;</span><br><span class="line">    num &amp;= ~(<span class="number">7</span> &lt;&lt; <span class="number">1</span>);</span><br><span class="line">    num |= <span class="number">5</span> &lt;&lt; <span class="number">1</span>;</span><br><span class="line">    printfBinary(<span class="string">&quot;13&quot;</span>, <span class="number">13</span>);</span><br><span class="line">    printfBinary(<span class="string">&quot;10的123位置为101 &quot;</span>, num);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>继续进化</li></ol><p>根据前面基本位操作的回顾，我们综合使用这些位操作，可以把代码进化为下面的形式。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 开启GPIOA的时钟 第2位置1*/</span></span><br><span class="line">    RCC-&gt;APB2ENR |= <span class="number">0x1</span> &lt;&lt; <span class="number">2</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* GPIOA_CRL的最后4位置 0011 */</span></span><br><span class="line">    GPIOA-&gt;CRL &amp;= ~(<span class="number">0x1</span> &lt;&lt; <span class="number">3</span>);</span><br><span class="line">    GPIOA-&gt;CRL &amp;= ~(<span class="number">0x1</span> &lt;&lt; <span class="number">2</span>);</span><br><span class="line">    GPIOA-&gt;CRL |= <span class="number">0x1</span> &lt;&lt; <span class="number">1</span>;</span><br><span class="line">    GPIOA-&gt;CRL |= <span class="number">0x1</span> &lt;&lt; <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* GPIOA_ODR的第0位置0 */</span></span><br><span class="line">    GPIOA-&gt;ODR &amp;= ~(<span class="number">0x1</span> &lt;&lt; <span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h4 id="“进化3”"><a href="#“进化3”" class="headerlink" title="“进化3”"></a>“进化3”</h4></li></ol><p>在上次的进化中，我们是给寄存器“或等”和“与等”了一些值，这些值都是通过相应的“移位”操作得到的。 比如要操作第2位，就需要把0x1左移2位得到。 我们需要查找手册才能知道要移位几。 也是很不方便。</p><p>其实ST公司也把我们需要的<strong>移位后的值给提前计算好</strong>了，用宏定义的方式供我们使用。</p><p>比如前面的开启时钟，已经定义了好了这个值。 正好就是1&lt;&lt;2</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span>    RCC_APB2ENR_IOPAEN        ((uint32_t)0x00000004)</span></span><br></pre></td></tr></table></figure><p>利用ST公司提前预定义的这些值，可以进一步进化代码为下面的形式。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    RCC-&gt;APB2ENR |= RCC_APB2ENR_IOPAEN;</span><br><span class="line">    </span><br><span class="line">    GPIOA-&gt;CRL &amp;= ~GPIO_CRL_CNF0_1;</span><br><span class="line">    GPIOA-&gt;CRL &amp;= ~GPIO_CRL_CNF0_0;</span><br><span class="line">    GPIOA-&gt;CRL |= GPIO_CRL_MODE0_1;</span><br><span class="line">    GPIOA-&gt;CRL |= GPIO_CRL_MODE0_0;</span><br><span class="line"></span><br><span class="line">    GPIOA-&gt;ODR &amp;= ~GPIO_ODR_ODR0;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样可读性就好多了，等操作熟练之后，很多操作不查找寄存器手册也能直接操作了。</p><ol><li><h1 id="GPIO外设"><a href="#GPIO外设" class="headerlink" title="GPIO外设"></a>GPIO外设</h1></li><li><h2 id="GPIO概述"><a href="#GPIO概述" class="headerlink" title="GPIO概述"></a>GPIO概述</h2></li></ol><p>GPIO<strong>（General-purpose </strong> <strong>input</strong> <strong>/</strong> <strong>output</strong> <strong>）</strong> ，通用型输入输出。 简单理解就是我们可以<strong>控制输入输出</strong>的STM32引脚，统称为GPIO。</p><p>GPIO存在的意义就是<strong>用程序控制或读取</strong>他们的<strong>输出或输入</strong>。</p><ol><li><h3 id="GPIO总体说明"><a href="#GPIO总体说明" class="headerlink" title="GPIO总体说明"></a>GPIO总体说明</h3></li></ol><p>STM32有多组GPIO，比如我们使用的芯片：STM32F103ZET6共有<strong>7组GPIO</strong> <strong>端口</strong> ，他们分别是 <strong>GPIOx（x从A-G）</strong> ，<strong>每组控制16个引脚，\</strong>共有*<em>112<strong>个GPIO引脚。 具体一个其他STM32芯片有多少组GPIO，可以去查看他们的对应的</strong>数据手册*</em>。</p><p>每个引脚的电平是 <strong>0-3.3V</strong> ，部分引脚最高可以兼容到 <strong>5V</strong> 。</p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=NGNhYTdiN2I2NGIxNTViMWYwNTE4NWQ2YmE1ZDhiODBfejZyNGxlc1I1QjRkMGh3anBXc1ZPWmlwdWo4cU1Kcm5fVG9rZW46SmRRUWI0Q2NBb3pPUXV4YlR5bmNiZzFubjFjXzE3MjUzNjY5OTM6MTcyNTM3MDU5M19WNA" alt="img"></p><ol><li><h3 id="GPIO的主要特点"><a href="#GPIO的主要特点" class="headerlink" title="GPIO的主要特点"></a>GPIO的主要特点</h3></li><li><p>不同型号，IO口的数量可能不一样。</p></li><li><p>快速翻转。 最快可以达到每2个时钟周期翻转一次。 （STM32F1系列最快可以达到50MHz的翻转速度）。</p></li><li><p>每个IO都可以作为外部中断。</p></li><li><p>支持8种工作模式。</p></li><li><h3 id="GPIO的8种工作模式"><a href="#GPIO的8种工作模式" class="headerlink" title="GPIO的8种工作模式"></a>GPIO的8种工作模式</h3></li></ol><p>GPIO端口的每个位（引脚）可以由<strong>软件</strong>分别<strong>配置</strong>成8种模式，当然对同一个引脚同一时间只能处于某一种模式中。</p><ol><li><strong>输入浮空（</strong> <strong>Input</strong> <strong>floating</strong> <strong>）</strong></li><li><strong>输入上拉（</strong> <strong>Input</strong> <strong> pull-up）</strong> <strong>信号默认高电平</strong></li><li><strong>输入下拉（Input-pull-down）</strong> <strong>信号默认低电平</strong></li><li><strong>模拟输入（</strong> <strong>Analog</strong> <strong>）</strong></li><li><strong>通用开漏式输出（</strong> <strong>Output**</strong> open-drain）**</li><li><strong>通用推挽式输出（</strong> <strong>Output**</strong> push-pull）**</li><li><strong>复用推挽式功能（Alternate function push-pull）</strong></li><li><strong>复用开漏式功能（Alternate function open-drain）</strong></li></ol><p>每个I/O端口位可以自由编程，然而I/0端口寄存器必须按<strong>32位字</strong>被访问。</p><p><strong>输出模式</strong>下可以<strong>控制\</strong>**端口**<em>\</em>输出**高电平低电平，用于驱动LED，蜂鸣器等，如果是大功率器件（比如电机），还需要加上驱动器（小电流控制大电流）。</p><p><strong>输入模式</strong>下可以<strong>读取\</strong>*<em>端口*</em>的高低电平，用于读取外接按键，外接模拟信号的输入，ADC电压采集，模拟通信协议接受数据等。</p><ol><li><h2 id="GPIO工作模式"><a href="#GPIO工作模式" class="headerlink" title="GPIO工作模式"></a>GPIO工作模式</h2></li><li><h3 id="GPIO每位的具体电路结构"><a href="#GPIO每位的具体电路结构" class="headerlink" title="GPIO每位的具体电路结构"></a>GPIO每位的具体电路结构</h3></li></ol><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=YjcwNTkzYjU1YjFkM2MxNzE2MDVlMGYyODk4YjNhNTBfeVluQWVGZjEwRWRrQ2EzNnhkM2dhTXA1U2JLMmJCcTVfVG9rZW46UnRnRGJhS1BJb3NEeXJ4TEpYOGNjd3dibllnXzE3MjUzNjY5OTM6MTcyNTM3MDU5M19WNA" alt="img"></p><ol><li><h3 id="每种模式详解"><a href="#每种模式详解" class="headerlink" title="每种模式详解"></a>每种模式详解</h3></li><li><h4 id="输出模式"><a href="#输出模式" class="headerlink" title="输出模式"></a>输出模式</h4></li><li><p><strong>输出\</strong>**缓冲器**<em>\</em>被激活。**</p></li><li><p><strong>推挽模式：输出寄存器上的 1 将激活P-MOS，输出高电平。 0 将激活N-MOS，输出低电平。</strong></p></li><li><p><strong>开漏模式：P-MOS永远关闭。 输出寄存器上的 0 激活N-MOS，而输出寄存器上的 1 将\</strong>**端口**<em>\</em>置于高阻状态，所以外部必须要接*<em>\</em>*上拉电阻**<em>\</em>。**</p></li><li><p><strong>施密特触发输入被激活。</strong></p></li><li><p><strong>弱上拉和下拉电阻被禁止。</strong></p></li><li><p><strong>出现在\</strong>**I/O**<em>\</em>脚上的数据在每个APB2时钟被采样到输入数据寄存器。**</p></li><li><p><strong>在开漏模式时，对输入数据寄存器的读访问可得到\</strong>**I/O**<em>\</em>状态。**</p></li><li><p><strong>在推挽模式时，对输出数据寄存器的读访问得到最后一次写的值。</strong></p></li><li><h4 id="复用输出模式"><a href="#复用输出模式" class="headerlink" title="复用输出模式"></a>复用输出模式</h4></li></ol><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=ZmZmZDdlZGVkY2VlNTQ2YjExOTMwYTZmMGNjNDM2MzVfRTZ6dDR6ZkRDeFQ0bWdPV3cwSWhhT1lWUUxLRlp5eE1fVG9rZW46WFM0RmJnS1dyb2NPU0N4WHJjR2NJQlhtbnBnXzE3MjUzNjY5OTM6MTcyNTM3MDU5M19WNA" alt="img"></p><ol><li><p><strong>在开漏或推挽式配置中，输出\</strong>**缓冲器**<em>\</em>被打开。**</p></li><li><p><strong>内置外设的信号驱动输出\</strong>**缓冲器**<em>\</em>（复用功能输出）。**</p></li><li><p><strong>施密特触发输入被激活。</strong></p></li><li><p><strong>弱上拉和下拉电阻被禁止。</strong></p></li><li><p><strong>在每个APB2\</strong>**时钟周期**<em>\</em>，出现在*<em>\</em>*I/O**<em>\</em>脚上的数据被采样到输入数据寄存器。**</p></li><li><p><strong>开漏模式时，读输入数据寄存器时可得到\</strong>**I/O**<em>\</em>口状态。**</p></li><li><p><strong>在推挽模式时，读输出数据寄存器时可得到最后一次写的值。</strong></p></li><li><h4 id="输入模式"><a href="#输入模式" class="headerlink" title="输入模式"></a>输入模式</h4></li></ol><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=YTBhNGVlOGRkZGI1N2Q5MzEzMmJkYmFhMjAyYWQyN2RfVnhHTk1RVWNCNHJJSFhMYkxkRmxsV0YwQ2xmMjFSbTlfVG9rZW46VU9aNmJVeHR0bzVLUVZ4R3RETWNIdWNKbjlkXzE3MjUzNjY5OTM6MTcyNTM3MDU5M19WNA" alt="img"></p><ol><li><strong>2个保护\</strong>**二极管**<em>\</em>的作用是保护我们的芯片不会由于电压过高或过低而烧毁。**</li></ol><p>VDD是接电源（3.3V），VSS接地（0V）。如果IO引脚的输入电压高于VDD的值到一定程度，上方保护二极管导通，则引脚电压被拉低到VDD。如果IO引脚的输入电压（负电压）低于VSS到一定程度，则下方保护二极管导通，电压被拉高到VSS。</p><ol><li>2个开关控制引脚没有输入的时候是上拉，下拉还是浮空。</li></ol><p>当上面的开关闭合的时候，输入被拉高到高电平。当下面的开关闭合的时候，入被拉低到低电平。如果两个都不闭合，输入就是悬空状态。 <strong>两个同时闭合，就是费电了，不会这么做的</strong> 。</p><ol><li>施密特（图中翻译成肖特基触发器应该是翻译错误，英文版手册是TTL Schmitt trigger）触发器是包含正反馈的比较器电路。可以对信号进行波形整形。</li></ol><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=NGY1M2U5MzdmYTVjYmE3NDdkZjc2NTcwODUwMjg2MjlfbDdyVGhtTzJDUWZuV2VabHo0UDVxNk9LMFJHelAydXdfVG9rZW46UlluamJneFdkb1JGcXl4VkNoNmNvMHFibnZPXzE3MjUzNjY5OTM6MTcyNTM3MDU5M19WNA" alt="img"></p><ol><li><p>从施密特触发起出来的数据，进入到输入数据寄存器中，我们就可以从中读取数据了。</p></li><li><h4 id="模拟输入模式"><a href="#模拟输入模式" class="headerlink" title="模拟输入模式"></a>模拟输入模式</h4></li></ol><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=ZmI0NTAzOWJhODUwOGRlNGVhODg3NjUwOGE5YzczZGVfN0xoRTROYU9mU0VvTkh0a2gxMm1XYzFEWEV6NXJqbmhfVG9rZW46UjUxVGJEY2Q0b2Q2Tmt4WG55MmNrblhCbmplXzE3MjUzNjY5OTM6MTcyNTM3MDU5M19WNA" alt="img"></p><p>当配置为<strong>模拟输入</strong>时：</p><ol><li><p>输出部分被禁止。</p></li><li><p><strong>禁止施密特触发输入</strong>，实现了每个模拟I/O引脚上的零消耗。施密特触发输出值被强置为0，此时也可以不用开启对应GPIO的时钟。</p></li><li><p>弱上拉和下拉电阻被禁止。</p></li><li><p>读取输入数据寄存器时数值永远为0。</p></li><li><h2 id="与GPIO相关的7个寄存器（重要）"><a href="#与GPIO相关的7个寄存器（重要）" class="headerlink" title="与GPIO相关的7个寄存器（重要）"></a>与GPIO相关的7个寄存器（重要）</h2></li></ol><p>每个GPI/O端口有7个相关的：</p><ul><li>2个32位配置寄存器 <strong>（GPIOx_CRL，GPIOx_CRH）</strong> 。</li><li>2个32位数据寄存器 <strong>（GPIOx_IDR和GPIOx_ODR）</strong> 。</li><li>1个32位置位/复位寄存器 <strong>（GPIOx_BSRR）</strong> 。</li><li>1个16位复位寄存器 <strong>（GPIOx_BRR）</strong> 。</li><li>1个32位锁定寄存器 <strong>（GPIOx_LCKR）</strong> 。</li></ul><ol><li><h3 id="GPIOx-CRL（端口配置低寄存器）"><a href="#GPIOx-CRL（端口配置低寄存器）" class="headerlink" title="GPIOx_CRL（端口配置低寄存器）"></a>GPIOx_CRL（端口配置低寄存器）</h3></li></ol><p><strong>GPIOx_CRL（Port configuration register low）</strong> ，<strong>x</strong>可以是 <strong>A-G</strong> 。</p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=OGJjMmYzOGNiYzNhOTBiOWU2MmU0ZTc3MWYxNDBmMTdfRDVNZXhYeXQ4d2J4Z1BnOWdYMmdaMjZzZHcweUV6T0pfVG9rZW46SlpzT2JVVzVBb0hJZ3J4Y1BCVWNtNGlUbldiXzE3MjUzNjY5OTM6MTcyNTM3MDU5M19WNA" alt="img"></p><p>该寄存器配置的每个GPIO的 0-7 这个8个位，所以叫低寄存器。</p><ol><li><p>MODE：每个端口有2个MODE位进行控制。</p><ol><li>00：输入模式（复位后的状态）</li><li>01：输出模式，最大速度10MHz</li><li>10：输出模式，最大速度2MHz</li><li>11：输出模式，最大速度50MHz</li></ol></li><li><p>CNF：每个端口有2个CNF位进行控制。</p><ol><li>当MODE是00 （输入模式）<ol><li>00：模拟输入模式</li><li>01：浮空输入模式(复位后的状态)</li><li>10：上拉/下拉输入模式</li><li>11：保留</li></ol></li><li>当MODE&gt;00（输出模式）<ol><li>00：通用推挽输出模式</li><li>01：通用开漏输出模式</li><li>10：复用功能推挽输出模式</li><li>11：复用功能开漏输出模式</li></ol></li></ol></li><li><h3 id="GPIOx-CRH（端口配置高寄存器）"><a href="#GPIOx-CRH（端口配置高寄存器）" class="headerlink" title="GPIOx_CRH（端口配置高寄存器）"></a>GPIOx_CRH（端口配置高寄存器）</h3></li></ol><p><strong>GPIOx_CRH（Port configuration register high）</strong> 。</p><p>该寄存器配置的是每个端口的 8-15引脚，配置方式和低位寄存器完全一样。</p><ol><li><h3 id="GPIOx-IDR（端口输入数据寄存器）"><a href="#GPIOx-IDR（端口输入数据寄存器）" class="headerlink" title="GPIOx_IDR（端口输入数据寄存器）"></a>GPIOx_IDR（端口输入数据寄存器）</h3></li></ol><p><strong>Port**</strong> i<strong><em>*nput </em></strong>*d*<strong><em>ata </em></strong>*r*<strong>*egister</strong></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=ZDE1MzIwMDYxMDEyNDMzZjQzZmZhOWM3OTA5NGZkZDFfQ0liWGpZbVFsaGdEdDIzQmZBQkNpRkJvN2VpZW1oajBfVG9rZW46WE4yOWJjT0hHb1JpT3B4TW1NWGMzM2NNblJiXzE3MjUzNjY5OTM6MTcyNTM3MDU5M19WNA" alt="img"></p><p>保留位始终读为0。剩下的分别对应每个引脚的输入值。</p><ol><li><h3 id="GPIOx-ODR（端口输出数据寄存器）"><a href="#GPIOx-ODR（端口输出数据寄存器）" class="headerlink" title="GPIOx_ODR（端口输出数据寄存器）"></a>GPIOx_ODR（端口输出数据寄存器）</h3></li></ol><p><strong>Port \</strong>**o**<em>\</em>utput *<em>\</em>*d**<em>\</em>ata *<em>\</em>*r**<em>\</em>egister**</p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=MDAxYmNjOTE0NGEwNWM1ODRjNjVjNzc2NGM0NTRiMDBfa0NyTGNVTG1ST01JaGRld1NOZVFTc05DNlRnQzdKVGFfVG9rZW46TWcyTGJGdWVpb3dCRnd4VWIzaWNINnRCbkdiXzE3MjUzNjY5OTM6MTcyNTM3MDU5M19WNA" alt="img"></p><p>保留位始终读为0。剩下的分别对应每个引脚的输出值。</p><ol><li><h3 id="GPIOx-BSRR（端口位设置-清除寄存器）"><a href="#GPIOx-BSRR（端口位设置-清除寄存器）" class="headerlink" title="GPIOx_BSRR（端口位设置/清除寄存器）"></a>GPIOx_BSRR（端口位设置/清除寄存器）</h3></li></ol><p><strong>Port \</strong>**b**<em>\</em>it *<em>\</em>*s** **et/** **r*<em>*<em>eset *</em>\</em>*r**<em>\</em>egister**</p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=MGE3OGVjODMxNGI3NTMwOWM3Zjg3ZGVlMzE1NmI1YjFfS3kyenpOVUNadWJBWDE3MndoRmZQNVJQa3ZBT25IdzZfVG9rZW46VndLa2JFdzJKbzVGNWp4S3VwWWNrTVpjbmtjXzE3MjUzNjY5OTM6MTcyNTM3MDU5M19WNA" alt="img"></p><ol><li><p>高16位是用清除对应的数据输出寄存器的位（0-15）的值：设置为0不影响，设置为1会清除ODR对应的位的值（置为0）。</p></li><li><p>低16位是用设置对应的数据输出寄存器的位（0-15）的值：设置为0不影响，设置为1会设置ODR对应的位的值（置为1）。</p></li><li><h3 id="GPIOx-BRR（端口位清除寄存器）"><a href="#GPIOx-BRR（端口位清除寄存器）" class="headerlink" title="GPIOx_BRR（端口位清除寄存器）"></a>GPIOx_BRR（端口位清除寄存器）</h3></li></ol><p>这个寄存器具有了 <strong>GPIOx_BSRR一半的功能：清除</strong> 。</p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=NjAxY2UyM2NjNTk3MmE2Y2E4YzJlMDNiNDZmMGU2YTJfRHo5bUJEd01rVU1ySjdSMnA4T0R4Nmtra0xyOUNsbWpfVG9rZW46Qm1FSWJaV0JTb04zWmZ4T2E3dGNtSE5TbkZiXzE3MjUzNjY5OTM6MTcyNTM3MDU5M19WNA" alt="img"></p><ol><li><h3 id="GPIOx-LCKR（端口配置锁定寄存器）"><a href="#GPIOx-LCKR（端口配置锁定寄存器）" class="headerlink" title="GPIOx_LCKR（端口配置锁定寄存器）"></a>GPIOx_LCKR（端口配置锁定寄存器）</h3></li></ol><p><strong>端口配置 \</strong>**l**<em>\</em>o*<em>\</em>*ck**<em>\</em>r*<em>*<em>**egister</em></em></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=YzQwMmQyMDUyYTlmZmIyNzE3YmViZmEzODI5OGQyNTNfd295ekVxOVd0VTFwWGpGVHFxbkdvam1wVFViUGtlb2xfVG9rZW46REY2dGI0ckdIb2pTTVh4OWs3WmNaeVIxblBnXzE3MjUzNjY5OTM6MTcyNTM3MDU5M19WNA" alt="img"></p><p>该寄存器用来锁定端口位的配置。 位[15:0]用于锁定GPIO端口的配置。 在规定的写入操作期间，不能改变LCKP[15:0]。 当对相应的端口位执行了LOCK序列后，在下次系统复位之前将不能再更改端口位的配置。</p><p>每个锁定位锁定控制寄存器（CRL，CRH）中相应的4个位（CNF2位和MODE2位）。</p><p>第16位用来激活锁定寄存器，必须按照规定的时序来操作才行: 写1 -&gt; 写0 -&gt; 写1 -&gt; 读0 -&gt; 读1。</p><p>对0-15位：</p><ul><li>0：不锁定对应端口的配置。</li><li>1：锁定对应端口的配置。</li></ul><ol><li><h2 id="GPIO案例：流水灯"><a href="#GPIO案例：流水灯" class="headerlink" title="GPIO案例：流水灯"></a>GPIO案例：流水灯</h2></li><li><h3 id="需求描述-1"><a href="#需求描述-1" class="headerlink" title="需求描述"></a>需求描述</h3></li></ol><p>在3个LED上实现流水灯效果。</p><ol><li><h3 id="硬件电路设计-1"><a href="#硬件电路设计-1" class="headerlink" title="硬件电路设计"></a>硬件电路设计</h3></li></ol><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=NzJhNGQ1ZTk1ZTllNGUwODMzMDJmOGY1MmY0Y2FlNDRfWHpPbXhBYUxwd1RteHlMWkJUZU9GcDk1N0RwNWdhNmJfVG9rZW46V1dyMGJHTEIxb2xTTER4TWF0emNFQWtTbmpmXzE3MjUzNjY5OTM6MTcyNTM3MDU5M19WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=YzBhN2Q5MDdlMmJjMDVmMzgyOGJjODk4NzZlMDA3MjhfVzNvclQ0VG5zMzJMMnUxU0tRclE2QkZ2YTZGNXlVaVJfVG9rZW46SGt1UmJ5YWVyb2taOGp4UVhzbmN0cllnbnhjXzE3MjUzNjY5OTM6MTcyNTM3MDU5M19WNA" alt="img"></p><ol><li><h3 id="软件设计（寄存器）"><a href="#软件设计（寄存器）" class="headerlink" title="软件设计（寄存器）"></a>软件设计（寄存器）</h3></li><li><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4></li><li><p>copy上一个项目</p></li><li><p>并做如下操作</p></li></ol><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=OTAxYjMwYWU0MjkyYjU0MzcyNjQ0Yjk5NGUzZGQ3YTJfNXdNV0JUMVVWZmYwZmU0YlU5blA4allnaEdkSGIwZjFfVG9rZW46TVhIMWJaQ2RFbzczNVZ4YVlnUmMwRWdEbk9mXzE3MjUzNjY5OTM6MTcyNTM3MDU5M19WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=NWIxMWI3MTY0ZTc0NDhiODRlOTEzMTY3Y2ViM2EwOGRfbDNSSG9QZlRqUHdCN0IwY0JGclpGeTFQMzVEZzFFNGRfVG9rZW46U0tVN2JqZGNNb0RqaTd4Z2dpTGM5bWJobnJoXzE3MjUzNjY5OTM6MTcyNTM3MDU5M19WNA" alt="img"></p><ol><li>创建一个目录： Hardware/Led 存储我们的LED驱动文件。</li><li>在 Hardware/Led下创建2个文件 led.h和led.c。</li><li>使用keil打开项目，做下简单配置。</li></ol><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=OGU0MWI0OTAyZDIxMTQyNmU0MTU0ZjVmYzAzNzE3YzZfWkhKVm5LZkF0Q21YakRGekVxN0dQYlYwVzB4VU13WnlfVG9rZW46RUo0RWIzNWFlb1dtTFl4R1pCYWN4RjlMbnplXzE3MjUzNjY5OTM6MTcyNTM3MDU5M19WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=MDg0ODRhODZlMGQzNTVjYmRhZDA4OWI0MTkxZTJmNGNfbG5uemdXbkg0eGhKY3R0QmMzS0toTDVxWnJka280WWpfVG9rZW46T3p6TGJUR3l3b3Z0ZkF4MVpBS2NKRElabmNlXzE3MjUzNjY5OTM6MTcyNTM3MDU5M19WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=ZWJjMjg2ZTZhNjhiZTIwZGQ3Y2FhMmFhZGUzZWUxYjVfVW1vUFgwbmx4ZGtZMFc1TEJiUDFVS3pMQWh2bXh1UVpfVG9rZW46UUZMZmJHRFpGb08yS094OGd5WWNuWjBabnViXzE3MjUzNjY5OTM6MTcyNTM3MDU5M19WNA" alt="img"></p><ol><li><h4 id="具体代码"><a href="#具体代码" class="headerlink" title="具体代码"></a>具体代码</h4></li><li><h5 id="main-c-1"><a href="#main-c-1" class="headerlink" title="main.c"></a>main.c</h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Driver_LED.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Delay.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint32_t</span> leds[] = &#123;LED_1, LED_2, LED_3&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 1. 初始化LED */</span></span><br><span class="line">    Driver_LED_Init();</span><br><span class="line">    Driver_LED_OffAll(leds, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">uint8_t</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            Driver_LED_OffAll(leds, <span class="number">3</span>);</span><br><span class="line">            Driver_LED_On(leds[i]);</span><br><span class="line">            Delay_ms(<span class="number">500</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        Driver_LED_OffAll(leds, <span class="number">3</span>);</span><br><span class="line">        Driver_LED_On(leds[<span class="number">1</span>]);</span><br><span class="line">        Delay_ms(<span class="number">500</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h5 id="Delay-h"><a href="#Delay-h" class="headerlink" title="Delay.h"></a>Delay.h</h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __delay_h</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __delay_h</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;stm32f10x.h&quot;</span><span class="comment">// Device header</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay_us</span><span class="params">(<span class="type">uint16_t</span> us)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay_ms</span><span class="params">(<span class="type">uint16_t</span> ms)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay_s</span><span class="params">(<span class="type">uint16_t</span> s)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><ol><li><h5 id="延迟。"><a href="#延迟。" class="headerlink" title="延迟。"></a>延迟。</h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//延时函数使用到了系统定时器，大家先使用，到提高篇时再学习具体为什么这么写。</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;delay.h&quot;</span><span class="comment">// Device header</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay_us</span><span class="params">(<span class="type">uint16_t</span> us)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 定时器重装值 */</span></span><br><span class="line">    SysTick-&gt;LOAD = <span class="number">72</span> * us;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 清除当前计数值 */</span></span><br><span class="line">    SysTick-&gt;VAL = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*设置内部时钟源（2位-&gt;1）,不需要中断（1位-&gt;0），并启动定时器(0位-&gt;1)*/</span></span><br><span class="line">    SysTick-&gt;CTRL = <span class="number">0x5</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*等待计数到0， 如果计数到0则16位会置为1*/</span></span><br><span class="line">    <span class="keyword">while</span> (!(SysTick-&gt;CTRL &amp; SysTick_CTRL_COUNTFLAG));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 关闭定时器 */</span></span><br><span class="line">    SysTick-&gt;CTRL &amp;= ~SysTick_CTRL_ENABLE; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay_ms</span><span class="params">(<span class="type">uint16_t</span> ms)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (ms--)</span><br><span class="line">    &#123;</span><br><span class="line">        Delay_us(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay_s</span><span class="params">(<span class="type">uint16_t</span> s)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (s--)</span><br><span class="line">    &#123;</span><br><span class="line">        Delay_ms(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h5 id="Driver-LED-h"><a href="#Driver-LED-h" class="headerlink" title="Driver_LED.h"></a>Driver_LED.h</h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __DRIVER_LED_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __DRIVER_LED_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED_1 GPIO_ODR_ODR0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED_2 GPIO_ODR_ODR1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED_3 GPIO_ODR_ODR8</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_Init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_On</span><span class="params">(<span class="type">uint32_t</span> led)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_Off</span><span class="params">(<span class="type">uint32_t</span> led)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_Toggle</span><span class="params">(<span class="type">uint32_t</span> led)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_OnAll</span><span class="params">(<span class="type">uint32_t</span> leds[], <span class="type">uint8_t</span> size)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_OffAll</span><span class="params">(<span class="type">uint32_t</span> leds[], <span class="type">uint8_t</span> size)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><ol><li><h5 id="Driver-LED-c"><a href="#Driver-LED-c" class="headerlink" title="Driver_LED.c"></a>Driver_LED.c</h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Driver_LED.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 对LED进行初始化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 打开GPIOA的时钟 */</span></span><br><span class="line">    RCC-&gt;APB2ENR |= RCC_APB2ENR_IOPAEN;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 2. 给用到的端口的所有 PIN (PA0 PA1 PA8) 设置工作模式: 通用推挽输出 MODE:11  CNF:00 */</span></span><br><span class="line">    GPIOA-&gt;CRL |= (GPIO_CRL_MODE0 | GPIO_CRL_MODE1);</span><br><span class="line">    GPIOA-&gt;CRL &amp;= ~(GPIO_CRL_CNF0 | GPIO_CRL_CNF1);</span><br><span class="line"></span><br><span class="line">    GPIOA-&gt;CRH |= GPIO_CRH_MODE8;</span><br><span class="line">    GPIOA-&gt;CRH &amp;= ~GPIO_CRH_CNF8;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 3. 关闭所有灯  */</span></span><br><span class="line">    Driver_LED_Off(LED_1);</span><br><span class="line">    Driver_LED_Off(LED_2);</span><br><span class="line">    Driver_LED_Off(LED_3);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 点亮指定的LED</span></span><br><span class="line"><span class="comment"> * @param &#123;uint32_t&#125; led 要点亮的LED</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_On</span><span class="params">(<span class="type">uint32_t</span> led)</span></span><br><span class="line">&#123;</span><br><span class="line">    GPIOA-&gt;ODR &amp;= ~led;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 关闭指定的LED</span></span><br><span class="line"><span class="comment"> * @param &#123;uint32_t&#125; led 要关闭的LED</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_Off</span><span class="params">(<span class="type">uint32_t</span> led)</span></span><br><span class="line">&#123;</span><br><span class="line">    GPIOA-&gt;ODR |= led;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 翻转LED的状态</span></span><br><span class="line"><span class="comment"> * @param &#123;uint32_t&#125; led 要翻转的LED</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_Toggle</span><span class="params">(<span class="type">uint32_t</span> led)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 读取引脚的电平,如果是1(目前是关闭), 打开, 否则就关闭 */</span></span><br><span class="line">    <span class="keyword">if</span> ((GPIOA-&gt;IDR &amp; led) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Driver_LED_Off(led);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        Driver_LED_On(led);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 打开数组中所有的灯</span></span><br><span class="line"><span class="comment"> * @param &#123;uint32_t&#125; leds 所有灯</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; size 灯的个数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_OnAll</span><span class="params">(<span class="type">uint32_t</span> leds[], <span class="type">uint8_t</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint8_t</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Driver_LED_On(leds[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 关闭数组中所有的灯</span></span><br><span class="line"><span class="comment"> * @param &#123;uint32_t&#125; leds 所有灯</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; size 灯的个数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_OffAll</span><span class="params">(<span class="type">uint32_t</span> leds[], <span class="type">uint8_t</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint8_t</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Driver_LED_Off(leds[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h1 id="总体架构和时钟系统"><a href="#总体架构和时钟系统" class="headerlink" title="总体架构和时钟系统"></a>总体架构和时钟系统</h1></li><li><h2 id="STM32总体架构"><a href="#STM32总体架构" class="headerlink" title="STM32总体架构"></a>STM32总体架构</h2></li></ol><p>经过一段时间的学习，我们需要从宏观上了解下它的系统架构，各个模块之间的层级关系以及相互的影响。</p><ol><li><h2 id="时钟系统"><a href="#时钟系统" class="headerlink" title="时钟系统"></a>时钟系统</h2></li><li><h3 id="时钟树"><a href="#时钟树" class="headerlink" title="时钟树"></a>时钟树</h3></li></ol><p>在STM32中有3种不同的时钟源用来驱动系统时钟(SYSCLK)：</p><ul><li>HSI振荡器时钟（High Speed Internal oscillator，高速内部时钟）</li><li>HSE振荡器时钟（High Speed External（Oscillator / Clock），高速外部时钟）</li><li>PLL时钟（Phase Locked Loop 锁相环/倍频器）</li></ul><p>还有2种2级时钟：</p><ul><li>LSI时钟（Low Speed Internal，低速内部时钟）</li><li>LSE时钟（Low Speed External oscillator，低速外部时钟）。</li></ul><p>为什么提供这么多的时钟？ <strong>节能！ </strong>高速设备接高速时钟，低速设备接低速时钟，可以最大程度的达到节能效果。 详见下图时钟树。</p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=Njc1OWQ1YzU4NjFjNTBmMTNlMGI1OWNmYjY3MmM4NjRfMFVUTDVFank2REF6RkthUWZQU3JMWEpCckMxR1lFUVRfVG9rZW46S2ZqVWJ2aktrb2U2VTV4OG5Uc2NKR0V0bnZnXzE3MjUzNjcwNjg6MTcyNTM3MDY2OF9WNA" alt="img"></p><p>可以看这个简图：</p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=YmZmOGRhOWUyNWQ3ZWRhNjA3NzkzMmI4Y2JiMjQxZDlfbGZZa3hud1BGYzlZQUxTaVd2RGRMSTZKMWdRRmwwcGxfVG9rZW46Qlk2WWJBNkcyb0NDRVl4Y05hWWNHd2EyblBDXzE3MjUzNjcwNjg6MTcyNTM3MDY2OF9WNA" alt="img"></p><p><strong>该时钟树目前不要求记住，等以后编程时，只需要时不时回头翻看即可。 代码写多了，这些知识自会烂熟于胸。</strong></p><ol><li><h3 id="各个时钟介绍"><a href="#各个时钟介绍" class="headerlink" title="各个时钟介绍"></a>各个时钟介绍</h3></li><li><p>HSE时钟</p></li></ol><p>高速外部时钟是由外部时钟源提供，目前几乎所有的STM32单片机的设计都是在外部接一个8MHz的晶振，经过PLL倍频（9倍频）后得到一个72MHz的系统时钟。 我们系统默认就是这个时钟。 这个在启动文件可以看到。</p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=NGQ4OWRlZDhlYWJhM2Q5Mjg5ODI0YmMzMjFkYTVkMmJfUHBoSFJmSmkxdnk3Q1NJdzVXT3ludGVkdjhxWWhtSFdfVG9rZW46QmVjcmJXcXdxb1Q3ak94bzVMOWNBU2habmtnXzE3MjUzNjcwNjg6MTcyNTM3MDY2OF9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=MmVkYTA4ODk1MGNkYjZhMTU3MWIxYTFlNjRkMjA2ODZfTEtTcTR0cWpFWWhXOUVvajVDNHFWdGpFVEoyaTVvZWlfVG9rZW46REgxUGJpNW8wb3RRRkt4VE1STWNtMTFMbmtnXzE3MjUzNjcwNjg6MTcyNTM3MDY2OF9WNA" alt="img"></p><ol><li>HSI时钟</li></ol><p>HSI时钟信号由内部8MHz的RC振荡器产生，可直接作为系统时钟或在2分频后作为PLL输入。 HSI RC振荡器能够在不需要任何外部器件的条件下提供系统时钟。 它的启动时间比HSE晶体振荡器短。 然而，即使在校准之后它的时钟频率<strong>精度仍较差</strong>。</p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=MmUwNTliNWEzOGVjMjE2MjAwMmI3YjVlYzU3NGQyODlfNm5LcVB3S1FwejZWU2JkU0lDaWFjckZFRmVFUlNwYTFfVG9rZW46WXlVWWJGY1hXb1NjOHd4dzVMQ2MxWWNGbkRQXzE3MjUzNjcwNjg6MTcyNTM3MDY2OF9WNA" alt="img"></p><ol><li>PLL时钟</li></ol><p>内部PLL用来倍频<strong>HSI \</strong>*<em>RC<strong>的输出时钟或</strong>HSE<strong>晶体输出时钟。 PLL的设置必须在其被激活前完成。 </strong>一旦PLL被激活，这些参数就不能被改动*</em> 。 如果PLL中断在时钟中断寄存器里被允许，当PLL准备就绪时，可产生中断申请。</p><p>PLL时钟一般都是对外部的8MHz的时钟信号经过9倍频后，得到72MHz的时钟频率，这是STM32F1系列允许的最高时钟频率。</p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=NzkwYWE5NzI1OWRmYWVjMzY4MDQ4NWEwMzBlZmYxZTlfRkloeDE5MUhBMjg0QUIxRE04U0dKOGxjdW53YWhTbGFfVG9rZW46SGJsOGJYSHN2b0dUWGh4TllRbWNzMHhvbk5oXzE3MjUzNjcwNjg6MTcyNTM3MDY2OF9WNA" alt="img"></p><ol><li>LSE时钟</li></ol><p>LSE晶体是一个32.768kHz的低速外部晶体或陶瓷谐振器。 它为实时时钟或者其他定时功能提供一个低功耗且精确的时钟源。</p><p>LSE是<strong>不能\</strong>**驱动系统**<em>\</em>时钟**的。</p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=ZTFkYzc4MjE1YmMxMDNjODZkNmZkNTQwNGMwZDZlN2JfVGF4aGFzc2xyanFoOHRRRU5NVWY5RVlSMmEwdFJIN3dfVG9rZW46QWJZMWJqaGs1b2FSTEp4Nm5qbGMyOTVNbkpmXzE3MjUzNjcwNjg6MTcyNTM3MDY2OF9WNA" alt="img"></p><ol><li>LSI时钟</li></ol><p>LSI RC担当一个低功耗时钟源的角色，它可以在停机和待机模式下保持运行，为独立看门狗和自动唤醒单元提供时钟。 LSI时钟频率大约40kHz（在30kHz和60kHz之间）。</p><p>LSI也是<strong>不能\</strong>**驱动系统**<em>\</em>时钟**的。</p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=MDFhYzc0NmRkNWY1YmM1NGFkNTkwMjY3NjIxNzkwODlfQlRYSjVFVjZMb0MwTFpBQXVpdDY5dXpaZjdjTXNsUHZfVG9rZW46VkZ1dGIyTVdqb0ZMNkV4SDdtcWNmQ21tbkloXzE3MjUzNjcwNjg6MTcyNTM3MDY2OF9WNA" alt="img"></p><ol><li><h1 id="HAL库开发入门"><a href="#HAL库开发入门" class="headerlink" title="HAL库开发入门"></a>HAL库开发入门</h1></li><li><h2 id="HAL介绍"><a href="#HAL介绍" class="headerlink" title="HAL介绍"></a>HAL介绍</h2></li><li><p>为什么要学习HAL库开发</p></li></ol><p>到目前我们已经学会1种开发SMT32程序的姿势：基于寄存器开发。</p><p>寄存器开发效率比较低，在工作中如果想<strong>快速开发</strong>还是要会用到HAL库开发。</p><p>HAL库是目前ST主力推广的开发方式，所以你如果还<strong>要用ST的芯片</strong>，会使用HAL库开发是势在必行的。 而且最最关键的是，使用HAL开发有诸多的好处。</p><p>目前，HAL库已经支持STM32全线产品。</p><ol><li>什么是HAL库</li></ol><p>HAL库的全称是Hardware Abstraction Layer，翻译成<strong>硬件抽象层</strong>。 HAL库是ST为STM32最新推出的抽象层嵌入式软件，可以更好的确保跨STM32产品的最大可移植性。 该库提供了一整套一致的中间件组件，如RTOS，USB，TCP/IP和图形等。</p><p>HAL库是基于一个非限制性的BSD许可协议（Berkeley Software Distribution）而发布的开源代码。 ST制作的中间件堆栈（USB主机和设备库，STemWin）带有允许轻松重用的许可模式，只要是在ST公司的MCU 芯片上使用，库中的中间件(USB 主机/设备库,STemWin)协议栈即被允许随便修改，并可以反复使用。 至于基于其它著名的开源解决方案商的中间件（FreeRTOS，FatFs，LwIP和PolarSSL）也都具有友好的用户许可条款。</p><ol><li>CMSIS和HAL库的关系</li></ol><p><strong>CMSIS</strong> <strong>（</strong> <strong>Cortex Microcontroller Software Interface Standard</strong> <strong>）</strong> 是 Cortex-M 处理器系列的与供应商无关的硬件抽象层。 它是ARM公司制定的一个标准。 它可以为处理器和外设实现一致且简单的软件接口，从而简化软件的重用、缩短微控制器新开发人员的学习过程，并缩短新设备的上市时间。 简单来说，就是ARM公司制定标准，芯片厂商按照此标准编写相应的程序，实现统一的接口，方便开发人员的使用。</p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=Zjk0OTM1NzQyNDc2OGYyNDZiYzBiY2ViMWZkNDk5YTlfOGJ5Ymx0S2NlQzZ0eUhTWnJoalBTWnVyd3pGbldVZDZfVG9rZW46WTFmdmJHYndKb0ZOWEF4bjZqeGM1eDdVbkhlXzE3MjUzNjcxMzU6MTcyNTM3MDczNV9WNA" alt="img"></p><ol><li><h2 id="HAL库开发环境搭建"><a href="#HAL库开发环境搭建" class="headerlink" title="HAL库开发环境搭建"></a>HAL库开发环境搭建</h2></li><li><h3 id="安装Java运行环境"><a href="#安装Java运行环境" class="headerlink" title="安装Java运行环境"></a>安装Java运行环境</h3></li></ol><p>STM32CubeMX 要求java8的运行环境。下载地址：<strong><a href="https://www.oracle.com/java/technologies/javase/javase8u211-later-archive-downloads.html">https://www.oracle.com/java/technologies/javase/javase8u211-later-archive-downloads.html</a></strong></p><ol><li><h3 id="安装STM32CubeMX"><a href="#安装STM32CubeMX" class="headerlink" title="安装STM32CubeMX"></a>安装STM32CubeMX</h3></li></ol><p>ST公司提供的一个工具，非常方便的用图形化的方式帮我们创建工程，和完成各种配置。</p><p>下载地址：<strong><a href="https://www.st.com/zh/development-tools/stm32cubemx.html">https://www.st.com/zh/development-tools/stm32cubemx.html#get-software</a></strong></p><p>双击安装即可。</p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=YWVjNmYyM2U0OGNjZTFjZjgwMGZiOGQyYzkzODJiYWZfN3MyNVN5cWcyZjJPbEo5cFJMRDJYS1M2UER4SUw5SktfVG9rZW46QVhqZGJXUUNEb0g0WVJ4UUk5d2NwUVIxbmFjXzE3MjUzNjcxMzU6MTcyNTM3MDczNV9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=ODA1OTA4YjJmN2I0ZmM5OTA2Y2MwM2ZlOTYwMTc5YWVfbmp0bVNWcDNwVHJJREliYlA0cU10YXZIMmVBM3hGSXVfVG9rZW46UzZHQWI4Y1M1b0ZZeXd4SkFLRmNTN3JrbmhlXzE3MjUzNjcxMzU6MTcyNTM3MDczNV9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=MGIwYjY1YjJlNTViNTRmYzljZjEwYThlOWYwNTAxZmRfdEp0ZFNLVG52UmpwUlRnT2V2dTlnN3BlTk1IZVZkcVhfVG9rZW46THdyb2JBbk1nbzQzVXh4Sng5M2NJRmhGbjRjXzE3MjUzNjcxMzU6MTcyNTM3MDczNV9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=MDE4NzkyYzRjYTFkNjZjMGQ4NzU1NTUyYjA1ZmRiZGFfc2x0MEtabXdMbWNHWWpiT1NHTTJZeTZlTWtGTTh5V01fVG9rZW46TEs1S2JFTnhJb1Y0ekl4VktyYWNwT1J1bmlmXzE3MjUzNjcxMzU6MTcyNTM3MDczNV9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=ZmVmMDY3OTIxNTMwODBiMjhkYTUwNzAyODgxNjZlNWNfM0prRDUwczBmamxBdVNiaTMzMmVQWkdGNW5IamdMMHFfVG9rZW46TzV0aGJjQ0V0b21UTXd4UVB2ZmNCbWtYbmllXzE3MjUzNjcxMzU6MTcyNTM3MDczNV9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=Mjg5YTkzNTY5MTdlYjdkMThmOWFlMDE1MDNmODdmOTRfenlIdlYzeWk4R0d0YXVFYXUwczFMc2FKSVl5V2Z0aDRfVG9rZW46T3I3VGJpbjRXb3pNYVB4TW0xYmMwTFFyblUwXzE3MjUzNjcxMzU6MTcyNTM3MDczNV9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=ZTUyZjYyYTI1Mjc5OGExN2FkYTQ0MDEzMDdlM2NkMmVfYmhva3hUUkRKaVN1NER3eXpEd1NwS2Rkdll3aE9nWjZfVG9rZW46U1NrOWJYRWhDb1BFcnd4NzVMeGNJRlZDbm9mXzE3MjUzNjcxMzU6MTcyNTM3MDczNV9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=ZjM1NmRhYmQwNDYwYWFmNzU3ZGI1YWRiNDRiZDQzYWJfTzVqa2sxM3VHcEI2djNTQlZMTnN4T09iblVHMlhvbFBfVG9rZW46WFRJR2J3NGVKb1c4d1d4RURhU2NiMmQ4bmRNXzE3MjUzNjcxMzU6MTcyNTM3MDczNV9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=MjE1MDQ2NWRlYWQ4Y2Q5MGIzNzdiMDc0NDNjMTBkYTVfZ1Q0R0lBTnhUUHJ0RVlZU0dNT3ZmUGVWZm9lMDlCVlpfVG9rZW46TkZuTGJPTlVXb0YwbXZ4MzFVd2NVcmZJbjRjXzE3MjUzNjcxMzU6MTcyNTM3MDczNV9WNA" alt="img"></p><ol><li><h3 id="在线下载芯片支持包"><a href="#在线下载芯片支持包" class="headerlink" title="在线下载芯片支持包"></a>在线下载芯片支持包</h3></li></ol><p>双击<strong>CubeMX</strong>进入如下界面。</p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=YTczYjNkNTI4OGU2ODY5MTU2MDI2NGVhMzJhY2FlMDRfQ2tmbDNzc3pPbkNDeW9FYnpNWDJHUFd6QmtRYnFBREhfVG9rZW46VFVRYmI0S1V5b3RhaTN4QkVncGNXbEtKbjFiXzE3MjUzNjcxMzU6MTcyNTM3MDczNV9WNA" alt="img"></p><p>先安装下软件支持包：</p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=MWU5M2M4ZTQ0MGNhMTU1ZmE3NjA5Mjg2NjQzN2FhNTVfa05hc1RPQmtScDdKZzhXbVRSUUV0VnFXQUY0Q3ZqN25fVG9rZW46RzF5ZWJmeTJab3BTbFZ4RHZCSGNCeVNPbmJmXzE3MjUzNjcxMzU6MTcyNTM3MDczNV9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=ZTJlMGFkZmFiYmUxYjllZDJhOTA0YTdlYzM5NTA0ZGZfbEw0ZU9IWGI0NTdhd0FXQkFQVU9MQlZOZmpWNVN1N3hfVG9rZW46TnFHb2JJcjBCbzNsTFh4R1lLcWM3WXBObmllXzE3MjUzNjcxMzU6MTcyNTM3MDczNV9WNA" alt="img"></p><p>点击安装之后，需要先登录你的ST账号，没有就先注册一个。</p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=N2JlYmY2NTZlZTBmMmM0NWJlNjg5NGU5OGUwMzAxYjFfb3A2bG9jY09ybGpCYzd0M28wdkZJTGdOV0dBZTBIMGRfVG9rZW46U0w0cmJER2lhbzVCY054VVZmS2M4ZExKbnJjXzE3MjUzNjcxMzU6MTcyNTM3MDczNV9WNA" alt="img"></p><ol><li><h3 id="离线安装芯片支持包"><a href="#离线安装芯片支持包" class="headerlink" title="离线安装芯片支持包"></a>离线安装芯片支持包</h3></li></ol><p>如果网速不好，下载会比较慢。 也可以选择离线安装。</p><ol><li>下载离线芯片支持包</li></ol><p>下载地址：<strong><a href="https://www.st.com/zh/development-tools/stm32cubemx.html#tools-software">https://www.st.com/zh/development-tools/stm32cubemx.html#tools-software</a></strong></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=MGU4ZjdmZGRhNWJmNjlkZDViYmE1NTI3MGJmMjg1NThfUmhUWFJLaUc0dWMxT0hoekdwWUZmZkd0M2xxOWtZbUxfVG9rZW46T25iN2JKUEpYbzVya2F4NHFJVWN6bnk0bkhmXzE3MjUzNjcxMzU6MTcyNTM3MDczNV9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=YzBjZDFmZDdjNmFkMGY3M2NmZGEyYmFmMmY2ODg1NWNfV3JyTWVnREhZUlR5TVUza0hRdGNLVlp4eko0MDI3QjlfVG9rZW46RlB5emJUVXhGb1ZyaU14SEUwRmNVR2ZHbm1iXzE3MjUzNjcxMzU6MTcyNTM3MDczNV9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=NDY0OTZlZmNjMzBiMzlhNzBiMWQ4NGYyNGNmNmM4ZDJfazdaT1d6UEZlQ1ExR0ZIVXpSaUdkMFNRS2NCaktoZUZfVG9rZW46VE1SdGJweDhYb3R5Mzl4WG9yZGNic0VzbnliXzE3MjUzNjcxMzU6MTcyNTM3MDczNV9WNA" alt="img"></p><ol><li>导入芯片支持包</li></ol><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=ZWIzOGI2ZTBlNGUwNjJmYWY4ZmNlMTIzOGY1ZTc0NzNfNk9CbHJqWm9iR01lcEw4VW44MzUxTzIyZ2FlRFdZblpfVG9rZW46WUVvOGIwa1NLb0hjbk94UWNwSmNieml3bndoXzE3MjUzNjcxMzU6MTcyNTM3MDczNV9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=N2Y2M2RlZTNjOWJiODZiYzdkNmM1MmZmMzFmZDQyMDdfcGJ4azl0bzlneGtYMTM0MFhFdlN4VHZnRUFOTHBYZUFfVG9rZW46WjIxc2Jicndjb3pNZmJ4bDFsbmNTYVJnbmJIXzE3MjUzNjcxMzU6MTcyNTM3MDczNV9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=MGU1ZGZmYmZlZDY2NDQwOGI5ZmQwZTE0OWRhNzI4ZWVfWnFQdmpMODFvMnZpaHRTS05sbncyQXBFUUpXdDlhNk9fVG9rZW46RUNQUmI5UTlDb3o1Vm94bXB6TWN3ZXFzbjhnXzE3MjUzNjcxMzU6MTcyNTM3MDczNV9WNA" alt="img"></p><p><strong>注意:</strong></p><ol><li><p><strong>上面的离线安装方式只能安装基础包(en.stm32cubef1.zip),升级包(en.stm32cubef1-v1-8-5.zip)无法安装.</strong></p></li><li><p><strong>把en.stm32cubef1-v1-8-5.zip拷贝到stm32cube的仓库中,直接解压就行了.仓库位置: C:\Users\你的用户名\STM32Cube</strong> <strong>Repository</strong> <strong>. 用解压的文件覆盖原来的基础包.</strong></p></li><li><h2 id="LED流水灯案例（HAL库）"><a href="#LED流水灯案例（HAL库）" class="headerlink" title="LED流水灯案例（HAL库）"></a>LED流水灯案例（HAL库）</h2></li><li><h3 id="需求描述-2"><a href="#需求描述-2" class="headerlink" title="需求描述"></a>需求描述</h3></li></ol><p>实现LED流水灯。用的GPIOA的 0、1、8口。</p><ol><li><h3 id="硬件电路设计-2"><a href="#硬件电路设计-2" class="headerlink" title="硬件电路设计"></a>硬件电路设计</h3></li></ol><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=MjdlZGI1OWQxMGJkNGIzNTFkYjQwYjc0MzViZjViMjhfZk5aOVJwSm5ZUUl2ZWZvN2wzTGhFTk1TQU1YQTNvdUxfVG9rZW46RkZBbmI3MjNxbzR4bEl4ZVhDRWNObkhFbnRkXzE3MjUzNjcxMzU6MTcyNTM3MDczNV9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=MTJlMTc5MDU2MzQ0MDZhYmY1MDY4MmE3YWQyNjM5MjFfeEozZWtBUkppVXh5WGdxRGRWa1psQThGeDVQb09Qa1VfVG9rZW46T2JMZWJNWlRPbzF4b2J4YlMwbmN4WlhXblJlXzE3MjUzNjcxMzU6MTcyNTM3MDczNV9WNA" alt="img"></p><ol><li><h3 id="软件设计-1"><a href="#软件设计-1" class="headerlink" title="软件设计"></a>软件设计</h3></li><li><h4 id="创建HAL库工程"><a href="#创建HAL库工程" class="headerlink" title="创建HAL库工程"></a>创建HAL库工程</h4></li><li><p>操作页面介绍</p></li></ol><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=MWIzZGRhM2E3ZmNkYmFiY2JiODY5MzkzMzNmZmZhMDNfbWl1cHZQMTFlNldNdXhNYlQwdHhldXZEakN3bkh5UkVfVG9rZW46UWtDWWJOZDF4b3d3eTF4MDFpamNzOXlQbjVmXzE3MjUzNjcxMzU6MTcyNTM3MDczNV9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=Yjk1ZTAxOTdhMWI1NjAzN2JhM2E3MzdiZDhkOGVlYzRfSENGSFEwUlM2Z0NlNGZpWlNTdnNMSUJkS0w4Y1VKNlZfVG9rZW46WkhJdmJySzV6b01XTkZ4RUpRRmM0d1ZUbjZjXzE3MjUzNjcxMzU6MTcyNTM3MDczNV9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=ZTgwOGVmMjE2OTZhODZmMTkwMjFkNmY4MWM5YjJkNDZfYkg2NTM3aHJiQ2tXOXZQNGJNb1NsNkt2ZGlVeTNHTVZfVG9rZW46Tm1FNWJsQjg4b3haN054SXhjRmNzQlI3bnVkXzE3MjUzNjcxMzU6MTcyNTM3MDczNV9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=NDJkYjYxZmViYzQ0YzZiNjcyMWM3Mzc5OTEyNmNiNjRfRHU2Tll6NGlNdnlxUGVhcHNPVVEwTnNNaHlnZ1BQb1FfVG9rZW46UjN3VmJ1bEpYb2FMTkl4eExONWNxSHVBbnBoXzE3MjUzNjcxMzU6MTcyNTM3MDczNV9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=ZDM0ODhkZjgxMzViNzVkYjFiZDdlN2I5MmFkOWZkMTlfY204ZHNPNEdOMDBtRDgzWFc2Y0lNQjJwUGlEMFBxd2xfVG9rZW46VzNGbGJXYUV5b0RRZ0J4MnhBVmN2VU10bmljXzE3MjUzNjcxMzU6MTcyNTM3MDczNV9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=ZmEzMWI4ZjhmYjgyZmNhMjkzZmY2MmJjMDZkYzRkNmRfb0pBQjRPUG5Zd0lRSmR6TGFrU1dTalBncW94Wlh5ZkRfVG9rZW46RkZ0NGJ5YlEwb1N5VWR4QklnN2M4cFJPbnJmXzE3MjUzNjcxMzU6MTcyNTM3MDczNV9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=NWQxM2IzODU2MTgwOWFlYWU3NDA2YTEzOTcyZjVhNWJfSTlNWGluTzhRZUFaUks0VFBOZ2I2akpPVG1ySWIzZ01fVG9rZW46VldzRGJwZUxvb1UzUkZ4TkUyVmNLbU1GblRlXzE3MjUzNjcxMzU6MTcyNTM3MDczNV9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=NDY0MjYwOGMyYjgzYWY3YzhkZDViMzFlNTdjMGYxOGJfOWo0M1N5UDh3dmk2MVloTmxaWHVrcGJsZko2c0JQVHVfVG9rZW46UUR4TGJjUEEwb2tONGJ4MEVqNGN0d3FNbmRjXzE3MjUzNjcxMzU6MTcyNTM3MDczNV9WNA" alt="img"></p><ol><li>根据需求设置参数</li></ol><ul><li>Debug参数选择</li></ul><p>默认debug选项没有设置，需要开启。<strong>选择\</strong>**串口**<em>\</em>即可。这个地方务必设置好，否则只能下载一次程序到*<em>\</em>*MCU**<em>\</em>，以后就无法下载了。**</p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=NDViMTExZGZjYTM3NjE1YTk2MDcwYjllNTY2YzY2OTJfb1N5TlZSNWVUejdFeWt3WmhFa29JYjYwWnpqN3RydEpfVG9rZW46RGhxSGJKYjR2bzhxS2h4bmlqeWNMUnNBbkRiXzE3MjUzNjcxMzU6MTcyNTM3MDczNV9WNA" alt="img"></p><ul><li>RCC时钟选择</li></ul><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=ODI3ZDAxMWQwZjk1ZjA1YmVmYzQwYTgzZWRmZjM5N2FfcVR6Rlp1TU9BaFRhV0V1M0NrUzJhaHJGbXlXR09lclNfVG9rZW46RjN5Q2JDaWM4b212VWF4Sm1DUWNpQ3pTbkdnXzE3MjUzNjcxMzU6MTcyNTM3MDczNV9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=N2I3NzJjOTBjNGQ0NTMzYTE1ZTE4NGU5NGU3N2Q0YjdfekltVUtUdGpCUVR3ZlFZbVpIMmVacVVPQzVZWkRoanVfVG9rZW46QWdtT2J0eGgxb1JNeFd4QjRpaGNueExGbk9mXzE3MjUzNjcxMzU6MTcyNTM3MDczNV9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=NDIwOGZlZjdhZjkwNjgxMDI2N2I5MjQ2NmFjZGQ3NWZfRzBEM3EwWGZZN2xXWmhjWHFVNlhkcVhpcUJUM3FUZVpfVG9rZW46Um4xTWI2RlFYb2xOYUt4dmNHTGN1NmRSblJnXzE3MjUzNjcxMzU6MTcyNTM3MDczNV9WNA" alt="img"></p><ol><li>GPIO配置</li></ol><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=MzNlMGIzZDcwY2Q1N2U4YzlhODlhNmI5ZjlkYWJlM2FfdjR0dTltYXRLWVlFc3YwR2pKd3N0Q2tRZkFybklRZ1RfVG9rZW46U3ZIZ2JqQmJxbzBIN3V4akJBNmNhMHE4bnNuXzE3MjUzNjcxMzU6MTcyNTM3MDczNV9WNA" alt="img"></p><ol><li>配置PA0引脚。</li></ol><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=ZDllNjRjMzA0ZGU3NmMxOTBlYjVmMzNjMGI2ZjE1NTRfaW12cUZyVG1KTXhEb202NFhaQVFiU3FwMm0zZFZWTU5fVG9rZW46WE8ycmI1SnJRb01XWEt4RFhZTWNqSVNnbk1nXzE3MjUzNjcxMzU6MTcyNTM3MDczNV9WNA" alt="img"></p><ol><li>同样的方式配置PA1和PA8，然后可以看到这3个引脚。</li></ol><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=MGEyNjU3OTQ3OTk2ODkwNjg5OWNhOTg3MjVmMmY1YjZfM2ZxTElOT2JjbnV6SFRjVlFGRXN6UEd5Rko0MktiRXBfVG9rZW46TGxBYmJRVnJ4b2pwN1Z4aXcwM2NucnFMbmtlXzE3MjUzNjcxMzU6MTcyNTM3MDczNV9WNA" alt="img"></p><ol><li>分别对他们进行设置。</li></ol><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=YjdkYzA2ZTY0NzYzZmFlNWMyMGQyMmE4NzJiYTZhNzdfakFvRE9SRDNxR0QwbTYyR2dkOHBDSmlKZ1FxUE4wVHVfVG9rZW46S1lqWmI4cGlrb3ZvTHh4TklsZmN3Wk5hbmliXzE3MjUzNjcxMzU6MTcyNTM3MDczNV9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=ZWY4NjQ2OTdhZTk1ZGQ1MTllOGNkOGExYjgyY2Q5ZjZfWmRuNFRreVgwSGNYWHJxMmF0U1hLbTlpUVdPMzVaYVJfVG9rZW46SXlqbmJHUHBpbzNxNW14dTFudWNjeWplbjBjXzE3MjUzNjcxMzU6MTcyNTM3MDczNV9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=NWY0NjVlYTZjZmU3YzlmNzE1NDE1OWFjNzRhOTcyMjJfOWwxaFo2c3dBRmp6WE9UM2x3dzV6cFVIbzRycE9iNVBfVG9rZW46UzdBVGJNaTJRbzdmU3J4VmpFS2NWb3BzbkVmXzE3MjUzNjcxMzU6MTcyNTM3MDczNV9WNA" alt="img"></p><ol><li>工程配置</li></ol><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=Y2ViMmEzZjc2Mzg4NjdjNGNjZTA5MWNiMmFjYzFmYTZfblJGaXNCU1NmaThTenZCTll2bkN5VmZOWVhQNWpVUUVfVG9rZW46SXN2cGJnV01Tb1ppTEh4T0lKdGNzRzI2bnFlXzE3MjUzNjcxMzU6MTcyNTM3MDczNV9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=MDY4Zjg5NDYwZmUyMjdhOTQ2NWFmMGQ4NDA5YzY0ZGNfa3Zyc3UzNzl5OEhzRTdSdmFJaTVhTTZqQjZVczliSTFfVG9rZW46UUpQbmJ6OVNVb2VtQWh4Wks1eGNMcUY4bmplXzE3MjUzNjcxMzU6MTcyNTM3MDczNV9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=MDRjZTNhYzk4YjEzYmExMjFmMWQzM2I4NjlhYzgyZWFfY1o1OFhSYmM0cVdiSmhtNXF6NXpsa2Ezak1WdHY2eFdfVG9rZW46UDZXUmJhTTQxb3c1a0J4NzhpdGNSR3BmblJjXzE3MjUzNjcxMzU6MTcyNTM3MDczNV9WNA" alt="img"></p><ol><li>生成代码</li></ol><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=MDUxYzcxYzk2YjAzYmM4ZmRmYjdjN2QwYWUzOTQyODVfdWZIamZUdTRsaUxIVjBPYlVqaHhocjRRMVFaRlJQajhfVG9rZW46V3M5cGI3d3Z6b1M3YkF4eTVDbGNGMlJUblpmXzE3MjUzNjcxMzU6MTcyNTM3MDczNV9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=NzI4NDc2Y2IxZTcxM2ZhZjk5ODNmODI2MjA2Nzc3NDBfYVNFa3pmVGVTMEN5b0lJVHlRWVhNYVFQNlJ1NGxoVHdfVG9rZW46RkQwSWJiM1pDbzJxY0V4QzY5Z2NUbEl0bk1mXzE3MjUzNjcxMzU6MTcyNTM3MDczNV9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=ZWQzMmE0MDIzYTgwZDRiODU3MWU4ZWRmZjkxNTQ3MDFfNFVsb2xJaFNGaUdkZDNTRWVUTFdscURsb1NibDM2N3RfVG9rZW46SjFqb2JUaFlwb3UwRjh4eFlQdmNKMDdxbmhmXzE3MjUzNjcxMzU6MTcyNTM3MDczNV9WNA" alt="img"></p><ol><li>生成的工程目录介绍</li></ol><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=YzA2MmZiMjhjMGFlMWUyMTU1OTAyYWEwYzk4ZjY5MDNfRmRGN05mNHNGWnpHcGpSZ08xMmdRRFNOUDI5OEVnM0lfVG9rZW46SDd3Z2JheW5Lb3NjTWp4T0ZobGNMZ2VUbnFmXzE3MjUzNjcxMzU6MTcyNTM3MDczNV9WNA" alt="img"></p><ol><li><h4 id="自动生成的代码解读"><a href="#自动生成的代码解读" class="headerlink" title="自动生成的代码解读"></a>自动生成的代码解读</h4></li></ol><p><strong>main</strong>函数中已经替我们调用了HAL的初始化，时钟的初始化，GPIO的初始化。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_Init();</span><br><span class="line">    SystemClock_Config();</span><br><span class="line">    MX_GPIO_Init();</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//下面是GPIO初始化的代码。</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">MX_GPIO_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    GPIO_InitTypeDef GPIO_InitStruct = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="comment">/* GPIO Ports Clock Enable */</span></span><br><span class="line">    __HAL_RCC_GPIOC_CLK_ENABLE();</span><br><span class="line">    __HAL_RCC_GPIOA_CLK_ENABLE();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*Configure GPIO pin Output Level */</span></span><br><span class="line">    HAL_GPIO_WritePin(GPIOA, LED1_Pin | LED2_Pin | LED3_Pin, GPIO_PIN_SET);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*Configure GPIO pins : PAPin PAPin PAPin */</span></span><br><span class="line">    GPIO_InitStruct.Pin = LED1_Pin | LED2_Pin | LED3_Pin;</span><br><span class="line">    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;</span><br><span class="line">    GPIO_InitStruct.Pull = GPIO_NOPULL;</span><br><span class="line">    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;</span><br><span class="line">    HAL_GPIO_Init(GPIOA, &amp;GPIO_InitStruct);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h4 id="构建LED驱动"><a href="#构建LED驱动" class="headerlink" title="构建LED驱动"></a>构建LED驱动</h4></li></ol><p>为了方便管理，我们把LED驱动放入单独的文件夹管理。在项目根目录下创建Hardware/led目录。</p><p>然后在Hardware/led目录下创建2个文件led.h和led.c。</p><p>并在Keil中添加如下配置。</p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=MzRjYzFkZDM3OGZhNTU2NzVkNWI5YmQ4ZTk4MjhjOTlfWndpZ0ZHZzhRSWRnM0NCVjRxQ2hvNnlhb3JiU25vRnhfVG9rZW46UmJwMmI0UmRlbzVzY214eTRHb2NNMmF0blpnXzE3MjUzNjcxMzU6MTcyNTM3MDczNV9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=OTJkZGQxNTMxYTExNzliMzBmNWY3NGRlNmY3ZTNlNmRfYUZnZzNzVGh2NllMWjVERFpjeFhGMXFqa0RVbmpmQjVfVG9rZW46UHBBZWI0VGVmb3dGaE14OFRkT2NDeXJHbnpmXzE3MjUzNjcxMzU6MTcyNTM3MDczNV9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=YjgzNDg5MWExZjg4NTM0NzRlZDEwNzdjMDY5Mjc1OGRfelYyNklBa0d3bGhZODd0Q2dMUFZPbHRVMThuUDFxUkNfVG9rZW46RFV2V2JrRmxRbzVFRUR4RjVwQWNmUkx4bkpmXzE3MjUzNjcxMzU6MTcyNTM3MDczNV9WNA" alt="img"></p><ol><li><h5 id="led-h"><a href="#led-h" class="headerlink" title="led.h"></a>led.h</h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __led_h</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __led_h</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;gpio.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED uint16_t</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">LED_Turn_On</span><span class="params">(LED led)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">LED_Turn_Off</span><span class="params">(LED led)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">LED_Toggle</span><span class="params">(LED led)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">LED_Turn_Off_All</span><span class="params">(LED led[], <span class="type">uint8_t</span> len)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><ol><li><h5 id="led-c"><a href="#led-c" class="headerlink" title="led.c"></a>led.c</h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;led.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 点亮LED</span></span><br><span class="line"><span class="comment"> * @param &#123;LED&#125; led</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">LED_Turn_On</span><span class="params">(LED led)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_GPIO_WritePin(GPIOA, led, GPIO_PIN_RESET);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 熄灭LED</span></span><br><span class="line"><span class="comment"> * @param &#123;LED&#125; led</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">LED_Turn_Off</span><span class="params">(LED led)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_GPIO_WritePin(GPIOA, led, GPIO_PIN_SET);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 翻转LED的状态</span></span><br><span class="line"><span class="comment"> * @param &#123;LED&#125; led</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">LED_Toggle</span><span class="params">(LED led)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_GPIO_TogglePin(GPIOA, led);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 关闭所有LED</span></span><br><span class="line"><span class="comment"> * @param &#123;LED&#125; led</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; len</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">LED_Turn_Off_All</span><span class="params">(LED led[], <span class="type">uint8_t</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint8_t</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        LED_Turn_Off(led[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h5 id="main函数"><a href="#main函数" class="headerlink" title="main函数"></a>main函数</h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;LED.h&quot;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_Init();</span><br><span class="line">    SystemClock_Config();</span><br><span class="line">    MX_GPIO_Init();</span><br><span class="line">    <span class="type">uint16_t</span> leds[] = &#123;LED1_Pin, LED2_Pin, LED3_Pin&#125;;</span><br><span class="line">    <span class="type">uint8_t</span> i;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            LED_Turn_Off_All(leds, <span class="number">3</span>);</span><br><span class="line">            LED_Turn_On(leds[i]);</span><br><span class="line">            HAL_Delay(<span class="number">200</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            LED_Turn_Off_All(leds, <span class="number">3</span>);</span><br><span class="line">            LED_Turn_On(leds[<span class="number">2</span> - i]);</span><br><span class="line">            HAL_Delay(<span class="number">200</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4></li></ol><p>每新建一个工程，都需要<strong>重新配置</strong> <strong>Include Path和Debug参数</strong> 。</p><ol><li><h1 id="STM32的中断系统"><a href="#STM32的中断系统" class="headerlink" title="STM32的中断系统"></a>STM32的中断系统</h1></li><li><h2 id="中断概述"><a href="#中断概述" class="headerlink" title="中断概述"></a>中断概述</h2></li><li><h3 id="中断的概念"><a href="#中断的概念" class="headerlink" title="中断的概念"></a>中断的概念</h3></li></ol><p>在主程序运行过程中，出现了特定事件，使得CPU暂停当前正在运行的程序，转而去处理这个事件，等这个事件处理完成之后，CPU再回到刚才被打断的位置继续处理，这就是<strong>中断</strong>。</p><p>在ARM体系结构中，中断通常由外设或外部输入产生，有时也可以由软件触发。 中断是单片机系统处理紧急或突发事件的重要方式，如定时器溢出、按键输入、串口数据到达等。</p><p>那个打断CPU执行的特定事件，我们一般称之为<strong>中断源</strong>。 被中断源打断的位置我们称为<strong>断点</strong>。 处理特定事件的过程，我们称为执行<strong>中断处理程序</strong>。</p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=NmEyNmFkODJhM2VmNjM1MDM1ZGY1N2NjMWQ1ODlkNGRfTU4wSFpwcHZmNG8ya0N5QkFkd3dGR09DU0k2eFVybDNfVG9rZW46U2xXNGJEZ0U5b0s0b3l4VHZjNGNtUDZLbndjXzE3MjUzNjcyODI6MTcyNTM3MDg4Ml9WNA" alt="img"></p><p>正在执行中断程序的时候，这个时候有可能被另外一个中断源给中断，CPU转而去执行另外一个中断源的中断处理程序，这叫<strong>中断嵌套</strong>。</p><p>中断B能否打断中断A，要看他们的优先级，优先级高的可以打断优先级低的，优先级低的无法打断优先级高的。</p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=OGNlYWM4NWM2YmY0ZTM1ZDk5ZGIzODhkMTRjM2NkNTVfNVFKVGFqNXRCZGFsbGhxZGozQnFtaEM2ZEFsWFJZT25fVG9rZW46QkZ0NGJXcU5jb2FwamF4OEJpQWM2NVB6bnBlXzE3MjUzNjcyODI6MTcyNTM3MDg4Ml9WNA" alt="img"></p><p>中断源可以是外部的，也可以是内部的。 外部的叫<strong>外部中断源</strong>，内部的叫<strong>内部中断源（有时候也叫异常）</strong>。</p><ol><li><h3 id="为什么需要中断"><a href="#为什么需要中断" class="headerlink" title="为什么需要中断"></a>为什么需要中断</h3></li></ol><p>对单片机系统来说，<strong>中断至关重要</strong>。</p><p>中断的主要意义在于提高CPU的效率，而不会一直占用CPU，实现对突发事件的实时处理，以及实现程序的并行化和嵌入式系统进程之间的切换。 相较于轮询方式（即按照一定的频率和周期不断地检测某些事件的发生），中断在处理一些偶然发生的事情时效率更高。</p><p>假设我们要检测按键是否按下，如果没有中断，则需要用循环的方式（阻塞）不断的去检测按键对应的IO口的电平，这是比较耗费CPU的时间的。 如果要检测的更多的话，CPU有可能会导致阻塞。 <strong>中断则使这件事简单化</strong> ，主程序不需要循环不断的去检测按键，当有按键按下的时候，CPU执行被打断，去执行按键处理程序就行了。 当没有按键按下的时候，CPU完全可以正常执行代码，丝毫不受任何的影响。</p><ol><li><h3 id="STM32的中断"><a href="#STM32的中断" class="headerlink" title="STM32的中断"></a>STM32的中断</h3></li></ol><p>Cortext-M3内核支持256个中断，其中包含了16个内核中断和240个外部中断，并且具有256级的可编程中断设置。</p><p>一般情况下，芯片厂商会对Cortex-M3的中断进行裁剪。</p><p>STM32有84个中断，包括16个内核中断和68个可屏蔽中断，具有16级可编程的中断优先级。</p><p>STM32F103系列70个中断（咱们目前使用的芯片）有10个内核中断和60个可编程的外部中断。</p><p>下面的列表中，灰色背景的是内部中断（或者异常），其他的为外部中断。</p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=N2Y2Njc0YjU0YjdkNjVmZTUyNTMxY2ExMjI5MjAzMDRfeU1rc2pSY2V1UExzVmFJZXJyMlV1elZ3WWtIOHlnODlfVG9rZW46WlBidWJwaGtpb1BYcml4dThjS2N0Zkk5bjRiXzE3MjUzNjcyODI6MTcyNTM3MDg4Ml9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=OGM3YjFjNDUxMTQ3NTI0ZWJlZTY2MjRhMjdjYjZkZTVfa0NVMVBoYzQzUTYwQkZ0aEl3N1I5NzdyQVNZOTlmdFRfVG9rZW46WktJemJITzE1b1ZXVlR4QnBsa2NOeFQ4bmpiXzE3MjUzNjcyODI6MTcyNTM3MDg4Ml9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=YjRhZGI3ZDk3YWU1MDNhMDdhNzI4YmQyMjlkYjAyOGRfcXc0OXZQbEN6T0J6VVQ5VWU1QWZGdnQ4UUNsRmFnV0JfVG9rZW46QTRCbmJwSE1Ub1pWODN4SjRHeGNjV0V3bmRlXzE3MjUzNjcyODI6MTcyNTM3MDg4Ml9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=MmFjNGY5ZDFhZGVmYzA2YzQxMTlmYzI2M2ZhYmYxY2NfUDU3bUVYWTlHTk1HYjhOcVp6V1NtYVJ2Wkl4RkJSSjJfVG9rZW46UElpbmJNR3ZIb0VSUDR4VVVob2MwUzdobm1kXzE3MjUzNjcyODI6MTcyNTM3MDg4Ml9WNA" alt="img"></p><ol><li><h3 id="STM32的中断体系架构"><a href="#STM32的中断体系架构" class="headerlink" title="STM32的中断体系架构"></a>STM32的中断体系架构</h3></li></ol><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=MmZkNzU3ZWQwYmU1YTIyM2FmZmYwZTg0NGYwOGE1YjRfVzNRNTF6OWRWazV6SVhWRmxQeVNEbW14WWJRZHc3WTVfVG9rZW46RmtibGJoaURMbzFTVjJ4clNReWNxcmFMblNjXzE3MjUzNjcyODI6MTcyNTM3MDg4Ml9WNA" alt="img"></p><p><strong>这图已经无敌了！</strong></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=Yjk5MjM5NDI0ZDYzZjdkYTYyN2Q3ZmM0YjQwYTM5NTdfZGdQM25jQzNlMlc3VWpxZ0FXZGluNkF6eFdNMXdqeGlfVG9rZW46SjBrbGJ3NGNKb3E0TzJ4Zk0wMGNwclVkbjVnXzE3MjUzNjcyODI6MTcyNTM3MDg4Ml9WNA" alt="img"></p><ol><li><h3 id="NVIC嵌套向量中断控制器"><a href="#NVIC嵌套向量中断控制器" class="headerlink" title="NVIC嵌套向量中断控制器"></a>NVIC嵌套向量中断控制器</h3></li><li><h4 id="NVIC的介绍"><a href="#NVIC的介绍" class="headerlink" title="NVIC的介绍"></a>NVIC的介绍</h4></li></ol><p><strong>NVIC（Nested vectored \</strong>**interrupt**<em>\</em>controller<strong><em>* 嵌套向量中断控制器）和处理器核的接口紧密相连，可以实现</em></strong>*低延迟** **的中断处理和高效地处理中断。** 嵌套向量中断控制器管理着包括内核异常，外部中断等**所有中断**。 **NVIC决定哪个中断的处理程序交给*<strong>*CPU</strong> <strong>来执行（秘书，大内总管）</strong> 。</p><p>每一个外部中断都可以被使能或者禁止，并且可以被设置为挂起状态或者清除状态。 处理器的中断可以电平的形式的，也可以是脉冲形式的，这样中断控制器就可以处理任何中断源。</p><p>16个IO的中断与PVD(电源电压检测)，RTC(实时时钟)，USB，以太网检测这20个外部中断会通过EXTI来控制，然后交给NVIC。 其他中断都是直接交给NVIC来处理。</p><p>NVIC提供了灵活、高效、可扩展的中断处理机制，支持多级优先级、多向中断、嵌套向量中断等特性。 当一个中断请求到达时，NVIC会确定其优先级并决定是否应该中断当前执行的程序，以便及时响应和处理该中断 请求。 这种设计有助于提高系统的响应速度和可靠性，特别是在需要处理大量中断请求的实时应用程序中。</p><ol><li><h4 id="NVIC原理"><a href="#NVIC原理" class="headerlink" title="NVIC原理"></a>NVIC原理</h4></li></ol><p>如图：</p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=ZTRlYWQwMjUxNTE4MWZiMzE4MzQ5NTMwZGY5NmZhMTFfRGwwdUd1a0JENnMyaHk2STV4RlRGb2JhTWRiOG5yb2VfVG9rZW46UlJvQ2I2TmF4b1d0WE54UGJBTmNmWmx4bnpiXzE3MjUzNjcyODI6MTcyNTM3MDg4Ml9WNA" alt="img"></p><ol><li><h4 id="中断优先级"><a href="#中断优先级" class="headerlink" title="中断优先级"></a>中断优先级</h4></li></ol><p>NVIC为了方便管理中断，可以通过软件给每个中断设置优先级。NVIC用4个位来控制优先级，值小的优先级高。把优先级分为两种：抢占优先级和响应优先级。</p><p>规则：</p><ul><li>优先级值越小，优先级越高。</li><li>如果不设置优先级，则默认优先级为0。</li><li>先比较抢占优先级。抢占优先级高的可以打断抢占优先级低的。</li><li>若抢占优先级一样，再比较响应优先级。<strong>但是响应优先级\</strong>**不会**<em>\</em>导致中断*<em>*<em>嵌套。</em></em></li><li>若<strong>抢占优先级一样</strong>的同时挂起，则优先处理<strong>响应抢占优先级高</strong>的。</li><li>若挂起的优先级（抢占和响应）都一样，则查找中断向量表，值小的先响应（看自然优先级优先级）。</li><li>NVIC对优先级分了5组，在程序中先对中断进行分组，优先级寄存器 IPR 有 8 位，但实际只使用到高 4 位，用于决定抢占优先级、响应优先级的等级。</li><li>具体这 4 位如何切割？由又由 AIRCR 寄存器控制，而且分组只能分一次，若多次分，只有最后一次生效。</li></ul><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=NGFhMTdlZjdlMmY3YWNhNTZjZGQzY2QwN2QxNGRiMjJfNFJLSWZMQWExSU5YQUwycU9lSHJVd0FLQ2M0Y0RkVm1fVG9rZW46Tlk1aGJYMFpEb1M3Nmh4ZUxVMWNDeENiblhkXzE3MjUzNjcyODI6MTcyNTM3MDg4Ml9WNA" alt="img"></p><div class="table-container"><table><thead><tr><th>分组</th><th>抢占优先级</th><th>响应优先级</th></tr></thead><tbody><tr><td>0</td><td>0位 取值范围：0</td><td>4位 取值范围：0-15</td></tr><tr><td>1</td><td>1位 取值范围：0-1</td><td>3位 取值范围：0-7</td></tr><tr><td>2</td><td>2位 取值范围：0-3</td><td>2位 取值范围：0-3</td></tr><tr><td>3</td><td>3位 取值范围：0-7</td><td>1位 取值范围：0-1</td></tr><tr><td>4</td><td>4位 取值范围：0-15</td><td>0位 取值范围：0</td></tr></tbody></table></div><p>抢占优先级和子优先级可通过CubeMX配置。</p><ol><li><h4 id="NVIC常用寄存器"><a href="#NVIC常用寄存器" class="headerlink" title="NVIC常用寄存器"></a>NVIC常用寄存器</h4></li></ol><p>如图：</p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=YTEwOGY0NWZjZjQ1YjIyZWUxMjY3ZjBkNWRkMmQwMThfblVVRXBVUmZNZ2ZFVjJIenFPVUZEc2ptRnM5TkZyRkNfVG9rZW46VzRRWmI5ekRib1JrR3V4Yk5jT2N2bmNjbjFkXzE3MjUzNjcyODI6MTcyNTM3MDg4Ml9WNA" alt="img"></p><ol><li><h4 id="NVIC配置思路"><a href="#NVIC配置思路" class="headerlink" title="NVIC配置思路"></a>NVIC配置思路</h4></li></ol><p><strong>设置中断分组 → 设置中断优先级 → 使能中断</strong></p><ol><li><h3 id="中断向量表"><a href="#中断向量表" class="headerlink" title="中断向量表"></a>中断向量表</h3></li></ol><p><strong>STM32的\</strong>*<em>中断向量表<strong> </strong>是一个存储中断处理函数地址的数组，位于Flash区的起始位置。*</em> 每个数组元素对应一个中断源，其地址指向相应的中断服务程序。当中断发生时，处理器会根据中断号查找向量表，然后跳转到 对应的中断服务程序执行。</p><p>中断向量表的主要作用是解决中断函数地址不固定与中断必须跳转到固定地方执行程序之间的矛盾。由于编 译器每次编译都会为中断函数随机分配地址，但硬件要求中断必须跳转到固定的位置。</p><p>因此，中断向量表就作为这样一个固定的地址列表，其中包含了中断函数的地址以及跳转到这些地址的程序。当中断发生时，处理器会跳转到这个固定的中断向量表，然后根据其中的信息跳转到相应的中断处理函数，从而执行中断。</p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=ZDYyZjU0ZTQyYmI5YTgwNGFkOTkyZjM2NzU1MGExZjNfSXBBWVpLNHRRY2U4cWlPOERpYnliY1YzY2RXRnkwODBfVG9rZW46UVNEeGJtOFh5bzJIQ2N4Vk1BRWNTMTB2bnZkXzE3MjUzNjcyODI6MTcyNTM3MDg4Ml9WNA" alt="img"></p><p>注意：</p><p><strong>NVIC（Nested Vectored \</strong>*<em>Interrupt*<em> *<em>Controller*<em> *<em>）*</em> 和</em></em>中断向量表</em></em>不是一回事。NVIC是处理器中的一个组件，负责管理和响应中断请求，包括优先级和中断的嵌套处理。中断向量表则是一个存储中断服务程序（ISR）地址的表格，当中断发生时，NVIC使用这个表来找到对应的ISR。它们配合工作，NVIC通过中断向量表来确定应执行哪个中断处理程序。</p><ol><li><h3 id="中断执行流程"><a href="#中断执行流程" class="headerlink" title="中断执行流程"></a>中断执行流程</h3></li></ol><p>中断发生时，STM32的执行流程如下：</p><p>首先，由外设发出中断请求；然后，处理器暂停当前执行的任务，保护现场（如将当前位置的PC地址压栈）；接着，程序跳转到对应的中断服务程序（ISR）并执行；中断服务程序执行完毕后，恢复现场（如将栈顶的值送回PC）；最后，处理器返回到被中断的位置，继续执行下一个指令。</p><ol><li><h2 id="中断案例：检测按键按下"><a href="#中断案例：检测按键按下" class="headerlink" title="中断案例：检测按键按下"></a>中断案例：检测按键按下</h2></li><li><h3 id="需求描述-3"><a href="#需求描述-3" class="headerlink" title="需求描述"></a>需求描述</h3></li></ol><p>利用外部中断检测按键KEY3，当按键按下，翻转LED1显示。</p><ol><li><h3 id="硬件电路设计-3"><a href="#硬件电路设计-3" class="headerlink" title="硬件电路设计"></a>硬件电路设计</h3></li><li><h4 id="LED1的硬件电路"><a href="#LED1的硬件电路" class="headerlink" title="LED1的硬件电路"></a>LED1的硬件电路</h4></li></ol><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=YjAzNjY4ZjY4OGRhMzU2Y2NlOGU3ZjQ1YzUyNjIwMzNfQ3pEbFFwUDNOMDBXSFRId2taWWwwWGFyek4waGNGaWZfVG9rZW46WFJ1VmI1cThxbzBWOUR4MVNnVmNLZUpGbnRlXzE3MjUzNjcyODI6MTcyNTM3MDg4Ml9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=MWJhOWFiYWY1MzkzMTUxNGVlZmQ5ZDhhOGU5NWJjZDRfRzl4QmlzR0pYd2NqeDUzSmpoTktDbVRvdTE0b3hQNlRfVG9rZW46SEdCS2JFQkVKb2NjbjN4R3I1WmNLaFRmbmtiXzE3MjUzNjcyODI6MTcyNTM3MDg4Ml9WNA" alt="img"></p><ol><li><h4 id="KEY的硬件电路"><a href="#KEY的硬件电路" class="headerlink" title="KEY的硬件电路"></a>KEY的硬件电路</h4></li></ol><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=MWFlNTU4ZGRmZjJiMDk3MTVlZTRkOWU5NzkxNDY2NDFfOHNaSVBURDh5cFlkRGpidW9OOVZnOUdFVWZyTlZFcFlfVG9rZW46WXBKR2JIczVJb3BkOFR4aTVCY2NxeWk3bmpjXzE3MjUzNjcyODI6MTcyNTM3MDg4Ml9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=NjY5N2MzYzliNTRlYWMyOGJlYmY2M2M2ZDIyYWU1ZWVfWmZCSTRDVXMyNzBKRml6UG52dkpQbWxOSjRiNlJpaUpfVG9rZW46WENuSGJBNmRDbzRnbll4d3k1Y2NteGlBbk1kXzE3MjUzNjcyODI6MTcyNTM3MDg4Ml9WNA" alt="img"></p><p>说明：</p><ol><li><p>PF10对应的是KEY_3(SW3),我们可以设置PF10的模式为<strong>下拉输入</strong>，则当按键没有按下的时候是低电平，当按键按下的时候是高电平。</p></li><li><p>由于按键没有设置硬件防抖，则我们需要软件设计防抖。一般延时10-15ms即可实现软件防抖。</p></li><li><h3 id="软件设计（寄存器）-1"><a href="#软件设计（寄存器）-1" class="headerlink" title="软件设计（寄存器）"></a>软件设计（寄存器）</h3></li></ol><p>复制我们第一个项目，在第一个项目的基础上修改，可以省去一些配置步骤。</p><p>另外文件如何创建以后不再说明。</p><ol><li><h4 id="main-c-2"><a href="#main-c-2" class="headerlink" title="main.c"></a>main.c</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Driver_LED.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Driver_Key.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123; </span><br><span class="line">    <span class="comment">/* 1. 初始化LED */</span></span><br><span class="line">    Driver_LED_Init();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 2. 初始化按键 */</span></span><br><span class="line">    Driver_Key_Init();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">            </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h4 id="Delay-h-1"><a href="#Delay-h-1" class="headerlink" title="Delay.h"></a>Delay.h</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __delay_h</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __delay_h</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;stm32f10x.h&quot;</span><span class="comment">// Device header</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay_us</span><span class="params">(<span class="type">uint16_t</span> us)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay_ms</span><span class="params">(<span class="type">uint16_t</span> ms)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay_s</span><span class="params">(<span class="type">uint16_t</span> s)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><ol><li><h4 id="Delay-c"><a href="#Delay-c" class="headerlink" title="Delay.c"></a>Delay.c</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;delay.h&quot;</span><span class="comment">// Device header</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay_us</span><span class="params">(<span class="type">uint16_t</span> us)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 定时器重装值 */</span></span><br><span class="line">    SysTick-&gt;LOAD = <span class="number">72</span> * us;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 清除当前计数值 */</span></span><br><span class="line">    SysTick-&gt;VAL = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*设置内部时钟源（2位-&gt;1）,不需要中断（1位-&gt;0），并启动定时器(0位-&gt;1)*/</span></span><br><span class="line">    SysTick-&gt;CTRL = <span class="number">0x5</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*等待计数到0， 如果计数到0则16位会置为1*/</span></span><br><span class="line">    <span class="keyword">while</span> (!(SysTick-&gt;CTRL &amp; SysTick_CTRL_COUNTFLAG));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 关闭定时器 */</span></span><br><span class="line">    SysTick-&gt;CTRL &amp;= ~SysTick_CTRL_ENABLE; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay_ms</span><span class="params">(<span class="type">uint16_t</span> ms)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (ms--)</span><br><span class="line">    &#123;</span><br><span class="line">        Delay_us(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay_s</span><span class="params">(<span class="type">uint16_t</span> s)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (s--)</span><br><span class="line">    &#123;</span><br><span class="line">        Delay_ms(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h4 id="Driver-LED-h-1"><a href="#Driver-LED-h-1" class="headerlink" title="Driver_LED.h"></a>Driver_LED.h</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __DRIVER_LED_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __DRIVER_LED_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED_1 GPIO_ODR_ODR0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED_2 GPIO_ODR_ODR1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED_3 GPIO_ODR_ODR8</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_Init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_On</span><span class="params">(<span class="type">uint32_t</span> led)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_Off</span><span class="params">(<span class="type">uint32_t</span> led)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_Toggle</span><span class="params">(<span class="type">uint32_t</span> led)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_OnAll</span><span class="params">(<span class="type">uint32_t</span> leds[], <span class="type">uint8_t</span> size)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_OffAll</span><span class="params">(<span class="type">uint32_t</span> leds[], <span class="type">uint8_t</span> size)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><ol><li><h4 id="Driver-LED-c-1"><a href="#Driver-LED-c-1" class="headerlink" title="Driver_LED.c"></a>Driver_LED.c</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Driver_LED.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 对LED进行初始化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 打开GPIOA的时钟 */</span></span><br><span class="line">    RCC-&gt;APB2ENR |= RCC_APB2ENR_IOPAEN;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 2. 给用到的端口的所有 PIN (PA0 PA1 PA8) 设置工作模式: 通用推挽输出 MODE:11  CNF:00 */</span></span><br><span class="line">    GPIOA-&gt;CRL |= (GPIO_CRL_MODE0 | GPIO_CRL_MODE1);</span><br><span class="line">    GPIOA-&gt;CRL &amp;= ~(GPIO_CRL_CNF0 | GPIO_CRL_CNF1);</span><br><span class="line"></span><br><span class="line">    GPIOA-&gt;CRH |= GPIO_CRH_MODE8;</span><br><span class="line">    GPIOA-&gt;CRH &amp;= ~GPIO_CRH_CNF8;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 3. 关闭所有灯  */</span></span><br><span class="line">    Driver_LED_Off(LED_1);</span><br><span class="line">    Driver_LED_Off(LED_2);</span><br><span class="line">    Driver_LED_Off(LED_3);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 点亮指定的LED</span></span><br><span class="line"><span class="comment"> * @param &#123;uint32_t&#125; led 要点亮的LED</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_On</span><span class="params">(<span class="type">uint32_t</span> led)</span></span><br><span class="line">&#123;</span><br><span class="line">    GPIOA-&gt;ODR &amp;= ~led;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 关闭指定的LED</span></span><br><span class="line"><span class="comment"> * @param &#123;uint32_t&#125; led 要关闭的LED</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_Off</span><span class="params">(<span class="type">uint32_t</span> led)</span></span><br><span class="line">&#123;</span><br><span class="line">    GPIOA-&gt;ODR |= led;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 翻转LED的状态</span></span><br><span class="line"><span class="comment"> * @param &#123;uint32_t&#125; led 要翻转的LED</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_Toggle</span><span class="params">(<span class="type">uint32_t</span> led)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 读取引脚的电平,如果是1(目前是关闭), 打开, 否则就关闭 */</span></span><br><span class="line">    <span class="keyword">if</span> ((GPIOA-&gt;IDR &amp; led) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Driver_LED_Off(led);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        Driver_LED_On(led);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 打开数组中所有的灯</span></span><br><span class="line"><span class="comment"> * @param &#123;uint32_t&#125; leds 所有灯</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; size 灯的个数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_OnAll</span><span class="params">(<span class="type">uint32_t</span> leds[], <span class="type">uint8_t</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint8_t</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Driver_LED_On(leds[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 关闭数组中所有的灯</span></span><br><span class="line"><span class="comment"> * @param &#123;uint32_t&#125; leds 所有灯</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; size 灯的个数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_OffAll</span><span class="params">(<span class="type">uint32_t</span> leds[], <span class="type">uint8_t</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint8_t</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Driver_LED_Off(leds[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h4 id="Driver-Key-h"><a href="#Driver-Key-h" class="headerlink" title="Driver_Key.h"></a>Driver_Key.h</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __DRIVER_KEY_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __DRIVER_KEY_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_Key_Init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><ol><li><h4 id="Driver-Key-c"><a href="#Driver-Key-c" class="headerlink" title="Driver_Key.c"></a>Driver_Key.c</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Driver_Key.&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Driver_LED.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Delay.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 初始化按键.</span></span><br><span class="line"><span class="comment"> *  1. 给按键对应的io口设置工作模式: 下拉输入</span></span><br><span class="line"><span class="comment"> *  2. 配置复用为外部中断</span></span><br><span class="line"><span class="comment"> *  3. 配置外部中断控制器 EXTI</span></span><br><span class="line"><span class="comment"> *  4. 配置NVIC</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_Key_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 开启时钟 */</span></span><br><span class="line">    <span class="comment">/* 1.1  GPIOF*/</span></span><br><span class="line">    RCC-&gt;APB2ENR |= RCC_APB2ENR_IOPFEN;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 1.2  AFIO*/</span></span><br><span class="line">    RCC-&gt;APB2ENR |= RCC_APB2ENR_AFIOEN;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 2. 配置 PF10为下拉输入: MODE=00 CNF=10  ODR=0 */</span></span><br><span class="line">    GPIOF-&gt;CRH &amp;= ~GPIO_CRH_MODE10;</span><br><span class="line">    GPIOF-&gt;CRH |= GPIO_CRH_CNF10_1;</span><br><span class="line">    GPIOF-&gt;CRH &amp;= ~GPIO_CRH_CNF10_0;</span><br><span class="line">    GPIOF-&gt;ODR &amp;= ~GPIO_ODR_ODR10;<span class="comment">/* ODR为0 下拉输入  ODR为1 上拉输入 */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 3. 配置AFIO 配置PF10引脚为外部中断  EXTICR3  0101 */</span></span><br><span class="line">    AFIO-&gt;EXTICR[<span class="number">2</span>] &amp;= ~AFIO_EXTICR3_EXTI10;</span><br><span class="line">    AFIO-&gt;EXTICR[<span class="number">2</span>] |= AFIO_EXTICR3_EXTI10_PF;</span><br><span class="line">    <span class="comment">/* 使用AFIO配置寄存器（AFIO-&gt;EXTICR[2]）将PF10引脚映射到外部中断线10（EXTI10）。*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 4. 配置EXTI */</span></span><br><span class="line">    <span class="comment">/* 4.1. 配置上升沿触发 RTSR TR10=1*/</span></span><br><span class="line">    EXTI-&gt;RTSR |= EXTI_RTSR_TR10;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 4.2 开启 LINE10, 配置的中断屏蔽寄存器 */</span></span><br><span class="line">    EXTI-&gt;IMR |= EXTI_IMR_MR10;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 5. 配置 NVIC */</span></span><br><span class="line">    <span class="comment">/* 5.1 配置优先级组 (3-7) 配置3表示4个二进制位全部用于表示抢占优先级*/</span></span><br><span class="line">    NVIC_SetPriorityGrouping(<span class="number">3</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 5.2 配置优先级 参数1:中断号*/</span></span><br><span class="line">    NVIC_SetPriority(EXTI15_10_IRQn, <span class="number">3</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 5.3 使能Line10 */</span></span><br><span class="line">    NVIC_EnableIRQ(EXTI15_10_IRQn);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: line 15-10的中断服务函数.</span></span><br><span class="line"><span class="comment"> *  一旦按键下按键1,则会执行一次这个函数</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">EXTI15_10_IRQHandler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 务必一定必须要清除中断标志位 */</span></span><br><span class="line">    EXTI-&gt;PR |= EXTI_PR_PR10;</span><br><span class="line"></span><br><span class="line">    Delay_ms(<span class="number">5</span>);<span class="comment">/* 务必一定必须要清除中断标志位 */</span></span><br><span class="line">    <span class="keyword">if</span> ((GPIOF-&gt;IDR &amp; GPIO_IDR_IDR10) != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Driver_LED_Toggle(LED_1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3></li></ol><p><strong>为啥\</strong>**LED**<em>\</em>翻转电平这个函数的if条件判断必须要用*<em>*<em>if<strong> </strong> ((<strong> </strong>GPIOA<strong> </strong>-&gt;<strong> </strong>IDR<em>**</em> &amp; led) == *</em></em>*0*<strong><em>)，而不是*</em></strong>if*<em> *<em> ((*<em> *<em>GPIOA*<em> *<em>-&gt;*<em> *</em>IDR\</em></em></em></em> &amp; led) == 1)？</em></em></p><p>举个例子：</p><p><strong>假设 \</strong>**led**<em>\</em> 是一个位掩码**</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> LED1 (1 &lt;&lt; 0)  <span class="comment">// LED1对应GPIOA的第0位</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED2 (1 &lt;&lt; 1)  <span class="comment">// LED2对应GPIOA的第1位</span></span></span><br><span class="line"><span class="comment">// 可能还有其他LED定义...</span></span><br></pre></td></tr></table></figure><p><strong>而 GPIOA-&gt;IDR 是一个输入数据寄存器，其中的每一位对应一个特定的输入引脚的状态（通常是0或1）。</strong></p><p><strong>现在假设 GPIOA-&gt;</strong> <strong>IDR**</strong> 的值是 0b00000011，即第0位和第1位都为1。 如果我们使用位掩码 <strong><em>\</em>led**</strong> = LED1 | LED2，即 led = (1 &lt;&lt; 0) | (1 &lt;&lt; 1)，那么 led 的值将是 0b00000011。 **</p><p><strong>现在来看 (GPIOA-&gt;</strong> <strong>IDR**</strong> &amp; <strong> </strong>led<strong> </strong>) 的计算：**</p><p><strong>因此，(GPIOA-&gt;</strong> <strong>IDR**</strong> &amp; <strong> </strong>led<strong> </strong>) 的结果将是 0b00000011，而不是单纯的1。**</p><p><strong>如果\</strong>*<em>条件语句<strong> </strong>是 if ((GPIOA-&gt;<strong> </strong>IDR<strong>** &amp; </strong> <strong>led</strong> <em>*) == 1)，那么 (GPIOA-&gt;IDR &amp; led) 的值是 0b00000011，显然不等于1，因此条件将不会成立，这可能与预期的逻辑相悖。</em></em></p><p>因此，<strong>如果**</strong> （<strong>（ GPIOA</strong> <strong>-&gt;</strong> <strong>IDR**</strong> &amp; <strong> </strong>led<strong> </strong>） == *<em>\</em>*0**<em>\</em>）是正解！**</p><ol><li><h3 id="软件设计（HAL库）"><a href="#软件设计（HAL库）" class="headerlink" title="软件设计（HAL库）"></a>软件设计（HAL库）</h3></li><li><h4 id="STM32CubeMX配置"><a href="#STM32CubeMX配置" class="headerlink" title="STM32CubeMX配置"></a>STM32CubeMX配置</h4></li></ol><p>配置LED1的PA0引脚。</p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=N2IwYmYxNGE4ZDRiNzZmN2Y4Y2VhYWNhZmNmNmIxZWZfYUk4SGRsZXNOTllTNzgwNkJuZXVKaldXaThYVzZ3dFVfVG9rZW46WndId2J0VzFXb3BtTld4QTZRSmNXR1M2bkZjXzE3MjUzNjcyODI6MTcyNTM3MDg4Ml9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=NGVhYzk1ZTYzMzA0OTNmNGYwZTRiNjkxZGFlNWFmNDBfdU1OREM1eDdsNjNFcEZMZVE2UGtkUGNBbGJkMkMwRU1fVG9rZW46WDBCTmJDRFFGb1FCejZ4RkZSVWNTY3JRbmxkXzE3MjUzNjcyODI6MTcyNTM3MDg4Ml9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=Mzk0ZmM0YjkyYTUwMTFjY2NkOTJjYTZjOWM0ZmEwOGZfbkFtNUFySmlXcVNKUHBvSENaR2pFdGVMSmoxQnQwSHJfVG9rZW46VkphUWJYdWxsb041T0J4TzNPY2NsN2lUbmhkXzE3MjUzNjcyODI6MTcyNTM3MDg4Ml9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=OTgzNjg0MTY3ZDk3YmE4Mzk5ZmZkYmViOWFiNjk5NDhfc0hod0drUThNaWE4N0hiYUYwSk44U0lJZTBjbUJEUVRfVG9rZW46TGtLNGJKT3Y2b1R4MEN4Z1Q4ZmNGOEUxbnljXzE3MjUzNjcyODI6MTcyNTM3MDg4Ml9WNA" alt="img"></p><p>调整滴答定时器和外部中断的优先级。 否则使用延时消抖会卡死。</p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=NjM3YzM4MmY1ZDJhN2E1MmFjYTZhZGMzZDVhMjcwZGZfZEtyODBDTUxjMHppbkdWTXNSTE9VUGZ6THJXMDAyR09fVG9rZW46VVpabWJtNEE4b0UwQk14Z2F3dGNXWUhibmRoXzE3MjUzNjcyODI6MTcyNTM3MDg4Ml9WNA" alt="img"></p><ol><li><h4 id="GPIO初始化代码"><a href="#GPIO初始化代码" class="headerlink" title="GPIO初始化代码"></a>GPIO初始化代码</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">MX_GPIO_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    GPIO_InitTypeDef GPIO_InitStruct = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* GPIO Ports Clock Enable */</span></span><br><span class="line">    __HAL_RCC_GPIOE_CLK_ENABLE();</span><br><span class="line">    __HAL_RCC_GPIOC_CLK_ENABLE();</span><br><span class="line">    __HAL_RCC_GPIOG_CLK_ENABLE();</span><br><span class="line">    __HAL_RCC_GPIOA_CLK_ENABLE();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*Configure GPIO pin Output Level */</span></span><br><span class="line">    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*Configure GPIO pin : PE3 */</span></span><br><span class="line">    GPIO_InitStruct.Pin = GPIO_PIN_3;</span><br><span class="line">    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;</span><br><span class="line">    GPIO_InitStruct.Pull = GPIO_NOPULL;</span><br><span class="line">    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;</span><br><span class="line">    HAL_GPIO_Init(GPIOE, &amp;GPIO_InitStruct);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*Configure GPIO pin : PG6 */</span></span><br><span class="line">    GPIO_InitStruct.Pin = GPIO_PIN_6;</span><br><span class="line">    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;</span><br><span class="line">    GPIO_InitStruct.Pull = GPIO_PULLDOWN;</span><br><span class="line">    HAL_GPIO_Init(GPIOG, &amp;GPIO_InitStruct);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* EXTI interrupt init*/</span></span><br><span class="line">    HAL_NVIC_SetPriority(EXTI9_5_IRQn, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h4 id="添加中断处理函数"><a href="#添加中断处理函数" class="headerlink" title="添加中断处理函数"></a>添加中断处理函数</h4></li></ol><p>当有按键按下的时候，检测到上升沿会执行中断服务函数：EXTI15_10_IRQHandler，内部又会调用HAL库总的外部中断处理函数HAL_GPIO_EXTI_IRQHandler，然后会调用中断回调函数HAL_GPIO_EXTI_Callback，它是一个<strong>弱实现函数</strong>（用<strong>__weak</strong>修饰， 如果有新的同名函数实现，则执行时会自动调用新的实现函数），我们重新实现这个函数就可以了。</p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=MDViNzU3Y2E2YWY2NDg5YjAyYmQ2MDVjOGUwYjBlOWZfYWV5U3VvN3lmaVI5TWFWVHFZTm9zdjNPaFF2NnJxRXZfVG9rZW46QmFiSmJOTzVSb3ZSR3d4SFY0NWNxQ1RXbkdlXzE3MjUzNjcyODI6MTcyNTM3MDg4Ml9WNA" alt="img"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">EXTI15_10_IRQHandler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* USER CODE BEGIN EXTI15_10_IRQn 0 */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* USER CODE END EXTI15_10_IRQn 0 */</span></span><br><span class="line">    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);</span><br><span class="line">    <span class="comment">/* USER CODE BEGIN EXTI15_10_IRQn 1 */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* USER CODE END EXTI15_10_IRQn 1 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_GPIO_EXTI_IRQHandler</span><span class="params">(<span class="type">uint16_t</span> GPIO_Pin)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* EXTI line interrupt detected */</span></span><br><span class="line">    <span class="keyword">if</span> (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != <span class="number">0x00</span>u)</span><br><span class="line">    &#123;</span><br><span class="line">        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);</span><br><span class="line">        HAL_GPIO_EXTI_Callback(GPIO_Pin);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">__weak <span class="type">void</span> <span class="title function_">HAL_GPIO_EXTI_Callback</span><span class="params">(<span class="type">uint16_t</span> GPIO_Pin)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* Prevent unused argument(s) compilation warning */</span></span><br><span class="line">    UNUSED(GPIO_Pin);</span><br><span class="line">    <span class="comment">/* <span class="doctag">NOTE:</span> This function Should not be modified, when the callback is needed,</span></span><br><span class="line"><span class="comment">           the HAL_GPIO_EXTI_Callback could be implemented in the user file</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在gpio.c中实现中断回调函数即可。</span></span><br><span class="line"><span class="comment">/* USER CODE BEGIN 2 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_GPIO_EXTI_Callback</span><span class="params">(<span class="type">uint16_t</span> GPIO_Pin)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (GPIO_Pin == GPIO_PIN_10)</span><br><span class="line">    &#123;</span><br><span class="line">        HAL_Delay(<span class="number">15</span>);<span class="comment">//调整一下SYSTick的优先级，其默认是最低的！</span></span><br><span class="line">        <span class="comment">// 防抖： 延迟15ms之后再次检测是否仍然是高电平，</span></span><br><span class="line">        <span class="keyword">if</span> (HAL_GPIO_ReadPin(GPIOF, GPIO_Pin) == GPIO_PIN_SET)</span><br><span class="line">        &#123;</span><br><span class="line">            HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* USER CODE END 2 */</span></span><br></pre></td></tr></table></figure><ol><li><h1 id="USART串口通讯"><a href="#USART串口通讯" class="headerlink" title="USART串口通讯"></a>USART串口通讯</h1></li><li><h2 id="通讯基础知识"><a href="#通讯基础知识" class="headerlink" title="通讯基础知识"></a>通讯基础知识</h2></li><li><h3 id="串口介绍"><a href="#串口介绍" class="headerlink" title="串口介绍"></a>串口介绍</h3></li></ol><p>串口通讯（Serial Communication）是一种设备间非常常用的串行通讯方式，因为它简单便捷，因此大部分电子设备都支持该通讯方式，电子工程师在调试设备时也经常使用该通讯方式输出调试信息。</p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=ZWY0N2EwNjIwMDExODM3NWZlNzk3N2FmMWUzNjI0YzJfT0o3ZmN4Q25CT2JmVVRrZ1NPell3V0JscjlYRTVybEtfVG9rZW46SzN3aGJFRGpkb2tia0d4YnpIMGNrcDJjbkRiXzE3MjUzNjc2MjM6MTcyNTM3MTIyM19WNA" alt="img"></p><ol><li><h3 id="串口通讯协议"><a href="#串口通讯协议" class="headerlink" title="串口通讯协议"></a>串口通讯协议</h3></li></ol><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=OTMxM2E4MmM0YmVmNzE1ZDE1MzcxNTNkOGNkMmYxOThfWHBQYmxIRG9ZRUgwZ3ZnWHhaNGtNVFJQSkp6UUNKRGJfVG9rZW46VzE5cWJyRHNHb09jNEZ4dGxDamM4cjVHbnZoXzE3MjUzNjc2MjM6MTcyNTM3MTIyM19WNA" alt="img"></p><p>六个重点：</p><ol><li><strong>波特率</strong></li></ol><p><strong>”波特“（Baudrate），它表示每秒钟传输了多少个码元。**</strong>在二进制的世界码元和位是等价的<strong>**。用每秒传输的比特数表示波特率。</strong></p><p><strong>STM32提供的是**</strong>串口<strong><strong>异步通讯，异步通讯中由于没有时钟信号，所以两个通讯设备之间需要</strong></strong>约定好波特率<strong>**，即每个码元的长度，以便对信号进行解码。常见的波特率为 4800、9600、115200等。</strong></p><ol><li><strong>通讯的起始位</strong></li></ol><p><strong>每开始一次通信时发送方先发出一个逻辑”0”的信号（低电平），表示传输字符的开始。因为总线空闲时为高电平所以开始一次通信时先发送一个明显区别于空闲状态的信号即低电平。</strong></p><ol><li><strong>通讯的停止位</strong></li></ol><p><strong>停止信号可由 0.5、1、1.5 或 2个逻辑1的数据位表示，只要双方约定一致即可。</strong></p><ol><li><strong>空闲位</strong></li></ol><p><strong>串口**</strong>协议规定，当总线处于空闲状态时信号线的状态为‘1’即高电平，表示当前线路上没有数据。**</p><ol><li><strong>有效数据位</strong></li></ol><p><strong>在数据包的起始位之后紧接着的就是要传输的主体数据内容，也称为有效数据，有效数据的长度常被约定为 5、6、7 或8位长。构成一个字符（一般都是8位）。**</strong>先发送最低位<strong><strong>，最后发送最高位（</strong></strong>LSB<strong> </strong>-&gt; MSB），使用低电平表示’0’高电平表示’1’完成数据位的传输。**</p><ol><li><strong>校验位</strong></li></ol><p><strong>数据位加上这一位后，使得“1”的位数应为偶数（偶校验）或奇数（奇校验），以此来校验数据传送的正确性。</strong></p><p><strong>串口**</strong>校验分几种方式：**</p><ol><li><strong>无校验（no</strong> <strong>parity**</strong>）。**</li><li><strong>奇校验（**</strong>odd<strong> </strong>parity<strong><strong>）：如果数据位中“1”的数目是偶数，则</strong></strong>校验位<strong>**为“1”，如果“1”的数目是奇数，校验位为“0”。</strong></li><li><strong>偶校验（even</strong> <strong>parity**</strong>）：如果数据为中“1”的数目是偶数，则<strong><strong>校验位</strong></strong>为“0”，如果为奇数，校验位为“1”。**</li></ol><p><strong>现在的通讯效率非常高，一般也不用**</strong>奇偶校验<strong>**，还有更复杂的检验算法！</strong></p><ol><li><h2 id="USART外设"><a href="#USART外设" class="headerlink" title="USART外设"></a>USART外设</h2></li></ol><p>STM32提供了USART（Universal Synchronous Asynchronous Receiver and Transmitter）通用同步异步收发器。是一个串行通信设备，可以灵活地与外部设备进行全双工数据交换。</p><p>还有UART相比USART去掉了同步通讯功能。</p><p>一共提供5个串口供开发者选择。 </p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=Y2UyYTZhZDg1YTMwYWZjNGY3ZDA1YjA3ZTQ1YjAzZWZfN3pISG96WVIzOXdvR0twMUVoTXZWVHo0c0lNcHJSQjRfVG9rZW46UFI2eGJJWndTb0Y0QU94NGR1dmNCdkJrbkRmXzE3MjUzNjc2MjM6MTcyNTM3MTIyM19WNA" alt="img"></p><p>STM32的USART功能框图如下：</p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=MDJjNmNlNjdiMWM4ZTYxNDIxYTBiY2NhNTk2Nzk3Y2VfZ1B2QkU0cDBhdzAzZmY4ajhHWkJWWFYwMjNoS09WbHlfVG9rZW46UDFRd2JsSDJQb0FQNjB4Vjg0ZGMxWkw5bnZnXzE3MjUzNjc2MjM6MTcyNTM3MTIyM19WNA" alt="img"></p><ol><li>功能引脚说明</li></ol><ul><li><strong>TX：发送数据输出引脚。</strong></li><li><strong>RX：接收数据输入引脚。</strong></li><li><strong>SW_RX：数据接收引脚，只用于单线和**</strong>智能卡<strong>**模式，属于内部引脚，没有具体外部引脚。</strong></li><li><strong>nRTS：请求以发送（**</strong>Request To Send<strong><strong>），n 表示低电平有效。如果使能</strong></strong>RTS<strong><strong>流控制，当 USART接收器准备好接收新数据时就会将nRTS变成低电平；当接收寄存器已满时，nRTS 将被设置为高电平。该</strong></strong>引脚<strong>**只适用于硬件流控制。</strong></li><li><strong>nCTS：清除以发送（**</strong>Clear To Send<strong><strong>），n 表示低电平有效。如果使能</strong></strong>CTS<strong><strong>流控制，发送器在发送下一帧数据之前会检测nCTS引脚，如果为低电平，表示可以发送数据，如果为高电平则在发送完当前</strong></strong>数据帧<strong>**之后停止发送。该引脚只适用于硬件流控制。</strong></li><li><strong>SCLK：发送器时钟输出引脚。这个引脚仅适用于同步模式。</strong></li></ul><ol><li>波特率的产生</li></ol><p>发送器和接收器的波特率是一致的，都是通过设置BRR寄存器来得到。</p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=NDhkZmMxMWM3MTJkYWIyMzUzMWIwNjE0MTVlYmNjODRfa1UwMDlMd3JjQnJYUU02ZkN0R2VDbUdzWVQ3NUFWT3ZfVG9rZW46R2pGVmJnem4zb2VEWmJ4RnU1ZGNNdVB1bkVnXzE3MjUzNjc2MjM6MTcyNTM3MTIyM19WNA" alt="img"></p><p>这里的是给外设的时钟（usart1在APB2上一般是72MHz，usart2，3，4，5在APB1上一般为36MHz）。</p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=ZTMzNDdlMjc1MTYwY2Q2Mzk0NDJhY2Y2NTlmMjgyZGZfRzNBVzAwa1BzZDRXUzg1NE0yZmtrVmhqNVNXbmwwZWhfVG9rZW46U1lnTmI4SE9RbzlzQlV4YXozQ2NTSnVhbnliXzE3MjUzNjc2MjM6MTcyNTM3MTIyM19WNA" alt="img"></p><p>假设我们需要的波特率是<strong>115200</strong>，则对应的分频值应该是：<strong>39.0625</strong>，把这个值写入到BRR寄存器中。<strong>39.0625</strong>的小数部分：<strong>0.0625 * 16 = 1</strong>, 整数部分是：<strong>39(0x27)</strong>。</p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=OWMwMzY2ZTc1NDljNjM1NWZmYzhhOTFiZTk4OTkxMTlfd3A3ZHZhUU11QjduTHNLd3B2bVdYazh6SUFWb3hQQU1fVG9rZW46RTlUaWJFUXZib2dpVTl4UHp6VmM2cldYbmVkXzE3MjUzNjc2MjM6MTcyNTM3MTIyM19WNA" alt="img"></p><p>所以写入到BRR寄存器的值是：<strong>0x0271</strong>。</p><ol><li>相关寄存器</li></ol><p>查阅参考手册540页，这里就不一一列举了。</p><ol><li><h2 id="串口案例1：计算机和串口通讯"><a href="#串口案例1：计算机和串口通讯" class="headerlink" title="串口案例1：计算机和串口通讯"></a>串口案例1：计算机和串口通讯</h2></li><li><h3 id="需求描述-4"><a href="#需求描述-4" class="headerlink" title="需求描述"></a>需求描述</h3></li></ol><p>电脑通过串口向STM32发送数据，STM32原封不动的再发送过来。电脑可以借助串口助手来发送或接受数据。</p><ol><li><h3 id="硬件电路设计-4"><a href="#硬件电路设计-4" class="headerlink" title="硬件电路设计"></a>硬件电路设计</h3></li></ol><p>目前很多电脑已经没有串口接口了，为了使用串口，我们自制的下载器STLink2.1拥有USB转串口的功能。</p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=ZjEyMDRiMTRlN2QzYzY5MGRjYWJhMDY0NTQ3ODhhNGRfUEFISERic01Va1VGSzlVUUU1TVJGaEdCMEV3Z3kzVklfVG9rZW46SHAzU2I5YXM5b0NldEp4ZXZvamNnbEhzbkdWXzE3MjUzNjc2MjM6MTcyNTM3MTIyM19WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=MzA3ZTUyZTg5ZjZiZWM4OWE5MmQ3MWMxNzViODY5N2ZfeHV3ZzVaZmNxVHBQbXJhcXFxTENyVWdJRUViY2pNOXlfVG9rZW46WUdFSGIxQTI3b1pxNHF4MkJJTmNpa2wxblRnXzE3MjUzNjc2MjM6MTcyNTM3MTIyM19WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=YjRkYWQ3MDYyYzk0ZWIxYjllZWQwMGVhMjgyMjg0NDNfWXBNb2FFeHlpeTdMbmhScXVrMjg1Q1BOd0x5U2hXY1lfVG9rZW46V1BSTGJjQzc1b2oycXN4Q2pqQWNMZ2xxbnlnXzE3MjUzNjc2MjM6MTcyNTM3MTIyM19WNA" alt="img"></p><ol><li><h3 id="软件设计：轮询的方式接收（寄存器）"><a href="#软件设计：轮询的方式接收（寄存器）" class="headerlink" title="软件设计：轮询的方式接收（寄存器）"></a>软件设计：轮询的方式接收（寄存器）</h3></li><li><h4 id="main-c-3"><a href="#main-c-3" class="headerlink" title="main.c"></a>main.c</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Driver_USART.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;string.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> buff[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">uint8_t</span> len = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Driver_USART1_Init();</span><br><span class="line">    <span class="comment">// Driver_USART1_SendChar(&#x27;a&#x27;);</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// uint8_t *str = &quot;Hello atguigu!\r\n&quot;;</span></span><br><span class="line">        <span class="comment">// Driver_USART1_SendString(str, strlen((char *)str));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* uint8_t *str = &quot;尚硅谷\r\n&quot;;</span></span><br><span class="line"><span class="comment">        Driver_USART1_SendString(str, strlen((char *)str));</span></span><br><span class="line"><span class="comment">        Delay_s(1); */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// uint8_t c =  Driver_USART1_ReceiveChar();</span></span><br><span class="line">        <span class="comment">// Driver_USART1_SendChar(c);</span></span><br><span class="line"></span><br><span class="line">        Driver_USART1_ReceiveString(buff, &amp;len);</span><br><span class="line">        Driver_USART1_SendString(buff, len);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h4 id="Driver-USART-h"><a href="#Driver-USART-h" class="headerlink" title="Driver_USART.h"></a>Driver_USART.h</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __DRVIER_USART_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __DRVIER_USART_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_USART1_Init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_USART1_SendChar</span><span class="params">(<span class="type">uint8_t</span> byte)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_USART1_SendString</span><span class="params">(<span class="type">uint8_t</span> *str, <span class="type">uint16_t</span> len)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">Driver_USART1_ReceiveChar</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_USART1_ReceiveString</span><span class="params">(<span class="type">uint8_t</span> buff[], <span class="type">uint8_t</span> *len)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><ol><li><h4 id="Driver-USART-c"><a href="#Driver-USART-c" class="headerlink" title="Driver_USART.c"></a>Driver_USART.c</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Driver_USART.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 初始化串口1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_USART1_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 开启时钟 */</span></span><br><span class="line">    <span class="comment">/* 1.1 串口1外设的时钟 */</span></span><br><span class="line">    RCC-&gt;APB2ENR |= RCC_APB2ENR_USART1EN;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 1.2 GPIO时钟 */</span></span><br><span class="line">    RCC-&gt;APB2ENR |= RCC_APB2ENR_IOPAEN;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 2. 配置GPIO引脚的工作模式  PA9=Tx(复用推挽 CNF=10 MODE=11)  PA10=Rx(浮空输入 CNF=01 MODE=00)*/</span></span><br><span class="line">    GPIOA-&gt;CRH |= GPIO_CRH_CNF9_1;</span><br><span class="line">    GPIOA-&gt;CRH &amp;= ~GPIO_CRH_CNF9_0;</span><br><span class="line">    GPIOA-&gt;CRH |= GPIO_CRH_MODE9;</span><br><span class="line"></span><br><span class="line">    GPIOA-&gt;CRH &amp;= ~GPIO_CRH_CNF10_1;</span><br><span class="line">    GPIOA-&gt;CRH |= GPIO_CRH_CNF10_0;   </span><br><span class="line">    GPIOA-&gt;CRH &amp;= ~GPIO_CRH_MODE10;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 3. 串口的参数配置 */</span>   </span><br><span class="line">    <span class="comment">/* 3.1 配置波特率 115200 */</span></span><br><span class="line">    USART1-&gt;BRR = <span class="number">0x271</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 3.2 配置一个字的长度 8位 */</span></span><br><span class="line">    USART1-&gt;CR1 &amp;= ~USART_CR1_M;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 3.3 配置不需要校验位 */</span></span><br><span class="line">    USART1-&gt;CR1 &amp;= ~USART_CR1_PCE;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 3.4 配置停止位的长度 */</span></span><br><span class="line">    USART1-&gt;CR2 &amp;= ~USART_CR2_STOP;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 3.5 使能接收和发送 */</span></span><br><span class="line">    USART1-&gt;CR1 |= USART_CR1_TE;</span><br><span class="line">    USART1-&gt;CR1 |= USART_CR1_RE;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 4. 使能串口 */</span></span><br><span class="line">    USART1-&gt;CR1 |= USART_CR1_UE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 发送一个字节</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; byte 要发送的字节</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_USART1_SendChar</span><span class="params">(<span class="type">uint8_t</span> byte)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 等待发送寄存器为空 */</span></span><br><span class="line">    <span class="keyword">while</span> ((USART1-&gt;SR &amp; USART_SR_TXE) == <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 2. 数据写出到数据寄存器 */</span></span><br><span class="line">    USART1-&gt;DR = byte;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 发送一个字符串</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; *str 要发送的字符串</span></span><br><span class="line"><span class="comment"> * @param &#123;uint16_t&#125; len 字符串中字节的长度</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_USART1_SendString</span><span class="params">(<span class="type">uint8_t</span> *str, <span class="type">uint16_t</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint16_t</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Driver_USART1_SendChar(str[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 接收一个字节的数据</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125; 接收到的字节</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">Driver_USART1_ReceiveChar</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 等待数据寄存器非空 */</span></span><br><span class="line">    <span class="keyword">while</span> ((USART1-&gt;SR &amp; USART_SR_RXNE) == <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> USART1-&gt;DR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 接收变长数据.接收到的数据存入到 buff中</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; buff 存放接收到的数据</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; *len 存放收到的数据的字节的长度</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_USART1_ReceiveString</span><span class="params">(<span class="type">uint8_t</span> buff[], <span class="type">uint8_t</span> *len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint8_t</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 等待接收非空</span></span><br><span class="line">        <span class="keyword">while</span> ((USART1-&gt;SR &amp; USART_SR_RXNE) == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//在等待期间, 判断是否收到空闲帧</span></span><br><span class="line">            <span class="keyword">if</span> (USART1-&gt;SR &amp; USART_SR_IDLE)</span><br><span class="line">            &#123;</span><br><span class="line">                *len = i;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        buff[i] = USART1-&gt;DR;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h3 id="软件设计：中断的方式接收（寄存器）"><a href="#软件设计：中断的方式接收（寄存器）" class="headerlink" title="软件设计：中断的方式接收（寄存器）"></a>软件设计：中断的方式接收（寄存器）</h3></li></ol><p>USART提供了多个中断事件。</p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=N2Q1NTM3OGYxMDFhZWQ0NGU4ODEzMmUzMGY0MWI3OWRfOVFwak1EaUJOZ25MT3p4dm1TQTVzTDJDb25vQU1lZDhfVG9rZW46U255aWJoZzNCb29FdWp4eVVFVGM4NVBLbmRiXzE3MjUzNjc2MjM6MTcyNTM3MTIyM19WNA" alt="img"></p><ol><li><h4 id="Driver-USART-c-1"><a href="#Driver-USART-c-1" class="headerlink" title="Driver_USART.c"></a>Driver_USART.c</h4></li></ol><p>添加中断相关代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Driver_USART.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 初始化串口1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_USART1_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 开启时钟 */</span></span><br><span class="line">    <span class="comment">/* 1.1 串口1外设的时钟 */</span></span><br><span class="line">    RCC-&gt;APB2ENR |= RCC_APB2ENR_USART1EN;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 1.2 GPIO时钟 */</span></span><br><span class="line">    RCC-&gt;APB2ENR |= RCC_APB2ENR_IOPAEN;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 2. 配置GPIO引脚的工作模式  PA9=Tx(复用推挽 CNF=10 MODE=11)  PA10=Rx(浮空输入 CNF=01 MODE=00)*/</span></span><br><span class="line">    GPIOA-&gt;CRH |= GPIO_CRH_CNF9_1;</span><br><span class="line">    GPIOA-&gt;CRH &amp;= ~GPIO_CRH_CNF9_0;</span><br><span class="line">    GPIOA-&gt;CRH |= GPIO_CRH_MODE9;</span><br><span class="line"></span><br><span class="line">    GPIOA-&gt;CRH &amp;= ~GPIO_CRH_CNF10_1;</span><br><span class="line">    GPIOA-&gt;CRH |= GPIO_CRH_CNF10_0;   </span><br><span class="line">    GPIOA-&gt;CRH &amp;= ~GPIO_CRH_MODE10;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 3. 串口的参数配置 */</span>   </span><br><span class="line">    <span class="comment">/* 3.1 配置波特率 115200 */</span></span><br><span class="line">    USART1-&gt;BRR = <span class="number">0x271</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 3.2 配置一个字的长度 8位 */</span></span><br><span class="line">    USART1-&gt;CR1 &amp;= ~USART_CR1_M;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 3.3 配置不需要校验位 */</span></span><br><span class="line">    USART1-&gt;CR1 &amp;= ~USART_CR1_PCE;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 3.4 配置停止位的长度 */</span></span><br><span class="line">    USART1-&gt;CR2 &amp;= ~USART_CR2_STOP;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 3.5 使能接收和发送 */</span></span><br><span class="line">    USART1-&gt;CR1 |= USART_CR1_TE;</span><br><span class="line">    USART1-&gt;CR1 |= USART_CR1_RE;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 4. 使能串口 */</span></span><br><span class="line">    USART1-&gt;CR1 |= USART_CR1_UE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 发送一个字节</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; byte 要发送的字节</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_USART1_SendChar</span><span class="params">(<span class="type">uint8_t</span> byte)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 等待发送寄存器为空 */</span></span><br><span class="line">    <span class="keyword">while</span> ((USART1-&gt;SR &amp; USART_SR_TXE) == <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 2. 数据写出到数据寄存器 */</span></span><br><span class="line">    USART1-&gt;DR = byte;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 发送一个字符串</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; *str 要发送的字符串</span></span><br><span class="line"><span class="comment"> * @param &#123;uint16_t&#125; len 字符串中字节的长度</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_USART1_SendString</span><span class="params">(<span class="type">uint8_t</span> *str, <span class="type">uint16_t</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint16_t</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Driver_USART1_SendChar(str[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 接收一个字节的数据</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125; 接收到的字节</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">Driver_USART1_ReceiveChar</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 等待数据寄存器非空 */</span></span><br><span class="line">    <span class="keyword">while</span> ((USART1-&gt;SR &amp; USART_SR_RXNE) == <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> USART1-&gt;DR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 接收变长数据.接收到的数据存入到buff中</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; buff 存放接收到的数据</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; *len 存放收到的数据的字节的长度</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_USART1_ReceiveString</span><span class="params">(<span class="type">uint8_t</span> buff[], <span class="type">uint8_t</span> *len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint8_t</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 等待接收非空</span></span><br><span class="line">        <span class="keyword">while</span> ((USART1-&gt;SR &amp; USART_SR_RXNE) == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//在等待期间, 判断是否收到空闲帧</span></span><br><span class="line">            <span class="keyword">if</span> (USART1-&gt;SR &amp; USART_SR_IDLE)</span><br><span class="line">            &#123;</span><br><span class="line">                *len = i;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        buff[i] = USART1-&gt;DR;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 缓冲接收到的数据 */</span></span><br><span class="line"><span class="type">uint8_t</span> buff[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="comment">/* 存储接收到的字节的长度 */</span></span><br><span class="line"><span class="type">uint8_t</span> len = <span class="number">0</span>;</span><br><span class="line"><span class="type">uint8_t</span> isToSend = <span class="number">0</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">USART1_IRQHandler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 数据接收寄存器非空 */</span></span><br><span class="line">    <span class="keyword">if</span> (USART1-&gt;SR &amp; USART_SR_RXNE)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 对USART_DR的读操作可以将接收非空的中断位清零。 所以不用单独清除了.</span></span><br><span class="line">        <span class="comment">//USART1-&gt;SR &amp;= ~USART_SR_RXNE;</span></span><br><span class="line">        buff[len] = USART1-&gt;DR;</span><br><span class="line">        len++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (USART1-&gt;SR &amp; USART_SR_IDLE)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* 清除空闲中断标志位: 先读sr,再读dr.就可以实现清除了 */</span></span><br><span class="line">        USART1-&gt;SR;</span><br><span class="line">        USART1-&gt;DR;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* 变长数据接收完毕 */</span></span><br><span class="line">        <span class="comment">//Driver_USART1_SendString(buff, len);</span></span><br><span class="line">        </span><br><span class="line">        isToSend = <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* 把接收字节的长度清0 */</span></span><br><span class="line">        <span class="comment">// len = 0;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h4 id="main-c-4"><a href="#main-c-4" class="headerlink" title="main.c"></a>main.c</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Driver_USART.h&quot;</span></span></span><br><span class="line"><span class="comment">/* 缓冲接收到的数据 */</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">uint8_t</span> buff[<span class="number">100</span>];</span><br><span class="line"><span class="comment">/* 存储接收到的字节的长度 */</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">uint8_t</span> len;</span><br><span class="line"><span class="keyword">extern</span> <span class="type">uint8_t</span> isToSend;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Driver_USART1_Init();</span><br><span class="line">    Driver_USART1_SendString(<span class="string">&quot;abc&quot;</span>, <span class="number">3</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(isToSend)</span><br><span class="line">        &#123;</span><br><span class="line">            Driver_USART1_SendString(buff, len);</span><br><span class="line">            isToSend = <span class="number">0</span>;</span><br><span class="line">            len = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h3 id="软件设计（HAL库）-1"><a href="#软件设计（HAL库）-1" class="headerlink" title="软件设计（HAL库）"></a>软件设计（HAL库）</h3></li><li><h4 id="使用STM32CubeMx搭建工程"><a href="#使用STM32CubeMx搭建工程" class="headerlink" title="使用STM32CubeMx搭建工程"></a>使用STM32CubeMx搭建工程</h4></li><li><p>基本配置</p></li></ol><p>选择芯片，配置debug，配置时钟参考前面的内容。</p><ol><li>配置串口</li></ol><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=NDE1OTNhMjc5MWU5MDEyMzRmOGI1ZjU0ODA4OTZlOTBfV1BKYTJUV0twcVpQa3ZrNU5mc2lWb1pzOEJUYjQ1eHFfVG9rZW46WHlVQWJwdFRGb2VUaUx4c3A4WmNic1dRbjVlXzE3MjUzNjc2MjM6MTcyNTM3MTIyM19WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=OGJlZTc5ZjdkOWQ5Y2IwZTMwZGJmOWMyYzU4ZWMzZTJfV25od2tDalVOdGZEVkJPMzljczhidHBxVXFVaEVGdERfVG9rZW46UWRHcGJCencxb09ZZEJ4TUNwc2NDbFZ5bkllXzE3MjUzNjc2MjM6MTcyNTM3MTIyM19WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=NzNlMjgyNWI2ZjgzMzNlZDFjZGViM2QyMDkxNWIzOTBfNWk4SnZNNkd2OG55RFdOeGcxb2h5M2NwWFU5MmN2Z0VfVG9rZW46S29OeGI1QzF2b2FQY1V4MW1URGMxSzh0bjRnXzE3MjUzNjc2MjM6MTcyNTM3MTIyM19WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=MTljYjI1ZjkyMzBmYWIzM2ExOWQ3NGM3YzI2NmUyNjRfZVBITjZIekZ2U240dzZya0tpalV0MGxBV0ZlUlVYZnlfVG9rZW46UzdZVmJTc0dYb1pNR3V4RkhVOWNqeDFUbkhnXzE3MjUzNjc2MjM6MTcyNTM3MTIyM19WNA" alt="img"></p><ol><li>添加我们的代码</li></ol><p>时钟初始化，串口初始化工具已经帮我们完成了。我们可以轮询方式收发数据，也可以采用中断的方式收发数据。 </p><ol><li><h4 id="轮询的方式收发"><a href="#轮询的方式收发" class="headerlink" title="轮询的方式收发"></a>轮询的方式收发</h4></li></ol><p><strong>轮询**</strong>的方式就是在循环中一直检测<strong><strong>串口</strong></strong>，是否有数据进来，如果有就读进来，然后再原封不动的发出。**</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint8_t</span> buff[<span class="number">10</span>];</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_Init();</span><br><span class="line">    SystemClock_Config();</span><br><span class="line">    MX_GPIO_Init();</span><br><span class="line">    MX_USART1_UART_Init();</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* 从串口读取数据：参数1 指定的串口 参数2：存储读取到的数据 参数3：一接收多少条数据 */</span></span><br><span class="line">        <span class="keyword">if</span> (HAL_UART_Receive(&amp;huart1, buff, <span class="number">10</span>, HAL_MAX_DELAY) == HAL_OK)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 把收到的数据原封不动的发出去</span></span><br><span class="line">            HAL_UART_Transmit(&amp;huart1, buff, <span class="number">10</span>, HAL_MAX_DELAY);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>轮询方式的一些问题：轮询模式使用起来最简单，但是会占用大量的CPU时间，在等待接收和等待发送完毕时，CPU不能去做别的运算，只能在这里空等，运行的效率很低。</p><ol><li><h4 id="中断的方式接收：定长数据"><a href="#中断的方式接收：定长数据" class="headerlink" title="中断的方式接收：定长数据"></a>中断的方式接收：定长数据</h4></li></ol><p><strong>stm32f1xx_hal_uart.c</strong>中关于中断回调函数的描述。</p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=YzJiYzJlNzM1YjE3MzE2NTg3ZmNhZTM1ZTQwYTIwZDRfWEZXbWx1THIwakNTdFBDUldvcFJXcUlYWngyQUtmWTlfVG9rZW46VXpQS2JVY1lLb3VvZjR4VmZtTWNjMG1sbkFiXzE3MjUzNjc2MjM6MTcyNTM3MTIyM19WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=YzQyZWFlNWNkZGRiYTJlNDc4ZGMyMjg2OWYwNzM0YzlfeG1WWnNHcWhPVHlUNDhta0hSOXRIMUxtdmluSTQzZzJfVG9rZW46UnQ2NWJYd2ZKb0ZQYjF4ajBBS2NvZ0RPbm5lXzE3MjUzNjc2MjM6MTcyNTM3MTIyM19WNA" alt="img"></p><p>这里函数用了__weak 修饰，当有其他实现的时候，编译器会忽略这里的。我们只要在这个函数中写收发逻辑就行了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint8_t</span> buff[<span class="number">1</span>];    <span class="comment">// 接收缓冲， 一次接受一个字节的数据</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_UART_RxCpltCallback</span><span class="params">(UART_HandleTypeDef *huart)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (huart1.Instance == USART1)</span><br><span class="line">    &#123;</span><br><span class="line">        HAL_UART_Transmit(&amp;huart1, buff, <span class="number">1</span>, HAL_MAX_DELAY);</span><br><span class="line">        HAL_UART_Receive_IT(&amp;huart1, buff, <span class="number">1</span>); <span class="comment">// 继续接收</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_Init();</span><br><span class="line">    MX_GPIO_Init();</span><br><span class="line">    MX_USART1_UART_Init();   </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 用中断的方式接收一个字节的数据 */</span></span><br><span class="line">    HAL_UART_Receive_IT(&amp;huart1, buff, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h4 id="中断的方式接收：变长数据"><a href="#中断的方式接收：变长数据" class="headerlink" title="中断的方式接收：变长数据"></a>中断的方式接收：变长数据</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint8_t</span> rxBuff[<span class="number">1000</span>]; <span class="comment">// 接收缓冲区</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// size 实际接收的数据的长度</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_UARTEx_RxEventCallback</span><span class="params">(UART_HandleTypeDef *huart, <span class="type">uint16_t</span> Size)</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (huart1.Instance == USART1)</span><br><span class="line">    &#123;</span><br><span class="line">        HAL_UART_Transmit(&amp;huart1, rxBuff, Size, <span class="number">100</span>);</span><br><span class="line">        HAL_UARTEx_ReceiveToIdle_IT(&amp;huart1, rxBuff, <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_Init();</span><br><span class="line">    SystemClock_Config();</span><br><span class="line">    MX_GPIO_Init();</span><br><span class="line">    MX_USART1_UART_Init();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 当接收到1000个字符或者碰到空闲帧, 则接收结束 */</span></span><br><span class="line">    HAL_UARTEx_ReceiveToIdle_IT(&amp;huart1, rxBuff, <span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h2 id="串口案例2：重定向printf"><a href="#串口案例2：重定向printf" class="headerlink" title="串口案例2：重定向printf"></a>串口案例2：重定向printf</h2></li><li><h3 id="需求描述-5"><a href="#需求描述-5" class="headerlink" title="需求描述"></a>需求描述</h3></li></ol><p>C语言中经常使用printf来输出调试信息，打印到屏幕（控制台）。由于在单片机中没有屏幕，但是我们可以重定向printf，把数据<strong>打印到**</strong>串口**，从而在电脑端接收调试信息。这是除了debug外，另外一个非常有效的调试手段。</p><ol><li><h3 id="软件设计（寄存器）-2"><a href="#软件设计（寄存器）-2" class="headerlink" title="软件设计（寄存器）"></a>软件设计（寄存器）</h3></li><li><h4 id="Driver-USART-c-2"><a href="#Driver-USART-c-2" class="headerlink" title="Driver_USART.c"></a>Driver_USART.c</h4></li></ol><p>添加<strong>fputc</strong>函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">fputc</span><span class="params">(<span class="type">int</span> c, FILE *file)</span></span><br><span class="line">&#123;</span><br><span class="line">    Driver_USART1_SendChar(c);</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 当调用printf的时候,会自动调用这个方法来执行,只需要调用一个通过串口发送字符的函数</span></span><br></pre></td></tr></table></figure><ol><li><h4 id="main-c-5"><a href="#main-c-5" class="headerlink" title="main.c"></a>main.c</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Driver_USART.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Delay.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Driver_USART1_Init();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;hello world\r\n&quot;</span>);</span><br><span class="line">        Delay_ms(<span class="number">500</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h4 id="Keil设置"><a href="#Keil设置" class="headerlink" title="Keil设置"></a>Keil设置</h4></li></ol><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=NGM1ZjEzYTRiMDEyYzBmODMwOTE2NzNmYjA5ZTViMzJfQzhOc3l3YXd0Tm5xNUg1elZzVWZ1QklnNkM1Z0l6Y0RfVG9rZW46SkZKWWJ4a1Y1b0RYNXJ4UGFVUWNhNTJMbnNjXzE3MjUzNjc2MjM6MTcyNTM3MTIyM19WNA" alt="img"></p><ol><li><h3 id="软件设计（HAL库）-2"><a href="#软件设计（HAL库）-2" class="headerlink" title="软件设计（HAL库）"></a>软件设计（HAL库）</h3></li><li><h4 id="usart-h-代码清单"><a href="#usart-h-代码清单" class="headerlink" title="usart.h 代码清单"></a>usart.h 代码清单</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;main.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">extern</span> UART_HandleTypeDef huart1;</span><br><span class="line"><span class="type">void</span> <span class="title function_">MX_USART1_UART_Init</span><span class="params">(<span class="type">void</span>)</span>;</span><br></pre></td></tr></table></figure><ol><li><h4 id="usart-c-代码清单"><a href="#usart-c-代码清单" class="headerlink" title="usart.c 代码清单"></a>usart.c 代码清单</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">fputc</span><span class="params">(<span class="type">int</span> ch, FILE *f)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 发送一个字节数据到串口DEBUG_USART */</span></span><br><span class="line">    HAL_UART_Transmit(&amp;huart1, (<span class="type">uint8_t</span> *)&amp;ch, <span class="number">1</span>, <span class="number">1000</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> (ch);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h1 id="I2C-通讯"><a href="#I2C-通讯" class="headerlink" title="I2C 通讯"></a>I2C 通讯</h1></li><li><h2 id="I2C基础知识"><a href="#I2C基础知识" class="headerlink" title="I2C基础知识"></a>I2C基础知识</h2></li></ol><p>I2C 通讯协议（Inter-Integrated Circuit）是由Phiilps公司开发的，由于它引脚少，硬件实现简单，可扩展性强，不需要 USART、CAN等通讯协议的外部收发设备，现在被广泛地使用在系统内多个集成电路（IC）间的通讯。</p><p>I2C（Inter-Integrated Circuit）集成电路总线，是一种同步 串行 半双工通信总线。 通信协议中，SDA（串行数据线）和SCL（串行时钟线）是两个主要的信号线。 因为有SCL时钟线所以当然是同步的，只有一根SDA线且不可同时收发，I2C总线是一个多主设备、多从设备的总线，通常由主设备（比如微控制器）发起通信，而从设备（比如EEPROM芯片）响应。</p><p>I2C总线采用开漏（open-drain）或开集电极（open-collector）驱动方式，这意味着设备只能将信号线拉低，而不能主动拉高。 相反，电平被拉高是通过上拉电阻实现的，是一种简单的双向两线制总线协议标准，支持<strong>同步串行\</strong>*<em>半双工*</em>通讯。</p><p>I2C 通讯设备之间的常用连接方式：</p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=ZDJiZjM0Yzk1OTMzMGIwMWFhNjA3ZGRkODFlNzZiY2Jfb0p2RHc0c08zaVZVcmtQMFZFMVNOR0hnaUhZMUhXV3lfVG9rZW46RW16TGJZYVBLb1VLaVV4bllnM2NvSEF0bmloXzE3MjUzNjg4OTA6MTcyNTM3MjQ5MF9WNA" alt="img"></p><p><a href="https://xiza3i1x6q4.feishu.cn/sync/J3r7d3lz1s5Mqjb5aGDcqo5pnFd">https://xiza3i1x6q4.feishu.cn/sync/J3r7d3lz1s5Mqjb5aGDcqo5pnFd</a></p><p>在I²C通信协议中，SDA（Serial Data Line）的电平状态确实用来表示通信的控制权归属。 拉高（置高电平）SDA通常表示的是主设备（Master）释放了总线的控制权，让从设备（Slave）有机会在总线上发送数据或者响应主设备的请求。</p><p>1.开漏结构： <strong>I²C总线通常是开漏结构</strong> ，这意味着在不同的设备之间，SDA和SCL都会被外部上拉电阻拉高，而设备在通信时通过拉低SDA和SCL来进行通信。 因此， <strong>释放控制权通常是通过主设备放弃拉低SDA线实现的，SDA线由上拉电阻拉到高电平</strong> 。<br>2.从设备响应：当主设备完成其通信操作后，它将SDA线拉高，这样从设备便能够知道主设备已经完成了其发送的数据或者请求。 从设备此时可以在总线上发送数据回复或者等待下一次主设备的指令。<br>3.协议规定：根据I²C协议， <strong>SDA的高电平表示空闲状态或者主设备释放总线的意图</strong> 。 从设备检测到SDA被拉高后，会知道主设备当前没有在总线上发送数据或者请求，因此从设备有机会接管总线并发送数据或响应。</p><p>总之，SDA被拉高表示主设备不再活跃地发送数据或命令，从而让从设备可以在总线上接管，发送数据或者响应主设备。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ol><li>总线空闲状态：<ol><li>当总线空闲时，SDA和SCL都被上拉电阻拉高，表示没有设备在使用总线。 这是总线的默认状态。</li></ol></li><li>启动和停止条件：<ol><li>I2C通信开始时，主设备会发出一个启动条件（Start Condition），这表现为SDA从高到低的跳变，而SCL保持高电平。</li><li>通信结束时，主设备会发出一个停止条件（Stop Condition），这表现为SDA从低到高的跳变，而SCL保持高电平。</li></ol></li><li>数据传输：<ol><li>在数据传输过程中，无论是主设备还是从设备，都在SCL时钟周期内驱动SDA线进行数据传输。 当某个设备需要发送数据时，它会控制SDA线，在SCL的上升沿之前设置好数据。</li><li>主设备在发送完地址后，根据LSB的值（LSB是用来指示数据传输的读写方向的）继续进行数据传输。</li><li>如果是写操作，主设备会发送数据字节到从设备，然后等待从设备的确认信号。</li><li>如果是读操作，从设备要响应数据。 在这种情况下，主设备释放SDA线，让SDA通过上拉电阻恢复到高电平，然后从设备在接下来的时钟周期内驱动SDA线，以发送数据。 主设备会接收从设备发送的数据，并发送确认（ACK）或非确认（NACK）信号以告知从设备是否需要继续发送数据。</li></ol></li></ol><p>因为SDA被设计成开漏驱动，任何设备都只能拉低SDA，而不能直接拉高，这样也避免了多个设备同时驱动SDA线时的电平冲突，这样的一种机制保证了I2C总线上设备之间的协调和无冲突通信。</p><h2 id="沟通方向"><a href="#沟通方向" class="headerlink" title="沟通方向"></a>沟通方向</h2><ul><li>LSB为0时，表示主设备要向从设备写入数据。</li><li>LSB为1时，表示主设备要从从设备读取数据。</li></ul><p>主设备发送数据给从设备（写操作）</p><ul><li>SDA控制：主设备控制SDA线发送地址和数据字节。</li><li>SCL控制：主设备控制SCL线产生时钟信号，确定数据传输的时序。</li></ul><p>从设备发送数据给主设备（读操作）</p><ul><li>SDA控制：从设备控制SDA线发送数据字节。</li><li>SCL控制：主设备控制SCL线产生时钟信号，确定数据传输的时序。</li></ul><p>总的来说，主设备负责控制总线的时钟和发送地址/数据，而从设备负责在主设备的控制下发送数据。</p><ol><li><h2 id="I2C案例1：软件模拟I2C"><a href="#I2C案例1：软件模拟I2C" class="headerlink" title="I2C案例1：软件模拟I2C"></a>I2C案例1：软件模拟I2C</h2></li></ol><p>EEPROM芯片最常用的通讯方式就是I2C协议。 我们使用的芯片是M24C02。</p><ol><li><h3 id="需求描述-6"><a href="#需求描述-6" class="headerlink" title="需求描述"></a>需求描述</h3></li></ol><p>我们向E2PROM写入一段数据，再读取出来，最后发送到串口，核对是否读写正确。</p><ol><li><h3 id="硬件电路设计-5"><a href="#硬件电路设计-5" class="headerlink" title="硬件电路设计"></a>硬件电路设计</h3></li><li><h4 id="硬件原理图"><a href="#硬件原理图" class="headerlink" title="硬件原理图"></a>硬件原理图</h4></li></ol><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=YzJjZjkzYWE3ZmI5ZGZmYTMwMmExYzUwYmQzYTkwNzNfalJuQU9JN1VwR3lvYUN5VEMzNEVNajB5Nkd1aFVxTFlfVG9rZW46SW9DMWJZcHNUb0lyelp4N3F4S2M2MGFKblBEXzE3MjUzNjg4OTA6MTcyNTM3MjQ5MF9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=NjczNDNiYzg1NThlNmMyNmZlNWY1NzNiOGU1MGMyMzVfRGtBUXVjTG1PU2tBZzlJejV6M3VtSUVwZFhLZjlVUHpfVG9rZW46SWZDOGJqUEpkb29NdlV4RjgxSGNIb0JVbnZnXzE3MjUzNjg4OTA6MTcyNTM3MjQ5MF9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=NzE2M2U2NDY1YjcwNzEzZWM0ODlhMzY1YTc4ZGU0MDJfQkVYVkk3NFNwbW9ZalFzdThLRE9XT2pWd0w0NVd1dzNfVG9rZW46TlZRZGJUVWR1b1VES2x4QUVSZmNNSUh5blZjXzE3MjUzNjg4OTA6MTcyNTM3MjQ5MF9WNA" alt="img"></p><ol><li><h4 id="M24C02简介"><a href="#M24C02简介" class="headerlink" title="M24C02简介"></a>M24C02简介</h4></li><li><p>M24C02的SCL及SDA 引脚连接到了STM32对应的I2C引脚中，结合上拉电阻，构成了I2C通讯总线，它们通过I2C总线交互。</p></li><li><p>E2PROM芯片的设备地址一共有7位，其中高4位固定为：1010，低3位则由E3/E2/E1信号线的电平决定E2PROM设备地址。</p></li><li><p>R/W是读写方向控制位，与地址无关。</p></li></ol><p>在我们电路图中由于E1/E2/E3均是接的低电平，所以它的地址是1010000即0x50。</p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=ODczY2NhYTVhYWM0ZDhkMWZjMjZlZGIzYmQzNTdjZGNfWUNKS0FIN2FyRXB1bUtMTldHOERVY2Z6MWdBNDdRUEtfVG9rZW46VGpWcGJPNzhWb0drOEd4aHh1OGNsZTV5bnBiXzE3MjUzNjg4OTA6MTcyNTM3MjQ5MF9WNA" alt="img"></p><p>由于I2C通讯时常常是地址跟读写方向连在一起构成一个8位数，且当R/W位为0 时，表示写方向，所以加上7位地址，其值为“0xA0”，常称该值为I2C设备的“写地址”。</p><p>当R/W位为1时，表示读方向，加上7位地址，其值为“0xA1”，常称该值为“读地址”。</p><ol><li><h3 id="操作时序图整理"><a href="#操作时序图整理" class="headerlink" title="操作时序图整理"></a>操作时序图整理</h3></li><li><h4 id="起始和停止信号"><a href="#起始和停止信号" class="headerlink" title="起始和停止信号"></a>起始和停止信号</h4></li></ol><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=MjZlOGEwNmI2MzljYzczMjljMzQwYTZmN2YzNjRhNWRfMzJKOW1WZjliNlNDSWtEbmhRZm1saTZCMEtyVThqMEtfVG9rZW46STVKOWJQVnRzb2R5T2x4V2VQTGN2ZWFubmxjXzE3MjUzNjg4OTA6MTcyNTM3MjQ5MF9WNA" alt="img"></p><ol><li><h4 id="数据有效性"><a href="#数据有效性" class="headerlink" title="数据有效性"></a>数据有效性</h4></li></ol><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=MTE5Y2YxNGNhM2VkM2MwNzUxMjAyOTU2NzEzMTA4ZTRfR2xyUW9IZDBIcEROczk5UlppN3d0bFQ3dWhvS0xzOUVfVG9rZW46TVE0SmJtWjlYb3k1YzB4VjE3d2NYcHk3bjFiXzE3MjUzNjg4OTA6MTcyNTM3MjQ5MF9WNA" alt="img"></p><ol><li><h4 id="响应和非响应"><a href="#响应和非响应" class="headerlink" title="响应和非响应"></a>响应和非响应</h4></li></ol><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=ODAyZTM2ZDE0M2RjZWY3NGUwN2I5NjQwNDQ5NWM2NjdfdXVxbm9yZmF2VlNBVlpYTFhPMUN5d21NblZWcENyQXZfVG9rZW46SWdKS2JzdFpJb2dxcmx4WXZsamNLU2wyblliXzE3MjUzNjg4OTA6MTcyNTM3MjQ5MF9WNA" alt="img"></p><ol><li><h4 id="写入一个字节时序"><a href="#写入一个字节时序" class="headerlink" title="写入一个字节时序"></a>写入一个字节时序</h4></li></ol><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=MmJkZjJkN2ZjZjc3YzZlOWY4NWNlMzA0YjkzZjNkYjdfSEZ4R1RzVUpSalhOeHdIdUhQdzR5YkpJZ1VIMVJXZXVfVG9rZW46Q1cwVmJzazN4b2Q4bXJ4OER4bWM3U0tQbjVmXzE3MjUzNjg4OTA6MTcyNTM3MjQ5MF9WNA" alt="img"></p><ol><li><h4 id="读出一个字节时序"><a href="#读出一个字节时序" class="headerlink" title="读出一个字节时序"></a>读出一个字节时序</h4></li></ol><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=MjYxNjA0Njg1ZWViOTQwMzhmM2ZmMTMzY2E1YzU3OTBfRFgwSm1PdmNabldneGUxcEx1OFJKQk5BQzZCT3pRNldfVG9rZW46QktacWJlbFJEb09wc2J4OXBDaGNUZDhYbjNnXzE3MjUzNjg4OTA6MTcyNTM3MjQ5MF9WNA" alt="img"></p><ol><li><h4 id="单次写入多个字节时序"><a href="#单次写入多个字节时序" class="headerlink" title="单次写入多个字节时序"></a>单次写入多个字节时序</h4></li></ol><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=ODgzODM2ZDY2OWU2OTU1MDQ3MmJmYjUzNzcyMWI3ZDJfN3ViZnNvUFlGTzkyTkhKa0kxeVZieklJTWt2QmxpUnNfVG9rZW46Q05JTGJQOWo4bzFsbUZ4SEtVZ2NnZU45bm9jXzE3MjUzNjg4OTA6MTcyNTM3MjQ5MF9WNA" alt="img"></p><p>一次性写入多个字节，也叫页写入（Page Write）。AT24C02每页只有16个字节，每次只能写入单独的一个页中，所以一次性最多只能写入16个字节。当一次性写入超过16个字节的时候，则超过的部分会重新从这页的首地址重新写入。</p><ol><li><h4 id="单次读出多个字节时序"><a href="#单次读出多个字节时序" class="headerlink" title="单次读出多个字节时序"></a>单次读出多个字节时序</h4></li></ol><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=ZTlhZTdlZGNhMzBhMzQwMjc0N2RhMzgxMmU0OWY4MmJfek1sQVRPaXVvY1NLU3V0UHEzMlIxazlDQnZTb2FpOERfVG9rZW46RWZTYmJzNVltb2w0T1h4RVZMdWNjdldHbmZjXzE3MjUzNjg4OTA6MTcyNTM3MjQ5MF9WNA" alt="img"></p><p><strong>读出多个字节的时候没有限制，可以读出任意多个。</strong></p><ol><li><h3 id="软件设计（寄存器）-3"><a href="#软件设计（寄存器）-3" class="headerlink" title="软件设计（寄存器）"></a>软件设计（寄存器）</h3></li><li><h4 id="main-c-6"><a href="#main-c-6" class="headerlink" title="main.c"></a>main.c</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Driver_USART.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Inf_W24C02.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Driver_USART1_Init();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;尚硅谷 I2C 软件模式实验开始....\r\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line">    Inf_W24C02_Init();</span><br><span class="line">    </span><br><span class="line"><span class="comment">//写数据</span></span><br><span class="line">    Inf_W24C02_WriteByte(<span class="number">0x00</span>, <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    Inf_W24C02_WriteByte(<span class="number">0x01</span>, <span class="string">&#x27;b&#x27;</span>);</span><br><span class="line">    Inf_W24C02_WriteByte(<span class="number">0x02</span>, <span class="string">&#x27;c&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//读数据</span></span><br><span class="line">    <span class="type">uint8_t</span> byte1 = Inf_W24C02_ReadByte(<span class="number">0x00</span>);</span><br><span class="line">    <span class="type">uint8_t</span> byte2 = Inf_W24C02_ReadByte(<span class="number">0x01</span>);</span><br><span class="line">    <span class="type">uint8_t</span> byte3 = Inf_W24C02_ReadByte(<span class="number">0x02</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c\r\n&quot;</span>, byte1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c\r\n&quot;</span>, byte2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c\r\n&quot;</span>, byte3);</span><br><span class="line"></span><br><span class="line">    Inf_W24C02_WriteBytes(<span class="number">0x00</span>, <span class="string">&quot;123456&quot;</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> buff[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    Inf_W24C02_ReadBytes(<span class="number">0x00</span>, buff, <span class="number">6</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\r\n&quot;</span>, buff);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清零缓冲区</span></span><br><span class="line">    <span class="built_in">memset</span>(buff, <span class="number">0</span>, <span class="keyword">sizeof</span>(buff));</span><br><span class="line">    </span><br><span class="line">    Inf_W24C02_WriteBytes(<span class="number">0x00</span>, <span class="string">&quot;0123456789abcdefghijk&quot;</span>, <span class="number">21</span>);</span><br><span class="line">    Inf_W24C02_ReadBytes(<span class="number">0x00</span>, buff, <span class="number">21</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\r\n&quot;</span>, buff);</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h4 id="Driver-I2C2-h"><a href="#Driver-I2C2-h" class="headerlink" title="Driver_I2C2.h"></a>Driver_I2C2.h</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __DRIVER_I2C2_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __DRIVER_I2C2_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Driver_USART.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ACK 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NACK 1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SCL_HIGH  (GPIOB-&gt;ODR|= GPIO_ODR_ODR10)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SCL_LOW  (GPIOB-&gt;ODR&amp;=~GPIO_ODR_ODR10)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SDA_HIGH  (GPIOB-&gt;ODR|= GPIO_ODR_ODR11)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SDA_LOW  (GPIOB-&gt;ODR&amp;=~GPIO_ODR_ODR11)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> READ_SDA (GPIOB-&gt;IDR&amp; GPIO_IDR_IDR11)</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_I2C2_Init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_I2C2_Start</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_I2C2_Stop</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_I2C2_Ack</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_I2C2_NAck</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">Driver_I2C2_WaitAck</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_I2C_SendByte</span><span class="params">(<span class="type">uint8_t</span> byte)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">Driver_I2C_ReadByte</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><ol><li><h4 id="Driver-I2C2-c"><a href="#Driver-I2C2-c" class="headerlink" title="Driver_I2C2.c"></a>Driver_I2C2.c</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Driver_I2C2.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Delay.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> I2C_DELAY Delay_us(10)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 初始化</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_I2C2_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/*  PB10-&gt;SCL</span></span><br><span class="line"><span class="comment">        PB11-&gt;SDA</span></span><br><span class="line"><span class="comment">        开漏输出: 既可以用于输出也可以输入. 外界要有上拉电阻.</span></span><br><span class="line"><span class="comment">        用于输入的时候,最好先输出一个1,把线的控制权交给外界.</span></span><br><span class="line"><span class="comment">        MODE=11 CNF=01 */</span></span><br><span class="line">    RCC-&gt;APB2ENR |= RCC_APB2ENR_IOPBEN;</span><br><span class="line"></span><br><span class="line">    GPIOB-&gt;CRH |= (GPIO_CRH_MODE10 | GPIO_CRH_MODE11 | GPIO_CRH_CNF10_0 | GPIO_CRH_CNF11_0);</span><br><span class="line">    GPIOB-&gt;CRH &amp;= ~(GPIO_CRH_CNF10_1 | GPIO_CRH_CNF11_1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 起始信号</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_I2C2_Start</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 拉高sda和scl */</span></span><br><span class="line">    SDA_HIGH;</span><br><span class="line">    SCL_HIGH;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 2. 延时 */</span></span><br><span class="line">    I2C_DELAY;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 3. 拉低sda */</span></span><br><span class="line">    SDA_LOW;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 4. 延时 */</span></span><br><span class="line">    I2C_DELAY;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 停止信号</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_I2C2_Stop</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. scl 拉高 sda拉低 */</span></span><br><span class="line">    SCL_HIGH;</span><br><span class="line">    SDA_LOW;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 2. 延时 */</span></span><br><span class="line">    I2C_DELAY;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 3. 拉高sda */</span></span><br><span class="line">    SDA_HIGH;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 4.  延时 */</span></span><br><span class="line">    I2C_DELAY;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 接收方产生应答信号</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_I2C2_Ack</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 拉高sda和拉低scl */</span></span><br><span class="line">    SDA_HIGH;</span><br><span class="line">    SCL_LOW;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 2. 延时 */</span></span><br><span class="line">    I2C_DELAY;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 3. sda拉低 */</span></span><br><span class="line">    SDA_LOW;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 4. 延时 */</span></span><br><span class="line">    I2C_DELAY;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 5. scl拉高 */</span></span><br><span class="line">    SCL_HIGH;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 6. 延时 */</span></span><br><span class="line">    I2C_DELAY;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 7. scl拉低 */</span></span><br><span class="line">    SCL_LOW;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 8. 延时 */</span></span><br><span class="line">    I2C_DELAY;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 9. sda 拉高 */</span></span><br><span class="line">    SDA_HIGH;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 10. 延时 */</span></span><br><span class="line">    I2C_DELAY;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 接收方产生非应答信号</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_I2C2_NAck</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 拉高sda和拉低scl */</span></span><br><span class="line">    SDA_HIGH;</span><br><span class="line">    SCL_LOW;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 2. 延时 */</span></span><br><span class="line">    I2C_DELAY;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 3. scl拉高 */</span></span><br><span class="line">    SCL_HIGH;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 4. 延时 */</span></span><br><span class="line">    I2C_DELAY;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 5. scl拉低*/</span></span><br><span class="line">    SCL_LOW;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 6. 延时 */</span></span><br><span class="line">    I2C_DELAY;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 等待接收方法的应答</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125; 应答或非应答</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">Driver_I2C2_WaitAck</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 把sda拉高, sda的主动权交给对方(e2prom芯片) </span></span><br><span class="line"><span class="comment">    等待应答的过程是主机操作时钟线scl，因此之后就读sda</span></span><br><span class="line"><span class="comment">    对应引脚的ODR寄存器 获得高低电平来判断应答非应答 */</span></span><br><span class="line">    SDA_HIGH;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 2. scl拉低  */</span></span><br><span class="line">    SCL_LOW;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 3. 延时 */</span></span><br><span class="line">    I2C_DELAY;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 4. 拉高scl */</span></span><br><span class="line">    SCL_HIGH;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 5. 延时 */</span></span><br><span class="line">    I2C_DELAY;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 6. 读取sda的电平 */</span></span><br><span class="line">    <span class="type">uint8_t</span> ack = ACK;</span><br><span class="line">    <span class="keyword">if</span> (READ_SDA)</span><br><span class="line">    &#123;</span><br><span class="line">        ack = NACK;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 7. 拉低scl */</span></span><br><span class="line">    SCL_LOW;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 8. 延时 */</span></span><br><span class="line">    I2C_DELAY;</span><br><span class="line">    <span class="keyword">return</span> ack;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 发送一个字节的数据</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; byte 要发送的字节</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_I2C_SendByte</span><span class="params">(<span class="type">uint8_t</span> byte)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint8_t</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* 1. sda和scl 拉低 */</span></span><br><span class="line">        SDA_LOW;</span><br><span class="line">        SCL_LOW;</span><br><span class="line"></span><br><span class="line">        I2C_DELAY;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 2. 向sda写数据 */</span></span><br><span class="line">        <span class="keyword">if</span> (byte &amp; <span class="number">0x80</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            SDA_HIGH;   </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            SDA_LOW;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        I2C_DELAY;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 3. 时钟拉高 */</span></span><br><span class="line">        SCL_HIGH;</span><br><span class="line"></span><br><span class="line">        I2C_DELAY;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 4. 时钟拉低 */</span></span><br><span class="line">        SCL_LOW;</span><br><span class="line"></span><br><span class="line">        I2C_DELAY;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 5. 左移1位, 为下一次发送做准备 */</span></span><br><span class="line">        byte &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 读一个字节的数据</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; byte 要发送的字节</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">Driver_I2C_ReadByte</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint8_t</span> data = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint8_t</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        SDA_HIGH;<span class="comment">/* 也可不加 */</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* 1. 拉低scl */</span></span><br><span class="line">        SCL_LOW;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* 2. 延时 */</span></span><br><span class="line">        I2C_DELAY;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* 3. 拉高scl */</span></span><br><span class="line">        SCL_HIGH;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* 4. 延时 */</span></span><br><span class="line">        I2C_DELAY;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* 5. 读取sda */</span></span><br><span class="line">        data &lt;&lt;= <span class="number">1</span>;    <span class="comment">/* 一定要放前面才能实现读一个字节(八位)，最低位移位7次 */</span></span><br><span class="line">        <span class="keyword">if</span> (READ_SDA)</span><br><span class="line">        &#123;</span><br><span class="line">            data |= <span class="number">0x01</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* 6. 拉低scl */</span></span><br><span class="line">        SCL_LOW;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 7. 延时 */</span></span><br><span class="line">        I2C_DELAY;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h4 id="Inf-W24C02-h"><a href="#Inf-W24C02-h" class="headerlink" title="Inf_W24C02.h"></a>Inf_W24C02.h</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __INF_W24C02_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __INF_W24C02_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Driver_I2C2.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;string.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ADDR 0xA0</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Inf_W24C02_Init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Inf_W24C02_WriteByte</span><span class="params">(<span class="type">uint8_t</span> innerAddr, <span class="type">uint8_t</span> byte)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">Inf_W24C02_ReadByte</span><span class="params">(<span class="type">uint8_t</span> innerAddr)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Inf_W24C02_WriteBytes</span><span class="params">(<span class="type">uint8_t</span> innerAddr, <span class="type">uint8_t</span> *bytes, <span class="type">uint8_t</span> len)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Inf_W24C02_ReadBytes</span><span class="params">(<span class="type">uint8_t</span> innerAddr, <span class="type">uint8_t</span> *bytes, <span class="type">uint8_t</span> len)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><ol><li><h4 id="Inf-W24C02-c"><a href="#Inf-W24C02-c" class="headerlink" title="Inf_W24C02.c"></a>Inf_W24C02.c</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Inf_W24C02.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Inf_W24C02_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Driver_I2C2_Init();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Inf_W24C02_WriteByte</span><span class="params">(<span class="type">uint8_t</span> innerAddr, <span class="type">uint8_t</span> byte)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 开始信号 */</span></span><br><span class="line">    Driver_I2C2_Start();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 2. 发送写地址 */</span></span><br><span class="line">    Driver_I2C_SendByte(ADDR);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 3. 等待响应 */</span></span><br><span class="line">    <span class="type">uint8_t</span> ack = Driver_I2C2_WaitAck();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (ack == ACK)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* 4. 发送内部地址 */</span></span><br><span class="line">        Driver_I2C_SendByte(innerAddr);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* 5. 等待响应 */</span></span><br><span class="line">        Driver_I2C2_WaitAck();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* 6. 发送具体数据 */</span></span><br><span class="line">        Driver_I2C_SendByte(byte);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* 7. 等待响应 */</span></span><br><span class="line">        Driver_I2C2_WaitAck();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* 8. 停止信号 */</span></span><br><span class="line">        Driver_I2C2_Stop();</span><br><span class="line">    &#125;</span><br><span class="line">    Delay_ms(<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">Inf_W24C02_ReadByte</span><span class="params">(<span class="type">uint8_t</span> innerAddr)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 起始信号 */</span></span><br><span class="line">    Driver_I2C2_Start();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 2. 发送一个写地址   假写 */</span></span><br><span class="line">    Driver_I2C_SendByte(ADDR);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 3. 等待响应 */</span></span><br><span class="line">    Driver_I2C2_WaitAck();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 4. 发送内部地址 */</span></span><br><span class="line">    Driver_I2C_SendByte(innerAddr);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 5. 等待响应 */</span></span><br><span class="line">    Driver_I2C2_WaitAck();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 6. 起始信号 */</span></span><br><span class="line">    Driver_I2C2_Start();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 7. 发送读地址  真读 */</span></span><br><span class="line">    Driver_I2C_SendByte(ADDR + <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 8. 等待响应 */</span></span><br><span class="line">    Driver_I2C2_WaitAck();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 9. 读取一个字节 */</span></span><br><span class="line">    <span class="type">uint8_t</span> byte = Driver_I2C_ReadByte();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 10. 给对方一个非应答 */</span></span><br><span class="line">    Driver_I2C2_NAck();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 11. 停止信号 */</span></span><br><span class="line">    Driver_I2C2_Stop();</span><br><span class="line">    <span class="keyword">return</span> byte;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 页写入.一次写入多个字节</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; innerAddr</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; *bytes</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; len</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Inf_W24C02_WriteBytes</span><span class="params">(<span class="type">uint8_t</span> innerAddr, <span class="type">uint8_t</span> *bytes, <span class="type">uint8_t</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 开始信号 */</span></span><br><span class="line">    Driver_I2C2_Start();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 2. 发送写地址 */</span></span><br><span class="line">    Driver_I2C_SendByte(ADDR);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 3. 等待响应 */</span></span><br><span class="line">    <span class="type">uint8_t</span> ack = Driver_I2C2_WaitAck();</span><br><span class="line">    <span class="keyword">if</span> (ack == ACK)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* 4. 发送内部地址 */</span></span><br><span class="line">        Driver_I2C_SendByte(innerAddr);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* 5. 等待响应 */</span></span><br><span class="line">        Driver_I2C2_WaitAck();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">uint8_t</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">/* 6. 发送具体数据 */</span></span><br><span class="line">            Driver_I2C_SendByte(bytes[i]);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">/* 7. 等待响应 */</span></span><br><span class="line">            Driver_I2C2_WaitAck();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* 8. 停止信号 */</span></span><br><span class="line">        Driver_I2C2_Stop();</span><br><span class="line">    &#125;</span><br><span class="line">    Delay_ms(<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 一次性读取多个字节的数据</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; innerAddr 起始位置</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; *bytes 存储读到的数据</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; len 读取的字节数</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Inf_W24C02_ReadBytes</span><span class="params">(<span class="type">uint8_t</span> innerAddr, <span class="type">uint8_t</span> *bytes, <span class="type">uint8_t</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 起始信号 */</span></span><br><span class="line">    Driver_I2C2_Start();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 2. 发送一个写地址   假写 */</span></span><br><span class="line">    Driver_I2C_SendByte(ADDR);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 3. 等待响应 */</span></span><br><span class="line">    Driver_I2C2_WaitAck();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 4. 发送内部地址 */</span></span><br><span class="line">    Driver_I2C_SendByte(innerAddr);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 5. 等待响应 */</span></span><br><span class="line">    Driver_I2C2_WaitAck();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 6. 起始信号 */</span></span><br><span class="line">    Driver_I2C2_Start();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 7. 发送读地址  真读 */</span></span><br><span class="line">    Driver_I2C_SendByte(ADDR + <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 8. 等待响应 */</span></span><br><span class="line">    Driver_I2C2_WaitAck();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint8_t</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* 9. 读取一个字节 */</span></span><br><span class="line">        bytes[i] = Driver_I2C_ReadByte();</span><br><span class="line">        <span class="keyword">if</span> (i &lt; len - <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Driver_I2C2_Ack();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            Driver_I2C2_NAck();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 11. 停止信号 */</span></span><br><span class="line">    Driver_I2C2_Stop();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h2 id="I2C案例2：硬件实现I2C"><a href="#I2C案例2：硬件实现I2C" class="headerlink" title="I2C案例2：硬件实现I2C"></a>I2C案例2：硬件实现I2C</h2></li><li><h3 id="需求描述-7"><a href="#需求描述-7" class="headerlink" title="需求描述"></a>需求描述</h3></li></ol><p>使用STM32的I2C外设读写E2PROM，基于寄存器操作。 不需要手动控制引脚电平的输入输出，只需要操作I2C外设对应的寄存器即可。</p><ol><li><h3 id="硬件电路设计-6"><a href="#硬件电路设计-6" class="headerlink" title="硬件电路设计"></a>硬件电路设计</h3></li><li><h4 id="I2C外设简介"><a href="#I2C外设简介" class="headerlink" title="I2C外设简介"></a>I2C外设简介</h4></li></ol><p>前面我们用软件模拟I2C协议实现了通讯，代码写起来比较复杂。</p><p>起始STM32有专门负责协议的I2C外设，只要配置好该外设，它就会自动根据协议要求产生通讯信号，收发数据并缓存起来，CPU只要检测该外设的状态和访问数据寄存器，就能完成数据收发。</p><p>这种由硬件外设处理 I2C 协议的方式减轻了CPU的工作，且使软件设计更加简单。</p><p>STM32的 I2C 外设可用作通讯的主机及从机，支持100Kbit/s和400Kbit/s的速率，支持7位、10位设备地址，支持DMA数据传输，并具有数据校验功能。</p><p>它的I2C外设还支持 SMBus2.0协议，SMBus协议与I2C类似。</p><ol><li><h4 id="STM32的I2C外设的功能框图"><a href="#STM32的I2C外设的功能框图" class="headerlink" title="STM32的I2C外设的功能框图"></a>STM32的I2C外设的功能框图</h4></li></ol><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=MWZjMmNiNzY4NDM2MWM1YmRiNmVlMTFkMzE4YTkzYzNfcUtlcGJ4Q0JSN0x6QTUxaUZiVzNpaFQ2N0JOeW5maHdfVG9rZW46Q3B0ZGJYMnkyb2UyVkV4S3V2cWNoMldZbkkzXzE3MjUzNjg4OTA6MTcyNTM3MjQ5MF9WNA" alt="img"></p><p>I2C的所有硬件架构都是根据图中左侧SCL线和SDA线展开的（其中的SMBA线用于SMBUS的警告信号，I2C通讯没有使用）。 STM32芯片有多个I2C外设，咱们现在用的这款有2个I2C外设，它们的I2C通讯信号引出到不同的GPIO引脚上，使用时必须配置到这些指定的引脚。</p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=YjUwNjQ1NGUyMDQ4ZjI4YWE1MzBlZWQyZWM5OTNlNzJfbmxUYVNaVGc3emFaOGdsZWs0QXllYklDS1lhb1hmemRfVG9rZW46RUFRR2JZNVNtb3pZbFV4dVVpbWNzQW1ObkxMXzE3MjUzNjg4OTA6MTcyNTM3MjQ5MF9WNA" alt="img"></p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=MmNlNWYzNmM5OGViMzJlYjU1ODBlN2Y5ODg2Zjg1MDhfRHJ6QXcyNHVUWFNJZ3d0N2twNFhMSDhwSDZiOUNqU01fVG9rZW46VDc4MGJOZ0FWbzBCTk94UXFqdWN5OEhVbkNLXzE3MjUzNjg4OTA6MTcyNTM3MjQ5MF9WNA" alt="img"></p><ol><li><h3 id="软件设计（寄存器）-4"><a href="#软件设计（寄存器）-4" class="headerlink" title="软件设计（寄存器）"></a>软件设计（寄存器）</h3></li><li><h4 id="main-c-7"><a href="#main-c-7" class="headerlink" title="main.c"></a>main.c</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Driver_USART.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Inf_W24C02.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Driver_USART1_Init();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;I2C 硬件 实验开始....\r\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Inf_W24C02_Init();</span><br><span class="line"></span><br><span class="line">    Inf_W24C02_WriteByte(<span class="number">0x00</span>, <span class="string">&#x27;x&#x27;</span>);</span><br><span class="line">    Inf_W24C02_WriteByte(<span class="number">0x01</span>, <span class="string">&#x27;y&#x27;</span>);</span><br><span class="line">    Inf_W24C02_WriteByte(<span class="number">0x02</span>, <span class="string">&#x27;z&#x27;</span>);</span><br><span class="line">    <span class="type">uint8_t</span> byte1 = Inf_W24C02_ReadByte(<span class="number">0x00</span>);</span><br><span class="line">    <span class="type">uint8_t</span> byte2 = Inf_W24C02_ReadByte(<span class="number">0x01</span>);</span><br><span class="line">    <span class="type">uint8_t</span> byte3 = Inf_W24C02_ReadByte(<span class="number">0x02</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c\r\n&quot;</span>, byte1);   </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c\r\n&quot;</span>, byte2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c\r\n&quot;</span>, byte3);</span><br><span class="line"></span><br><span class="line">    Inf_W24C02_WriteBytes(<span class="number">0x00</span>, <span class="string">&quot;123456&quot;</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> buff[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    Inf_W24C02_ReadBytes(<span class="number">0x00</span>, buff, <span class="number">6</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\r\n&quot;</span>, buff);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清零缓冲区</span></span><br><span class="line">    <span class="built_in">memset</span>(buff, <span class="number">0</span>, <span class="keyword">sizeof</span>(buff));</span><br><span class="line">    Inf_W24C02_WriteBytes(<span class="number">0x00</span>, <span class="string">&quot;0123456789abcdefghijk&quot;</span>, <span class="number">21</span>);</span><br><span class="line">    Inf_W24C02_ReadBytes(<span class="number">0x00</span>, buff, <span class="number">21</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\r\n&quot;</span>, buff);</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">            </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h4 id="Driver-I2C2-h-1"><a href="#Driver-I2C2-h-1" class="headerlink" title="Driver_I2C2.h"></a>Driver_I2C2.h</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __DRIVER_I2C2_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __DRIVER_I2C2_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Driver_USART.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ACK 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NACK 1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FAIL 0</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_I2C2_Init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">Driver_I2C2_Start</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_I2C2_Stop</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_I2C2_Ack</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_I2C2_NAck</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">Driver_I2C_SendAddr</span><span class="params">(<span class="type">uint8_t</span> addr)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">Driver_I2C_SendByte</span><span class="params">(<span class="type">uint8_t</span> byte)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">Driver_I2C_ReadByte</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><ol><li><h4 id="Driver-I2C2-c-1"><a href="#Driver-I2C2-c-1" class="headerlink" title="Driver_I2C2.c"></a>Driver_I2C2.c</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Driver_I2C2.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Delay.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> I2C_DELAY Delay_us(10)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 初始化</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_I2C2_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 1. 开启时钟 */</span></span><br><span class="line">    <span class="comment">/* 1.1 i2c硬件的时钟 */</span></span><br><span class="line">    RCC-&gt;APB1ENR |= RCC_APB1ENR_I2C2EN;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 1.2 GPIO时钟 */</span></span><br><span class="line">    RCC-&gt;APB2ENR |= RCC_APB2ENR_IOPBEN;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 2. 设置gpio的引脚的工作模式 */</span></span><br><span class="line">    <span class="comment">/* PB10-&gt;SCL PB11-&gt;SDA </span></span><br><span class="line"><span class="comment">    复用开漏输出: 既可以用于输出也可以输入. </span></span><br><span class="line"><span class="comment">    外界要有上拉电阻.用于输入的时候,最好先输出一个1,把线的控制权交给外界.</span></span><br><span class="line"><span class="comment">    MODE=11 CNF=11 */</span></span><br><span class="line">     </span><br><span class="line">    <span class="comment">/* 9.3.4.1 */</span></span><br><span class="line">    GPIOB-&gt;CRH |= (GPIO_CRH_MODE10 | GPIO_CRH_MODE11 | GPIO_CRH_CNF10 | GPIO_CRH_CNF11);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 3. 设置I2C2 */</span></span><br><span class="line">    <span class="comment">/* 3.1 配置硬件的工作模式  I2C  */</span></span><br><span class="line">    I2C2-&gt;CR1 &amp;= ~I2C_CR1_SMBUS;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 3.2 配置给I2C设备提供的时钟的频率 36MHz*/</span></span><br><span class="line">    I2C2-&gt;CR2 |= <span class="number">36</span> &lt;&lt; <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 万一前面CR2低五位并不全是0咋办，应该还要现清0再写入吧，为啥这里不用呢？*/</span></span><br><span class="line">    <span class="comment">/* 因为数据手册清楚地写了CR2的复位值为0X0000 */</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 3.3 设置标准模式=0 or 快速模式=1 */</span></span><br><span class="line">    I2C2-&gt;CCR &amp;= ~I2C_CCR_FS;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 3.3 配置I2C产生时钟的频率 100K or 400K</span></span><br><span class="line"><span class="comment">        Thigh=CCR * Tcplk1</span></span><br><span class="line"><span class="comment">        ccr = Thigh/=Tcplk1 = 5us / (1/36)us = 180 */</span></span><br><span class="line">    I2C2-&gt;CCR |= <span class="number">180</span> &lt;&lt; <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 3.4 时钟信号的上升沿100KHz的时候要求最大上升沿不超过1us(手册)。</span></span><br><span class="line"><span class="comment">        时钟频率是36MHz则 写入：1 /（1/36） + 1 = 37</span></span><br><span class="line"><span class="comment">        其实就是计算的 最大上升沿时间/时钟周期 + 1 */</span></span><br><span class="line">    I2C2-&gt;TRISE |= <span class="number">37</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 3.4 使能I2C */</span></span><br><span class="line">    I2C2-&gt;CR1 |= I2C_CR1_PE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 起始信号</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">Driver_I2C2_Start</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    I2C2-&gt;CR1 |= I2C_CR1_START;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint16_t</span> timeout = <span class="number">0xffff</span>;</span><br><span class="line">    <span class="keyword">while</span> (((I2C2-&gt;SR1 &amp; I2C_SR1_SB) == <span class="number">0</span>) &amp;&amp; timeout)</span><br><span class="line">    &#123;</span><br><span class="line">        timeout--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> timeout ? OK : FAIL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 停止信号</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_I2C2_Stop</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 产生终止条件 */</span></span><br><span class="line">    I2C2-&gt;CR1 |= I2C_CR1_STOP;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 接收方产生应答信号</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_I2C2_Ack</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 产生应答信号 */</span></span><br><span class="line">    I2C2-&gt;CR1 |= I2C_CR1_ACK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 接收方产生非应答信号</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_I2C2_NAck</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    I2C2-&gt;CR1 &amp;= ~I2C_CR1_ACK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 发送一个设备地址</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; byte</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">Driver_I2C_SendAddr</span><span class="params">(<span class="type">uint8_t</span> addr)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 把要发送的数据写入到数据寄存器，其实可以加上判断DR寄存器的TXE位，查看一下是否为空</span></span><br><span class="line">    I2C2-&gt;DR = addr;</span><br><span class="line"></span><br><span class="line">    timeout = <span class="number">0xffff</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将设备地址发送给数据寄存器后再判断SR1的ADDR位</span></span><br><span class="line">    <span class="keyword">while</span> (((I2C2-&gt;SR1 &amp; I2C_SR1_ADDR) == <span class="number">0</span>) &amp;&amp; timeout)</span><br><span class="line">    &#123;</span><br><span class="line">        timeout--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 9.3.4.2 */</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (timeout)</span><br><span class="line">    &#123;</span><br><span class="line">        I2C2-&gt;SR2;<span class="comment">/* 读取SR1寄存器后，对SR2寄存器的读操作将清除ADDR位 */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> timeout ? OK : FAIL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 发送一个字节的数据（数据和内部地址适用）</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; byte 要发送的字节</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">Driver_I2C_SendByte</span><span class="params">(<span class="type">uint8_t</span> byte)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint16_t</span> timeout = <span class="number">0xffff</span>;</span><br><span class="line">    <span class="comment">//1 先判断寄存器，假如寄存器不空就要等待至空状态（在超时时间内）后写入数据</span></span><br><span class="line">    <span class="keyword">while</span> (((I2C2-&gt;SR1 &amp; I2C_SR1_TXE) == <span class="number">0</span>) &amp;&amp; timeout)</span><br><span class="line">    &#123;</span><br><span class="line">        timeout--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 把要发送的数据写入到数据寄存器，由于上一次执行已经读取SR寄存器，这行代码执行完后便将BTF置0</span></span><br><span class="line">    I2C2-&gt;DR = byte;</span><br><span class="line"></span><br><span class="line">    timeout = <span class="number">0xffff</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//2 判断寄存器，假如数据没发送完成就要等待数据发送完成</span></span><br><span class="line">    <span class="keyword">while</span> (((I2C2-&gt;SR1 &amp; I2C_SR1_BTF) == <span class="number">0</span>) &amp;&amp; timeout)</span><br><span class="line">    &#123;</span><br><span class="line">        timeout--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> timeout ? OK : FAIL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 读一个字节的数据</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; byte 要发送的字节</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">Driver_I2C_ReadByte</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint16_t</span> timeout = <span class="number">0xffff</span>;</span><br><span class="line">    <span class="comment">// 等待SR1寄存器RXNE位，一旦非空表示收到数据（在超时时间内），可以读取数据</span></span><br><span class="line">    <span class="keyword">while</span> (((I2C2-&gt;SR1 &amp; I2C_SR1_RXNE) == <span class="number">0</span>) &amp;&amp; timeout)</span><br><span class="line">    &#123;</span><br><span class="line">        timeout--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 把数据寄存器的值返回</span></span><br><span class="line">    <span class="type">uint8_t</span> data = timeout ? I2C2-&gt;DR : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你可能很好奇为啥要加个超时时间？ 万一有多个主机同时操作，在while循环里就要一直等待，所以最好加个超时时间表示等待成功或失败！</p><ol><li><h4 id="Inf-W24C02-h-1"><a href="#Inf-W24C02-h-1" class="headerlink" title="Inf_W24C02.h"></a>Inf_W24C02.h</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __INF_W24C02_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __INF_W24C02_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Driver_I2C2.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;string.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ADDR 0xA0</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Inf_W24C02_Init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Inf_W24C02_WriteByte</span><span class="params">(<span class="type">uint8_t</span> innerAddr, <span class="type">uint8_t</span> byte)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">Inf_W24C02_ReadByte</span><span class="params">(<span class="type">uint8_t</span> innerAddr)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Inf_W24C02_WriteBytes</span><span class="params">(<span class="type">uint8_t</span> innerAddr, <span class="type">uint8_t</span> *bytes, <span class="type">uint8_t</span> len)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Inf_W24C02_ReadBytes</span><span class="params">(<span class="type">uint8_t</span> innerAddr, <span class="type">uint8_t</span> *bytes, <span class="type">uint8_t</span> len)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><ol><li><h4 id="Inf-W24C02-c-1"><a href="#Inf-W24C02-c-1" class="headerlink" title="Inf_W24C02.c"></a>Inf_W24C02.c</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Inf_W24C02.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Inf_W24C02_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Driver_I2C2_Init();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Inf_W24C02_WriteByte</span><span class="params">(<span class="type">uint8_t</span> innerAddr, <span class="type">uint8_t</span> byte)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint8_t</span> ack;<span class="comment">/* 用来测试写字节是否成功的变量，测完就注释掉要不然影响时序 */</span></span><br><span class="line">    <span class="comment">/* 1. 开始信号 */</span></span><br><span class="line">    ack = Driver_I2C2_Start();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// printf(&quot;start_ack=%d\r\n&quot;, ack);</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 2. 发送写地址 */</span></span><br><span class="line">    ack = Driver_I2C_SendAddr(ADDR);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// printf(&quot;addr_ack=%d\r\n&quot;, ack);</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 4. 发送内部地址 */</span></span><br><span class="line">    ack = Driver_I2C_SendByte(innerAddr);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// printf(&quot;inner_ack=%d\r\n&quot;, ack);</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 6. 发送具体数据 */</span></span><br><span class="line">    ack = Driver_I2C_SendByte(byte);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// printf(&quot;byte_ack=%d\r\n&quot;, ack);</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 8. 停止信号 */</span></span><br><span class="line">    Driver_I2C2_Stop();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 9.3.4.3 */</span></span><br><span class="line">    Delay_ms(<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">Inf_W24C02_ReadByte</span><span class="params">(<span class="type">uint8_t</span> innerAddr)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 起始信号 */</span></span><br><span class="line">    Driver_I2C2_Start();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 2. 发送一个写地址   假写 */</span></span><br><span class="line">    Driver_I2C_SendAddr(ADDR);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 4. 发送内部地址 */</span></span><br><span class="line">    Driver_I2C_SendByte(innerAddr);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 6. 起始信号 */</span></span><br><span class="line">    Driver_I2C2_Start();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 7. 发送读地址  真读 */</span></span><br><span class="line">    Driver_I2C_SendAddr(ADDR + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 10. 产生一个非应答信号 */</span></span><br><span class="line">    Driver_I2C2_NAck();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 11. 停止信号 */</span></span><br><span class="line">    Driver_I2C2_Stop();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 9. 读取一个字节 */</span></span><br><span class="line">    <span class="type">uint8_t</span> byte = Driver_I2C_ReadByte();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> byte;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 页写入.一次写入多个字节</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; innerAddr</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; *bytes</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; len</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Inf_W24C02_WriteBytes</span><span class="params">(<span class="type">uint8_t</span> innerAddr, <span class="type">uint8_t</span> *bytes, <span class="type">uint8_t</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 开始信号 */</span></span><br><span class="line">    Driver_I2C2_Start();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 2. 发送写地址 */</span></span><br><span class="line">    Driver_I2C_SendAddr(ADDR);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 4. 发送内部地址 */</span></span><br><span class="line">    Driver_I2C_SendByte(innerAddr);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint8_t</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* 6. 发送具体数据 */</span></span><br><span class="line">        Driver_I2C_SendByte(bytes[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 8. 停止信号 */</span></span><br><span class="line">    Driver_I2C2_Stop();</span><br><span class="line"></span><br><span class="line">    Delay_ms(<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 一次性读取多个字节的数据</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; innerAddr 起始位置</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; *bytes 存储读到的数据</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; len 读取的字节数</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Inf_W24C02_ReadBytes</span><span class="params">(<span class="type">uint8_t</span> innerAddr, <span class="type">uint8_t</span> *bytes, <span class="type">uint8_t</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 起始信号 */</span></span><br><span class="line">    Driver_I2C2_Start();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 2. 发送一个写地址   假写 */</span></span><br><span class="line">    Driver_I2C_SendAddr(ADDR);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 4. 发送内部地址 */</span></span><br><span class="line">    Driver_I2C_SendByte(innerAddr);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 6. 起始信号 */</span></span><br><span class="line">    Driver_I2C2_Start();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 9.3.4.3 */</span></span><br><span class="line">    <span class="comment">/* 7. 发送读地址  真读 */</span></span><br><span class="line">    Driver_I2C_SendAddr(ADDR + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint8_t</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* 9. 读取一个字节 都要产生一个应答信号*/</span></span><br><span class="line">        <span class="keyword">if</span> (i &lt; len - <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Driver_I2C2_Ack();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span><span class="comment">/* EV7_1 */</span></span><br><span class="line">        &#123;</span><br><span class="line">            Driver_I2C2_NAck();</span><br><span class="line">            <span class="comment">/* 11. 停止信号 */</span></span><br><span class="line">            Driver_I2C2_Stop();</span><br><span class="line">        &#125;</span><br><span class="line">        bytes[i] = Driver_I2C_ReadByte();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h3 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h3></li><li><p><strong>GPIO\</strong>*<em>为复用功能*</em></p></li></ol><p><strong>涉及到寄存器的配置！ 注意：我们的PB10、PB11此时并不是两个普通的\</strong>**GPIO**<em>\</em>而是复用作*<em>\</em>*IIC**<em>\</em>的*<em>\</em>*IO**<em>\</em>输出。**</p><ol><li><strong>在I²C通信中，发送完设备地址后需要清除ADDR寄存器？</strong></li></ol><p><strong>清除ADDR寄存器的目的是为了确保下一次的I²C传输或操作不会受到上一次的地址信息的干扰。 如果不清除ADDR寄存器，可能会导致通信错误或设备不正确响应。</strong></p><ol><li><strong>I²C地址传输阶段</strong> ：<ol><li>在I²C通信中，主设备（通常是微控制器）需要向从设备发送数据或者请求数据。 通信开始时，主设备首先发送一个设备地址和读写位（R/W位）给总线上的所有设备。</li></ol></li><li><strong>ADDR 寄存器的作用</strong> ：<ol><li>ADDR寄存器用于存储要发送的设备地址和读写位。当主设备开始传输设备地址后，这些信息会被加载到ADDR寄存器中。</li></ol></li><li><strong>ADDR寄存器的清除</strong> ：<ol><li><strong>在I²C通信中，主设备发送完设备地址后，通常需要软件来清除ADDR寄存器中的地址信息。这是因为I²C控制器通常不会自动清除ADDR寄存器的内容。</strong></li></ol></li><li><strong>软件操作</strong> ：<ol><li>在大多数情况下，软件需要在发送设备地址后显式地清除ADDR寄存器。这通常通过写入特定的控制位或寄存器来完成，具体的操作取决于使用的I²C控制器和微控制器。</li></ol></li><li><strong>硬件实现的例外</strong> ：<ol><li>尽管大多数情况下需要软件操作来清除ADDR寄存器，有些特定的I²C控制器和微控制器可能提供了自动清除的功能，但这并不是通用情况。</li></ol></li></ol><p><strong>void Inf_W24C02_ReadBytes(uint8_t innerAddr, uint8_t *bytes, uint8_t len)的使用</strong></p><p><strong>多字节不能读取太快，不然会发生数据覆盖。</strong></p><p>还有就是最后为啥要先产生应答信号后再读取数据，而不是先读取数据之后产生应答信号（<strong>无论是写入数据还是读取数据，主机在发送完地址后等待从机的应答信号</strong>）？</p><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=NDc0NjJiZmM3MmQ1ZTMxYTlhZTJlZjEwMzcyZmU4MjNfR3BmR0xMSm9NY3ZnV2NNTGVyWDRjOTg1Q0RjMzFaSnVfVG9rZW46UUwzUGJaWk9yb0Q0ak54alZJaGNWN3R1bm9oXzE3MjUzNjg4OTA6MTcyNTM3MjQ5MF9WNA" alt="img"></p><ul><li><strong>实际是\</strong>**用上一次的响应信号来设置这一次的响应**<em>\</em>,*<em>\</em>*读完数据硬件就立即响应**<em>\</em>，如果不先产生应答，硬件响应的是从机非应答信号，<strong> </strong>这样读取多字节数据就可以了<strong> </strong>,*<em>\</em>*而且**<em>\</em>最后一个字节要注意EV7_1包括响应和停止！**</li><li><strong>主要是硬件响应太快，所以要\</strong>**先准备好应答信号，再由硬件响应**<em>\</em>。 一个字节就不用考虑（就和做一次生意是一个意思，哈哈）！**</li></ul><ol><li><h3 id="软件设计（HAL库）-3"><a href="#软件设计（HAL库）-3" class="headerlink" title="软件设计（HAL库）"></a>软件设计（HAL库）</h3><ol><li><h4 id="STM32CubeMx中配置"><a href="#STM32CubeMx中配置" class="headerlink" title="STM32CubeMx中配置"></a>STM32CubeMx中配置</h4></li></ol></li></ol><p><img src="https://xiza3i1x6q4.feishu.cn/space/api/box/stream/download/asynccode/?code=ZTc3ZDVhOWI4Y2JiOTVlMWUwZGNkMzI4NWQzNzE1MGRfOHk2VnlPYmUzSzRPZmY3bmgza2xLTklMdkZCQXlQblVfVG9rZW46SGFqbWJ2eFhkb2kxbnB4ZW5ISWNWT0pNbnVkXzE3MjUzNjg4OTA6MTcyNTM3MjQ5MF9WNA" alt="img"></p><ol><li><h4 id="main-c-8"><a href="#main-c-8" class="headerlink" title="main.c"></a>main.c</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_Init();</span><br><span class="line">    SystemClock_Config();</span><br><span class="line">    MX_GPIO_Init();</span><br><span class="line">    MX_USART1_UART_Init();</span><br><span class="line">    </span><br><span class="line">    Inf_W24C02_Init();</span><br><span class="line"></span><br><span class="line">    Inf_W24C02_WriteByte(<span class="number">0x00</span>, <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    <span class="type">uint8_t</span> c = Inf_W24C02_ReadByte(<span class="number">0x00</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;c=%c\r\n&quot;</span>, c);</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> wbuff[<span class="number">10</span>] = &#123;<span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;o&#x27;</span>&#125;;</span><br><span class="line">    Inf_W24C02_WriteBytes(<span class="number">0x01</span>, wbuff, <span class="number">5</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;c=%c\r\n&quot;</span>, Inf_W24C02_ReadByte(<span class="number">0x01</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;c=%c\r\n&quot;</span>, Inf_W24C02_ReadByte(<span class="number">0x02</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;c=%c\r\n&quot;</span>, Inf_W24C02_ReadByte(<span class="number">0x03</span>));</span><br><span class="line">    <span class="type">uint8_t</span> buff[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    Inf_W24C02_ReadBytes(<span class="number">0x00</span>, buff, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;buff=%s\r\n&quot;</span>, buff);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h4 id="Inf-W24C02-h-2"><a href="#Inf-W24C02-h-2" class="headerlink" title="Inf_W24C02.h"></a>Inf_W24C02.h</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __INF_W24C02_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __INF_W24C02_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;string.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;i2c.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ADDR 0xA0</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Inf_W24C02_Init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Inf_W24C02_WriteByte</span><span class="params">(<span class="type">uint8_t</span> innerAddr, <span class="type">uint8_t</span> byte)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">Inf_W24C02_ReadByte</span><span class="params">(<span class="type">uint8_t</span> innerAddr)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Inf_W24C02_WriteBytes</span><span class="params">(<span class="type">uint8_t</span> innerAddr, <span class="type">uint8_t</span> *bytes, <span class="type">uint8_t</span> len)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Inf_W24C02_ReadBytes</span><span class="params">(<span class="type">uint8_t</span> innerAddr, <span class="type">uint8_t</span> *bytes, <span class="type">uint8_t</span> len)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><ol><li><h4 id="Inf-W24C02-c-2"><a href="#Inf-W24C02-c-2" class="headerlink" title="Inf_W24C02.c"></a>Inf_W24C02.c</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Inf_W24C02.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Inf_W24C02_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    MX_I2C2_Init();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Inf_W24C02_WriteByte</span><span class="params">(<span class="type">uint8_t</span> innerAddr, <span class="type">uint8_t</span> byte)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_I2C_Mem_Write(&amp;hi2c2, ADDR, innerAddr, I2C_MEMADD_SIZE_8BIT, &amp;byte, <span class="number">1</span>, <span class="number">2000</span>);</span><br><span class="line">    </span><br><span class="line">    HAL_Delay(<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">Inf_W24C02_ReadByte</span><span class="params">(<span class="type">uint8_t</span> innerAddr)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint8_t</span> byte;</span><br><span class="line">    HAL_I2C_Mem_Read(&amp;hi2c2, ADDR + <span class="number">1</span>, innerAddr, I2C_MEMADD_SIZE_8BIT, &amp;byte, <span class="number">1</span>, <span class="number">2000</span>);</span><br><span class="line">    <span class="keyword">return</span> byte;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 页写入.一次写入多个字节</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; innerAddr</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; *bytes</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; len</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Inf_W24C02_WriteBytes</span><span class="params">(<span class="type">uint8_t</span> innerAddr, <span class="type">uint8_t</span> *bytes, <span class="type">uint8_t</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_I2C_Mem_Write(&amp;hi2c2, ADDR, innerAddr, I2C_MEMADD_SIZE_8BIT, bytes, len, <span class="number">2000</span>);</span><br><span class="line">    HAL_Delay(<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 一次性读取多个字节的数据</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; innerAddr 起始位置</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; *bytes 存储读到的数据</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; len 读取的字节数</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Inf_W24C02_ReadBytes</span><span class="params">(<span class="type">uint8_t</span> innerAddr, <span class="type">uint8_t</span> *bytes, <span class="type">uint8_t</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_I2C_Mem_Read(&amp;hi2c2, ADDR + <span class="number">1</span>, innerAddr, I2C_MEMADD_SIZE_8BIT, bytes, len, <span class="number">2000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STM32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试</title>
      <link href="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/"/>
      <url>/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 蓝桥杯32 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
