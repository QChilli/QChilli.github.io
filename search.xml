<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CAN总线</title>
      <link href="/2025/01/19/%E5%B5%8C%E5%85%A5%E5%BC%8F/CAN%E6%80%BB%E7%BA%BF/"/>
      <url>/2025/01/19/%E5%B5%8C%E5%85%A5%E5%BC%8F/CAN%E6%80%BB%E7%BA%BF/</url>
      
        <content type="html"><![CDATA[<h1 id="1-帧类型"><a href="#1-帧类型" class="headerlink" title="1.帧类型"></a>1.帧类型</h1><p>通信是通过以下 5 种类型的帧进行的：数据帧、遥控帧、错误帧、过载帧、帧间隔。</p><blockquote><ul><li><p>数据帧（Data Frame）：</p><p>数据帧是CAN总线上用于传输用户数据的帧，包括必要的帧头、标识符、控 制位、数据长度代码、数据域、CRC校验码和应答域等部分，是CAN通信中最基本和最重要的帧类型。</p></li><li><p>遥控帧（Remote Frame）：</p><p>遥控帧用于向总线上的其他节点请求发送具有相同标识符的数据帧，它 没有数据域，仅通过标识符来指定所需的数据。遥控帧的帧结构与数据帧相似，但缺少数据部分。</p></li><li><p>错误帧（Error Frame）：</p><p>当CAN总线上的任何节点检测到通信错误时，会发送错误帧来通知其他节 点。错误帧包含错误标志和错误界定符，用于指示错误的存在和类型。</p></li><li><p>过载帧（Overload Frame）：</p><p>过载帧用于在连续的数据帧或远程帧之间提供额外的延时，以指示接收 节点尚未准备好接收下一个帧。当接收节点因内部条件限制而无法立即接收数据时，会发送过载帧来请 求发送节点暂停发送。</p></li><li><p>帧间隔（Interframe Space）：</p><p>帧间隔用于隔离数据帧与前面的帧，确保它们之间的时间间隔足够 长，以避免总线上的冲突和数据丢失。帧间隔包括连续三个隐性位（间隔段）和可能存在的空闲段，用 于将数据帧或远程帧与前面的帧分隔开来。</p></li></ul></blockquote><h2 id="1-数据帧"><a href="#1-数据帧" class="headerlink" title="1.数据帧"></a>1.数据帧</h2><h3 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h3><blockquote><p>数据帧框图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501121258975.png" alt="img"></p><ol><li><strong>帧起始（Start of Frame, SOF）</strong><ul><li><strong>作用：</strong> 帧起始标志用来同步总线上的所有节点。</li><li><strong>比喻：</strong> 好比课堂上老师敲黑板或拍桌子，“现在开始上课了！”大家听到这个信号就准备集中注意力。</li><li><strong>示例：</strong> 帧起始是一个单独的 <strong>显性位（0）</strong>，在总线上所有设备都能看到。</li></ul></li><li><strong>仲裁段（Arbitration Field）</strong><ul><li><strong>作用：</strong> CAN总线是一个共享网络，多台设备可能同时工作，这段信息通过ID来决定谁的优先级高。</li><li><strong>比喻：</strong> 想象你在排队买奶茶，每个人手里都有一个号码牌（ID）。号码牌越小，优先级越高，可以先买奶茶。</li><li><strong>组成：</strong><ul><li><strong>格式：</strong><ul><li><strong>标准格式：</strong> 11位ID。</li><li><strong>扩展格式：</strong> 29位ID。</li></ul></li><li><strong>RTR位：</strong> 区分是数据帧还是请求帧<strong>（如果是数据帧，RTR=0；如果是请求帧（只请求数据，不发送数据），RTR=1）</strong>。</li></ul></li><li><strong>示例：</strong> CAN总线使用“显性位（0）优先于隐性位（1）”的逻辑，因此ID的值越小，仲裁时胜出的可能性越大，如果设备A的ID是101，设备B的ID是100，则设备B优先发送数据。</li><li><strong>补充：</strong><ul><li>CAN总线使用的是<strong>线与逻辑</strong>（Wired-AND）。总线上连接的所有节点都会驱动同一个总线信号。在这种物理设计下，如果一个节点发送显性位（0），另一个节点发送隐性位（1），总线上的电平会被拉低（即显性位占优）。这使得显性位具有<strong>更高优先级</strong>。</li><li>扩展数据帧中，还包含SRR位（Substituted Remote Request，替代的远程请求）和IDE位 （Identifier Extension，标识符扩展）。SRR位用于指示发送方是否发送了远程请求帧，IDE 位用于指示标识符字段是否使用了扩展格式（29位）。</li></ul></li></ul></li><li><strong>控制段（Control Field）</strong><ul><li><strong>作用：</strong> 指示即将发送的数据长度，同时为整个数据帧提供一些额外的控制信息。</li><li><strong>比喻：</strong> 奶茶店服务员告诉你这杯奶茶是中杯（4字节数据）还是大杯（8字节数据），提前打个招呼。</li><li><strong>组成：</strong><ul><li><strong>IDE位：</strong> 仲裁段ID格式通过IDE位区分<strong>（0为标准，1为扩展）</strong>。</li><li><strong>空闲位r0：</strong> 值恒为0。</li><li><strong>DLC位：</strong> 作为数据长度码用来指明数据段包含几个字节，用4位表示数据段的长度。</li></ul></li><li><strong>示例：</strong> <code>DLC=4</code>表示接下来的数据段会有4个字节数据。</li><li><strong>补充：</strong> DLC字段的4位最大值为15，但实际有效数据段长度限制为8字节，<code>DLC&gt;8</code>的情况被保留而不使用</li></ul></li><li><strong>数据段（Data Field）</strong><ul><li><strong>作用：</strong> 真正承载有用信息的部分，最多包含8个字节（64位）。</li><li><strong>比喻：</strong> 奶茶的实际内容，比如你的订单是“珍珠奶茶，去冰，半糖”。</li><li><strong>组成：</strong> 数据段可以承载车辆速度、发动机转速、温度等重要信息。</li><li><strong>示例：</strong>数据段可能是汽车发动机控制单元传来的速度数据：<strong><code>0x00 0x3C 0x00 0x00</code></strong>，表示车辆的速度是60公里/小时。</li></ul></li><li><strong>CRC段（Cyclic Redundancy Check）</strong><ul><li><strong>作用：</strong> 用于检查传输过程中数据是否出现错误，相当于数据的“校验码”。</li><li><strong>比喻：</strong> 就像外卖小哥送奶茶时，店员会在杯盖上写上你的订单内容，方便你核对“这杯是我的奶茶吗？”。</li><li><strong>组成：</strong><ul><li><strong>CRC值：</strong>CRC值是基于<strong>仲裁段</strong>、<strong>控制段</strong>和<strong>数据段</strong>的<strong>所有位</strong>计算得出的，值由CAN控制器的硬件外设自动计算，并附加在数据帧中发送（不包括<strong>帧起始</strong>、<strong>CRC段</strong>和<strong>ACK段</strong>，因为这些字段不是数据本身或校验的一部分）。</li><li><strong>CRC定界符：</strong>值为1，用于分隔校验码和后续的字段。</li></ul></li><li><strong>示例：</strong> 如果数据段是<code>0x00 0x3C 0x00 0x00</code>，计算得到CRC码为<code>0xABCD</code>，总线上的节点会用这个值验证数据是否正确。</li></ul></li><li><strong>ACK段（Acknowledge Field）</strong><ul><li><strong>作用：</strong> 确认接收方是否正确接收到数据。如果成功接收到，接收方会发送一个显性位（0）作为确认。</li><li><strong>比喻：</strong> 就像外卖小哥把奶茶递给你时，你点点头或者说“谢谢”，表示你收到了奶茶。</li><li><strong>组成：</strong><ul><li><strong>ACK槽位：</strong>由接收方操作，用于反馈数据帧是否成功接收<strong>（发送数据端ACK值为1；当接收方收到数据帧且校验成功时，接收方会拉低ACK槽位（将其设置为显性位0））</strong>。</li><li><strong>ACK定界符：</strong>值为1，用于标志确认结束发送数据端。</li></ul></li><li><strong>示例：</strong> 如果接收方没有拉低ACK，发送端会认为传输失败，并重发此帧。</li></ul></li><li><strong>帧结束（End of Frame, EOF）</strong><ul><li><strong>作用：</strong> 表示数据帧已经完成，告诉总线上其他设备“我的话说完了”。</li><li><strong>比喻：</strong> 就像奶茶小哥说“谢谢，欢迎下次光临！”后，奶茶交接完成。</li><li><strong>组成：</strong>一串连续的显性位（1），用于标志帧结束。</li><li><strong>示例：</strong> CAN帧结束用 <strong>7个位（全为1）</strong> 表示，所有设备知道当前帧已发送完毕，可以开始新的帧传输。</li></ul></li></ol></blockquote><h3 id="2-示例"><a href="#2-示例" class="headerlink" title="2.示例"></a>2.<strong>示例</strong></h3><blockquote><p>假设一个车辆的控制系统发送一帧数据，表示车辆当前速度：</p><ol><li><strong>帧起始</strong>：0</li><li>仲裁段：<ul><li>ID：100（表示速度信息优先级）</li></ul></li><li>控制段：<ul><li>DLC：4（4字节数据）</li></ul></li><li>数据段：<ul><li>数据：0x00 0x3C 0x00 0x00（表示速度为60 km/h）</li></ul></li><li>CRC段：<ul><li>CRC值：0xABCD（假设的校验码）</li></ul></li><li>ACK段：<ul><li>ACK槽位：0（接收方确认收到数据）</li></ul></li><li><strong>帧结束</strong>：1111111</li></ol><p>总线上的节点解析到这一帧后，会将速度数据显示在仪表盘上。</p></blockquote><h2 id="2-错误帧"><a href="#2-错误帧" class="headerlink" title="2.错误帧"></a>2.错误帧</h2><h3 id="1-介绍-1"><a href="#1-介绍-1" class="headerlink" title="1.介绍"></a>1.介绍</h3><p>CAN总线上的每个节点都可以仲裁，假如某一个节点发送的数据有误，那么总线上的其他节点可以检测到该错误，并发送错误帧，防止其他节点对各个节点尽心干扰。</p><h1 id="2-硬件结构"><a href="#2-硬件结构" class="headerlink" title="2.硬件结构"></a>2.硬件结构</h1><h2 id="1-时钟频率"><a href="#1-时钟频率" class="headerlink" title="1.时钟频率"></a>1.时钟频率</h2><p><strong>CAN 时钟频率</strong>是指控制 CAN 总线通信的时钟信号，用于驱动 CAN 控制器和生成 CAN 总线波特率。</p><blockquote><p>CAN 外设挂载在高速总线 APB1 上，因此时钟频率为 36 MHz，CAN 控制器以该频率为基础输入时钟频率。</p><p>CAN 通讯，反映到总线介质上，是将 <code>1010</code> 这样的数据位（即高低电平序列）从发送节点传递给接收节点。由于CAN通讯属于异步通讯，没有时钟信号线，因此其可靠通讯需借助统一的位时序进行。</p><p>位时序，即CAN控制器对总线上的每一个数据位进行接收时（时间为<code>Tbit</code>），其内部又细分为4个时序段，分别为：</p><ul><li>同步段（SS）</li><li>传播时间段（PTS）</li><li>相位缓冲段1（PBS1）</li><li>相位缓冲段2（PBS2）</li></ul><p>就STM32而言，传播时间段与相位缓冲段1合并为一个时间段，则原来的4个时序段，变为3个时序段，分别为：</p><ul><li>同步段（SS）</li><li>时间段1（BS1）</li><li>时间段2（BS2）</li></ul><p>其每个时序段对应的时间分别为：<code>Tss、Tbs1 、Tbs2</code>，则<code>Tbit = Tss + Tbs1 + Tbs2</code> 。</p><p>对应关系框图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501121655137.png" alt="微信截图_20250112165457"></p><p>每个时序段又由若干个最小时间量子<code>Tq</code>组成。其中，同步段有且仅有1个最小时间元。</p></blockquote><h2 id="2-CAN控制器"><a href="#2-CAN控制器" class="headerlink" title="2.CAN控制器"></a>2.CAN控制器</h2><p><strong><code>bxCAN</code></strong>，即基本扩展CAN<code>（Basic Extend CAN）</code>是 STM32 微控制器系列中集成的 CAN 控制器模块。</p><p>STM32F103ZET6包含<strong>1个CAN控制器</strong>，其配备<strong>14个接收滤波器</strong>、<strong>3个邮箱</strong>和<strong>2个接收FIFO缓冲区</strong>，支持多种滤波模式（如掩码模式和列表模式），可以灵活配置不同的ID匹配规则，用于高效处理CAN通信。</p><blockquote><ul><li>协议支持：支持CAN协议2.0A和2.0B的主动模式。</li><li>高波特率：波特率最高可达1兆位/秒。 </li><li><p>时间触发通信：支持时间触发通信功能，CAN的硬件内部定时器可以在TX/RX的帧起始位的采样点位置 生成时间戳。</p></li><li><p>发送功能： 具有3个发送邮箱，发送报文的优先级特性可软件配置。 记录发送SOF（Start Of Frame，帧起始）时刻的时间。</p></li><li><p>接收功能： 具有3级深度的2个FIFO（First In First Out，先进先出队列），每个FIFO都可以存放3个完整的报文，完全由硬件管理。 共有14个位宽可变的过滤器组（部分STM32型号可能支持更多），由整个CAN共享，用于筛选有效报文。 记录接收SOF时刻的时间。 支持禁止自动重传模式。</p></li></ul><p>主设备模式框图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501121411954.png" alt="微信截图_20250112130304"></p><p><strong>邮箱的作用：</strong></p><p>邮箱用于<strong>暂存需要发送或接收的数据帧</strong>，邮箱可以存放待发送的数据帧，并在硬件控制下根据优先级调度进行发送：接收的数据帧经过滤波器筛选后，符合条件的帧会被放入邮箱中，并最终进入接收缓冲区（FIFO）。</p><p>每个邮箱可以存储一个数据帧，因此STM32F103的3个邮箱可以并行存储3个不同的帧。</p><p><strong>滤波器的作用：</strong></p><p>滤波器用于根据数据帧仲裁段的<strong><code>ID</code></strong>筛选接收到的CAN帧，过滤掉不符合要求的帧，从而减轻CPU处理不必要数据的负担。</p><p>接收到的数据帧先通过滤波器进行检查，匹配滤波规则；如果数据帧的<code>ID</code>符合设定的滤波条件，则该帧会被接受并放入<strong>接收缓冲区</strong><code>（FIFO）</code>；不符合滤波条件的帧则会被丢弃，不会占用资源。</p><p><strong>FIFO的作用：</strong></p><p>FIFO是数据帧的<strong>缓冲区</strong>，用于存储接收到的数据帧，防止其因处理速度慢而丢失。</p><p><strong>邮箱、过滤器和FIFO存在的意义：</strong></p><p>当CAN总线通信速度高、数据量大时，STM32的硬件滤波器、邮箱和FIFO协同工作，分担CPU负载，确保数据完整性和实时性。好比串口传输速率低，也就没有硬件协助。</p></blockquote><h3 id="1-滤波器"><a href="#1-滤波器" class="headerlink" title="1.滤波器"></a>1.滤波器</h3><p>滤波器模式分为掩码模式和列表模式。其作用是选择性地接收有效报文，减少单片机软件部分负担！每个过滤器有两个32位寄存器<code>FxR1</code>和<code>FxR2</code>，每个过滤器可以保存两个或者四个16位数据，一个或者两个32位数据，用于过滤。过滤器工作模式不同，作用也不相同！</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501180002626.png" alt="image-20250118000202552"></p><p>如上图所述的映像结合代码可知：ID并不占整个寄存器，写代码尤为注意不可直接复制。</p><blockquote><p><strong><code>FilterIdHigh</code></strong> 和 <strong><code>FilterIdLow</code></strong>：分别用于设置过滤器的 <strong>标准ID</strong> 或 <strong>扩展ID</strong>。</p><p><strong><code>FilterMaskIdHigh</code></strong> 和 <strong><code>FilterMaskIdLow</code></strong>：用于设置 <strong>掩码</strong>，即哪些位需要匹配，哪些位可以忽略<strong>（列表模式下掩码无效，不使用即可）</strong>。</p></blockquote><h4 id="1-掩码模式："><a href="#1-掩码模式：" class="headerlink" title="1.掩码模式："></a><strong>1.掩码模式：</strong></h4><blockquote><p>掩码模式下，滤波器根据一个<strong>标准ID</strong>和一个<strong>掩码</strong>来决定哪些消息符合接收条件。掩码是一个与标准ID相对应的值，用于指示标准ID的哪些位需要匹配，哪些可以忽略。</p><p>掩码中的每一位决定了过滤过程：</p><ul><li>如果掩码位为 <code>1</code>，则对应的标准ID位必须匹配。</li><li>如果掩码位为 <code>0</code>，则对应的标准ID位可以是任意值，不需要匹配。</li></ul></blockquote><p><strong>示例：</strong>假设我们有以下设置：</p><blockquote><h3 id="1-掩码为-0x000"><a href="#1-掩码为-0x000" class="headerlink" title="1. 掩码为 0x000"></a>1. <strong>掩码为 <code>0x000</code></strong></h3><ul><li><strong>配置ID</strong>：<code>0x200</code></li><li><strong>掩码</strong>：<code>0x000</code></li><li><strong>结果</strong>：所有ID都能够通过。</li></ul><p><strong>解释</strong>：掩码为 <code>0x000</code>，表示掩码的每一位都是 <code>0</code>，即对标准ID的每一位都没有限制，可以是任意值。因此，无论接收到什么标准ID，都能通过过滤器。简单来说，掩码的 <code>0</code> 表示没有任何匹配要求，所以所有的 ID 都能通过。</p><h3 id="2-掩码为-0x700"><a href="#2-掩码为-0x700" class="headerlink" title="2. 掩码为 0x700"></a>2. <strong>掩码为 <code>0x700</code></strong></h3><ul><li><strong>配置ID</strong>：<code>0x200</code></li><li><strong>掩码</strong>：<code>0x700</code></li><li><strong>结果</strong>：标准ID 为 <code>0x200</code> 到 <code>0x2FF</code> 的消息都能通过。</li></ul><p><strong>解释</strong>：掩码为 <code>0x700</code>，其二进制形式是 <code>0111 0000 0000</code>，表示：掩码的前 3 位需要与标准ID的前 3 位匹配。后 8 位可以是任意值（即这些位不要求匹配，可以变化）。</p><p>由于配置的 ID 为 <code>0x200</code>（二进制：<code>0010 0000 0000</code>），所以标准ID的前 3 位是 <code>001</code>。掩码 <code>0x700</code> 的前 3 位是 <code>011</code>，要求前 3 位的匹配，而后 8 位可以自由变化。因此，ID 范围是从 <code>0x200</code> 到 <code>0x2FF</code>（即二进制：<code>0010 0000 0000</code> 到 <code>0010 1111 1111</code>），符合条件的标准ID都会被接收。</p><h3 id="3-掩码为-0x7FF"><a href="#3-掩码为-0x7FF" class="headerlink" title="3. 掩码为 0x7FF"></a>3. <strong>掩码为 <code>0x7FF</code></strong></h3><ul><li><strong>配置ID</strong>：<code>0x200</code></li><li><strong>掩码</strong>：<code>0x7FF</code></li><li><strong>结果</strong>：只有标准ID为 <code>0x200</code> 的消息能够通过。</li></ul><p><strong>解释</strong>：掩码为 <code>0x7FF</code>，即二进制 <code>1111 1111 1111</code>，表示掩码的每一位都要求与标准ID的相应位完全匹配。也就是说，所有的 11 位都必须一致。</p><p>配置的标准ID是 <code>0x200</code>（二进制：<code>0010 0000 0000</code>）。由于掩码的每一位都要求匹配，所以只有标准ID恰好是 <code>0x200</code> 时才能通过过滤器，其他任何ID都会被过滤掉。</p></blockquote><h4 id="2-列表模式："><a href="#2-列表模式：" class="headerlink" title="2.列表模式："></a><strong>2.列表模式：</strong></h4><blockquote><p>列表模式下，滤波器直接列出允许接收的标准ID。每个ID都有一个对应的过滤器，当接收到匹配的ID时，消息会被接收。</p><p><strong>在标识符列表模式下，屏蔽寄存器也被当作标识符寄存器用。</strong></p></blockquote><p><strong>示例：</strong>假设我们有以下设置：</p><blockquote><p>我们希望接收标准ID为<code>0x123</code>和<code>0x456</code>的消息：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">CAN_FilterTypeDef sFilterConfig;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置第一个过滤器，接收标准ID 0x123的消息</span></span><br><span class="line">sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;  <span class="comment">// 设置为列表模式</span></span><br><span class="line">sFilterConfig.FilterIdHigh = <span class="number">0x123</span> &lt;&lt; <span class="number">5</span>;           <span class="comment">// 设置标准ID 0x123（高16位）</span></span><br><span class="line">sFilterConfig.FilterIdLow = <span class="number">0x0000</span>;                <span class="comment">// 设置标准ID 0x123（低16位）</span></span><br><span class="line">HAL_CAN_ConfigFilter(&amp;hcan, &amp;sFilterConfig);       <span class="comment">// 配置CAN过滤器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置第二个过滤器，接收标准ID 0x456的消息</span></span><br><span class="line">sFilterConfig.FilterMaskIdHigh = <span class="number">0x456</span> &lt;&lt; <span class="number">5</span>;       <span class="comment">// 设置标准ID 0x456（高16位）</span></span><br><span class="line">sFilterConfig.FilterMaskIdLow = <span class="number">0x0000</span>;            <span class="comment">// 设置标准ID 0x456（低16位）</span></span><br><span class="line">HAL_CAN_ConfigFilter(&amp;hcan, &amp;sFilterConfig);       <span class="comment">// 配置CAN过滤器</span></span><br></pre></td></tr></table></figure></blockquote>]]></content>
      
      
      <categories>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STM32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2025/01/11/%E5%B5%8C%E5%85%A5%E5%BC%8F/%E6%96%B9%E6%B3%95/"/>
      <url>/2025/01/11/%E5%B5%8C%E5%85%A5%E5%BC%8F/%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>是的，<strong>对于长时间不用的 STM32 知识，复习笔记通常是足够的</strong>，尤其是你之前学过并有一定理解的内容，不需要从头再敲一遍代码。如果能够通过看笔记快速回忆起原理和应用方式，并能够在项目中正确使用，就已经达到了实际需求。</p><hr><h3 id="几点具体建议"><a href="#几点具体建议" class="headerlink" title="几点具体建议"></a><strong>几点具体建议</strong></h3><h4 id="1-看笔记复习核心概念"><a href="#1-看笔记复习核心概念" class="headerlink" title="1. 看笔记复习核心概念"></a>1. <strong>看笔记复习核心概念</strong></h4><ul><li><p>笔记是复习的高效方式，尤其是整理得清晰的笔记。</p></li><li><p>重点内容：</p><ul><li>常用外设的初始化流程（如 GPIO、USART、I2C、SPI、ADC 等）。</li><li>HAL 库或寄存器操作的关键 API 或配置方法。</li><li>STM32CubeMX 的使用步骤（如引脚配置和时钟设置）。</li><li>常见问题和解决方法（例如某些外设的配置注意事项）。</li></ul></li></ul><h4 id="2-以项目需求为导向"><a href="#2-以项目需求为导向" class="headerlink" title="2. 以项目需求为导向"></a>2. <strong>以项目需求为导向</strong></h4><ul><li>如果你要做的项目中用到某个外设（比如串口通信），直接从项目需求出发，看对应的笔记和代码例子：<ul><li>如果笔记清晰并包含相关配置和代码，复用这些知识即可。</li><li>如果笔记中没有记录详细代码，但记下了原理，结合 STM32CubeMX 和 HAL 库的函数手册查找 API，快速应用即可。</li></ul></li></ul><h4 id="3-避免从零开始"><a href="#3-避免从零开始" class="headerlink" title="3. 避免从零开始"></a>3. <strong>避免从零开始</strong></h4><ul><li>如果之前已经写过类似的代码，没必要再从 0 到 1 敲一遍（除非是核心知识完全遗忘）。</li><li>比如，串口初始化和发送数据，你只需要理解 <strong>初始化时的配置逻辑</strong> 和 <strong>API 的用法</strong>，完全没必要再重复敲基础代码。</li></ul><h4 id="4-实践项目时再深入"><a href="#4-实践项目时再深入" class="headerlink" title="4. 实践项目时再深入"></a>4. <strong>实践项目时再深入</strong></h4><ul><li>如果有项目需求，优先复用笔记中的知识。遇到问题再针对性深入研究，不用全面复习所有外设。</li><li>比如做一个数据采集项目，需要用到 ADC 和 DMA，只需要重点复习这两个模块，而 GPIO 或串口可以根据需求快速回顾或直接复用以前的代码。</li></ul><hr><h3 id="为什么不用从-0-到-1-重头敲？"><a href="#为什么不用从-0-到-1-重头敲？" class="headerlink" title="为什么不用从 0 到 1 重头敲？"></a><strong>为什么不用从 0 到 1 重头敲？</strong></h3><ol><li><strong>已有基础</strong>：<ul><li>你之前已经学过 STM32，只是需要复习。看笔记能够快速回忆起核心知识点和方法，重头开始会浪费时间。</li></ul></li><li><strong>复用代码更高效</strong>：<ul><li>实际项目中，STM32 开发很多时候都是基于以前的代码模板或已有的库实现。如果你的笔记和代码记录清晰，可以直接复用。</li></ul></li><li><strong>以需求为中心</strong>：<ul><li>长时间不用的知识只需要根据项目需求进行针对性复习，不用复习所有内容。比如，当前项目只需要用 GPIO 和定时器，你就只复习这两部分即可。</li></ul></li><li><strong>重点是理解和应用</strong>：<ul><li>项目开发中，重要的是理解 STM32 的外设配置原理和应用逻辑，而不是重新熟悉所有代码细节。</li></ul></li></ol><hr><h3 id="但以下情况需要敲代码"><a href="#但以下情况需要敲代码" class="headerlink" title="但以下情况需要敲代码"></a><strong>但以下情况需要敲代码</strong></h3><ol><li><strong>遗忘严重</strong>： 如果长时间不用，已经忘记了某些外设的基本原理或配置方法（比如串口的波特率设置、时钟配置等），可以尝试简单敲一下代码来巩固记忆。</li><li><strong>复杂模块或新功能</strong>： 如果项目中需要用到以前没有学过或很复杂的功能（如 DMA、USB、CAN 总线等），建议从头掌握，熟悉配置方法并实际敲代码。</li><li><strong>提高熟练度</strong>： 如果觉得自己对某些外设的操作还不够熟练，比如 STM32 的中断处理或 HAL 库 API 的应用，可以通过敲代码来强化记忆。</li></ol><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><ul><li>对于长时间不用的 STM32 知识，看笔记回顾原理和流程通常就足够，没必要从头敲代码。</li><li>如果能通过笔记快速理解并应用到项目中，完全可以直接复用笔记和以前的代码。</li><li>只有在遗忘严重或项目需要复杂功能时，才需要重新动手敲代码。最终的目标是以需求为中心，能高效完成项目为主。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2025/01/11/%E6%9D%82%E8%B0%88/HAL%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
      <url>/2025/01/11/%E6%9D%82%E8%B0%88/HAL%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="1-GPIO"><a href="#1-GPIO" class="headerlink" title="1.GPIO"></a>1.GPIO</h1><h2 id="2-HAL-GPIO-Init"><a href="#2-HAL-GPIO-Init" class="headerlink" title="2.HAL_GPIO_Init"></a>2.<code>HAL_GPIO_Init</code></h2><h3 id="1-源代码"><a href="#1-源代码" class="headerlink" title="1.源代码"></a>1.源代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">HAL_GPIO_Init</span><span class="params">(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">uint32_t</span> position = <span class="number">0x00</span>u;               <span class="comment">// 当前处理的引脚位置 (0~15)，用于遍历所有可能的 GPIO 引脚</span></span><br><span class="line">  <span class="type">uint32_t</span> ioposition;                     <span class="comment">// 当前引脚的位掩码，用于标记引脚位置 (1 &lt;&lt; position)</span></span><br><span class="line">  <span class="type">uint32_t</span> iocurrent;                      <span class="comment">// 当前引脚的实际位值（GPIO_Init-&gt;Pin &amp; ioposition），判断引脚是否有效</span></span><br><span class="line">  <span class="type">uint32_t</span> temp;                           <span class="comment">// 临时变量，用于存储寄存器值</span></span><br><span class="line">  <span class="type">uint32_t</span> config = <span class="number">0x00</span>u;                 <span class="comment">// 配置值，用于存储 MODE 和 CNF 的组合配置</span></span><br><span class="line">  __IO <span class="type">uint32_t</span> *configregister;           <span class="comment">// 指向 CRL 或 CRH 寄存器的指针，用于配置引脚的 MODE 和 CNF</span></span><br><span class="line">  <span class="type">uint32_t</span> registeroffset;                 <span class="comment">// 用于计算 CNF 和 MODE 位在 CRL 或 CRH 中的偏移量</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 检查传入的参数是否有效 */</span></span><br><span class="line">  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));  <span class="comment">// 确保 GPIOx 是合法的 GPIO 实例</span></span><br><span class="line">  assert_param(IS_GPIO_PIN(GPIO_Init-&gt;Pin));  <span class="comment">// 确保指定的引脚是合法的 GPIO 引脚</span></span><br><span class="line">  assert_param(IS_GPIO_MODE(GPIO_Init-&gt;Mode)); <span class="comment">// 确保引脚模式是合法的 GPIO 模式</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 遍历 GPIO_Init-&gt;Pin 所对应的所有引脚 */</span></span><br><span class="line">  <span class="keyword">while</span> (((GPIO_Init-&gt;Pin) &gt;&gt; position) != <span class="number">0x00</span>u)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">/* 获取当前引脚的位掩码（用于标记当前引脚位置） */</span></span><br><span class="line">    ioposition = (<span class="number">0x01</span>uL &lt;&lt; position);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 检查当前引脚是否在用户配置的引脚掩码中 */</span></span><br><span class="line">    iocurrent = (<span class="type">uint32_t</span>)(GPIO_Init-&gt;Pin) &amp; ioposition;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (iocurrent == ioposition)  <span class="comment">// 如果当前引脚需要配置</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">/* 确保 GPIO 端口支持复用功能（AFIO） */</span></span><br><span class="line">      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* 根据指定的模式设置 MODE 和 CNF 值 */</span></span><br><span class="line">      <span class="keyword">switch</span> (GPIO_Init-&gt;Mode)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">/* 输出推挽模式 */</span></span><br><span class="line">        <span class="keyword">case</span> GPIO_MODE_OUTPUT_PP:</span><br><span class="line">          assert_param(IS_GPIO_SPEED(GPIO_Init-&gt;Speed)); <span class="comment">// 确保输出速度参数有效</span></span><br><span class="line">          config = GPIO_Init-&gt;Speed + GPIO_CR_CNF_GP_OUTPUT_PP; <span class="comment">// 配置为通用推挽输出</span></span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 输出开漏模式 */</span></span><br><span class="line">        <span class="keyword">case</span> GPIO_MODE_OUTPUT_OD:</span><br><span class="line">          assert_param(IS_GPIO_SPEED(GPIO_Init-&gt;Speed)); <span class="comment">// 确保输出速度参数有效</span></span><br><span class="line">          config = GPIO_Init-&gt;Speed + GPIO_CR_CNF_GP_OUTPUT_OD; <span class="comment">// 配置为通用开漏输出</span></span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 复用功能推挽模式 */</span></span><br><span class="line">        <span class="keyword">case</span> GPIO_MODE_AF_PP:</span><br><span class="line">          assert_param(IS_GPIO_SPEED(GPIO_Init-&gt;Speed)); <span class="comment">// 确保输出速度参数有效</span></span><br><span class="line">          config = GPIO_Init-&gt;Speed + GPIO_CR_CNF_AF_OUTPUT_PP; <span class="comment">// 配置为复用推挽输出</span></span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 复用功能开漏模式 */</span></span><br><span class="line">        <span class="keyword">case</span> GPIO_MODE_AF_OD:</span><br><span class="line">          assert_param(IS_GPIO_SPEED(GPIO_Init-&gt;Speed)); <span class="comment">// 确保输出速度参数有效</span></span><br><span class="line">          config = GPIO_Init-&gt;Speed + GPIO_CR_CNF_AF_OUTPUT_OD; <span class="comment">// 配置为复用开漏输出</span></span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 输入模式，包括外部中断和事件触发模式 */</span></span><br><span class="line">        <span class="keyword">case</span> GPIO_MODE_INPUT:</span><br><span class="line">        <span class="keyword">case</span> GPIO_MODE_IT_RISING:</span><br><span class="line">        <span class="keyword">case</span> GPIO_MODE_IT_FALLING:</span><br><span class="line">        <span class="keyword">case</span> GPIO_MODE_IT_RISING_FALLING:</span><br><span class="line">        <span class="keyword">case</span> GPIO_MODE_EVT_RISING:</span><br><span class="line">        <span class="keyword">case</span> GPIO_MODE_EVT_FALLING:</span><br><span class="line">        <span class="keyword">case</span> GPIO_MODE_EVT_RISING_FALLING:</span><br><span class="line">          assert_param(IS_GPIO_PULL(GPIO_Init-&gt;Pull)); <span class="comment">// 确保上下拉配置有效</span></span><br><span class="line">          <span class="keyword">if</span> (GPIO_Init-&gt;Pull == GPIO_NOPULL)  <span class="comment">// 悬空输入</span></span><br><span class="line">          &#123;</span><br><span class="line">            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span> <span class="keyword">if</span> (GPIO_Init-&gt;Pull == GPIO_PULLUP) <span class="comment">// 上拉输入</span></span><br><span class="line">          &#123;</span><br><span class="line">            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;</span><br><span class="line">            GPIOx-&gt;BSRR = ioposition; <span class="comment">// 设置 ODR 位为 1，启用上拉</span></span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span> <span class="comment">/* GPIO_PULLDOWN 下拉输入 */</span></span><br><span class="line">          &#123;</span><br><span class="line">            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;</span><br><span class="line">            GPIOx-&gt;BRR = ioposition; <span class="comment">// 清除 ODR 位为 0，启用下拉</span></span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 模拟输入模式 */</span></span><br><span class="line">        <span class="keyword">case</span> GPIO_MODE_ANALOG:</span><br><span class="line">          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG; <span class="comment">// 配置为模拟输入</span></span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 如果是其他未支持的模式，跳过配置 */</span></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* 判断当前引脚属于 CRL（前 8 位）还是 CRH（后 8 位），并计算寄存器偏移 */</span></span><br><span class="line">      configregister = (iocurrent &lt; GPIO_PIN_8) ? &amp;GPIOx-&gt;CRL : &amp;GPIOx-&gt;CRH;</span><br><span class="line">      registeroffset = (iocurrent &lt; GPIO_PIN_8) ? (position &lt;&lt; <span class="number">2u</span>) : ((position - <span class="number">8u</span>) &lt;&lt; <span class="number">2u</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* 应用引脚的配置到寄存器 */</span></span><br><span class="line">      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) &lt;&lt; registeroffset), (config &lt;&lt; registeroffset));</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* 如果是 EXTI 模式（外部中断或事件触发），配置 EXTI 寄存器 */</span></span><br><span class="line">      <span class="keyword">if</span> ((GPIO_Init-&gt;Mode &amp; EXTI_MODE) == EXTI_MODE)</span><br><span class="line">      &#123;</span><br><span class="line">        __HAL_RCC_AFIO_CLK_ENABLE(); <span class="comment">// 启用 AFIO 时钟</span></span><br><span class="line">        temp = AFIO-&gt;EXTICR[position &gt;&gt; <span class="number">2u</span>]; <span class="comment">// 获取 EXTI 配置寄存器的值</span></span><br><span class="line">        CLEAR_BIT(temp, (<span class="number">0x0F</span>u) &lt;&lt; (<span class="number">4u</span> * (position &amp; <span class="number">0x03</span>u))); <span class="comment">// 清除当前引脚的 EXTI 映射</span></span><br><span class="line">        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) &lt;&lt; (<span class="number">4u</span> * (position &amp; <span class="number">0x03</span>u))); <span class="comment">// 设置 EXTI 映射到当前引脚</span></span><br><span class="line">        AFIO-&gt;EXTICR[position &gt;&gt; <span class="number">2u</span>] = temp; <span class="comment">// 写回寄存器</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 配置上升沿触发 */</span></span><br><span class="line">        <span class="keyword">if</span> ((GPIO_Init-&gt;Mode &amp; RISING_EDGE) == RISING_EDGE)</span><br><span class="line">        &#123;</span><br><span class="line">          SET_BIT(EXTI-&gt;RTSR, iocurrent); <span class="comment">// 设置上升沿触发</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          CLEAR_BIT(EXTI-&gt;RTSR, iocurrent); <span class="comment">// 禁用上升沿触发</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 配置下降沿触发 */</span></span><br><span class="line">        <span class="keyword">if</span> ((GPIO_Init-&gt;Mode &amp; FALLING_EDGE) == FALLING_EDGE)</span><br><span class="line">        &#123;</span><br><span class="line">          SET_BIT(EXTI-&gt;FTSR, iocurrent); <span class="comment">// 设置下降沿触发</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          CLEAR_BIT(EXTI-&gt;FTSR, iocurrent); <span class="comment">// 禁用下降沿触发</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 配置事件掩码 */</span></span><br><span class="line">        <span class="keyword">if</span> ((GPIO_Init-&gt;Mode &amp; GPIO_MODE_EVT) == GPIO_MODE_EVT)</span><br><span class="line">        &#123;</span><br><span class="line">          SET_BIT(EXTI-&gt;EMR, iocurrent); <span class="comment">// 启用事件掩码</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          CLEAR_BIT(EXTI-&gt;EMR, iocurrent); <span class="comment">// 禁用事件掩码</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 配置中断掩码 */</span></span><br><span class="line">        <span class="keyword">if</span> ((GPIO_Init-&gt;Mode &amp; GPIO_MODE_IT) == GPIO_MODE_IT)</span><br><span class="line">        &#123;</span><br><span class="line">          SET_BIT(EXTI-&gt;IMR, iocurrent); <span class="comment">// 启用中断掩码</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          CLEAR_BIT(EXTI-&gt;IMR, iocurrent); <span class="comment">// 禁用中断掩码</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    position++; <span class="comment">// 处理下一个引脚</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-示例场景"><a href="#2-示例场景" class="headerlink" title="2.示例场景"></a>2.示例场景</h3><p>我们希望将 <strong><code>PA0</code></strong> 引脚配置为：</p><ul><li><strong>外部中断模式</strong>（上升沿触发），</li><li>使用 <strong>上拉电阻</strong>，以防止引脚悬空。</li></ul><h3 id="3-逐步解析"><a href="#3-逐步解析" class="headerlink" title="3.逐步解析"></a>3.逐步解析</h3><h4 id="1-遍历引脚（while-循环部分）"><a href="#1-遍历引脚（while-循环部分）" class="headerlink" title="1. 遍历引脚（while 循环部分）"></a><strong>1. 遍历引脚（while 循环部分）</strong></h4><ul><li><p>在代码中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (((GPIO_Init-&gt;Pin) &gt;&gt; position) != <span class="number">0x00</span>u)</span><br></pre></td></tr></table></figure><ul><li><strong>作用</strong>：遍历用户指定的引脚掩码，这里 <code>GPIO_Init-&gt;Pin = GPIO_PIN_0</code>，即 <code>0x0001</code>。</li><li><strong>position</strong>：每次循环处理一个引脚，当前引脚是 <code>PA0</code>，其位置为 <code>0</code>。</li></ul></li></ul><h4 id="2-确定当前引脚（iocurrent-和-ioposition-的计算）"><a href="#2-确定当前引脚（iocurrent-和-ioposition-的计算）" class="headerlink" title="2. 确定当前引脚（iocurrent 和 ioposition 的计算）"></a><strong>2. 确定当前引脚（<code>iocurrent</code> 和 <code>ioposition</code> 的计算）</strong></h4><ul><li><p>在代码中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ioposition = (<span class="number">0x01</span>uL &lt;&lt; position);  <span class="comment">// 当前位位置（0x1）</span></span><br><span class="line">iocurrent = GPIO_Init-&gt;Pin &amp; ioposition;  <span class="comment">// 当前引脚有效</span></span><br></pre></td></tr></table></figure><ul><li><strong>作用</strong>：计算出当前引脚是否有效。</li><li>对于 <code>GPIO_PIN_0</code>，<code>ioposition = 0x0001</code>，<code>iocurrent = 0x0001</code>，表示引脚 <code>PA0</code> 有效。</li></ul></li></ul><blockquote><p>假设 <code>GPIO_Init-&gt;Pin = GPIO_PIN_1</code>（表示需要配置 PA1 <code>0x0002</code>），以下是 <code>while</code> 循环的逐步执行过程：</p><ol><li><p><strong>第一次循环</strong>：</p><ul><li><code>position = 0</code></li><li><code>ioposition = (1 &lt;&lt; 0) = 0x0001</code>，对应第 0 位。</li><li><code>iocurrent = GPIO_Init-&gt;Pin &amp; ioposition = 0x0002 &amp; 0x0001 = 0x0000</code>。</li><li>因为 <code>iocurrent = 0x0000</code>（当前引脚无效），跳过本次循环，<code>position++</code>。</li></ul></li><li><p><strong>第二次循环</strong>：</p><ul><li><p><code>position = 1</code></p></li><li><p><code>ioposition = (1 &lt;&lt; 1) = 0x0002</code>，对应第 1 位。</p></li><li><p><code>iocurrent = GPIO_Init-&gt;Pin &amp; ioposition = 0x0002 &amp; 0x0002 = 0x0002</code>。</p></li><li><p>因为 </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iocurrent = <span class="number">0x0002</span></span><br></pre></td></tr></table></figure><p>（当前引脚有效），进入配置逻辑：</p><ul><li>配置模式（<code>CRL</code> 或 <code>CRH</code> 寄存器）。</li><li>配置上拉或下拉（<code>BSRR</code> 或 <code>BRR</code>）。</li><li>如果是外部中断模式，配置 EXTI 映射、触发模式等。</li></ul></li></ul></li><li><p><strong>第三次循环</strong>：</p><ul><li><code>position = 2</code></li><li><code>((GPIO_Init-&gt;Pin) &gt;&gt; position) = 0</code>，直接退出循环。</li></ul></li></ol></blockquote><h4 id="3-确定引脚模式和配置（switch-GPIO-Init-gt-Mode-部分）"><a href="#3-确定引脚模式和配置（switch-GPIO-Init-gt-Mode-部分）" class="headerlink" title="3. 确定引脚模式和配置（switch (GPIO_Init-&gt;Mode) 部分）"></a><strong>3. 确定引脚模式和配置（<code>switch (GPIO_Init-&gt;Mode)</code> 部分）</strong></h4><ul><li><p>在代码中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (GPIO_Init-&gt;Mode)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">case</span> GPIO_MODE_IT_RISING:  <span class="comment">// 外部中断模式，上升沿触发</span></span><br><span class="line">        config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING; <span class="comment">// 默认配置为浮空输入</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>作用：</p><ul><li><p><code>GPIO_MODE_IT_RISING</code> 是中断模式，上升沿触发。</p></li><li><p>根据 ：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GPIO_Init-&gt;Pull = GPIO_PULLUP</span><br></pre></td></tr></table></figure><ul><li>配置为上拉输入模式；</li><li>设置引脚对应的上拉位（ODR 位）。</li></ul></li></ul></li></ul></li></ul><h4 id="4-判断引脚属于-CRL-还是-CRH"><a href="#4-判断引脚属于-CRL-还是-CRH" class="headerlink" title="4. 判断引脚属于 CRL 还是 CRH"></a><strong>4. 判断引脚属于 CRL 还是 CRH</strong></h4><ul><li><p>在代码中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">configregister = (iocurrent &lt; GPIO_PIN_8) ? &amp;GPIOx-&gt;CRL : &amp;GPIOx-&gt;CRH;</span><br><span class="line">registeroffset = (iocurrent &lt; GPIO_PIN_8) ? (position &lt;&lt; <span class="number">2u</span>) : ((position - <span class="number">8u</span>) &lt;&lt; <span class="number">2u</span>);</span><br></pre></td></tr></table></figure><ul><li>作用：<ul><li>对于引脚 <code>PA0</code>，属于前 8 位，因此访问 <code>CRL</code> 寄存器。</li><li><code>registeroffset = position &lt;&lt; 2u</code>，即偏移为 <code>0x00</code>。</li></ul></li></ul></li></ul><blockquote><h3 id="为什么-config-值相同？"><a href="#为什么-config-值相同？" class="headerlink" title="为什么 config 值相同？"></a><strong>为什么 <code>config</code> 值相同？</strong></h3><ol><li><strong>GPIO 模式寄存器的定义</strong>：<ul><li>对于输入模式，STM32 使用 <code>MODE</code> 和 <code>CNF</code> 字段来配置引脚的工作模式。</li><li>在上拉和下拉模式下：<ul><li><code>MODE = 00</code>（输入模式）</li><li><code>CNF = 10</code>（上拉/下拉模式）</li></ul></li><li>因此，无论是上拉还是下拉，<code>MODE</code> 和 <code>CNF</code> 的组合都是相同的，导致 <code>config</code> 值一致。</li></ul></li><li><strong>区分上拉和下拉的方式</strong>：<ul><li>STM32 使用引脚的 <strong>输出数据寄存器（<code>ODR</code>）</strong> 来决定是上拉还是下拉：<ul><li><code>ODR = 1</code>：上拉</li><li><code>ODR = 0</code>：下拉</li></ul></li><li>这意味着 <strong>上拉和下拉的本质区别在于 <code>ODR</code> 的设置</strong>，而非 <code>MODE</code> 或 <code>CNF</code>。</li></ul></li></ol><h3 id><a href="#" class="headerlink" title></a><img src="/2025/01/11/%E6%9D%82%E8%B0%88/HAL%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/QQ20250111-113353.png" alt="QQ20250111-113353"></h3><ol><li><strong>GPIOx-&gt;BSRR（置位寄存器）</strong>：<ul><li><code>GPIOx-&gt;BSRR</code> 是用于将对应引脚的输出数据寄存器（<code>ODR</code>）的某个位 <strong>设置为 1</strong> 的寄存器。</li><li>写入 <code>GPIOx-&gt;BSRR</code> 会使指定引脚的 <code>ODR</code> 位被置 1。</li><li>当设置为上拉模式时，需要将 <code>ODR</code> 置为 1，因此写入 <code>GPIOx-&gt;BSRR</code>。</li></ul></li><li><strong>GPIOx-&gt;BRR（复位寄存器）</strong>：<ul><li><code>GPIOx-&gt;BRR</code> 是用于将对应引脚的输出数据寄存器（<code>ODR</code>）的某个位 <strong>清零</strong> 的寄存器。</li><li>写入 <code>GPIOx-&gt;BRR</code> 会使指定引脚的 <code>ODR</code> 位被置 0。</li><li>当设置为下拉模式时，需要将 <code>ODR</code> 清为 0，因此写入 <code>GPIOx-&gt;BRR</code>。</li></ul></li></ol></blockquote><h4 id="5-写入-MODE-和-CNF-寄存器"><a href="#5-写入-MODE-和-CNF-寄存器" class="headerlink" title="5. 写入 MODE 和 CNF 寄存器"></a><strong>5. 写入 MODE 和 CNF 寄存器</strong></h4><ul><li><p>在代码中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) &lt;&lt; registeroffset), (config &lt;&lt; registeroffset));</span><br></pre></td></tr></table></figure><ul><li>作用：<ul><li>将 <code>PA0</code> 配置为输入模式（MODE 为 00），浮空或上拉（CNF）。</li><li>写入 <code>GPIOx-&gt;CRL</code> 的对应位。</li></ul></li></ul></li></ul><h4 id="6-配置-EXTI（外部中断模式）"><a href="#6-配置-EXTI（外部中断模式）" class="headerlink" title="6. 配置 EXTI（外部中断模式）"></a><strong>6. 配置 EXTI（外部中断模式）</strong></h4><ul><li><p>在代码中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((GPIO_Init-&gt;Mode &amp; EXTI_MODE) == EXTI_MODE)</span><br><span class="line">&#123;</span><br><span class="line">    __HAL_RCC_AFIO_CLK_ENABLE();  <span class="comment">// 启用 AFIO 时钟</span></span><br><span class="line">    temp = AFIO-&gt;EXTICR[position &gt;&gt; <span class="number">2u</span>]; <span class="comment">// 获取 EXTI 映射寄存器</span></span><br><span class="line">    CLEAR_BIT(temp, (<span class="number">0x0F</span>u) &lt;&lt; (<span class="number">4u</span> * (position &amp; <span class="number">0x03</span>u)));  <span class="comment">// 清除原映射</span></span><br><span class="line">    SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) &lt;&lt; (<span class="number">4u</span> * (position &amp; <span class="number">0x03</span>u)));  <span class="comment">// 设置 EXTI 映射到 PA0</span></span><br><span class="line">    AFIO-&gt;EXTICR[position &gt;&gt; <span class="number">2u</span>] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>作用：<ul><li>将 EXTI0 通道映射到 GPIOA 的第 0 引脚。</li></ul></li></ul></li></ul><h4 id="7-配置-EXTI-触发类型"><a href="#7-配置-EXTI-触发类型" class="headerlink" title="7. 配置 EXTI 触发类型"></a><strong>7. 配置 EXTI 触发类型</strong></h4><ul><li><p>在代码中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((GPIO_Init-&gt;Mode &amp; RISING_EDGE) == RISING_EDGE)</span><br><span class="line">&#123;</span><br><span class="line">    SET_BIT(EXTI-&gt;RTSR, iocurrent);  <span class="comment">// 上升沿触发</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ((GPIO_Init-&gt;Mode &amp; FALLING_EDGE) == FALLING_EDGE)</span><br><span class="line">&#123;</span><br><span class="line">    SET_BIT(EXTI-&gt;FTSR, iocurrent);  <span class="comment">// 下降沿触发</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>作用：<ul><li>配置 EXTI 的触发模式：<ul><li>上升沿触发，设置 <code>RTSR</code>（上升沿触发寄存器）。</li><li>对于 <code>GPIO_MODE_IT_RISING</code>，这里只设置 <code>RTSR</code>。</li></ul></li></ul></li></ul></li></ul><h4 id="8-配置中断和事件屏蔽寄存器"><a href="#8-配置中断和事件屏蔽寄存器" class="headerlink" title="8. 配置中断和事件屏蔽寄存器"></a><strong>8. 配置中断和事件屏蔽寄存器</strong></h4><ul><li><p>在代码中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((GPIO_Init-&gt;Mode &amp; GPIO_MODE_IT) == GPIO_MODE_IT)</span><br><span class="line">&#123;</span><br><span class="line">    SET_BIT(EXTI-&gt;IMR, iocurrent);  <span class="comment">// 打开中断屏蔽</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ((GPIO_Init-&gt;Mode &amp; GPIO_MODE_EVT) == GPIO_MODE_EVT)</span><br><span class="line">&#123;</span><br><span class="line">    SET_BIT(EXTI-&gt;EMR, iocurrent);  <span class="comment">// 打开事件屏蔽</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>作用：<ul><li>启用 EXTI0 中断（IMR 寄存器）。</li></ul></li></ul></li></ul><h3 id="4-巧妙之处"><a href="#4-巧妙之处" class="headerlink" title="4.巧妙之处"></a><strong>4.巧妙之处</strong></h3><p><strong>position（当前正在处理的引脚编号）、ioposition（当前引脚的位掩码）、iocurrent（当前引脚的实际位值）的设计利用位掩码优点：</strong></p><blockquote><ol><li><strong>减少循环次数</strong>：<ul><li>利用 <code>((GPIO_Init-&gt;Pin) &gt;&gt; position)</code> 提前判断，确保仅对有效的引脚进行检查，避免逐一遍历所有 16 个引脚。</li></ul></li><li><strong>快速定位引脚</strong>：<ul><li>通过 <code>ioposition</code> 和 <code>iocurrent</code> 的配合，直接判断当前引脚是否需要配置，无需额外计算。</li></ul></li><li><strong>灵活性</strong>：<ul><li>支持配置单个引脚或多个引脚，例如 <code>GPIO_PIN_0 | GPIO_PIN_1</code>，统一逻辑下处理任意组合的引脚。</li></ul></li></ol></blockquote><h1 id="位掩码解释"><a href="#位掩码解释" class="headerlink" title="位掩码解释"></a>位掩码解释</h1><p><strong>位掩码（Bitmask）</strong> 是一种通过按位操作（位与、位或等）来<strong>选择或操作二进制数据特定位</strong>的方法，主要用于高效地处理特定位的操作，比如启用、禁用、检测或切换特定位。</p><h3 id="位掩码的基本概念"><a href="#位掩码的基本概念" class="headerlink" title="位掩码的基本概念"></a><strong>位掩码的基本概念</strong></h3><p>位掩码本质上是一个二进制数，通过其每一位的 <strong>0 或 1</strong> 来控制另一个数的特定位是否参与操作。</p><ul><li><strong>“掩码”</strong> 的意思是“遮盖”或“过滤”，通过掩码可以过滤出需要的特定位。</li><li>常见操作包括 <strong>提取</strong>、<strong>设置</strong>、<strong>清除</strong> 和 <strong>切换（翻转）</strong>。</li></ul><h3 id="为什么需要位掩码"><a href="#为什么需要位掩码" class="headerlink" title="为什么需要位掩码"></a><strong>为什么需要位掩码</strong></h3><p>位掩码用于高效地操作数据的特定位，尤其是在嵌入式编程中经常用到。例如：</p><ol><li><strong>检测特定位是否为 1</strong>（如 GPIO 引脚状态）。</li><li><strong>设置某个位为 1</strong>（如启用某个硬件功能）。</li><li><strong>清除某个位为 0</strong>（如禁用某个硬件功能）。</li><li><strong>切换某个位的值</strong>（如翻转某个引脚的状态）。</li></ol><p>这些操作可以通过按位操作（位与 <code>&amp;</code>、位或 <code>|</code>、按位取反 <code>~</code> 等）实现。</p><h3 id="位掩码的实际例子"><a href="#位掩码的实际例子" class="headerlink" title="位掩码的实际例子"></a><strong>位掩码的实际例子</strong></h3><h4 id="例-1：提取特定位的值"><a href="#例-1：提取特定位的值" class="headerlink" title="例 1：提取特定位的值"></a>例 1：<strong>提取特定位的值</strong></h4><p>假设有一个 8 位的寄存器，其值为 <code>0b10101100</code>（十六进制 <code>0xAC</code>），我们想提取其中的第 3 位（从右边开始计数，第 0 位为最低位）。</p><ul><li><p>使用掩码 <code>0b00001000</code>（十进制 8或十六进制 0x08）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint8_t</span> reg = <span class="number">0xAC</span>;     <span class="comment">// 寄存器值</span></span><br><span class="line"><span class="type">uint8_t</span> mask = <span class="number">0x08</span>;    <span class="comment">// 位掩码（提取第 3 位）</span></span><br><span class="line"><span class="type">uint8_t</span> result = reg &amp; mask;</span><br></pre></td></tr></table></figure></li><li><p>结果：</p><ul><li>如果 <code>reg</code> 的第 3 位为 <code>1</code>，<code>result = 0x08</code>（非零）。</li><li>如果 <code>reg</code> 的第 3 位为 <code>0</code>，<code>result = 0x00</code>。</li></ul></li></ul><h4 id="例-2：设置特定位为-1"><a href="#例-2：设置特定位为-1" class="headerlink" title="例 2：设置特定位为 1"></a>例 2：<strong>设置特定位为 1</strong></h4><p>假设我们想将一个寄存器 <code>0b10101100</code> 的第 2 位设为 <code>1</code>。</p><ul><li><p>使用掩码 <code>0b00000100</code>（十进制 4或十六进制 0x04）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint8_t</span> reg = <span class="number">0xAC</span>;     <span class="comment">// 寄存器值</span></span><br><span class="line"><span class="type">uint8_t</span> mask = <span class="number">0x04</span>;    <span class="comment">// 位掩码（设置第 2 位）</span></span><br><span class="line">reg |= mask;            <span class="comment">// 按位或</span></span><br></pre></td></tr></table></figure></li><li><p>结果：</p><ul><li>原始值：<code>0b10101100</code></li><li>新值：<code>0b10101100 | 0b00000100 = 0b10101100</code>（第 2 位已经是 <code>1</code>，所以无变化）。</li></ul></li></ul><h4 id="例-3：清除特定位为-0"><a href="#例-3：清除特定位为-0" class="headerlink" title="例 3：清除特定位为 0"></a>例 3：<strong>清除特定位为 0</strong></h4><p>假设我们想将一个寄存器 <code>0b10101100</code> 的第 2 位清为 <code>0</code>。</p><ul><li><p>使用掩码 <code>0b11111011</code>（取反 0b00000100）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint8_t</span> reg = <span class="number">0xAC</span>;     <span class="comment">// 寄存器值</span></span><br><span class="line"><span class="type">uint8_t</span> mask = ~<span class="number">0x04</span>;   <span class="comment">// 取反掩码，清除第 2 位</span></span><br><span class="line">reg &amp;= mask;            <span class="comment">// 按位与</span></span><br></pre></td></tr></table></figure></li><li><p>结果：</p><ul><li>原始值：<code>0b10101100</code></li><li>新值：<code>0b10101100 &amp; 0b11111011 = 0b10101000</code>。</li></ul></li></ul><h4 id="例-4：切换（翻转）特定位"><a href="#例-4：切换（翻转）特定位" class="headerlink" title="例 4：切换（翻转）特定位"></a>例 4：<strong>切换（翻转）特定位</strong></h4><p>假设我们想将一个寄存器 <code>0b10101100</code> 的第 2 位翻转（即 <code>1 -&gt; 0</code> 或 <code>0 -&gt; 1</code>）。</p><ul><li><p>使用掩码 <code>0b00000100</code>（十进制 4或十六进制 0x04）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint8_t</span> reg = <span class="number">0xAC</span>;     <span class="comment">// 寄存器值</span></span><br><span class="line"><span class="type">uint8_t</span> mask = <span class="number">0x04</span>;    <span class="comment">// 位掩码（翻转第 2 位）</span></span><br><span class="line">reg ^= mask;            <span class="comment">// 按位异或</span></span><br></pre></td></tr></table></figure></li><li><p>结果：</p><ul><li>原始值：<code>0b10101100</code></li><li>新值：<code>0b10101100 ^ 0b00000100 = 0b10101000</code>。</li></ul></li></ul><h3 id="位掩码在-HAL-GPIO-Init-中的应用"><a href="#位掩码在-HAL-GPIO-Init-中的应用" class="headerlink" title="位掩码在 HAL_GPIO_Init 中的应用"></a><strong>位掩码在 HAL_GPIO_Init 中的应用</strong></h3><p>在 <code>HAL_GPIO_Init()</code> 函数中，位掩码被用来确定用户指定的 GPIO 引脚是否需要被配置。</p><h4 id="相关代码段"><a href="#相关代码段" class="headerlink" title="相关代码段"></a>相关代码段</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ioposition = (<span class="number">0x01</span>uL &lt;&lt; position);      <span class="comment">// 生成当前引脚的位掩码 (1 &lt;&lt; position)</span></span><br><span class="line">iocurrent = GPIO_Init-&gt;Pin &amp; ioposition; <span class="comment">// 检查当前引脚是否有效</span></span><br><span class="line"><span class="keyword">if</span> (iocurrent == ioposition)            <span class="comment">// 如果当前引脚有效，则执行配置</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 执行引脚配置逻辑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实际意义"><a href="#实际意义" class="headerlink" title="实际意义"></a>实际意义</h4><p>假设 <code>GPIO_Init-&gt;Pin = GPIO_PIN_1 | GPIO_PIN_3 = 0b00001010</code>（同时配置 PA1 和 PA3）：</p><ul><li><code>position = 0</code> 时，<code>ioposition = 0b00000001</code>，<code>iocurrent = 0b00001010 &amp; 0b00000001 = 0b00000000</code>（跳过）。</li><li><code>position = 1</code> 时，<code>ioposition = 0b00000010</code>，<code>iocurrent = 0b00001010 &amp; 0b00000010 = 0b00000010</code>（配置 PA1）。</li><li><code>position = 2</code> 时，<code>ioposition = 0b00000100</code>，<code>iocurrent = 0b00001010 &amp; 0b00000100 = 0b00000000</code>（跳过）。</li><li><code>position = 3</code> 时，<code>ioposition = 0b00001000</code>，<code>iocurrent = 0b00001010 &amp; 0b00001000 = 0b00001000</code>（配置 PA3）。</li></ul><p>通过这样的位掩码操作，只需要一整个 <code>while</code> 循环的完整运行过程，即包括多次迭代，直到所有引脚都被检查完,即可有效配置多个 GPIO 引脚。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><ul><li><strong>位掩码</strong> 是一种高效的位操作工具，用于控制或检测二进制数据的特定位。</li><li>在嵌入式编程中，位掩码常用于 GPIO 配置、寄存器操作等场景。</li><li>在 <code>HAL_GPIO_Init</code> 中，位掩码被用来逐个检查用户指定的引脚，避免不必要的全引脚遍历，提升效率。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2024/12/01/%E6%9D%82%E8%B0%88/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>/2024/12/01/%E6%9D%82%E8%B0%88/%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="报文"><a href="#报文" class="headerlink" title="报文"></a>报文</h1><h3 id="嵌入式行业中“报文”的定义与本质"><a href="#嵌入式行业中“报文”的定义与本质" class="headerlink" title="嵌入式行业中“报文”的定义与本质"></a><strong>嵌入式行业中“报文”的定义与本质</strong></h3><p>在嵌入式行业中，<strong>“报文”</strong>（Message）是一个常见的术语，指在通信系统中传递信息的一种<strong>结构化数据单元</strong>。报文是设备之间通信的最小传输单位，由通信协议定义其格式和内容。它是一种有组织的、结构化的数据，能够在发送方和接收方之间可靠地传递信息。</p><hr><h3 id="报文的本质"><a href="#报文的本质" class="headerlink" title="报文的本质"></a><strong>报文的本质</strong></h3><h4 id="1-数据载体"><a href="#1-数据载体" class="headerlink" title="1. 数据载体"></a><strong>1. 数据载体</strong></h4><p>报文是<strong>数据的承载单元</strong>，用于传递发送方希望传达的信息。无论是控制命令（如打开设备、设置参数）还是状态数据（如温度、速度、位置等），都会被封装在报文中进行传输。</p><h4 id="2-结构化的数据"><a href="#2-结构化的数据" class="headerlink" title="2. 结构化的数据"></a><strong>2. 结构化的数据</strong></h4><p>报文并不是一堆“无序”的数据，而是按照特定通信协议的规则进行组织。它包含若干字段，每个字段有明确的功能和意义。</p><ul><li>通过这种结构化，发送方和接收方能够以标准化方式解析并理解报文内容。</li></ul><hr><h3 id="报文的组成"><a href="#报文的组成" class="headerlink" title="报文的组成"></a><strong>报文的组成</strong></h3><p>报文的组成根据通信协议的不同可能有所变化，但一般包含以下部分：</p><ol><li><strong>头部（Header）：</strong><ul><li>包含标识信息，例如来源地址、目标地址、优先级等。</li><li>描述这条报文的基本特征。</li></ul></li><li><strong>数据段（Payload）：</strong><ul><li>实际传递的数据内容，例如设备的状态值、传感器测量值。</li><li>数据长度和格式由协议定义，例如CAN总线数据段最多为8字节。</li></ul></li><li><strong>校验段（Checksum/CRC）：</strong><ul><li>用于确保报文在传输过程中未被篡改或损坏。</li><li>校验字段通常由硬件根据报文内容自动计算。</li></ul></li><li><strong>结束段：</strong><ul><li>标志报文的结束，使接收方能够识别报文边界。</li></ul></li></ol><hr><h3 id="报文的作用"><a href="#报文的作用" class="headerlink" title="报文的作用"></a><strong>报文的作用</strong></h3><ol><li><strong>数据传递：</strong><ul><li>报文是设备之间传递信息的载体，例如命令信息、传感器状态或配置数据。</li></ul></li><li><strong>通信协调：</strong><ul><li>报文的格式化结构确保发送端与接收端能够按照协议理解报文的内容，避免歧义。</li></ul></li><li><strong>错误检测：</strong><ul><li>报文通常包含校验字段（如CRC），用于检测在传输过程中是否发生了错误。</li></ul></li></ol><hr><h3 id="为什么报文不仅仅是一堆普通数据？"><a href="#为什么报文不仅仅是一堆普通数据？" class="headerlink" title="为什么报文不仅仅是一堆普通数据？"></a><strong>为什么报文不仅仅是一堆普通数据？</strong></h3><p>虽然报文从本质上来说是一堆数据，但它相比普通数据有以下特点：</p><ol><li><strong>有特定的格式：</strong><ul><li>报文必须符合协议规定的格式，通常包括：<ul><li><strong>标识信息：</strong> 发送方、接收方的ID。</li><li><strong>控制信息：</strong> 数据长度、帧类型等。</li><li><strong>数据内容：</strong> 实际传递的消息或命令。</li><li><strong>校验字段：</strong> 用于检查完整性。</li></ul></li></ul></li><li><strong>具有明确的意义：</strong><ul><li>报文中的每个字段都包含特定的信息，例如：<ul><li>仲裁段ID可能代表设备的功能（如发动机转速）。</li><li>数据段可能表示具体值（如3000 RPM）。</li></ul></li></ul></li><li><strong>支持自动解析与处理：</strong><ul><li>报文是结构化的，因此设备的硬件或软件能够自动解析字段内容，并执行对应的任务（如操作指令、数据存储等）。</li></ul></li></ol><hr><h3 id="报文在不同通信协议中的示例"><a href="#报文在不同通信协议中的示例" class="headerlink" title="报文在不同通信协议中的示例"></a><strong>报文在不同通信协议中的示例</strong></h3><h4 id="1-CAN总线报文"><a href="#1-CAN总线报文" class="headerlink" title="1. CAN总线报文"></a><strong>1. CAN总线报文</strong></h4><p>CAN总线报文是嵌入式行业中常见的报文形式，其典型结构包括：</p><ul><li><strong>帧起始位（SOF）：</strong> 标志帧的开始。</li><li><strong>仲裁段（ID）：</strong> 用于仲裁优先级和标识报文内容。</li><li><strong>控制段：</strong> 包括数据长度码（DLC）等信息。</li><li><strong>数据段：</strong> 实际传递的数据，最大长度为8字节。</li><li><strong>CRC段：</strong> 校验字段，用于验证数据完整性。</li><li><strong>ACK段：</strong> 接收确认。</li><li><strong>帧结束位（EOF）：</strong> 标志帧的结束。</li></ul><p><strong>示例：</strong><br> 一条CAN报文传递车速信息，其数据段内容为60 km/h：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ID: <span class="number">0x123</span></span><br><span class="line">DLC: <span class="number">4</span></span><br><span class="line">DATA: <span class="number">0x00</span> <span class="number">0x3C</span> <span class="number">0x00</span> <span class="number">0x00</span></span><br><span class="line">CRC: <span class="number">0xABCD</span></span><br></pre></td></tr></table></figure><h4 id="2-UART报文"><a href="#2-UART报文" class="headerlink" title="2. UART报文"></a><strong>2. UART报文</strong></h4><p>串口通信（UART）的报文结构较为简单，一般包括：</p><ul><li>起始位</li><li>数据位（传输内容）</li><li>校验位（可选）</li><li>停止位</li></ul><p><strong>示例：</strong><br> 通过UART传输ASCII字符<code>A</code>的报文：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Start Bit: <span class="number">0</span></span><br><span class="line">Data Bits: <span class="number">01000001</span> (ASCII <span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">Parity Bit: <span class="number">0</span> (无校验)</span><br><span class="line">Stop Bit: <span class="number">1</span></span><br></pre></td></tr></table></figure><hr><h3 id="报文与帧的关系"><a href="#报文与帧的关系" class="headerlink" title="报文与帧的关系"></a><strong>报文与帧的关系</strong></h3><ol><li><strong>报文（Message）：</strong><ul><li>是一种逻辑上的信息单位，强调数据的内容和意义。</li><li>一条报文可以由多个帧组成。</li></ul></li><li><strong>帧（Frame）：</strong><ul><li>是更底层的传输单位，强调数据的物理传输。</li><li>每个帧通常对应一次传输，封装了报文的一部分数据。</li></ul></li></ol><hr><h3 id="简单比喻"><a href="#简单比喻" class="headerlink" title="简单比喻"></a><strong>简单比喻</strong></h3><p>报文可以比喻成一封信：</p><ul><li><strong>信封（头部）：</strong> 写明了寄件人、收件人地址。</li><li><strong>信件内容（数据段）：</strong> 信中真正传递的信息。</li><li><strong>签名（校验段）：</strong> 用于确认信件的完整性。</li><li><strong>结尾（结束段）：</strong> 标志信件结束。</li></ul><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><ul><li><strong>报文的本质：</strong> 是一组按照协议定义的数据结构，是设备之间通信的最小信息单元。</li><li>关键特点：<ul><li>有特定的格式和结构化规则。</li><li>具备明确的意义，支持自动解析。</li><li>是数据通信的核心单位。</li></ul></li><li><strong>意义：</strong> 报文通过标准化的结构，在设备之间实现可靠、高效的信息传递。</li></ul><hr><blockquote><p><strong>报文 = 通信协议定义的结构化数据集合</strong></p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>GD32</title>
      <link href="/2024/11/29/%E5%B5%8C%E5%85%A5%E5%BC%8F/GD32/"/>
      <url>/2024/11/29/%E5%B5%8C%E5%85%A5%E5%BC%8F/GD32/</url>
      
        <content type="html"><![CDATA[<h1 id="GPIO"><a href="#GPIO" class="headerlink" title="GPIO"></a>GPIO</h1><h2 id="1-GPIO硬件结构"><a href="#1-GPIO硬件结构" class="headerlink" title="1.GPIO硬件结构"></a>1.GPIO硬件结构</h2><blockquote><p>GPIO 是指芯片的通用输入输出管脚。</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501191128046.png" alt></p><p>可将 GPIO 配置为输出模式，控制点亮发光二极管（LED）。也可作为输出控制打开或关闭继电器，配置为输入模式来检测外部按键，甚至配置为模拟输入模式来检测热敏电阻，以获取温度数据。</p><p>因此，GPIO 既可以作为普通的 IO 口，也可以作为模拟输入，甚至作为 I²C、SPI、串口的管脚。</p><p>单片机工作示意框图：</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501182330703.png" alt></p><p>单片机内部主要包括 CPU、Flash 存储器、RAM 内存和片上的外设。我们可以简单地将工作过程划分为四个步骤：</p><ul><li>单片机上电后，CPU 从 Flash 中读取并响应代码指令。</li><li>根据指令，从片上的外设（例如光照强度传感器）获取数据。这些数据需要先保存在 RAM 内存中，然后进行进一步的数据处理。</li><li>经过加减乘除的运算，根据运算结果控制片上的外设（GPIO）来点亮或熄灭 LED 灯。</li><li>CPU 负责执行和响应代码指令，进行数学运算，往 RAM 内存里读写数据；Flash 存储器（ ROM 的一种实现方式）负责保存代码指令；RAM 内存负责在程序运行过程中保存变量数据；而片上外设则用来控制单片机外部的器件。</li></ul><p>GPIO，CPU 是基于总线来进行工作：</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501182340597.png" alt="-17328844853232"></p><p>总线可以理解为高速公路，CPU 通过它与片上外设通信。外设内部会有寄存器，CPU 可以向寄存器写入或读取数据，从而控制片上外设的状态。根据寄存器中的数据，GPIO 会相应地输出高低电平。</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501182341051.png" alt="-17328844853233"></p><p>一个 GPIO 口的内部硬件结构可以分为两部分：上半部分对应输出，下半部分对应输入。</p><p>输出可以配置为四种模式：</p><ul><li>推挽输出</li><li>开漏输出</li><li>推挽复用输出</li><li>开漏复用输出</li></ul><p>输入可以配置为四种模式：</p><ul><li>模拟输入</li><li>浮空输入</li><li>上拉输入</li><li>下拉输入</li></ul></blockquote><h2 id="2-GPIO输出模式"><a href="#2-GPIO输出模式" class="headerlink" title="2.GPIO输出模式"></a>2.GPIO输出模式</h2><h3 id="1-输出结构分析"><a href="#1-输出结构分析" class="headerlink" title="1.输出结构分析"></a>1.输出结构分析</h3><blockquote><p>在这个框架内，可以控制输出高低电平。数据来源有两种：<strong>普通的 GPIO 寄存器数据或备用功能寄存器的数据</strong>（即复用功能，例如 I²C、SPI 等）。</p><p>推挽输出和推挽复用输出的输出控制部分相同，只是数据来源可能不同。经过输出控制后，会有一个取反的效果后面是两个 MOSFET 管，上面是 PMOS 管，下面是 NMOS 管。这两个 MOSFET 组成的电路就是推挽输出电路。</p><h4 id="推挽输出电路"><a href="#推挽输出电路" class="headerlink" title="推挽输出电路"></a>推挽输出电路</h4><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501182341913.png" alt="-17328844853234"></p><p>假设寄存器的数据输出高电平（1），经过取反后变为低电平（0）。此时，PMOS 管导通，连接到 VCC，NMOS 管截止。这样输出的就是高电平。</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501182341597.png" alt="-17328844853235"></p><p>假设寄存器的数据是低电平（0），取反后为高电平（1），此时 PMOS 管截止，NMOS 管导通，电流流向地（GND），输出的就是低电平。</p><h4 id="LED-驱动分析"><a href="#LED-驱动分析" class="headerlink" title="LED 驱动分析"></a>LED 驱动分析</h4><p>对于发光二极管（LED）的电路设计，负极连接到 GPIO，正极连接到 VCC，并经过一个限流电阻。假设寄存器输出高电平（1），经过取反后为低电平（0），PMOS 管导通，输出为高电平，LED 灯不亮。假设寄存器输出低电平（0），经过取反后为高电平（1），此时 NMOS 管导通，电流从 Vcc 流向地，LED 灯被点亮。此时电流是由外部流向单片机的内部，再到 GND 。</p><p>对于 ARM 32 位单片机，GPIO 能够输出的最大电流为 25 毫安，因此驱动发光二极管是绰绰有余的。一般发光二极管需要的电流约为 5 毫安左右。需要注意的是，并不是所有 GPIO 口都能输出 25 毫安电流，因为单片机本身也需要考虑功耗。对于单片机来说，整体的输出电流一般在 200 毫安左右。</p></blockquote><h3 id="2-开漏输出分析"><a href="#2-开漏输出分析" class="headerlink" title="2.开漏输出分析"></a>2.开漏输出分析</h3><blockquote><p>开漏输出的电路设计与推挽输出不同。在开漏输出中，去掉了上面的 PMOS 管，只留下 NMOS 管。这种设计称为开漏输出。</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501182345744.png" alt="-17328844853236"></p><p>当寄存器输出为高电平（1），取反后为低电平（0），此时 NMOS 管截止，状态为高阻（Hi-Z），LED 灯熄灭。</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501182346077.png" alt="-17328844853237"></p><p>当寄存器输出低电平（0），经过取反后为高电平（1），NMOS 导通，电流从 Vcc 流过，LED 灯被点亮。</p><p>因此，开漏输出的特点是只能提供低电平，而不能提供高电平。</p><h4 id="开漏输出的优点"><a href="#开漏输出的优点" class="headerlink" title="开漏输出的优点"></a>开漏输出的优点</h4><p>由开漏输出的特点可知，要提供高电平，必须在单片机的外部增加一个上拉电阻。</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501182346951.png" alt="-17328844853238"></p><p>开漏输出的主要优点在于可以实现电平转换和线与功能。我们先来分析电平转换的过程：</p><p>假设负载需要 5V 供电，而单片机系统为 3.3V。在这种情况下，可以将 Vcc 直接连接到 5V。如果单片机输出高电平（1），变为低电平（0），此时 NMOS 管截止，Vcc 的电流通过上拉电阻拉高，输出为高电平。</p><h4 id="线与功能分析"><a href="#线与功能分析" class="headerlink" title="线与功能分析"></a>线与功能分析</h4><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501182347799.png" alt="-17328844853239"></p><p>对于 I²C 协议，可以挂载多个 I²C 设备，如 EEPROM、触摸屏驱动芯片等。I²C 总线要求实现线与功能。根据逻辑，同一线上只要有一个设备输出低电平，整个总线电平就会变为低。</p><p><strong>推挽输出的结构无法实现线与功能，因其可能造成短路。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501182347796.png" alt="-173288448532310"></p><p><strong>相反，开漏输出可以实现线与功能。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501182347805.png" alt="-173288448532311"></p><p>假设单片机输出高电平（1），经过取反后变为低电平，NMOS 管截止，此时总线电平为高电平（1）。如果任何一个设备输出低电平（0），NMOS 管导通，电流流入地，整个总线电平则变为低电平（0）。</p></blockquote><h3 id="3-总结"><a href="#3-总结" class="headerlink" title="3.总结"></a>3.总结</h3><p>刚才分析了输出模式下开漏输出和推挽输出的硬件结构。还回顾了 CPU 如何通过寄存器控制片上的外设。</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501182352964.png" alt="-173288448532312"></p><p>这是寄存器的地址范围，以及 ARM 32 位单片机（如 STM32、GD32）的片上外设寄存器的基本信息。</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501182348454.png" alt="-173288448532313"></p><p>对于 GPIO，有配置寄存器、数据寄存器和复用寄存器。配置寄存器用于设置 GPIO 口为输入或输出模式，数据寄存器用于在输入模式下获取电平，在输出模式下控制电平。</p><h2 id="3-GPIO输入模式"><a href="#3-GPIO输入模式" class="headerlink" title="3.GPIO输入模式"></a>3.GPIO输入模式</h2><p>在本节中，主要涉及 GPIO 外设的4种输入模式，包括：</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501182349584.png" alt="-173288448532315"></p><ul><li>模拟输入</li><li>浮空输入</li><li>下拉输入</li><li>上拉输入</li></ul><p>模拟输入是将外部的模拟信号通过 ADC 转换为数字量。</p><blockquote><h3 id="输入模式功能"><a href="#输入模式功能" class="headerlink" title="输入模式功能"></a>输入模式功能</h3><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501182349542.png" alt="-173288448532316"></p><p>这三种输入模式可以将外部的数字信号转换为数字量 0 和 1。在输入驱动单元中包含上拉电阻、下拉电阻和施密特触发器。其中，施密特触发器用于将外部的数字信号转换为 0 和 1。</p><p>转换后的信号有两个输出方向：</p><ul><li>可以输出给复用功能，比如串口的 RX 引脚。</li><li>可以输出给普通 GPIO 口的输入状态寄存器，通过读取寄存器中的数据来获取高低电平状态。</li></ul><p>对于 ARM Cortex-M3 单片机，在转换过程中有以下特性：</p><ul><li>当外部信号电压大于等于 0.7 倍 VDD 时，认为是高电平（逻辑 1）。</li><li>当外部信号电压小于等于 0.3 倍 VDD 时，认为是低电平（逻辑 0）。</li></ul><h4 id="浮空输入模式"><a href="#浮空输入模式" class="headerlink" title="浮空输入模式"></a>浮空输入模式</h4><p><img src="/2024/11/29/%E5%B5%8C%E5%85%A5%E5%BC%8F/GD32/Users/Administrator/Desktop/%E6%96%B0%E5%BB%BA%E6%96%87%E4%BB%B6%E5%A4%B9/-173288448532317.png" alt="-173288448532317"></p><p>浮空输入模式下，输入驱动单元中的上拉电阻和下拉电阻是关闭的（没有使能），此时端口在单片机内部呈现为高阻态。这种模式的应用场景，比如 GPIO 作为单片机串口的 RX 引脚时，就需要配置为浮空输入模式，外部连接其他器件的 TX 引脚。这样，端口的电平状态完全取决于外部器件的 TX 引脚。</p><p>问题分析： </p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501182353305.png" alt="-173288448532318"></p><p>如果使用浮空输入模式来检测一个按键，假设按键的一端连接到 IO 口，另一端连接到地。当按键按下时，端口被拉低，通过施密特触发器转换为数字量 0，输入状态寄存器通过读取寄存器数据判断为低电平，进而执行业务逻辑，这部分没有问题。但是当按键没有被按下时，端口是悬空的，此时电平状态不确定，可能因为外部干扰而被误判为低电平，从而错误地执行业务逻辑。</p><h4 id="上拉输入模式"><a href="#上拉输入模式" class="headerlink" title="上拉输入模式"></a>上拉输入模式</h4><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501182354019.png" alt="-173288448532319"></p><p>针对上述问题，可以采用上拉输入模式，将输入驱动单元的上拉电阻打开，使能。当按键没有按下时，端口通过上拉电阻被拉为高电平，这样可以避免浮空输入模式下电平不确定的问题。</p><h4 id="下拉输入模式"><a href="#下拉输入模式" class="headerlink" title="下拉输入模式"></a>下拉输入模式</h4><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501182359434.png" alt="-173288448532320"></p><p>另外一种按键驱动电路是按键连接到限流电阻，再连接到 VCC。对于这种电路，需使用下拉输入模式，也就是打开驱动单元中的下拉电阻，使能。当按键没有按下时，端口通过下拉电阻被拉到低电平；当按键按下时，电流从外部流入单片机内部，端口电平被拉高。</p><p>上拉<strong>（pull-up）</strong>和下拉<strong>（pull-down）</strong>电阻是电子电路中常用的元件，用于确保数字输入信号的稳定状态，其主要功能是防止输入端悬空<strong>（floating）</strong>，从而避免误判输入状态。</p></blockquote><h2 id="4-上下拉电阻选取"><a href="#4-上下拉电阻选取" class="headerlink" title="4.上下拉电阻选取"></a>4.上下拉电阻选取</h2><blockquote><h3 id="使用上拉电阻的情况"><a href="#使用上拉电阻的情况" class="headerlink" title="使用上拉电阻的情况"></a>使用上拉电阻的情况</h3><p><strong>上拉电阻</strong>连接在输入端和正电源之间。当输入端没有信号时，电阻会将输入状态拉高到逻辑高（通常是接近电源电压，例如5V或3.3V）。这在以下情况中很有用：</p><ul><li><strong>开关或按钮输入</strong>：当按钮未被按下时，输入状态为高电平。当按钮被按下时，输入状态被直接连接到地，变为低电平。</li><li><strong>防止悬空状态</strong>：在没有其他信号源时，上拉电阻确保输入端始终有一个已定义的高电平状态。</li><li><strong>开漏输出</strong>：在使用开漏（open-drain）输出的设备中，需要通过上拉电阻将信号拉高。</li></ul><h3 id="使用下拉电阻的情况"><a href="#使用下拉电阻的情况" class="headerlink" title="使用下拉电阻的情况"></a>使用下拉电阻的情况</h3><p><strong>下拉电阻</strong>则连接在输入端和地（GND）之间。当输入端没有信号时，电阻会将输入状态拉低到逻辑低（通常是0V）。这在以下情况中很有用：</p><ul><li><strong>开关或按钮输入</strong>：当按钮未被按下时，输入状态为低电平。当按钮被按下时，输入状态被直接连接到电源，变为高电平。</li><li><strong>防止悬空状态</strong>：在没有其他信号源时，下拉电阻确保输入端始终有一个已定义的低电平状态。</li><li><strong>反相输入</strong>：当输入信号需要反转时，使用下拉电阻可使高电平输入对应低电平输出。</li></ul><h3 id="考虑因素"><a href="#考虑因素" class="headerlink" title="考虑因素"></a>考虑因素</h3><ul><li><strong>电路要求</strong>：根据电路设计的需求选择上拉或下拉电阻。例如，如果设备默认应处于高电平状态，则选择上拉电阻。</li><li><strong>电源电压</strong>：确保电阻的值和电源电压相匹配，以避免电流过大或过小。</li><li><strong>信号干扰</strong>：根据电磁干扰（EMI）的潜在影响选择合适的电阻值，以增强信号的稳定性。</li></ul><h3 id="单片机内部的上拉和下拉电阻，典型值为-40kΩ，而限流电阻通常选择-1kΩ。"><a href="#单片机内部的上拉和下拉电阻，典型值为-40kΩ，而限流电阻通常选择-1kΩ。" class="headerlink" title="单片机内部的上拉和下拉电阻，典型值为 40kΩ，而限流电阻通常选择 1kΩ。"></a>单片机内部的上拉和下拉电阻，典型值为 40kΩ，而限流电阻通常选择 1kΩ。</h3><h4 id="使用注意事项"><a href="#使用注意事项" class="headerlink" title="使用注意事项"></a>使用注意事项</h4><p>在实际应用中，上拉输入和下拉输入模式的使用频率相对较低，更多时候使用浮空输入模式。</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501182354524.png" alt="-173288448532321"></p><p>采用浮空输入检测按键，需要在单片机外部额外加上上拉或下拉电阻，以确保在悬空时有明确的电平状态。通常，上拉电阻选择 2kΩ 到 10kΩ 之间。例如，开发板上使用浮空输入模式并在外部加上了上拉电阻来稳定电平。此外，有时在端口处串联一个限流电阻来保护端口。</p></blockquote><h2 id="5-GPIO输出速度"><a href="#5-GPIO输出速度" class="headerlink" title="5.GPIO输出速度"></a>5.GPIO输出速度</h2><blockquote><p>请大家回想一下，在配置寄存器时，我们需要设置输出速度，例如10MHz、2MHz或50MHz。</p><p>输出速度具体指的是什么？</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501182355812.png" alt="-173288448532322"></p><p>它指的是GPIO口高低电平变化翻转的频率。</p><p>如果用<code>t</code>来表示周期，那么<code>f = 1/t</code>。假设我们将输出速度设置为10MHz，那么周期<code>t</code>就等于：十的九次方除以10M，也就是十的七次方纳秒，即100纳秒。</p><p>设置不同的输出速度会对单片机的GPIO硬件产生什么影响呢？</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501182355364.png" alt="-173288448532323"></p><p>理想情况下，单片机输出高低电平应该是一个方波，但实际上这个过程是有上升时间（<code>tr</code>）和下降时间（<code>tf</code>）过程的。在单片机的手册中明确说明了，为了保证输出有效的高低电平，<code>tr + tf</code>必须小于等于周期<code>t</code>的三分之二。</p><ul><li>如果我们设置输出速度为10MHz，那么周期<code>t</code>是100纳秒，则：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tr + tf&lt; <span class="number">2</span> * t / <span class="number">3</span> = <span class="number">67</span></span><br></pre></td></tr></table></figure><p>所以，<code>tr</code>和<code>tf</code>的总和需要小于67纳秒，通常每个时间段大约是33-34纳秒。</p><ul><li>如果我们将GPIO口的输出速度设置为50MHz，那么周期<code>t</code>是20纳秒，则：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tr + tf&lt; <span class="number">2</span> * t / <span class="number">3</span> = <span class="number">13</span></span><br></pre></td></tr></table></figure><p>这样，<code>tr</code>和<code>tf</code>每个大约是6-7纳秒左右。因此，设置GPIO口的输出速度越高，<code>tr</code>和<code>tf</code>就要控制得越小，上升和下降的过程越陡峭。</p><p>那么，如何控制<code>tr</code>和<code>tf</code>：</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501182356110.png" alt="-173288448532324"></p><p>单片机的GPIO口输出信号去控制一个外设负载，这个负载可以等效为一个电容<code>CL</code>，因为电容会影响电压变化的速率。</p><p>输出高低电平的过程，其实就是对电容的充放电过程，我们可以用电容充电公式来表示：</p><p>其中，<code>dv/dt</code>表示电压变化的速率。因此，在负载电容值<code>CL</code>一定的情况下，电压变化速率越快，所需电流<code>I</code>越大，电流越大就会导致单片机的功耗增加。此外，输出频率越高，还会涉及到EMI（电磁干扰）的问题。</p><p>接下来，我们来看一下单片机数据手册中关于输出交流特性的内容。在这个表格中列出了输出速度为2MHz、10MHz和50MHz的相关参数。</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501182356278.png" alt="-173288448532325"></p><ul><li>当输出速度为2MHz，且负载电容<code>Cl</code>为50pF时，通过输出一定电流，<code>tr</code>和<code>tf</code>可以控制在125纳秒以下。</li><li>当输出速度为10MHz，<code>Cl</code>同样为50pF时，通过输出一定电流，<code>tr</code>和<code>tf</code>可以控制在25纳秒以下。</li><li>当输出速度为50MHz，<code>Cl</code>为30pF时，<code>tr</code>和<code>tf</code>大约是5纳秒；而当<code>Cl</code>为50pF时，<code>tr</code>和<code>tf</code>大约是8纳秒。</li></ul><p>例如，如果我们要控制一个简单的发光二极管（LED），配置成2MHz的输出速度就足够了；但如果我们要驱动SD卡，则需要配置成50MHz的输出速度。</p><p>因此，在配置GPIO口输出速度时，我们应当遵循够用即可的原则。</p></blockquote><h1 id="CLOCKTREE"><a href="#CLOCKTREE" class="headerlink" title="CLOCKTREE"></a>CLOCKTREE</h1><p>时钟对于单片机来说就像是人的心脏，非常重要。它为单片机提供心跳节拍，CPU 根据时钟的跳动来执行代码指令。时钟频率越高，代码指令执行得越快，系统性能也越高；反之，时钟越慢，执行也越慢。</p><h2 id="1-系统硬件架构回顾"><a href="#1-系统硬件架构回顾" class="headerlink" title="1.系统硬件架构回顾"></a>1.系统硬件架构回顾</h2><p>首先，我们回顾一下 51 内核单片机的系统硬件架构。</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501190003993.png" alt="-173288448532426"></p><p>在单片机的内部，有很多组件，包括中央处理器 (CPU)、片上外设 (如 Flash、RAM、定时器、串口等)。CPU 通过总线访问这些片上外设。</p><p>对于 ARM 32 位单片机，其系统硬件架构比 51 单片机更复杂。</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501190003699.png" alt="-173288448532427"></p><p>ARM Cortex M4 内核中有三个总线接口，分别是 ICode 总线、DCode 总线和系统总线接口。ICode 总线接口用于连接并访问 Flash，以获取代码指令；DCode 总线接口连接并访问 Flash 获取数据；系统总线接口则用于连接并访问 RAM 和片上外设。</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501190003380.png" alt="-173288448532428"></p><p>在芯片的用户手册中，我们可以看到这些总线接口的描述。ICode 和 DCode 总线对应的分别是 IBus 和 DBus，它们从 Flash 中获取代码指令和数据。而系统总线接口对应的是 AHB 总线，用于连接访问片上外设，如 FMC、SDIO、CRC、RCU 等。</p><p>基于 AHB 总线，派生出两个 APB 总线：APB1 和 APB2。APB1 总线连接看门狗、定时器、串口、SPI 等外设，而 APB2 总线连接串口 0、SPI 0、ADC 等外设。</p><h2 id="2-时钟系统架构分析"><a href="#2-时钟系统架构分析" class="headerlink" title="2.时钟系统架构分析"></a>2.时钟系统架构分析</h2><p>时钟树简易框图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501190004761.png" alt="-173288448532429"></p><ul><li>振荡器 (黄色)：内部有 3 个振荡器，外部有 2 个。</li><li>锁相环 (PLL)：对输入时钟进行倍频。</li><li>分频器 (绿色)：对输入时钟进行分频。</li><li>片上外设 (蓝色)：例如 USB、SDIO、FMC 等。</li></ul><h2 id="3-时钟系统的具体介绍"><a href="#3-时钟系统的具体介绍" class="headerlink" title="3.时钟系统的具体介绍"></a>3.时钟系统的具体介绍</h2><blockquote><p>时钟树框图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501190004165.png" alt="-173288448532430"></p><ul><li><strong>系统时钟：</strong>对于 GD32F303 MCU，其主频最高为 120MHz，经过 AHB 分频器后，生成 AHB 时钟，供给 AHB 外设，如 EXMC、SDIO 等。</li><li><strong>APB 时钟：</strong>经过 APB1 分频器，生成 APB1 时钟，最大为 60MHz，供给 APB1 外设。类似地，APB2 时钟最大为 120MHz，供给 APB2 外设。</li><li><strong>USB 外设：</strong>USB 是一种高速串行接口，需要精确的时钟。其时钟来源可以是 PLL 输出的时钟，也可以是内部的 IRC 48MHz 振荡器，经过分频器生成固定的 48MHz 时钟，供给 USB 外设。</li><li><strong>PLL 锁相环：</strong>其输入时钟来源可以是内部的 IRC 8MHz 振荡器，也可以是外部的高速晶振。内部的 IRC 8MHz 振荡器精度较低，适用于一些简单的控制任务，而对通信有要求的应用通常使用外部晶振以提高精度。</li><li><strong>RTC 实时时钟：</strong>输入来源有 3 个：外部高速晶振（需分频）、外部低速晶振（32.768kHz）以及内部的 IRC 40kHz 振荡器。通常选择低速晶振，以降低功耗。内部的 40kHz 振荡器则用于独立看门狗提供时钟。</li></ul></blockquote><h2 id="4-基于内核DWT的延时"><a href="#4-基于内核DWT的延时" class="headerlink" title="4.基于内核DWT的延时"></a>4.基于内核DWT的延时</h2><h1 id="NVIC"><a href="#NVIC" class="headerlink" title="NVIC"></a>NVIC</h1><h2 id="1-中断系统硬件和软件结构"><a href="#1-中断系统硬件和软件结构" class="headerlink" title="1.中断系统硬件和软件结构"></a>1.中断系统硬件和软件结构</h2><h3 id="1-概念介绍"><a href="#1-概念介绍" class="headerlink" title="1.概念介绍"></a>1.概念介绍</h3><p>通过一个生活中的例子来理解中断。</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501190009507.png" alt="-173288448532431"></p><blockquote><p>假设我正在看书，突然有人敲门，那么我需要放下书去开门查看情况，处理完后再回到座位继续看书。过一会儿，水烧开了，我又需要放下书去关火、倒水。在这个过程中，敲门声和水开了的提示都会打断我正在执行的任务（看书），去处理更紧急、更高优先级的事情（开门、关火倒水）。</p><p>如果将这个过程类比到单片机的中断系统：</p><ul><li>看书是单片机系统执行的主流程任务。</li><li>敲门声、水开了是中断触发源。</li><li>开门、关火倒水是中断服务函数。</li><li>中断处理之所以发生，是因为这些事件的优先级比当前任务（看书）更高。</li></ul><p>在我们的头脑中，听到敲门声或水烧开的声音时，我们已经定义好要去执行的动作。同样地，在单片机系统中，通过内核的 NVIC（嵌套向量中断控制器）来实现不同中断源对应不同的中断服务函数。</p></blockquote><h3 id="2-ARM-单片机中的中断"><a href="#2-ARM-单片机中的中断" class="headerlink" title="2.ARM 单片机中的中断"></a>2.ARM 单片机中的中断</h3><p><strong>在 ARM 单片机中，中断的统称是异常，而中断只是异常的一个子集。</strong>异常包括：</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501190010567.png" alt="-173288448532432"></p><ul><li>系统异常：由内核产生，比如系统复位异常、总线访问异常、硬错误异常、SysTick（滴答定时器）异常等。</li><li>中断：由片上外设产生，比如串口中断、定时器中断、ADC 中断、GPIO 引脚对应的 EXTI 外部中断等。</li></ul><h4 id="1-ARM-单片机的异常触发源"><a href="#1-ARM-单片机的异常触发源" class="headerlink" title="1.ARM 单片机的异常触发源"></a>1.ARM 单片机的异常触发源</h4><blockquote><p>ARM 单片机中一共有 200 多个异常触发源，包括：</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501190010635.png" alt="-173288448532433"></p><ul><li>系统复位异常：比如手动复位或掉电都会触发系统复位异常。</li><li>硬件故障异常（HardFault）：比如代码中存在除数为零的错误就会触发硬错误异常。</li><li>总线访问异常：例如访问内存时没有按 4 字节对齐，就会触发总线访问异常。</li><li>SysTick 异常：滴答定时器的异常。</li><li>外设中断：比如 ADC、串口、定时器、EXTI 等。</li></ul><p>这些异常在 ARM 单片机中都有对应的编号，例如：</p><ul><li>编号 1 对应的是系统复位异常，这是硬件设定好的，无法改变。</li><li>编号 5 对应的是总线访问异常。</li><li>编号 15 对应的是滴答定时器异常。</li></ul></blockquote><h4 id="2-异常的存储空间分配"><a href="#2-异常的存储空间分配" class="headerlink" title="2.异常的存储空间分配"></a>2.异常的存储空间分配</h4><blockquote><p>这些异常触发源在 Flash 中需要分配存储空间，每个触发源对应 4 个字节的存储空间。</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501190010313.png" alt="-173288448532434"></p><p>例如：</p><ul><li>系统复位异常的存储空间是 0x04 到 0x07。</li><li>NMI（非屏蔽中断）的存储空间是 0x08 到 0x0B。</li><li>SysTick 的存储空间是 0x3C 到 0x3F。</li></ul><p>这些地址与编号的对应关系是：向量编号乘以 4。</p><p>例如：</p><ul><li>系统复位异常的编号是 1，它的起始地址就是 1 × 4 = 0x04。</li><li>SysTick 的编号是 15，起始地址是 15 × 4 = 0x3C。</li></ul><p>有的同学可能注意到这些地址数据与我们在 Keil 工程中看到的 Flash 存储空间地址（从 0x08000000 起始）不一致。实际上，这涉及到 ARM 单片机的存储器映射机制。</p><p>存储器映射将 Flash 的地址空间从 0x00000000 映射到 0x08000000，目的是实现 ARM 单片机的几种启动模式：从 Flash 启动、从 RAM 启动、以及从预置的 Bootloader 启动。不同的启动模式下地址映射不同，这一点我们会在后续课程中详细讲解。</p></blockquote><h4 id="3-中断执行流程"><a href="#3-中断执行流程" class="headerlink" title="3.中断执行流程"></a>3.中断执行流程</h4><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501190010261.png" alt="-173288448532435"></p><ul><li>当我们手动复位或单片机掉电，会触发系统复位异常。</li><li>NVIC 首先通过系统复位异常的编号（1），计算出其对应的存储空间（0x04 到 0x07），然后从该存储空间中获取中断服务函数的地址，最终调用该中断服务函数。</li></ul><blockquote><p>在启动汇编文件 <code>startup.s</code> 中，<code>_vectors</code> 到 <code>vectors_end</code> 这段代码称为中断向量表，主要有两个作用：</p><ul><li>给中断触发源分配 Flash 存储空间（每个 4 字节，通过汇编指令 DCD 实现）。</li><li>关联中断服务函数的名称，例如 <code>Reset_Handler</code>。</li></ul><p><code>Reset_Handler</code> 是我们之前见过的函数，它会调用 <code>SystemInit</code> 函数进行时钟初始化，并调用 <code>_main</code> 函数，而 <code>_main</code> 会调用我们实现的 <code>main</code> 函数。通过这样的方式，中断服务函数 <code>Reset_Handler</code> 的地址会被保存在异常触发源对应的存储空间中。</p><p>我们可以打开编译生成的 <code>.map</code> 文件，其中包含了堆栈、函数等相关地址信息。例如，<code>_initial_sp</code> 表示栈顶地址，对分析内存问题非常有用。在该文件中可以找到 <code>Reset_Handler</code> 的地址为 <code>0x08000145</code>，并将其保存在 <code>0x00000004</code> 到 <code>0x00000007</code> 的地址空间中。</p><h4 id="中断服务函数实现"><a href="#中断服务函数实现" class="headerlink" title="中断服务函数实现"></a>中断服务函数实现</h4><p>除了 <code>Reset_Handler</code>，其他中断服务函数也有代码实现。例如：</p><ul><li>NMI_Handler 代码实现为 <code>b .</code>，对应 C 语言中的 <code>while(1)</code> 死循环。</li><li>HardFault_Handler 也是 <code>b .</code> 死循环。</li><li>总线访问错误中断服务函数同样是 <code>b .</code>。</li></ul><p>这些中断服务函数后面的 <code>__weak</code> 关键字表示：如果这些中断服务函数在其他代码文件中有定义实现，则优先使用那个定义；如果没有，则使用当前文件中的默认实现（即死循环 <code>b .</code>）。</p><p>因此，假设在初始化片上外设时忘记重新实现中断服务函数，导致中断触发时执行了默认的死循环 <code>b .</code>，造成程序卡死。</p></blockquote><h2 id="2-EXTI-中断系统"><a href="#2-EXTI-中断系统" class="headerlink" title="2.EXTI 中断系统"></a>2.EXTI 中断系统</h2><p>EXTI 可以用来检测 GPIO 口作为输入模式时的高低电平变化，进而触发上升沿或下降沿中断。</p><p>例如，我们可以利用它来检测按键按下的动作。当按键未按下时是高电平，按下时发生跳变为低电平，这是一个下降沿，可以触发 EXTI 中断。此外，在我们的开发板上还有一个环境传感器 AP3216C，它可以感知是否有物体靠近，当达到一定阈值时会从高电平跳变到低电平，这也是一个下降沿，同样可以产生 EXTI 中断。</p><blockquote><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501190012522.png" alt="-173288448532436"></p><p>GPIO 口并不是直接连接到 NVIC 中断控制器的，而是通过 EXTI 控制器中转。EXTI 控制器和 NVIC 都包含了一些寄存器，用于控制中断触发和管理。</p></blockquote><h4 id="1-硬件连接结构"><a href="#1-硬件连接结构" class="headerlink" title="1.硬件连接结构"></a>1.硬件连接结构</h4><p>结构框图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501190012593.png" alt="-173288448532437"></p><p>EXTI 控制器位于 GPIO 和 NVIC 之间。以 EXTI 线 0 为例，它可以连接到 PA0 到 PG0 中的任意一个 GPIO 口。在 EXTI 控制器中有一个选择器，用于选择哪个 GPIO 口连接到 EXTI 线。可以配置为上升沿、下降沿或上升沿和下降沿同时触发中断。</p><p>需要注意的是，同一时刻 EXTI 线只能连接一个 GPIO 口。</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501190012880.png" alt="-173288448532438"></p><p><strong>例如，如果配置 PA0 连接到 EXTI 线 0，随后再配置 PB0 连接到 EXTI 线 0，那么 PA0 的连接会失效。这一点在编写代码时可以进行验证。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501190012231.png" alt="-173288448532439"></p><p>EXTI 线 9-5 和 15-10 的中断源与前面的 EXTI 线 0-4 不同，前者共用一个中断触发源和中断服务函数。</p><p>例如：</p><ul><li>EXTI 线 5 到 9 共用一个中断服务函数。</li><li>EXTI 线 10 到 15 共用一个中断服务函数。</li></ul><p>因此，它们的EXTI线可以同时连接中断触发源，都可以同时给触发，生成中断函数。</p><h4 id="2-中断优先级"><a href="#2-中断优先级" class="headerlink" title="2.中断优先级"></a>2.中断优先级</h4><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501190013120.png" alt="-173288448532440"></p><p>优先级主要应用在两个场景中：</p><ul><li>多个中断同时触发时，决定先处理哪个中断。 例如，我正在看书，同时听到敲门声和水烧开的声音，我需要决定是先去开门还是先关火。</li><li>中断抢占：当一个中断服务函数正在执行时，另一个中断到来，决定是否打断当前中断去处理新的中断。</li></ul><p>在 ARM 单片机中，通过配置 NVIC 控制器的寄存器来实现中断优先级控制。涉及的寄存器有两个：IP 和 AIRCR。</p><ul><li>IP 寄存器：每个中断源对应一个 8 位宽度的 IP 寄存器，但 GD32F303 单片机只使用高 4 位（Bit 4 到 Bit 7），数值范围是 0 到 15。</li><li>AIRCR 寄存器：用于配置优先级分组，一共有 5 组（0 到 4），通过配置 AIRCR 的第 8 到第 10 位实现。</li></ul><h4 id="3-优先级分组"><a href="#3-优先级分组" class="headerlink" title="3.优先级分组"></a>3.优先级分组</h4><p>在 ARM Cortex-M3/M4 权威指南的第 180 页有相关描述。优先级分组将 4 位优先级分成抢占优先级和子优先级两部分：</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501190013253.png" alt="-173288448532441"></p><ul><li>第 0 组：0 位用于抢占优先级，4 位用于子优先级。</li><li>第 4 组：4 位用于抢占优先级，0 位用于子优先级。</li></ul><p>这种机制的目的是为了灵活设置优先级，使得不同场景下的中断处理更为有效。</p><h4 id="4-中断执行顺序"><a href="#4-中断执行顺序" class="headerlink" title="4.中断执行顺序"></a>4.中断执行顺序</h4><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501190013513.png" alt="-173288448532442"></p><ul><li><p>如果两个中断同时发生，首先判断抢占优先级，数值越小优先级越高。如果抢占优先级相同，则判断子优先级，数值越小优先级越高。</p></li><li><p>如果一个中断正在执行，另一个中断到来，是否抢占取决于抢占优先级。</p></li><li>例如，如果中断 A 正在执行，中断 B 到来，B 的抢占优先级高（数值小于）于 A，则 B 会打断 A。</li><li>例如，如果中断 A 正在执行，中断 B 到来，B 的抢占优先级与 A相同，则 B 不会打断 A。</li></ul><p>在实际开发中，我们通常先配置优先级分组，再为每个中断设置抢占优先级和子优先级。优先级的配置会影响中断的嵌套关系，例如分组为 2 时支持 4 级中断嵌套，分组为 4 时支持 16 级中断嵌套。</p><h4 id="5-特殊中断优先级"><a href="#5-特殊中断优先级" class="headerlink" title="5.特殊中断优先级"></a>5.特殊中断优先级</h4><p>在单片机用户手册中，有些异常中断的优先级是固定的，例如复位、NMI（非屏蔽中断）、硬件错误中断等，它们的优先级分别为 -3、-2、-1，复位中断的优先级最高。其他异常中断则可以根据需要进行优先级配置。</p><h2 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h2><p>通过 EXTI 中断的方式检测 K1 按键。对应的引脚是 PA0，与 EXTI 线 0 相连接。</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501190014548.png" alt="-173288448532443"></p><p><strong>配置和初始化过程</strong>可以分为两部分：</p><ul><li>第一部分是初始化 GPIO，包括使能 GPIO 的时钟，并配置为输入模式。</li><li>第二部分是初始化 EXTI，分为五个步骤：<ul><li>使能 EXTI 外设的时钟。</li><li>配置引脚连接到 EXTI 线，并设置上升沿或下降沿触发。</li><li>清除中断标志位。</li><li>使能中断。</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;gd32f30x.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;led_drv.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">GPIOInit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">rcu_periph_clock_enable(RCU_GPIOA);</span><br><span class="line">gpio_init(GPIOA, GPIO_MODE_IN_FLOATING, GPIO_OSPEED_2MHZ, GPIO_PIN_0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">EXTIInit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 使能EXTI时钟 */</span></span><br><span class="line">rcu_periph_clock_enable(RCU_AF);</span><br><span class="line"><span class="comment">/* I/O连接到EXTI线 */</span></span><br><span class="line">gpio_exti_source_select(GPIO_PORT_SOURCE_GPIOA, GPIO_PIN_SOURCE_0);</span><br><span class="line"><span class="comment">/* 配置下降沿 */</span></span><br><span class="line">exti_init(EXTI_0, EXTI_INTERRUPT, EXTI_TRIG_FALLING);</span><br><span class="line"><span class="comment">/* 清除标志 */</span></span><br><span class="line">exti_interrupt_flag_clear(EXTI_0);</span><br><span class="line"><span class="comment">/* 使能中断 */</span></span><br><span class="line">nvic_irq_enable(EXTI0_IRQn, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">* @brief 按键硬件初始化</span></span><br><span class="line"><span class="comment">* @param</span></span><br><span class="line"><span class="comment">* @return </span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">KeyInit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">GPIOInit();</span><br><span class="line">EXTIInit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在实现使能中断时，使用 NVIC 的接口函数 <code>nvic_irq_enable</code>，其参数为中断源、抢占优先级和子优先级。默认情况下，优先级分组设置为抢占优先级 2 位，子优先级 2 位，范围为 0 到 3。</p><p>仿真调试时，可以通过 J-Link 连接进行单步跟踪，了解 NVIC IRQ Enable 函数的执行过程。在寄存器中，可以看到优先级分组的配置和变化。</p><blockquote><p><strong>初始化外部中断时，清除 EXTI 中断标志位就是清除对应 EXTI 中断线的标志位。</strong></p><p>清除对应的中断线原因：</p><ul><li><strong>避免中断干扰</strong></li></ul><p>在中断控制器配置期间，如果不清除先前的中断状态，可能会导致意外的中断触发。这会影响系统的稳定性和可靠性，甚至可能导致错误的处理流程。因此，清除中断线可以确保在配置新中断时，不会被之前未处理的中断干扰。</p><ul><li><strong>保证中断服务程序的正确执行</strong></li></ul><p>如果不清除中断线，系统可能会在配置过程中立即响应旧的中断信号，从而触发中断服务例程（ISR）。这可能导致中断服务例程执行时，硬件资源尚未正确配置，进而引发不可预期的错误。因此，清除中断线可以确保只有在配置完成后，新的中断才会被响应。</p><ul><li><strong>提高中断处理的效率</strong></li></ul><p>通过清除中断线，系统能够更快速地识别和响应新的中断信号。当中断控制器检测到一个中断请求时，它将检查相应的中断线状态。如果这些中断线在配置期间被清除，系统可以在收到新的中断请求时更加高效地进行处理。</p><ul><li><strong>避免误判和重复触发</strong></li></ul><p>如果中断线未被清除，可能导致系统误判当前的中断状态，重复触发同一个中断。这不仅浪费了处理资源，还可能导致数据损坏或系统崩溃。因此，清除中断线是一种防范机制，可以帮助确保中断处理的准确性。</p></blockquote><h3 id="1-问题一：没有中断服务函数"><a href="#1-问题一：没有中断服务函数" class="headerlink" title="1.问题一：没有中断服务函数"></a><strong>1.问题一：没有中断服务函数</strong></h3><h4 id="1-问题一：有主循环"><a href="#1-问题一：有主循环" class="headerlink" title="1.问题一：有主循环"></a>1.问题一：有主循环</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;gd32f30x.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;key_drv.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">DelayInit();</span><br><span class="line">LedInit();</span><br><span class="line">KeyInit();</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412121521569.png" alt="QQ20241212-151901"></p><p><strong>如果此时运行程序，由于初始化了 EXTI 并使能了中断，但没有实现中断服务函数，会导致程序进入汇编代码里面默认的中断服务函数，即死循环。</strong></p><h4 id="2-问题二：没有主函数循环"><a href="#2-问题二：没有主函数循环" class="headerlink" title="2.问题二：没有主函数循环"></a><strong>2.问题二：没有主函数循环</strong></h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;gd32f30x.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;led_drv.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;key_drv.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">DelayInit();</span><br><span class="line">LedInit();</span><br><span class="line">KeyInit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412121527992.png" alt="QQ20241212-152728"></p><p>在程序执行完 <code>main()</code> 后，如果没有 <code>while(1)</code> 并且刚好触发了外部中断，程序的行为和有 <code>while(1)</code> 的情况是类似的，都会进入汇编启动文件的 <code>B .</code> 死循环，而不会直接执行硬件错误中断。</p><blockquote><p>如果没有 <code>while(1)</code>，并且程序执行完 <code>main()</code> 后，控制流会进入未定义区域。若此时发生外部中断，处理器会尝试跳转到 ISR，但如果 ISR 未定义或中断处理机制不完善，可能导致错误（如程序跳转到非法地址），从而触发 <code>HardFault</code>中断。</p><p><strong>没有为外部中断编写相应的服务函数（ISR）</strong> 是导致 <strong>HardFault</strong> 的 <strong>主要原因</strong>，而 <strong>while(1)</strong> 只是一个 <strong>次要原因</strong>。</p></blockquote><h3 id="2-问题二：未清除标志位"><a href="#2-问题二：未清除标志位" class="headerlink" title="2.问题二：未清除标志位"></a>2.问题二：未清除标志位</h3><p>验证一个问题：GPIO 口连接到 EXTI 线时，同一时刻只能有一个 IO 口连接。</p><blockquote><p><strong>现在连接的是 PA0，如果再配置 PC0 连接到 EXTI 线：</strong></p><p>复位后按下 K1 没有反应，去掉 PC0 配置后，按下 K1，LED 灯亮，再按下灭。</p></blockquote><p>如果在 EXTI 中断服务函数中不清除标志位会发生什么情况。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">* @brief EXTI0中断服务函数，对应PA0</span></span><br><span class="line"><span class="comment">* @param</span></span><br><span class="line"><span class="comment">* @return </span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">EXTI0_IRQHandler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (exti_interrupt_flag_get(EXTI_0) != RESET)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 清除外部中断线 */</span></span><br><span class="line"><span class="comment">//exti_interrupt_flag_clear(EXTI_0);</span></span><br><span class="line">ToggleLed(LED1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在中断服务函数中设置一个断点，全速运行，按下 K1。</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412121826256.png" alt="QQ20241212-182625"></p><p>可以看到程序停在断点处，再次全速执行并按下K1，程序不断进入中断服务函数。</p><p><strong>因此，对于 EXTI 中断服务函数，必须清除中断标志位。</strong></p><blockquote><p>编写中断服务函数之前，加入管理所有中断的<code>gd32f30x_it.c</code>文件。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;gd32f30x.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;led_drv.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">GPIOInit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">rcu_periph_clock_enable(RCU_GPIOA);</span><br><span class="line">gpio_init(GPIOA, GPIO_MODE_IN_FLOATING, GPIO_OSPEED_2MHZ, GPIO_PIN_0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">EXTIInit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 使能EXTI时钟 */</span></span><br><span class="line">rcu_periph_clock_enable(RCU_AF);</span><br><span class="line"><span class="comment">/* I/O连接到EXTI线 */</span></span><br><span class="line">gpio_exti_source_select(GPIO_PORT_SOURCE_GPIOA, GPIO_PIN_SOURCE_0);</span><br><span class="line"><span class="comment">/* 配置下降沿 */</span></span><br><span class="line">exti_init(EXTI_0, EXTI_INTERRUPT, EXTI_TRIG_FALLING);</span><br><span class="line"><span class="comment">/* 清除标志 */</span></span><br><span class="line">exti_interrupt_flag_clear(EXTI_0);</span><br><span class="line"><span class="comment">/* 使能中断 */</span></span><br><span class="line">nvic_irq_enable(EXTI0_IRQn, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">* @brief 按键硬件初始化</span></span><br><span class="line"><span class="comment">* @param</span></span><br><span class="line"><span class="comment">* @return </span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">KeyInit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">GPIOInit();</span><br><span class="line">EXTIInit();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">* @brief EXTI0中断服务函数，对应PA0</span></span><br><span class="line"><span class="comment">* @param</span></span><br><span class="line"><span class="comment">* @return </span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">EXTI0_IRQHandler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (exti_interrupt_flag_get(EXTI_0) != RESET)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 清除外部中断线 */</span></span><br><span class="line">exti_interrupt_flag_clear(EXTI_0);</span><br><span class="line">ToggleLed(LED1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h3 id="3-问题三：中断抢占优先级"><a href="#3-问题三：中断抢占优先级" class="headerlink" title="3.问题三：中断抢占优先级"></a>3.问题三：中断抢占优先级</h3><p>在EXTI0的中断服务函数中加上一个无限循环：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;gd32f30x.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;led_drv.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">GPIOInit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">rcu_periph_clock_enable(RCU_GPIOA);</span><br><span class="line">gpio_init(GPIOA, GPIO_MODE_IPU, GPIO_OSPEED_2MHZ, GPIO_PIN_0);</span><br><span class="line"></span><br><span class="line">rcu_periph_clock_enable(RCU_GPIOG);</span><br><span class="line">gpio_init(GPIOG, GPIO_MODE_IN_FLOATING, GPIO_OSPEED_2MHZ, GPIO_PIN_13);</span><br><span class="line">gpio_init(GPIOG, GPIO_MODE_IN_FLOATING, GPIO_OSPEED_2MHZ, GPIO_PIN_14);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">EXTIInit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 使能EXTI时钟 */</span></span><br><span class="line">rcu_periph_clock_enable(RCU_AF);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* I/O连接到EXTI线 */</span></span><br><span class="line">gpio_exti_source_select(GPIO_PORT_SOURCE_GPIOA, GPIO_PIN_SOURCE_0);</span><br><span class="line"><span class="comment">/* 配置下降沿 */</span></span><br><span class="line">exti_init(EXTI_0, EXTI_INTERRUPT, EXTI_TRIG_FALLING);</span><br><span class="line"><span class="comment">/* 清除标志 */</span></span><br><span class="line">exti_interrupt_flag_clear(EXTI_0);</span><br><span class="line"><span class="comment">/* 使能中断 */</span></span><br><span class="line">nvic_irq_enable(EXTI0_IRQn, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* I/O连接到EXTI线 */</span></span><br><span class="line">gpio_exti_source_select(GPIO_PORT_SOURCE_GPIOG, GPIO_PIN_SOURCE_13);</span><br><span class="line"><span class="comment">/* 下降沿 */</span></span><br><span class="line">exti_init(EXTI_13, EXTI_INTERRUPT, EXTI_TRIG_FALLING);</span><br><span class="line"><span class="comment">/* 清除标志 */</span></span><br><span class="line">exti_interrupt_flag_clear(EXTI_13);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* I/O连接到EXTI线 */</span></span><br><span class="line">gpio_exti_source_select(GPIO_PORT_SOURCE_GPIOG, GPIO_PIN_SOURCE_14);</span><br><span class="line"><span class="comment">/* 下降沿 */</span></span><br><span class="line">exti_init(EXTI_14, EXTI_INTERRUPT, EXTI_TRIG_FALLING);</span><br><span class="line"><span class="comment">/* 清除标志 */</span></span><br><span class="line">exti_interrupt_flag_clear(EXTI_14);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使能中断 */</span></span><br><span class="line">nvic_irq_enable(EXTI10_15_IRQn, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">* @brief 按键硬件初始化</span></span><br><span class="line"><span class="comment">* @param</span></span><br><span class="line"><span class="comment">* @return </span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">KeyInit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">GPIOInit();</span><br><span class="line">EXTIInit();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">* @brief EXTI0中断服务函数，对应PA0</span></span><br><span class="line"><span class="comment">* @param</span></span><br><span class="line"><span class="comment">* @return </span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">EXTI0_IRQHandler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (exti_interrupt_flag_get(EXTI_0) != RESET)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 清除外部中断线 */</span></span><br><span class="line">exti_interrupt_flag_clear(EXTI_0);</span><br><span class="line">ToggleLed(LED1);</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">* @brief EXTI10_15中断服务函数，对应PG13 PG14</span></span><br><span class="line"><span class="comment">* @param</span></span><br><span class="line"><span class="comment">* @return </span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">EXTI10_15_IRQHandler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (exti_interrupt_flag_get(EXTI_13) != RESET)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 清除外部中断线 */</span></span><br><span class="line">exti_interrupt_flag_clear(EXTI_13);</span><br><span class="line">ToggleLed(LED2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (exti_interrupt_flag_get(EXTI_14) != RESET)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 清除外部中断线 */</span></span><br><span class="line">exti_interrupt_flag_clear(EXTI_14);</span><br><span class="line">ToggleLed(LED3);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译后，按下k1、k2和k3按键，验证LED灯是否正常亮灭。按下k1时，LED1亮灭；按下k2时，LED2亮灭；按下k3时，LED3亮灭。</p><h4 id="1-验证抢占优先级作用"><a href="#1-验证抢占优先级作用" class="headerlink" title="1.验证抢占优先级作用"></a>1.验证抢占优先级作用</h4><blockquote><p>设置EXTI15的抢占优先级为0，即高优先级。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 使能中断 */</span></span><br><span class="line">nvic_irq_enable(EXTI0_IRQn, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="comment">/* 使能中断 */</span></span><br><span class="line">nvic_irq_enable(EXTI10_15_IRQn, <span class="number">0</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>按下k1按键，进入EXTI0的中断服务函数，点亮LED并停留在<code>while(1)</code>位置。此时，再按下k1按键，LED无法熄灭，因为EXTI0的中断服务函数没有结束，无法响应新的中断。</p><p><strong>如果此时按下k2或k3，LED2或LED3亮，说明本来程序停留在EXTI0的服务函数循环中，当EXTI15的中断发生时，由于EXTI15的抢占优先级较高，它会打断EXTI0的执行，先执行EXTI15的中断服务函数。</strong></p></blockquote><h4 id="2-验证子优先级作用"><a href="#2-验证子优先级作用" class="headerlink" title="2.验证子优先级作用"></a>2.验证子优先级作用</h4><blockquote><p>设置抢占优先级都为相同数值，并将子优先级设置为更高。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 使能中断 */</span></span><br><span class="line">nvic_irq_enable(EXTI0_IRQn, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="comment">/* 使能中断 */</span></span><br><span class="line">nvic_irq_enable(EXTI10_15_IRQn, <span class="number">1</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>按下k1按键，进入EXTI0的中断服务函数，点亮LED并停留在<code>while(1)</code>位置。此时再按下k1后，LED1不会熄灭，因为EXTI0的中断服务函数没有结束，无法响应新的中断。</p><p><strong>如果此时按下k2或k3，也没有反应，说明抢占优先级相同，无法打断当前的中断服务函数，即发生不会发送抢占中断。</strong></p></blockquote><h2 id="4-方案对比"><a href="#4-方案对比" class="headerlink" title="4.方案对比"></a>4.方案对比</h2><blockquote><p>在实际项目中，使用EXTI方式来检测按键并不是最优方案。<strong>原因在于，在中断服务函数内执行其他模块的功能可能会造成阻塞。中断服务函数的执行时间应尽量短，以避免影响其他中断的响应。此外，如果中断服务函数的优先级较高，其他中断可能无法得到及时响应。</strong></p><p>为了解决以上问题，可以通过定义一个全局变量（例如 <code>uint8_t flag = 0</code>）来标识按键是否被按下。中断服务函数只需要将 <code>flag</code> 置为1，然后在主循环（<code>while(1)</code>）中轮询检查该标志。如果标志为1，则执行相应的业务功能函数。这种方法相较于直接在中断服务函数中调用其他模块的接口要更加合适，因为它避免了中断服务函数的阻塞。</p><p>不过，这种方法的效率不如直接轮询检测按键，因此在一些应用中，可能不需要使用EXTI中断，而是直接使用轮询的方式来检测按键。</p></blockquote><h1 id="RTC"><a href="#RTC" class="headerlink" title="RTC"></a>RTC</h1><h2 id="1-使用指针函数的注意事项"><a href="#1-使用指针函数的注意事项" class="headerlink" title="1.使用指针函数的注意事项"></a>1.使用指针函数的注意事项</h2><h2 id="2-RTC和BKP硬件结构"><a href="#2-RTC和BKP硬件结构" class="headerlink" title="2.RTC和BKP硬件结构"></a>2.RTC和BKP硬件结构</h2><h3 id="1-RTC"><a href="#1-RTC" class="headerlink" title="1.RTC"></a>1.RTC</h3><blockquote><p>RTC简易硬件结构框图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501190016858.png" alt="image-20241130123025264"></p><p>GD32F303 单片机的 RTC 硬件结构与 STM32F103 相同，RTC 有三个时钟源：</p><ul><li>外部高速时钟：4~32 MHz（如开发板上的 8 MHz，可进行 128 分频），主电源掉电后将停止工作。</li><li>外部低速时钟：32.768 kHz，通常选用此时钟，因为在主电源掉电后，它可由纽扣电池供电，RTC 仍能持续计时。</li><li>内部时钟：单片机内部的 40 kHz 时钟，主电源掉电后将停止工作。</li></ul><p>原理框图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501190018504.png" alt="QQ20241130-123121"></p><p>在开发板上，RTC 电路包括供电部分和晶振部分。</p><p>供电部分使用 BAT54C，它里面有两个二极管，阴极相连。当主电源有电且电压高于纽扣电池电压时，主电源侧的二极管导通，由主电源供电；当主电源掉电后，主电源电压下降，纽扣电池侧的二极管导通，由纽扣电池供电。这样实现了供电的自动切换。</p><p>原理框图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501190018726.png" alt="QQ20241130-123457"></p><p>晶振部分使用 32.768 kHz 晶振和两个起振电容。</p><p>RTC硬件结构框图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501190019024.png" alt="image-20241130123542930"></p><p>RTC 的时钟输入通过预分频器（PRL 和 DIV 寄存器）实现分频。将预分频值 32767 写入 PRL，对 32.768 kHz 的时钟进行分频，DIV 寄存器作为向下递减计数器，生成 1 Hz 的时钟信号，用于计数器 CNT，每记一个数值，也就是一秒钟。</p><p>RTC 还有闹钟寄存器 RTC_Alarm，可产生秒中断、计数溢出中断、闹钟中断等。APB1 时钟（PCLK）用于提供 APB1 读写接口。当主电源掉电时，PCLK 1停止工作，但 RTCCLK 可继续工作。因为外部有这个纽扣电池。当然，如果没有纽扣电池，它也就没办法工作了。</p></blockquote><h3 id="2-BKP"><a href="#2-BKP" class="headerlink" title="2.BKP"></a>2.BKP</h3><blockquote><p>RTC简易硬件结构框图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501190020506.png" alt="image-20241130124458958"></p><p>RTC 寄存器位于备份区域（后备区），涉及片上外设 BKP（备份寄存器）。当 VDD 主电源掉电后，可由 Vbat（如纽扣电池）供电。BKP 内除了 RTC 的寄存器外，还有 42 个 16 位的寄存器（DR1~DR42），可用于存储用户数据。需要注意：如果没有纽扣电池供电，掉电后数据将丢失。这些寄存器和内存一样，在完全掉电时数据会丢失，并不像 Flash 那样是非易失性的存储器。所以，如果没有主电源供电，必须要有纽扣电池供电才可以保持数据。当设备从待机模式唤醒或者是复位后，只要有纽扣电池供电，BKP 寄存器中的数据就不会丢失。</p><p>此外，BKP寄存器也可以实现RTC校准和侵入检测功能：</p><p><strong>信号校准寄存器：</strong></p><p>这是我们可以配置，然后将RTC的时钟通过一个管脚，这个管脚呢是PC13是复用的，通过这个管脚将信号输出。然后我们去监测，如果发现这个时钟啊，偏差比较大，我们可以去配置这个校准寄存器用来校准，就是这个功能。</p><p><strong>侵入检测寄存器：</strong></p><p>比如说我们的产品啊，这个安全性要求比较高，不想让别人去分析，我们就可以使用侵入检测。它使用的这个PC13引脚的复用功能。要想实现侵入检测，我们可以对这个管脚，比如说加上一个上拉电阻。然后可以再通过一个导线连接一个开关，这个开关再连接到外壳上，外壳是接地的。当有人拆卸外壳时，会触发开关状态改变，PC13 引脚的电平从高电平变为低电平，检测到这种电平变化后，产生侵入检测事件。这个事件又会进一步地触发去清除BKP寄存器里面的数据。我们可以在这个寄存器里面保存一些核心的关键的参数。这样的话，别人就没有办法去完整地分析整个系统了。另外，即使设备的主电源断电了，因为有纽扣电池，通过Vbat还可以给它供电。这样的话，侵入检测的功能还是可以继续工作的。</p></blockquote><h3 id="3-RTC-amp-BKP初始化配置"><a href="#3-RTC-amp-BKP初始化配置" class="headerlink" title="3.RTC &amp; BKP初始化配置"></a>3.RTC &amp; BKP初始化配置</h3><blockquote><p>RTC配置框图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501190021394.png" alt="image-20241130125614864"></p><p><strong>使能对RTC的访问，使能PMU和BKP：</strong></p><p>即后备区域的时钟，还有电源管理的时钟。</p><p><strong>使能对后备寄存器和RTC的写权限：</strong></p><p>来看一下用户手册。这个功能是在PMU电源管理这个章节，PMU_CTL这个寄存器第八位，在这儿BKPWEN写使能。设置为1的时候，允许对这个寄存器啊进行写访问，也包括对RTC写访问。</p><p><strong>复位后备寄存器：</strong></p><p>通过这个操作可以对后备区域的这些寄存器的数据啊，全部给它复位清零。这是我们首次初始化配置的时候啊，可以去做的一个操作。</p><p><strong>使能外部低速时钟LXTAL，然后等待稳定：</strong></p><p><strong>设置RTC的时钟输入源为LXTAL：</strong></p><p>使能外部低速时钟并等待其稳定，设置 RTC 的时钟源为外部低速时钟（32.768 kHz）。</p><p><strong>使能 RTC 时钟并等待APB1和RTC时钟同步：</strong></p><p>涉及到了两个时钟：一个是PCLK，这就是APB1时钟，然后还有一个RTC的时钟。那么，这两个时钟在系统复位或者是待机唤醒以后，可能会存在着不同步的问题，因此我们在代码里面，要等待两个时钟同步。</p><p><strong>等待上次对RTC寄存器写操作完成：</strong></p><p>我们要去查询一个标志位，然后才能去写一些寄存器，包括分频寄存器，包括设置计数值。</p><p>来看一下用户手册。在RTC配置这里面，当写操作完成以后RTC_CTL寄存器当中的RWOF位会变为1。那么，下一次写操作之前，必须要等待上次写操作完成之后才能进行，就是通过查询这个标志来判断的，判断它为1后才能去进行写操作。每一次写操作都要去判断。</p><p>在这个描述里面还看到，说是要将RTC设置为配置模式，才能对寄存器进行写操作。对应的是RTC_CTL的CMF位。但是，通过实际写代码验证啊，发现即使没有对这个寄存器的CMF位进行配置，也是可以写操作的。这个是RWOF，判断上次RTC写操作是否已经完成。然后这个CMF用来退出配置，或者是进入配置。那么，在代码当中啊，我们发现，只需要实现这个环节就可以了，使能对后备寄存器RTC的写权限就可以了。不配置这个CMF也没问题。</p><p><strong>设置预分频值：</strong></p><p>例如32767。这样的话，分频以后生成的这个时钟信号就是1Hz，一秒钟。</p><p><strong>等待上次对RTC寄存器写操作完成：</strong></p><p><strong>设置计数值：</strong></p><p>在初始化的时候，我们也可以设置一个初始的计数值假设为0，那么对应的这个日历时间就是1970年1月1号零点零分零秒。</p></blockquote><h2 id="3-RTC驱动层代码实现"><a href="#3-RTC驱动层代码实现" class="headerlink" title="3.RTC驱动层代码实现"></a>3.RTC驱动层代码实现</h2><h3 id="1-RTC-初始化过程"><a href="#1-RTC-初始化过程" class="headerlink" title="1.RTC 初始化过程"></a>1.RTC 初始化过程</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">RtcDrvInit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (bkp_read_data(BKP_DATA_0) != MAGIC_CODE)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 使能对RTC的访问，使能PMU和BKP时钟 */</span></span><br><span class="line">rcu_periph_clock_enable(RCU_PMU);</span><br><span class="line">rcu_periph_clock_enable(RCU_BKPI);</span><br><span class="line">        </span><br><span class="line"><span class="comment">/* 使能对后备寄存器和RTC的写权限 */</span></span><br><span class="line">pmu_backup_write_enable();</span><br><span class="line">        </span><br><span class="line"><span class="comment">/* 复位后备寄存器 */</span></span><br><span class="line">bkp_deinit();</span><br><span class="line">        </span><br><span class="line"><span class="comment">/* 使能LXTAL，并等待其稳定 */</span></span><br><span class="line">rcu_osci_on(RCU_LXTAL);</span><br><span class="line">rcu_osci_stab_wait(RCU_LXTAL);</span><br><span class="line">        </span><br><span class="line"><span class="comment">/* 设置RTC时钟源为LXTAL */</span></span><br><span class="line">rcu_rtc_clock_config(RCU_RTCSRC_LXTAL);</span><br><span class="line">        </span><br><span class="line"><span class="comment">/* 使能RTC时钟 */</span></span><br><span class="line">rcu_periph_clock_enable(RCU_RTC);</span><br><span class="line">        </span><br><span class="line"><span class="comment">/* 等待APB1接口时钟和RTC时钟同步 */</span></span><br><span class="line">rtc_register_sync_wait();</span><br><span class="line">        </span><br><span class="line"><span class="comment">/* 等待上次对 RTC 寄存器写操作完成 */</span></span><br><span class="line">rtc_lwoff_wait();</span><br><span class="line">        </span><br><span class="line"><span class="comment">/* 设置分频值32767 */</span></span><br><span class="line">rtc_prescaler_set(<span class="number">32767</span>);</span><br><span class="line">        </span><br><span class="line"><span class="comment">/* 等待上次对 RTC 寄存器写操作完成 */</span></span><br><span class="line">rtc_lwoff_wait();</span><br><span class="line">        </span><br><span class="line"><span class="comment">/* 设置时间2023-02-28 23:59:50 */</span></span><br><span class="line">rtc_counter_set(<span class="number">1677599990</span>);</span><br><span class="line">bkp_write_data(BKP_DATA_0, MAGIC_CODE);</span><br><span class="line">        </span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 使能对RTC的访问，使能PMU和BKP时钟 */</span></span><br><span class="line">rcu_periph_clock_enable(RCU_PMU);</span><br><span class="line">rcu_periph_clock_enable(RCU_BKPI);</span><br><span class="line">    </span><br><span class="line"><span class="comment">/* 使能对后备寄存器和RTC的写权限 */</span></span><br><span class="line">pmu_backup_write_enable();</span><br><span class="line">    </span><br><span class="line"><span class="comment">/* 等待APB1接口时钟和RTC时钟同步 */</span></span><br><span class="line">rtc_register_sync_wait();</span><br><span class="line">    </span><br><span class="line"><span class="comment">/* 等待上次对 RTC 寄存器写操作完成 */</span></span><br><span class="line">rtc_lwoff_wait();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h4 id="解析："><a href="#解析：" class="headerlink" title="解析："></a><strong>解析：</strong></h4><h4 id="使能电源和备份接口时钟"><a href="#使能电源和备份接口时钟" class="headerlink" title="使能电源和备份接口时钟"></a>使能电源和备份接口时钟</h4><ul><li><p><strong>文字描述：</strong></p><ul><li><strong>RCU_APB1EN寄存器中的 <code>PMUEN</code> 和 <code>BKPEN</code> 位</strong>：用来使能电源管理单元（PMU）和备份接口（BKP）的时钟。</li></ul></li><li><p><strong>代码对应部分：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rcu_periph_clock_enable(RCU_PMU);</span><br><span class="line">rcu_periph_clock_enable(RCU_BKPI);</span><br></pre></td></tr></table></figure><p>这里的 <code>rcu_periph_clock_enable(RCU_PMU)</code> 和 <code>rcu_periph_clock_enable(RCU_BKPI)</code> 分别使能了电源管理单元和备份接口的时钟，保证后续对备份寄存器的访问和 RTC 寄存器的写入是可行的。</p></li></ul><h4 id="使能备份域寄存器和-RTC-的访问"><a href="#使能备份域寄存器和-RTC-的访问" class="headerlink" title="使能备份域寄存器和 RTC 的访问"></a>使能备份域寄存器和 RTC 的访问</h4><ul><li><p><strong>文字描述：</strong></p><ul><li><strong>PMU_CTL中的 <code>BKPWEN</code> 位</strong>：通过设置此位来使能对备份域寄存器和 RTC 的访问权限。</li></ul></li><li><p><strong>代码对应部分：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pmu_backup_write_enable();</span><br></pre></td></tr></table></figure><p><code>pmu_backup_write_enable()</code> 用于使能对备份寄存器和 RTC 寄存器的写访问权限，这一步相当于设置 <code>BKPWEN</code> 位，使系统具备对 RTC 进行写操作的权限。</p></li></ul><h4 id="复位后备寄存器"><a href="#复位后备寄存器" class="headerlink" title="复位后备寄存器"></a>复位后备寄存器</h4><ul><li><p><strong>代码部分：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bkp_deinit();</span><br></pre></td></tr></table></figure><p>这一行代码用于复位后备寄存器，确保备份域中的寄存器处于初始状态，尤其是在首次上电或 RTC 需要重新配置的情况下。</p></li></ul><h4 id="启用低速外部晶振（LXTAL）并等待其稳定"><a href="#启用低速外部晶振（LXTAL）并等待其稳定" class="headerlink" title="启用低速外部晶振（LXTAL）并等待其稳定"></a>启用低速外部晶振（LXTAL）并等待其稳定</h4><ul><li><p><strong>文字描述：</strong></p><ul><li>RTC 通常由外部低速晶振 (LXTAL) 提供时钟源，用于保证时间的精确性。</li></ul></li><li><p><strong>代码对应部分：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rcu_osci_on(RCU_LXTAL);</span><br><span class="line">rcu_osci_stab_wait(RCU_LXTAL);</span><br></pre></td></tr></table></figure><p><code>rcu_osci_on(RCU_LXTAL)</code> 使能低速外部晶振 (LXTAL)，用于提供 RTC 所需的 32.768 kHz 时钟。<code>rcu_osci_stab_wait(RCU_LXTAL)</code> 等待晶振稳定，这对于确保 RTC 的准确性至关重要。</p></li></ul><h4 id="设置-RTC-时钟源为-LXTAL"><a href="#设置-RTC-时钟源为-LXTAL" class="headerlink" title="设置 RTC 时钟源为 LXTAL"></a>设置 RTC 时钟源为 LXTAL</h4><ul><li><p><strong>文字描述：</strong></p><ul><li>RTC 的时钟源需要设置为 LXTAL，保证 RTC 的稳定运行。</li></ul></li><li><p><strong>代码对应部分：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rcu_rtc_clock_config(RCU_RTCSRC_LXTAL);</span><br></pre></td></tr></table></figure><p>这行代码用于将 RTC 的时钟源设置为 LXTAL，确保 RTC 使用外部稳定的 32.768 kHz 进行计数。</p></li></ul><h4 id="使能-RTC-时钟并等待同步"><a href="#使能-RTC-时钟并等待同步" class="headerlink" title="使能 RTC 时钟并等待同步"></a>使能 RTC 时钟并等待同步</h4><ul><li><p><strong>文字描述：</strong></p><ul><li><strong>APB 接口和 RTC 内核的同步问题</strong>：RTC 内核和 APB 接口分属于不同的电源域，需要进行同步。</li></ul></li><li><p><strong>代码对应部分：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rcu_periph_clock_enable(RCU_RTC);</span><br><span class="line">rtc_register_sync_wait();</span><br></pre></td></tr></table></figure><p>这里通过 <code>rcu_periph_clock_enable(RCU_RTC)</code> 启用了 RTC 时钟，使能对 RTC 的访问。<code>rtc_register_sync_wait()</code> 用于等待 APB1 接口与 RTC 内核的时钟同步，避免在未同步的情况下对 RTC 寄存器进行读写操作导致的数据错误。</p></li></ul><h4 id="等待上次写操作完成"><a href="#等待上次写操作完成" class="headerlink" title="等待上次写操作完成"></a>等待上次写操作完成</h4><ul><li><p><strong>文字描述：</strong></p><ul><li><strong>等待 <code>RTC_CTL</code> 寄存器中的 <code>LWOFF</code> 位变为 1</strong>：确保上次对 RTC 的写操作已完成，避免冲突。</li></ul></li><li><p><strong>代码对应部分：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rtc_lwoff_wait();</span><br></pre></td></tr></table></figure><p>通过 <code>rtc_lwoff_wait()</code> 函数，等待 <code>LWOFF</code> 位变为 1，确保 RTC 的上一次写操作（如设置分频值、计数器等）已经完成。</p></li></ul><h4 id="设置-RTC-分频器和初始时间"><a href="#设置-RTC-分频器和初始时间" class="headerlink" title="设置 RTC 分频器和初始时间"></a>设置 RTC 分频器和初始时间</h4><ul><li><p><strong>文字描述：</strong></p><ul><li><strong>配置模式 (<code>CMF</code> 置位)</strong>：进入配置模式来对 RTC 寄存器进行修改。</li></ul></li><li><p><strong>代码对应部分：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rtc_prescaler_set(<span class="number">32767</span>);</span><br><span class="line">rtc_lwoff_wait();</span><br><span class="line">rtc_counter_set(<span class="number">1677599990</span>);</span><br></pre></td></tr></table></figure><ul><li><code>rtc_prescaler_set(32767)</code>：设置 RTC 的分频器为 32767。RTC 使用 32.768 kHz 的时钟源，通过分频 32767 可以得到 1 Hz 的时钟，从而实现秒级计数。</li><li><code>rtc_lwoff_wait()</code>：再次等待上次的写操作完成，确保分频器的设置已经生效。</li><li><code>rtc_counter_set(1677599990)</code>：设置初始时间的计数器值为 <code>1677599990</code>，这个值表示从 Epoch（1970 年 1 月 1 日 00:00:00 UTC）以来的秒数，相当于 <code>2023-02-28 23:59:50</code>。</li></ul></li></ul><h4 id="设置备份寄存器标记已初始化"><a href="#设置备份寄存器标记已初始化" class="headerlink" title="设置备份寄存器标记已初始化"></a>设置备份寄存器标记已初始化</h4><ul><li><p><strong>代码部分：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bkp_write_data(BKP_DATA_0, MAGIC_CODE);</span><br></pre></td></tr></table></figure><p>将 <code>MAGIC_CODE</code> 写入备份寄存器 <code>BKP_DATA_0</code> 中，作为标志，表示 RTC 已经正确初始化。在下一次上电或复位时，可以通过这个标志判断是否需要重新初始化 RTC。</p></li></ul></blockquote><h3 id="2-设置时间"><a href="#2-设置时间" class="headerlink" title="2.设置时间"></a>2.设置时间</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">SetRtcTime</span><span class="params">(RtcTime_t *time)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">time_t</span> timeStamp;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tm</span> <span class="title">tmInfo</span>;</span></span><br><span class="line">    <span class="built_in">memset</span>(&amp;tmInfo, <span class="number">0</span>, <span class="keyword">sizeof</span>(tmInfo));</span><br><span class="line"></span><br><span class="line">tmInfo.tm_year = time-&gt;year - <span class="number">1900</span>;</span><br><span class="line">tmInfo.tm_mon = time-&gt;month - <span class="number">1</span>;</span><br><span class="line">tmInfo.tm_mday = time-&gt;day;</span><br><span class="line">tmInfo.tm_hour = time-&gt;hour;</span><br><span class="line">tmInfo.tm_min = time-&gt;minute;</span><br><span class="line">tmInfo.tm_sec = time-&gt;second;</span><br><span class="line"></span><br><span class="line">timeStamp = mktime(&amp;tmInfo) - <span class="number">8</span> * <span class="number">60</span> * <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">rtc_lwoff_wait();</span><br><span class="line">rtc_counter_set(timeStamp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>SetRtcTime</code> 函数用于设置 RTC 的当前时间。</p><ul><li><p><strong>步骤解析：</strong></p><ul><li><p>创建一个 <code>tm</code> 结构体 (<code>struct tm tmInfo</code>) 用于存储时间信息。</p></li><li><p>将输入的结构体 <code>RtcTime_t</code> 中的年、月、日、小时、分钟、秒分别赋值给 <code>tmInfo</code>。</p></li><li><p>将年、月的值进行偏移，<code>tm_year</code> 是从 1900 年开始计数，而 <code>tm_mon</code> 是从 0 开始计数，所以分别做了对应的减法处理：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tmInfo.tm_year = time-&gt;year - <span class="number">1900</span>;</span><br><span class="line">tmInfo.tm_mon = time-&gt;month - <span class="number">1</span>;</span><br></pre></td></tr></table></figure></li><li><p>调用 <code>mktime()</code> 将时间转换为 Unix 时间戳（自 1970-01-01 00:00:00 以来的秒数），并减去 8 小时的偏移量，这是为了调整为 UTC 时间：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">timeStamp = mktime(&amp;tmInfo) - <span class="number">8</span> * <span class="number">60</span> * <span class="number">60</span>;</span><br></pre></td></tr></table></figure><p>因为 <code>mktime()</code> 返回的是本地时间戳，假设本地时区为 UTC+8，所以这里需要减去 8 小时，将其转换为 UTC 时间。</p></li><li><p>等待 RTC 寄存器解锁，然后将时间戳设置到 RTC计数器：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rtc_lwoff_wait();</span><br><span class="line">rtc_counter_set(timeStamp);</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="3-获取时间"><a href="#3-获取时间" class="headerlink" title="3.获取时间"></a>3.获取时间</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">GetRtcTime</span><span class="params">(RtcTime_t *time)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">time_t</span> timeStamp;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tm</span> *<span class="title">tmInfo</span>;</span></span><br><span class="line"></span><br><span class="line">timeStamp = rtc_counter_get() + <span class="number">8</span> * <span class="number">60</span> * <span class="number">60</span>;</span><br><span class="line">tmInfo = localtime(&amp;timeStamp);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">time-&gt;year = tmInfo-&gt;tm_year + <span class="number">1900</span>;</span><br><span class="line">time-&gt;month = tmInfo-&gt;tm_mon + <span class="number">1</span>;</span><br><span class="line">time-&gt;day = tmInfo-&gt;tm_mday;</span><br><span class="line">time-&gt;hour = tmInfo-&gt;tm_hour;</span><br><span class="line">time-&gt;minute = tmInfo-&gt;tm_min;</span><br><span class="line">time-&gt;second = tmInfo-&gt;tm_sec;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>GetRtcTime</code> 函数用于从 RTC 中获取当前时间并将其转换为日历时间。</p><ul><li><p><strong>步骤解析：</strong></p><ul><li><p>从 RTC 中读取当前计数器的值，即获取 Unix 时间戳：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">timeStamp = rtc_counter_get() + <span class="number">8</span> * <span class="number">60</span> * <span class="number">60</span>;</span><br></pre></td></tr></table></figure><p>读取到的时间是 UTC 时间，所以这里加上 8 小时的偏移量，将其转换为本地时间<strong>（UTC+8）</strong>。</p></li><li><p>调用 <code>localtime()</code> 将时间戳转换为 <code>struct tm</code> 结构体。</p></li><li><p>将 <code>struct tm</code> 结构体中的值赋回到 <code>RtcTime_t</code> 结构体中。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">time-&gt;year = tmInfo-&gt;tm_year + <span class="number">1900</span>;</span><br><span class="line">time-&gt;month = tmInfo-&gt;tm_mon + <span class="number">1</span>;</span><br><span class="line">time-&gt;day = tmInfo-&gt;tm_mday;</span><br><span class="line">time-&gt;hour = tmInfo-&gt;tm_hour;</span><br><span class="line">time-&gt;minute = tmInfo-&gt;tm_min;</span><br><span class="line">time-&gt;second = tmInfo-&gt;tm_sec;</span><br></pre></td></tr></table></figure><p>对年和月的值做了相应的调整，<code>tm_year</code> 需要加上 1900，<code>tm_mon</code> 需要加上 1。</p></li></ul></li></ul><h1 id="ADC"><a href="#ADC" class="headerlink" title="ADC"></a>ADC</h1><h2 id="1-ADC系统工作原理"><a href="#1-ADC系统工作原理" class="headerlink" title="1.ADC系统工作原理"></a>1.ADC系统工作原理</h2><p>ADC硬件结构框图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501190026875.png" alt="image-20241130132029534"></p><p>GT32F303ZET6 MCU内置三个ADC模块，分别是ADC0、ADC1和ADC2。这些ADC的分辨率是可以配置的，支持12位、10位、8位或6位。此外，ADC还支持自校准功能，以提高采样的精度。采样时间和周期是可编程的，包括1.5个周期、7.5个周期等选项，转换结果可以配置为左对齐或右对齐的方式。</p><p>对于规则组数据转换，可以使用DMA配合搬移数据，从而减轻CPU的负担。ADC0和ADC1各自拥有16路外部模拟输入通道，而ADC2的通道数较少。ADC0还集成了一个内部温度传感器输入通道和一个内部参考电压输入通道。需要注意的是，内部温度传感器只能测量MCU芯片的温度，无法测量环境温度。</p><p>ADC支持多种转换模式，包括单次模式、连续模式、扫描模式、间断模式和同步模式。</p><p>ADC转换完成后，会产生EOC（End Of Conversion）标志，这一标志可以进一步触发NVIC中断。ADC的供电电源为VDD_A和VSSA，支持2.6V到3.6V，通常直接使用板子上的主电源3.3V。参考电源VREFP和VREFN通常将VREFP连接到VDD_A上，因此模拟输入通道的信号源输入电压范围为0V到3.3V。</p><p>ADC简易硬件结构框图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501190026005.png" alt="image-20241130132207744"></p><p>ADC的硬件结构包括16个外部模拟信号输入通道（通过GPIO口复用）、一路温度传感器输入通道和一路参考电压输入通道，共18个ADC通道。</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501190028408.png" alt="image-20241130133726461"></p><p>在ADC转换之前，需要外部触发源进行触发，触发源包括<strong>定时器触发</strong>（如每秒或几百毫秒）、<strong>EXTI外部中断触发</strong>、<strong>软件触发</strong>（通过代码控制）。</p><p>GT32F303 MCU的ADC时钟频率最高为40MHz，由120MHz主时钟分频得到。在ADC转换器中，有规则组和注入组两种数据处理方式。规则组类似于程序的主流程，通常满足大部分需求，而注入组类似于程序中的中断，可以打断规则组的转换，优先执行注入组的任务，完成后再继续规则组的转换。转换完成的结果会存放在ADC数据寄存器中，规则组的16个通道共用一个数据寄存器，而注入组有四个独立的数据寄存器。</p><p>关于中断，使能ADC中断需要在初始化配置时分为两部分：</p><ul><li>单片机片上外设中打开中断输出控制。</li><li>内核（NVIC）中打开相应的中断开关，例如定时器的更新溢出中断。</li></ul><p>ADC通道框图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501190029343.png" alt="image-20241130132431616"></p><p>ADC0、ADC1和ADC2的外部模拟输入通道通过GPIO口连接。ADC0和ADC1各有16个外部输入通道，分别对应PA0到PA7、PB0和PB1、PC0到PC5；而ADC2的通道数较少。</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501190029829.png" alt="image-20241130132504351"></p><p>转换模式包括</p><ul><li><p>单次模式：</p><p>每次ADC转换都需要外部触发源触发。</p></li><li><p>连续模式：</p><p>只需第一次触发，ADC将自动连续进行转换。</p></li><li><p>扫描模式：</p><p>针对单个ADC的多个通道，将通道号按序列放入转换序列寄存器，适用于多通道数据采集。</p></li><li><p>同步模式：</p><p>用于多个ADC模块同时使用的场景，如交替触发ADC0和ADC1，实现多个ADC的协同工作。相比之下，独立模式则仅单独使用某一个ADC模块，无需与其他ADC配合，适用于无需复杂协同的应用场景。常用的部分主要基于独立模式，结合单次、连续和扫描模式。</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501190030614.png" alt="image-20241130132727258"></p><p>单次转换模式对应规则组，通过转换序列寄存器配置要转换的通道号。</p><p>例如，将PA2对应的通道2放在序列1中，由外部触发源触发ADC开始采集、量化和编码转换。转换完成后产生EOC标志位，下一次转换需再次触发源触发。</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501190030216.png" alt="image-20241130132748339"></p><p>连续转换模式则只需首次触发一次，ADC会自动进行后续转换，产生标志位后可读取数据寄存器内容。</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501190030883.png" alt="image-20241130132820364"></p><p>扫描模式适用于单个ADC的多通道转换，将多个通道号按序列寄存器配置后，外部触发源一次触发后，ADC依次转换各通道，完成后产生EOC标志位。</p><p>由于规则组只有一个数据寄存器，且每转换一个通道后数据都会移入数据寄存器中，多个通道的数据可能会被覆盖，因此需要配合DMA自动搬移数据到内存数组中，以防数据丢失。</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501190031476.png" alt="image-20241130133154078"></p><p>规则组与注入组的关系类似于程序主流程与中断。规则组按序列执行转换任务，注入组可以打断规则组的转换，优先处理注入组的转换任务，完成后再继续规则组的转换。通常项目中只需使用规则组即可，注入组的使用较为少见，具体可参考芯片用户手册和官方示例程序。</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501190031706.png" alt="image-20241130133740418"></p><p>ADC的数据对齐支持右对齐和左对齐。右对齐（默认）高位填充0，左对齐低位填充0。以12位分辨率为例，参考电压为3.3伏，对应数值范围为0到4095，每步最小电压变化约为0.8mV。</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501190032952.png" alt="image-20241130133843955"></p><p>ADC转换时间包括采样和保持、量化和编码两个步骤。转换时间等于采样时间加上固定的12.5个ADC周期。采样时间可配置，根据信号源的输出阻抗（RAIN）调整。例如，ADC时钟为30MHz，采样周期设置为1.5个周期，则转换时间为14个ADC周期，即0.467微秒。</p><p>ADC采集原理包括信号源通过输出阻抗<strong>R_AIN</strong>连接到采样电阻<strong>R_ADC</strong>和采样电容<strong>C_ADC</strong>。外部触发源触发转换后，采集开关SW闭合，通过<strong>R_AIN</strong>和<strong>R_ADC</strong>对<strong>C_ADC</strong>进行充电，电压达到信号源当前电压后采集开关SW抬起，保持电容两端的电压进行量化和编码转换。开关SW闭合断开的间隔时间即为采样时间周期（采样+保持）。</p><p>采样时间的设置依据电容充电公式：</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501190032982.png" alt="image-20241130135112526"></p><p>不同信号源的输出阻抗不同，需根据实际情况配置采样时间。</p><p>案例分析：</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501190032993.png" alt="image-20241130135347841"></p><p>校准与硬件滤波：</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501190032742.png" alt="image-20241130135759180"></p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501190033927.png" alt="image-20241130135810508"></p><h2 id="2-ADC单通道转换实现"><a href="#2-ADC单通道转换实现" class="headerlink" title="2.ADC单通道转换实现"></a>2.ADC单通道转换实现</h2><p>开发板上有三个器件使用到了ADC（模数转换器）：</p><ul><li>可调电阻</li><li>热敏电阻</li><li>湿敏电阻</li></ul><p>本次重点使用可调电阻，并对应使用ADC的通道。</p><h3 id="1-硬件连接"><a href="#1-硬件连接" class="headerlink" title="1.硬件连接"></a><strong>1.硬件连接</strong></h3><blockquote><p>原理框图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501190036162.png" alt="QQ20241201-173522"></p><p><strong>通道选择：</strong></p><ul><li>使用的通道：ADC0</li><li>对应GPIO口：PC2</li><li>通道编号：12</li></ul><p><strong>电源与电压范围：</strong></p><ul><li>供电电压：3.3V</li><li>电压范围：0V 到 3.3V</li></ul><p><strong>限流电阻说明：</strong></p><p>限流电阻不会用于分压。<strong>当GPIO口配置为模拟输入模式时，GPIO口呈现高阻态，因此限流电阻不会分压。</strong></p><p><strong>可调电阻调节：</strong></p><ul><li>调节到最上面时，采集到的电压为3.3V，对应数字量为4095。</li><li>调节到最下面时，采集到的电压为0V，对应数字量为0。</li></ul></blockquote><h3 id="2-代码实现"><a href="#2-代码实现" class="headerlink" title="2.代码实现"></a><strong>2.代码实现</strong></h3><h4 id="1-ADC-初始化配置"><a href="#1-ADC-初始化配置" class="headerlink" title="1.ADC 初始化配置"></a><strong>1.ADC 初始化配置</strong></h4><p><strong>初始化步骤：</strong></p><ol><li><p><strong>使能GPIO时钟并配置GPIO口：</strong></p><ul><li>使能GPIOC的时钟。</li><li>将PC2配置为模拟输入模式，速度为10MHz。</li></ul></li><li><p><strong>配置ADC部分：</strong></p><ul><li>使能ADC0的时钟。</li><li>设置ADC时钟分频系数为6分频，得到20MHz的ADC时钟。</li><li>设置ADC为独立模式，不与其他ADC协同工作。</li><li>配置ADC为单次转换模式，每次转换需要外部触发。</li><li>设置数据对齐为右对齐。</li><li>设置转换通道的个数为1。</li><li>配置转换通道为12，并放在序列寄存器的第0序列位置，采样时间为239.5个周期。</li><li>选择软件触发作为外部触发源，并使能外部触发。</li><li>使能ADC。</li><li>进行内部校准，延时50微秒后启动校准。</li></ul></li></ol><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501190036385.png" alt="image-20241201173325251"></p><p>以下是参考代码，用于初始化GPIO和ADC，并实现获取ADC值及测试函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;gd32f30x.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;delay.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* GPIO初始化 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">GPIOInit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    rcu_periph_clock_enable(RCU_GPIOC);</span><br><span class="line">    gpio_init(GPIOC, GPIO_MODE_AIN, GPIO_OSPEED_10MHZ, GPIO_PIN_2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ADC初始化 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">ADCInit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 使能ADC时钟 */</span></span><br><span class="line">    rcu_periph_clock_enable(RCU_ADC0);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 设置ADC时钟分频系数为6分频（120MHz / 6 = 20MHz） */</span></span><br><span class="line">    rcu_adc_clock_config(RCU_CKADC_CKAPB2_DIV6);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 设置ADC为独立模式 */</span></span><br><span class="line">    adc_mode_config(ADC_MODE_FREE);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 设置ADC为单次转换模式 */</span></span><br><span class="line">    adc_special_function_config(ADC0, ADC_CONTINUOUS_MODE, DISABLE);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 设置数据对齐为右对齐 */</span></span><br><span class="line">    adc_data_alignment_config(ADC0, ADC_DATAALIGN_RIGHT);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 设置转换通道个数为1 */</span></span><br><span class="line">    adc_channel_length_config(ADC0, ADC_REGULAR_CHANNEL, <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 配置转换通道12，放在序列寄存器的第0序列，采样时间239.5个周期 */</span></span><br><span class="line">    adc_regular_channel_config(ADC0, <span class="number">0</span>, ADC_CHANNEL_12, ADC_SAMPLETIME_239POINT5);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 选择软件触发作为外部触发源 */</span></span><br><span class="line">    adc_external_trigger_source_config(ADC0, ADC_REGULAR_CHANNEL, ADC0_1_2_EXTTRIG_REGULAR_NONE);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 使能外部触发 */</span></span><br><span class="line">    adc_external_trigger_config(ADC0, ADC_REGULAR_CHANNEL, ENABLE);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 使能ADC */</span></span><br><span class="line">    adc_enable(ADC0);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 内部校准 */</span></span><br><span class="line">    DelayNus(<span class="number">50</span>);</span><br><span class="line">    adc_calibration_enable(ADC0);</span><br><span class="line">    adc_software_trigger_enable(ADC0, ADC_REGULAR_CHANNEL);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">* @brief ADC硬件初始化</span></span><br><span class="line"><span class="comment">* @param</span></span><br><span class="line"><span class="comment">* @return </span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">VresInit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    GPIOInit();</span><br><span class="line">    ADCInit();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 获取ADC值 */</span></span><br><span class="line"><span class="type">uint16_t</span> <span class="title function_">GetAdcVal</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (!adc_flag_get(ADC0, ADC_FLAG_EOC));</span><br><span class="line">    <span class="keyword">return</span> adc_regular_data_read(ADC0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ADC测试函数 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">VresTest</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint16_t</span> AdcVal = GetAdcVal();</span><br><span class="line">    <span class="type">float</span> Voltage = (<span class="type">float</span>)AdcVal / <span class="number">4095</span> * <span class="number">3.3f</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;AdcVal = %d, Voltage = %.1f V.\n&quot;</span>, AdcVal, Voltage);</span><br><span class="line">    DelayNms(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-调试与问题解决"><a href="#2-调试与问题解决" class="headerlink" title="2.调试与问题解决"></a><strong>2.调试与问题解决</strong></h4><p>在编写和调试代码过程中，可能会遇到以下问题：</p><ol><li><p><strong>程序复位后只打印一次数据：</strong></p><ul><li>可能是因为没有正确调用回调函数或中断处理。</li><li>检查<code>system.c</code>中的定时器中断处理，确保回调函数指针不为空。</li></ul></li><li><p><strong>硬错误（Hard Fault）：</strong></p><ul><li>发生空指针引用，通常由于回调函数未正确初始化。</li><li>解决方法是在调用回调前加入空指针判断，例如：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (callback_ptr != <span class="literal">NULL</span>) </span><br><span class="line">&#123;</span><br><span class="line">    callback_ptr();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>转换模式的调整：</strong></p><ul><li>初始实现为单次转换模式，每次获取ADC值都需要软件触发。</li><li>可扩展为连续转换模式，使得只需一次触发即可连续获取ADC值。</li></ul></li></ol><h4 id="3-实验与测试"><a href="#3-实验与测试" class="headerlink" title="3.实验与测试"></a><strong>3.实验与测试</strong></h4><p>将代码下载到开发板后，复位设备并观察串口打印的数据。</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501190037805.png" alt="QQ20241201-173721"></p><p>通过调节可调电阻的位置，可以看到ADC值和对应的电压值在0到3.3V之间变化。</p><h2 id="3-ADC多通道配合DMA转换"><a href="#3-ADC多通道配合DMA转换" class="headerlink" title="3.ADC多通道配合DMA转换"></a>3.ADC多通道配合DMA转换</h2><p>使用<strong>连续扫描模式</strong>，配合<strong>DMA</strong>（直接存储器访问）实现<strong>多通道的ADC转换</strong>。</p><h3 id="1-硬件连接-1"><a href="#1-硬件连接-1" class="headerlink" title="1.硬件连接"></a><strong>1.硬件连接</strong></h3><p>原理框图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501190038454.png" alt="QQ20241201-174601"></p><blockquote><p><strong>转换通道选择：</strong></p><ul><li><p><strong>可调电阻</strong></p><ul><li>对应GPIO口：PC2</li><li>ADC通道编号：12</li></ul></li><li><p><strong>热敏电阻</strong></p><ul><li>对应GPIO口：PC3</li><li>ADC通道编号：13</li></ul></li></ul><p><strong>电源与电压范围：</strong></p><ul><li>供电电压：3.3V</li><li>电压范围：0V 到 3.3V</li></ul><p><strong>限流电阻说明：</strong></p><p>限流电阻不会用于分压。当将GPIO口配置为模拟输入模式时，GPIO口呈现高阻态，因此限流电阻不会分压。</p></blockquote><h3 id="2-代码实现-1"><a href="#2-代码实现-1" class="headerlink" title="2.代码实现"></a><strong>2.代码实现</strong></h3><h4 id="1-ADC-初始化配置-1"><a href="#1-ADC-初始化配置-1" class="headerlink" title="1.ADC 初始化配置"></a><strong>1.ADC 初始化配置</strong></h4><blockquote><p>与单次转换模式相比，连续扫描模式需要进行以下配置：</p><ol><li><p><strong>使能连续模式和扫描模式：</strong></p><ul><li>设置ADC为连续转换模式。</li><li>启用扫描模式，以支持多通道转换。</li></ul></li><li><p><strong>使能ADC的DMA功能：</strong></p><ul><li>通过DMA将转换结果自动搬移到内存数组中，减少CPU负担。</li></ul></li><li><p><strong>配置转换通道：</strong></p><ul><li>设置转换通道数量为2，分别为通道12和通道13。</li><li>配置每个通道在转换序列中的位置。</li></ul></li></ol></blockquote><h4 id="2-DMA-初始化配置"><a href="#2-DMA-初始化配置" class="headerlink" title="2.DMA 初始化配置"></a><strong>2.DMA 初始化配置</strong></h4><blockquote><p>DMA的初始化配置与之前讲解的串口配合DMA的方法基本相同，主要步骤如下：</p><ol><li><p><strong>使能DMA时钟并复位DMA通道：</strong></p><ul><li>使能对应DMA控制器的时钟。</li><li>复位DMA通道以确保配置的正确性。</li></ul></li><li><p><strong>配置DMA传输参数：</strong></p><ul><li><strong>传输方向：</strong> 外设到内存。</li><li><strong>源地址：</strong> ADC的数据寄存器地址。</li><li><strong>目的地址：</strong> 存放ADC转换结果的数组。</li><li><strong>数据传输位宽：</strong> 16位（由于ADC使用12位分辨率）。</li><li><strong>传输次数：</strong> 2次（对应两个通道）。</li><li><strong>循环模式：</strong> 使能循环模式，实现数据的循环搬移。</li></ul></li><li><p><strong>使能DMA通道：</strong></p><ul><li>启动DMA通道，使其开始工作。</li></ul></li></ol></blockquote><p>ADC多通道配合DMA转换配置框图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501190037859.png" alt="image-20241201174501329"></p><p>以下是参考代码，用于初始化GPIO、ADC和DMA，并实现获取多通道ADC值及测试函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;gd32f30x.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;delay.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* GPIO初始化 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">GPIOInit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    rcu_periph_clock_enable(RCU_GPIOC);</span><br><span class="line">    gpio_init(GPIOC, GPIO_MODE_AIN, GPIO_OSPEED_10MHZ, GPIO_PIN_2);</span><br><span class="line">    gpio_init(GPIOC, GPIO_MODE_AIN, GPIO_OSPEED_10MHZ, GPIO_PIN_3);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ADC初始化 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">ADCInit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 使能ADC时钟 */</span></span><br><span class="line">    rcu_periph_clock_enable(RCU_ADC0);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 设置ADC时钟分频系数为6分频（120MHz / 6 = 20MHz） */</span></span><br><span class="line">    rcu_adc_clock_config(RCU_CKADC_CKAPB2_DIV6);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 设置ADC为独立模式 */</span></span><br><span class="line">    adc_mode_config(ADC_MODE_FREE);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 设置ADC为连续转换模式 */</span></span><br><span class="line">    adc_special_function_config(ADC0, ADC_CONTINUOUS_MODE, ENABLE);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 设置扫描模式 */</span></span><br><span class="line">    adc_special_function_config(ADC0, ADC_SCAN_MODE, ENABLE);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 设置数据对齐为右对齐 */</span></span><br><span class="line">    adc_data_alignment_config(ADC0, ADC_DATAALIGN_RIGHT);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 设置转换通道个数为2 */</span></span><br><span class="line">    adc_channel_length_config(ADC0, ADC_REGULAR_CHANNEL, <span class="number">2</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 配置转换通道12，放在序列寄存器的第0序列，采样时间239.5个周期 */</span></span><br><span class="line">    adc_regular_channel_config(ADC0, <span class="number">0</span>, ADC_CHANNEL_12, ADC_SAMPLETIME_239POINT5);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 配置转换通道13，放在序列寄存器的第1序列，采样时间239.5个周期 */</span></span><br><span class="line">    adc_regular_channel_config(ADC0, <span class="number">1</span>, ADC_CHANNEL_13, ADC_SAMPLETIME_239POINT5);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 选择软件触发作为外部触发源 */</span></span><br><span class="line">    adc_external_trigger_source_config(ADC0, ADC_REGULAR_CHANNEL, ADC0_1_2_EXTTRIG_REGULAR_NONE);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 使能外部触发 */</span></span><br><span class="line">    adc_external_trigger_config(ADC0, ADC_REGULAR_CHANNEL, ENABLE);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 使能ADC的DMA功能 */</span></span><br><span class="line">    adc_dma_mode_enable(ADC0);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 使能ADC */</span></span><br><span class="line">    adc_enable(ADC0);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 内部校准 */</span></span><br><span class="line">    DelayNus(<span class="number">50</span>);</span><br><span class="line">    adc_calibration_enable(ADC0);</span><br><span class="line">    adc_software_trigger_enable(ADC0, ADC_REGULAR_CHANNEL);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ADC0_RDATA_ADDR    (ADC0 + 0x4C)</span></span><br><span class="line"><span class="type">static</span> <span class="type">uint16_t</span> g_adcVal[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">/* DMA初始化 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">DMAInit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 使能DMA时钟 */</span></span><br><span class="line">    rcu_periph_clock_enable(RCU_DMA0);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 复位DMA通道 */</span></span><br><span class="line">    dma_deinit(DMA0, DMA_CH0);</span><br><span class="line">    </span><br><span class="line">    dma_parameter_struct dmaStruct;</span><br><span class="line">    dma_struct_para_init(&amp;dmaStruct);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 配置传输方向：外设到内存 */</span></span><br><span class="line">    dmaStruct.direction = DMA_PERIPHERAL_TO_MEMORY;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 配置数据源地址 */</span></span><br><span class="line">    dmaStruct.periph_addr = ADC0_RDATA_ADDR;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 配置源地址不递增 */</span></span><br><span class="line">    dmaStruct.periph_inc = DMA_PERIPH_INCREASE_DISABLE;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 配置源数据传输位宽为16位 */</span></span><br><span class="line">    dmaStruct.periph_width = DMA_PERIPHERAL_WIDTH_16BIT;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 配置数据目的地址 */</span></span><br><span class="line">    dmaStruct.memory_addr = (<span class="type">uint32_t</span>)g_adcVal;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 配置目的地址递增 */</span></span><br><span class="line">    dmaStruct.memory_inc = DMA_MEMORY_INCREASE_ENABLE;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 配置目的数据传输位宽为16位 */</span></span><br><span class="line">    dmaStruct.memory_width = DMA_MEMORY_WIDTH_16BIT;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 配置数据传输最大次数为2 */</span></span><br><span class="line">    dmaStruct.number = <span class="number">2</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 配置DMA通道优先级为高 */</span></span><br><span class="line">    dmaStruct.priority = DMA_PRIORITY_HIGH;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 初始化DMA通道 */</span></span><br><span class="line">    dma_init(DMA0, DMA_CH0, &amp;dmaStruct);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 使能DMA循环模式搬移数据 */</span></span><br><span class="line">    dma_circulation_enable(DMA0, DMA_CH0);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 使能DMA通道 */</span></span><br><span class="line">    dma_channel_enable(DMA0, DMA_CH0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">* @brief ADC硬件初始化</span></span><br><span class="line"><span class="comment">* @param</span></span><br><span class="line"><span class="comment">* @return </span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">VresInit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    GPIOInit();</span><br><span class="line">    ADCInit();</span><br><span class="line">    DMAInit();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ADC测试函数 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">VresTest</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;CH12 AdcVal = %d.\n&quot;</span>, g_adcVal[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;CH13 AdcVal = %d.\n&quot;</span>, g_adcVal[<span class="number">1</span>]);</span><br><span class="line">    DelayNms(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-调试与问题解决"><a href="#3-调试与问题解决" class="headerlink" title="3.调试与问题解决"></a><strong>3.调试与问题解决</strong></h4><blockquote><p>在编写和调试代码过程中，可能会遇到以下问题：</p><ol><li><p><strong>数据未正确搬移到内存数组：</strong></p><ul><li><strong>原因：</strong> DMA配置不正确或DMA未使能。</li><li><strong>解决方法：</strong> 检查DMA初始化配置，确保DMA通道已使能并配置为循环模式。</li></ul></li><li><p><strong>硬错误（Hard Fault）：</strong></p><ul><li><strong>原因：</strong> DMA传输地址配置错误，导致访问非法内存。</li><li><strong>解决方法：</strong> 确认DMA源地址和目的地址配置正确，确保目的数组已正确声明并分配足够内存。</li></ul></li><li><p><strong>ADC数据不更新或保持不变：</strong></p><ul><li><strong>原因：</strong> ADC未正确启动或DMA未正确配置。</li><li><strong>解决方法：</strong> 确认ADC已使能并开始转换，检查DMA是否正常工作。</li></ul></li><li><p><strong>CPU负担过重或系统响应缓慢：</strong></p><ul><li><strong>原因：</strong> 未使用DMA，手动读取ADC数据导致CPU负担增加。</li><li><strong>解决方法：</strong>使用DMA搬移数据，减少CPU的中断处理次数。</li></ul></li></ol></blockquote><h2 id="4-ADC硬件滤波和软件滤波"><a href="#4-ADC硬件滤波和软件滤波" class="headerlink" title="4.ADC硬件滤波和软件滤波"></a>4.ADC硬件滤波和软件滤波</h2><h3 id="1-硬件滤波原理与配置"><a href="#1-硬件滤波原理与配置" class="headerlink" title="1.硬件滤波原理与配置"></a><strong>1.硬件滤波原理与配置</strong></h3><blockquote><p><strong>过采样滤波原理：</strong></p><ul><li><strong>过采样单元</strong>通过多次采样并求和，随后进行右移操作，实现数据的平均滤波。</li><li><strong>配置参数：</strong><ul><li><strong>n</strong>：代表将多少次的结果求和。</li><li><strong>m</strong>：对应的是除法系数，即右移的次数。右移一次相当于除以二，右移两次相当于除以四，依此类推。</li></ul></li></ul><p><strong>实例配置：</strong></p><ul><li>配置为取16次的结果求和（n = 16）。</li><li>进行右移4次（m = 4），相当于除以16。</li></ul><p><strong>硬件滤波的优势：</strong></p><ul><li>减少CPU的负担，提升系统效率。</li><li>实现快速的硬件滤波，提升数据处理速度。</li></ul><p><strong>ADC 硬件滤波初始化配置：</strong></p><p>与之前的连续扫描模式和DMA配置相比，硬件滤波模式需要进行以下额外配置：</p><ol><li><p><strong>配置ADC为连续模式：</strong></p><ul><li>设置ADC为连续转换模式，只需一次触发即可连续进行转换。</li></ul></li><li><p><strong>配置硬件滤波参数：</strong></p><ul><li>设置过采样次数（n）和右移次数（m）。</li><li>例如，配置为16次求和，右移4次。</li></ul></li><li><p><strong>使能ADC的过采样模式：</strong></p><ul><li>启用ADC的过采样功能，以实现硬件滤波。</li></ul></li></ol></blockquote><h3 id="2-软件滤波算法"><a href="#2-软件滤波算法" class="headerlink" title="2.软件滤波算法"></a><strong>2.软件滤波算法</strong></h3><blockquote><p>在项目开发中，软件滤波算法常用于处理ADC采集的数据。以下介绍几种常用的软件滤波算法：</p><ol><li><p><strong>算术平均滤波法（Arithmetic Average Filter）：</strong></p><ul><li>取n个采样值进行算术平均运算。</li><li>简单易实现，但对极端值敏感。</li></ul></li><li><p><strong>中位值滤波法（Median Filter）：</strong></p><ul><li>连续采样n次，将n次采样值按大小排序，取中间值作为有效值。</li><li>对极端值有较好的抑制效果，适用于去除脉冲干扰。</li></ul></li><li><p><strong>中位值平均滤波法（Median Average Filter）：</strong></p><ul><li>连续采样n个数据，去掉一个最大值和一个最小值，然后计算剩余n-2个数据的算术平均值。</li><li>兼具算术平均和中位值滤波的优点，既能去除极端值，又能平滑数据。</li></ul></li></ol></blockquote><h3 id="3-代码实现-1"><a href="#3-代码实现-1" class="headerlink" title="3.代码实现"></a><strong>3.代码实现</strong></h3><p>以下是参考代码，用于初始化GPIO和ADC，并实现ADC硬件滤波功能及测试函数：</p><h4 id="1-硬件滤波代码"><a href="#1-硬件滤波代码" class="headerlink" title="1.硬件滤波代码"></a><strong>1.硬件滤波代码</strong></h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;gd32f30x.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;delay.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* GPIO初始化 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">GPIOInit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    rcu_periph_clock_enable(RCU_GPIOC);</span><br><span class="line">    gpio_init(GPIOC, GPIO_MODE_AIN, GPIO_OSPEED_10MHZ, GPIO_PIN_2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ADC初始化 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">ADCInit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 使能ADC时钟 */</span></span><br><span class="line">    rcu_periph_clock_enable(RCU_ADC0);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 设置ADC时钟分频系数为6分频（120MHz / 6 = 20MHz） */</span></span><br><span class="line">    rcu_adc_clock_config(RCU_CKADC_CKAPB2_DIV6);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 设置ADC为独立模式 */</span></span><br><span class="line">    adc_mode_config(ADC_MODE_FREE);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 设置连续转换模式 */</span></span><br><span class="line">    adc_special_function_config(ADC0, ADC_CONTINUOUS_MODE, ENABLE);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 设置数据对齐为右对齐 */</span></span><br><span class="line">    adc_data_alignment_config(ADC0, ADC_DATAALIGN_RIGHT);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 设置转换通道个数为1 */</span></span><br><span class="line">    adc_channel_length_config(ADC0, ADC_REGULAR_CHANNEL, <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 配置转换通道12，放在序列寄存器的第0序列，采样时间239.5个周期 */</span></span><br><span class="line">    adc_regular_channel_config(ADC0, <span class="number">0</span>, ADC_CHANNEL_12, ADC_SAMPLETIME_239POINT5);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 选择软件触发作为外部触发源 */</span></span><br><span class="line">    adc_external_trigger_source_config(ADC0, ADC_REGULAR_CHANNEL, ADC0_1_2_EXTTRIG_REGULAR_NONE);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 使能外部触发 */</span></span><br><span class="line">    adc_external_trigger_config(ADC0, ADC_REGULAR_CHANNEL, ENABLE);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 设置硬件滤波 */</span></span><br><span class="line">    adc_oversample_mode_config(ADC0, ADC_OVERSAMPLING_ALL_CONVERT, ADC_OVERSAMPLING_SHIFT_4B, ADC_OVERSAMPLING_RATIO_MUL16);</span><br><span class="line">    adc_oversample_mode_enable(ADC0);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 使能ADC */</span></span><br><span class="line">    adc_enable(ADC0);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 内部校准 */</span></span><br><span class="line">    DelayNus(<span class="number">50</span>);</span><br><span class="line">    adc_calibration_enable(ADC0);</span><br><span class="line">    adc_software_trigger_enable(ADC0, ADC_REGULAR_CHANNEL);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">* @brief ADC硬件初始化</span></span><br><span class="line"><span class="comment">* @param</span></span><br><span class="line"><span class="comment">* @return </span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">VresInit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    GPIOInit();</span><br><span class="line">    ADCInit();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint16_t</span> <span class="title function_">GetAdcVal</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (!adc_flag_get(ADC0, ADC_FLAG_EOC));</span><br><span class="line">    <span class="keyword">return</span> adc_regular_data_read(ADC0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">VresTest</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint16_t</span> AdcVal = GetAdcVal();</span><br><span class="line">    <span class="type">float</span> Voltage = (<span class="type">float</span>)AdcVal / <span class="number">4095</span> * <span class="number">3.3f</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;AdcVal = %d, Voltage = %.1f V.\n&quot;</span>, AdcVal, Voltage);</span><br><span class="line">    DelayNms(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-软件滤波代码："><a href="#2-软件滤波代码：" class="headerlink" title="2.软件滤波代码："></a><strong>2.软件滤波代码：</strong></h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;gd32f30x.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;delay.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ADC0_RDATA_ADDR    (ADC0 + 0x4C)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_BUF_SIZE        10</span></span><br><span class="line"><span class="type">static</span> <span class="type">uint16_t</span> g_adcVal[MAX_BUF_SIZE];</span><br><span class="line"></span><br><span class="line"><span class="comment">/* GPIO初始化 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">GPIOInit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    rcu_periph_clock_enable(RCU_GPIOC);</span><br><span class="line">    gpio_init(GPIOC, GPIO_MODE_AIN, GPIO_OSPEED_10MHZ, GPIO_PIN_2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ADC初始化 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">ADCInit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 使能ADC时钟 */</span></span><br><span class="line">    rcu_periph_clock_enable(RCU_ADC0);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 设置ADC时钟分频系数为6分频（120MHz / 6 = 20MHz） */</span></span><br><span class="line">    rcu_adc_clock_config(RCU_CKADC_CKAPB2_DIV6);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 设置ADC为独立模式 */</span></span><br><span class="line">    adc_mode_config(ADC_MODE_FREE);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 设置连续转换模式 */</span></span><br><span class="line">    adc_special_function_config(ADC0, ADC_CONTINUOUS_MODE, ENABLE);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 设置扫描模式 */</span></span><br><span class="line">    adc_special_function_config(ADC0, ADC_SCAN_MODE, ENABLE);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 设置数据对齐为右对齐 */</span></span><br><span class="line">    adc_data_alignment_config(ADC0, ADC_DATAALIGN_RIGHT);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 设置转换通道个数为1 */</span></span><br><span class="line">    adc_channel_length_config(ADC0, ADC_REGULAR_CHANNEL, <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 配置转换通道12，放在序列寄存器的第0序列，采样时间239.5个周期 */</span></span><br><span class="line">    adc_regular_channel_config(ADC0, <span class="number">0</span>, ADC_CHANNEL_12, ADC_SAMPLETIME_239POINT5);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 选择软件触发作为外部触发源 */</span></span><br><span class="line">    adc_external_trigger_source_config(ADC0, ADC_REGULAR_CHANNEL, ADC0_1_2_EXTTRIG_REGULAR_NONE);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 使能外部触发 */</span></span><br><span class="line">    adc_external_trigger_config(ADC0, ADC_REGULAR_CHANNEL, ENABLE);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 使能ADC的DMA功能 */</span></span><br><span class="line">    adc_dma_mode_enable(ADC0);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 使能ADC */</span></span><br><span class="line">    adc_enable(ADC0);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 内部校准 */</span></span><br><span class="line">    DelayNus(<span class="number">50</span>);</span><br><span class="line">    adc_calibration_enable(ADC0);</span><br><span class="line">    adc_software_trigger_enable(ADC0, ADC_REGULAR_CHANNEL);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* DMA初始化 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">DMAInit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 使能DMA时钟 */</span></span><br><span class="line">    rcu_periph_clock_enable(RCU_DMA0);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 复位DMA通道 */</span></span><br><span class="line">    dma_deinit(DMA0, DMA_CH0);</span><br><span class="line">    </span><br><span class="line">    dma_parameter_struct dmaStruct;</span><br><span class="line">    dma_struct_para_init(&amp;dmaStruct);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 配置传输方向：外设到内存 */</span></span><br><span class="line">    dmaStruct.direction = DMA_PERIPHERAL_TO_MEMORY;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 配置数据源地址 */</span></span><br><span class="line">    dmaStruct.periph_addr = ADC0_RDATA_ADDR;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 配置源地址不递增 */</span></span><br><span class="line">    dmaStruct.periph_inc = DMA_PERIPH_INCREASE_DISABLE;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 配置源数据传输位宽为16位 */</span></span><br><span class="line">    dmaStruct.periph_width = DMA_PERIPHERAL_WIDTH_16BIT;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 配置数据目的地址 */</span></span><br><span class="line">    dmaStruct.memory_addr = (<span class="type">uint32_t</span>)g_adcVal;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 配置目的地址递增 */</span></span><br><span class="line">    dmaStruct.memory_inc = DMA_MEMORY_INCREASE_ENABLE;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 配置目的数据传输位宽为16位 */</span></span><br><span class="line">    dmaStruct.memory_width = DMA_MEMORY_WIDTH_16BIT;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 配置数据传输最大次数为MAX_BUF_SIZE */</span></span><br><span class="line">    dmaStruct.number = MAX_BUF_SIZE;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 配置DMA通道优先级为高 */</span></span><br><span class="line">    dmaStruct.priority = DMA_PRIORITY_HIGH;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 初始化DMA通道 */</span></span><br><span class="line">    dma_init(DMA0, DMA_CH0, &amp;dmaStruct);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 使能DMA循环模式搬移数据 */</span></span><br><span class="line">    dma_circulation_enable(DMA0, DMA_CH0);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 使能DMA通道 */</span></span><br><span class="line">    dma_channel_enable(DMA0, DMA_CH0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">* @brief ADC硬件初始化</span></span><br><span class="line"><span class="comment">* @param</span></span><br><span class="line"><span class="comment">* @return </span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">VresInit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    GPIOInit();</span><br><span class="line">    ADCInit();</span><br><span class="line">    DMAInit();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 算术平均滤波函数 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">uint16_t</span> <span class="title function_">ArithAvgFltr</span><span class="params">(<span class="type">uint16_t</span> *arr, <span class="type">uint32_t</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint32_t</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint32_t</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum += arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">uint16_t</span>)(sum / len);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">VresTest</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint16_t</span> buf[MAX_BUF_SIZE];</span><br><span class="line">    <span class="built_in">memcpy</span>(buf, g_adcVal, <span class="keyword">sizeof</span>(<span class="type">uint16_t</span>) * MAX_BUF_SIZE);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint8_t</span> i = <span class="number">0</span>; i &lt; MAX_BUF_SIZE; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;AdcVal[%d] = %d.\n&quot;</span>, i, buf[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint16_t</span> res = ArithAvgFltr(buf, MAX_BUF_SIZE);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;res = %d.\n&quot;</span>, res);</span><br><span class="line">    DelayNms(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-调试与问题解决-1"><a href="#3-调试与问题解决-1" class="headerlink" title="3.调试与问题解决"></a><strong>3.调试与问题解决</strong></h4><blockquote><p>在实现和调试ADC滤波功能时，可能会遇到以下问题：</p><ol><li><p><strong>ADC数据不更新或保持不变：</strong></p><ul><li><strong>原因：</strong> ADC未正确启动或DMA未正确配置。</li><li><strong>解决方法：</strong> 确认ADC已使能并开始转换，检查DMA配置是否正确，确保DMA通道已使能。</li></ul></li><li><p><strong>硬错误（Hard Fault）：</strong></p><ul><li><strong>原因：</strong> DMA传输地址配置错误，导致访问非法内存。</li><li><strong>解决方法：</strong> 确认DMA源地址和目的地址配置正确，确保目的数组已正确声明并分配足够内存。</li></ul></li><li><p><strong>滤波结果不准确：</strong></p><ul><li><strong>原因：</strong> 过采样参数配置不当，或滤波算法实现有误。</li><li><strong>解决方法：</strong> 检查过采样次数和右移次数的配置，确保滤波算法逻辑正确。</li></ul></li><li><p><strong>CPU负担过重或系统响应缓慢：</strong></p><ul><li><strong>原因：</strong> 未使用DMA，手动读取ADC数据导致CPU负担增加。</li><li><strong>解决方法：</strong> 使用DMA搬移数据，减少CPU的中断处理次数。</li></ul></li></ol></blockquote><h2 id="5-快速排序的使用方法"><a href="#5-快速排序的使用方法" class="headerlink" title="5.快速排序的使用方法"></a>5.快速排序的使用方法</h2><h3 id="快速排序概述"><a href="#快速排序概述" class="headerlink" title="快速排序概述"></a><strong>快速排序概述</strong></h3><blockquote><p><strong>快速排序（Quick Sort）</strong>是一种高效的排序算法，采用分治策略，通过一个基准元素将数组分成两部分，递归地排序这两部分。相比<strong>冒泡排序法</strong>，快速排序具有以下优势：</p><ul><li><strong>更高的性能</strong>：平均时间复杂度为O(n log n)，而冒泡排序为O(n²)。</li><li><strong>更灵活</strong>：C标准库提供了快速排序的接口函数<code>qsort</code>，简化了排序过程。</li></ul><p><strong>快速排序优点</strong></p><ul><li><strong>灵活性</strong>：<code>qsort</code>函数允许用户自定义排序规则，通过函数指针实现升序或降序排序。</li><li><strong>性能优越</strong>：快速排序在大多数情况下比冒泡排序更快，适用于需要高效排序的应用场景。</li></ul></blockquote><h3 id="qsort函数简介"><a href="#qsort函数简介" class="headerlink" title="qsort函数简介"></a><strong><code>qsort</code>函数简介</strong></h3><blockquote><p>在C标准库中，<code>qsort</code>函数用于对数组进行排序。其函数原型如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">qsort</span><span class="params">(<span class="type">void</span> *base, <span class="type">size_t</span> nmemb, <span class="type">size_t</span> size, <span class="type">int</span> (*compar)(<span class="type">const</span> <span class="type">void</span> *, <span class="type">const</span> <span class="type">void</span> *))</span>;</span><br></pre></td></tr></table></figure><p><strong>参数说明：</strong></p><ol><li><strong><code>base</code></strong>：指向要排序的数组的首地址。</li><li><strong><code>nmemb</code></strong>：数组中元素的个数。</li><li><strong><code>size</code></strong>：数组中每个元素所占用的内存空间大小（通常使用<code>sizeof</code>运算符计算）。</li><li><strong><code>compar</code></strong>：指向比较函数的指针，用于定义排序规则（升序或降序）。</li></ol><p><strong>比较函数的定义：</strong></p><p>比较函数必须符合以下签名：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">compar</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *a, <span class="type">const</span> <span class="type">void</span> *b)</span>;</span><br></pre></td></tr></table></figure><p><strong>返回值：</strong></p><ul><li><strong>负值</strong>：如果<code>*a</code>小于<code>*b</code>。</li><li><strong>零</strong>：如果<code>*a</code>等于<code>*b</code>。</li><li><strong>正值</strong>：如果<code>*a</code>大于<code>*b</code>（升序）。</li></ul><p>通过调整比较函数的返回值，可以实现升序或降序排序。</p></blockquote><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a><strong>代码实现</strong></h3><p>以下是一个使用<code>qsort</code>对<code>uint16_t</code>类型数组和结构体数组进行排序的示例代码。</p><h4 id="1-排序整数数组"><a href="#1-排序整数数组" class="headerlink" title="1. 排序整数数组"></a><strong>1. 排序整数数组</strong></h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;led_drv.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;key_drv.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;systick.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;usb2com_drv.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;rtc_drv.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;vres_drv.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;usb2com_app.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;hmi_app.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">DrvInit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    DelayInit();</span><br><span class="line">    LedInit();</span><br><span class="line">    KeyInit();</span><br><span class="line">    Usb2ComInit();</span><br><span class="line">    RtcInit();</span><br><span class="line">    VresInit();</span><br><span class="line">    SystickInit();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">uint16_t</span> id;</span><br><span class="line">    <span class="type">uint8_t</span> score;</span><br><span class="line">&#125; StuInfo_t;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 整数数组比较函数（降序） */</span></span><br><span class="line"><span class="type">int32_t</span> <span class="title function_">CmpCb</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *_a, <span class="type">const</span> <span class="type">void</span> *_b)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint16_t</span> *a = (<span class="type">uint16_t</span> *)_a;</span><br><span class="line">    <span class="type">uint16_t</span> *b = (<span class="type">uint16_t</span> *)_b;</span><br><span class="line">    <span class="keyword">if</span> (*a &gt; *b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (*a &lt; *b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 结构体数组比较函数（降序） */</span></span><br><span class="line"><span class="type">int32_t</span> <span class="title function_">StuCmpCb</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *_a, <span class="type">const</span> <span class="type">void</span> *_b)</span></span><br><span class="line">&#123;</span><br><span class="line">    StuInfo_t *a = (StuInfo_t *)_a;</span><br><span class="line">    StuInfo_t *b = (StuInfo_t *)_b;</span><br><span class="line">    <span class="keyword">if</span> (a-&gt;score &gt; b-&gt;score)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (a-&gt;score &lt; b-&gt;score)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    DrvInit();</span><br><span class="line">    <span class="type">uint16_t</span> num[<span class="number">10</span>] = &#123;<span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">26</span>, <span class="number">52</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">14</span>, <span class="number">56</span>&#125;;</span><br><span class="line">    <span class="type">uint16_t</span> sz = <span class="keyword">sizeof</span>(num) / <span class="keyword">sizeof</span>(num[<span class="number">0</span>]);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 使用qsort对整数数组进行降序排序 */</span></span><br><span class="line">    qsort(num, sz, <span class="keyword">sizeof</span>(num[<span class="number">0</span>]), CmpCb);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint8_t</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;num[%d] = %d.\n&quot;</span>, i, num[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 定义并初始化结构体数组 */</span></span><br><span class="line">    StuInfo_t stuInfo[<span class="number">5</span>] = &#123;</span><br><span class="line">        &#123;<span class="number">1</span>, <span class="number">90</span>&#125;,</span><br><span class="line">        &#123;<span class="number">2</span>, <span class="number">65</span>&#125;,</span><br><span class="line">        &#123;<span class="number">3</span>, <span class="number">80</span>&#125;,</span><br><span class="line">        &#123;<span class="number">4</span>, <span class="number">75</span>&#125;,</span><br><span class="line">        &#123;<span class="number">5</span>, <span class="number">70</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 使用qsort对结构体数组进行降序排序 */</span></span><br><span class="line">    qsort(stuInfo, <span class="number">5</span>, <span class="keyword">sizeof</span>(stuInfo[<span class="number">0</span>]), StuCmpCb);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint8_t</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;student id = %d, score = %d.\n&quot;</span>, stuInfo[i].id, stuInfo[i].score);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-排序结构体数组"><a href="#2-排序结构体数组" class="headerlink" title="2. 排序结构体数组"></a><strong>2. 排序结构体数组</strong></h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;systick.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;usb2com_drv.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;rtc_drv.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;vres_drv.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;usb2com_app.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">DrvInit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    DelayInit();</span><br><span class="line">    LedInit();</span><br><span class="line">    KeyInit();</span><br><span class="line">    Usb2ComInit();</span><br><span class="line">    RtcInit();</span><br><span class="line">    VresInit();</span><br><span class="line">    SystickInit();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">uint16_t</span> id;</span><br><span class="line">    <span class="type">uint8_t</span> score;</span><br><span class="line">&#125; StuInfo_t;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 结构体数组比较函数（降序） */</span></span><br><span class="line"><span class="type">int32_t</span> <span class="title function_">StuCmpCb</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *_a, <span class="type">const</span> <span class="type">void</span> *_b)</span></span><br><span class="line">&#123;</span><br><span class="line">    StuInfo_t *a = (StuInfo_t *)_a;</span><br><span class="line">    StuInfo_t *b = (StuInfo_t *)_b;</span><br><span class="line">    <span class="keyword">if</span> (a-&gt;score &gt; b-&gt;score)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (a-&gt;score &lt; b-&gt;score)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    DrvInit();</span><br><span class="line">    <span class="type">uint16_t</span> num[<span class="number">10</span>] = &#123;<span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">26</span>, <span class="number">52</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">14</span>, <span class="number">56</span>&#125;;</span><br><span class="line">    <span class="type">uint16_t</span> sz = <span class="keyword">sizeof</span>(num) / <span class="keyword">sizeof</span>(num[<span class="number">0</span>]);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 使用qsort对整数数组进行降序排序 */</span></span><br><span class="line">    qsort(num, sz, <span class="keyword">sizeof</span>(num[<span class="number">0</span>]), CmpCb);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint8_t</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;num[%d] = %d.\n&quot;</span>, i, num[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 定义并初始化结构体数组 */</span></span><br><span class="line">    StuInfo_t stuInfo[<span class="number">5</span>] = &#123;</span><br><span class="line">        &#123;<span class="number">1</span>, <span class="number">90</span>&#125;,</span><br><span class="line">        &#123;<span class="number">2</span>, <span class="number">65</span>&#125;,</span><br><span class="line">        &#123;<span class="number">3</span>, <span class="number">80</span>&#125;,</span><br><span class="line">        &#123;<span class="number">4</span>, <span class="number">75</span>&#125;,</span><br><span class="line">        &#123;<span class="number">5</span>, <span class="number">70</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 使用qsort对结构体数组进行降序排序 */</span></span><br><span class="line">    qsort(stuInfo, <span class="number">5</span>, <span class="keyword">sizeof</span>(stuInfo[<span class="number">0</span>]), StuCmpCb);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint8_t</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;student id = %d, score = %d.\n&quot;</span>, stuInfo[i].id, stuInfo[i].score);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码讲解"><a href="#代码讲解" class="headerlink" title="代码讲解"></a><strong>代码讲解</strong></h3><h4 id="1-排序整数数组-1"><a href="#1-排序整数数组-1" class="headerlink" title="1. 排序整数数组"></a><strong>1. 排序整数数组</strong></h4><blockquote><p>在本例中，我们定义了一个<code>uint16_t</code>类型的数组<code>num</code>，包含10个元素。通过调用<code>qsort</code>函数，对该数组进行降序排序。</p><p><strong>关键步骤：</strong></p><ol><li><p><strong>定义比较函数<code>CmpCb</code></strong>：</p><ul><li>接受两个<code>const void *</code>类型的指针，分别指向数组中的两个元素。</li><li>将其转换为<code>uint16_t *</code>类型。</li><li>比较两个数的大小，返回<code>-1</code>（如果第一个数大于第二个数）、<code>1</code>（如果第一个数小于第二个数）或<code>0</code>（相等）。</li><li>该实现实现了<strong>降序排序</strong>。</li></ul></li><li><p><strong>调用<code>qsort</code>函数</strong>：</p><ul><li><strong>第一个参数</strong>：数组<code>num</code>的首地址。</li><li><strong>第二个参数</strong>：数组元素的个数（10）。</li><li><strong>第三个参数</strong>：数组元素所占用的内存空间大小（<code>sizeof(num[0])</code>）。</li><li><strong>第四个参数</strong>：比较函数的指针（<code>CmpCb</code>）。</li></ul></li><li><p><strong>打印排序后的数组</strong>：</p><ul><li>使用<code>for</code>循环遍历数组，并通过<code>printf</code>函数打印每个元素的值。</li></ul></li></ol><p><strong>输出结果示例</strong>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">num[<span class="number">0</span>] = <span class="number">56.</span></span><br><span class="line">num[<span class="number">1</span>] = <span class="number">52.</span></span><br><span class="line">num[<span class="number">2</span>] = <span class="number">26.</span></span><br><span class="line">num[<span class="number">3</span>] = <span class="number">14.</span></span><br><span class="line">num[<span class="number">4</span>] = <span class="number">9.</span></span><br><span class="line">num[<span class="number">5</span>] = <span class="number">8.</span></span><br><span class="line">num[<span class="number">6</span>] = <span class="number">7.</span></span><br><span class="line">num[<span class="number">7</span>] = <span class="number">5.</span></span><br><span class="line">num[<span class="number">8</span>] = <span class="number">3.</span></span><br><span class="line">num[<span class="number">9</span>] = <span class="number">1.</span></span><br></pre></td></tr></table></figure></blockquote><h4 id="2-排序结构体数组-1"><a href="#2-排序结构体数组-1" class="headerlink" title="2. 排序结构体数组"></a><strong>2. 排序结构体数组</strong></h4><blockquote><p>我们定义了一个结构体<code>StuInfo_t</code>，包含<code>id</code>和<code>score</code>两个成员，用于表示学生的相关信息。通过<code>qsort</code>函数，对结构体数组<code>stuInfo</code>进行降序排序，基于学生的分数。</p><p><strong>关键步骤：</strong></p><ol><li><p><strong>定义比较函数<code>StuCmpCb</code></strong>：</p><ul><li>接受两个<code>const void *</code>类型的指针，分别指向结构体数组中的两个元素。</li><li>将其转换为<code>StuInfo_t *</code>类型。</li><li>比较两个学生的分数，返回<code>-1</code>（如果第一个学生的分数高于第二个学生）、<code>1</code>（如果第一个学生的分数低于第二个学生）或<code>0</code>（相等）。</li><li>该实现实现了<strong>基于分数的降序排序</strong>。</li></ul></li><li><p><strong>调用<code>qsort</code>函数</strong>：</p><ul><li><strong>第一个参数</strong>：结构体数组<code>stuInfo</code>的首地址。</li><li><strong>第二个参数</strong>：结构体数组元素的个数（5）。</li><li><strong>第三个参数</strong>：结构体数组元素所占用的内存空间大小（<code>sizeof(stuInfo[0])</code>）。</li><li><strong>第四个参数</strong>：比较函数的指针（<code>StuCmpCb</code>）。</li></ul></li><li><p><strong>打印排序后的结构体数组</strong>：</p><ul><li>使用<code>for</code>循环遍历结构体数组，并通过<code>printf</code>函数打印每个学生的<code>id</code>和<code>score</code>。</li></ul></li></ol><p><strong>输出结果示例</strong>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">student id = <span class="number">1</span>, score = <span class="number">90.</span></span><br><span class="line">student id = <span class="number">3</span>, score = <span class="number">80.</span></span><br><span class="line">student id = <span class="number">4</span>, score = <span class="number">75.</span></span><br><span class="line">student id = <span class="number">5</span>, score = <span class="number">70.</span></span><br><span class="line">student id = <span class="number">2</span>, score = <span class="number">65.</span></span><br></pre></td></tr></table></figure></blockquote><h2 id="6-二分查找法"><a href="#6-二分查找法" class="headerlink" title="6.二分查找法"></a>6.二分查找法</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a><strong>概述</strong></h3><blockquote><p><strong>二分查找法</strong>，也称为<strong>折半查找法</strong>，是一种在有序数组中查找某个目标值是否存在的算法。其主要优势在于相较于<strong>顺序查找</strong>（线性查找），二分查找法能够显著降低查找的时间复杂度。</p><h4 id="1-时间复杂度"><a href="#1-时间复杂度" class="headerlink" title="1. 时间复杂度"></a><strong>1. 时间复杂度</strong></h4><ul><li><strong>顺序查找</strong>的时间复杂度为O(n)，其中n是数组的元素个数。</li><li><strong>二分查找法</strong>的时间复杂度为O(log₂n)，大大提高了查找效率。</li></ul><p><strong>示例</strong>：</p><p>假设数组中有8个元素：</p><ul><li>顺序查找最多需要8次比较。</li><li>二分查找只需要3次比较（因为2³ = 8）。</li></ul><h4 id="2-应用场景"><a href="#2-应用场景" class="headerlink" title="2. 应用场景"></a><strong>2. 应用场景</strong></h4><ul><li>适用于<strong>有序数组</strong>。</li><li>需要快速查找元素的场景，如查找温度传感器的校准值、配置表等。</li></ul></blockquote><h3 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a><strong>基本原理</strong></h3><blockquote><p>二分查找法通过不断将查找范围分成两半，逐步缩小查找区间，直至找到目标值或确定目标值不存在。</p><p><strong>步骤</strong>：</p><ol><li><strong>初始化</strong>：<ul><li><strong>左下标（left）</strong>：指向数组的起始位置，通常为0。</li><li><strong>右下标（right）</strong>：指向数组的末尾位置，通常为数组长度减1。</li></ul></li><li><strong>循环查找</strong>：<ul><li><strong>计算中间下标（middle）</strong></li><li><strong>比较目标值与中间元素</strong></li></ul></li><li><strong>终止条件</strong>：<ul><li>当左下标超过右下标时，查找结束，目标值不存在于数组中。</li></ul></li></ol></blockquote><h3 id="实现细节"><a href="#实现细节" class="headerlink" title="实现细节"></a><strong>实现细节</strong></h3><blockquote><p>在实现二分查找法时，需要注意以下几个关键点：</p><ol><li><p><strong>防止溢出</strong>：</p><ul><li>在计算中间下标时，使用 <code>mid = left + (right - left) / 2</code> 而不是 <code>mid = left + right  / 2</code>，以避免当 <code>left</code>和 <code>right</code> 都很大时发生整型溢出。</li></ul></li><li><p><strong>变量类型</strong>：</p><ul><li><code>left</code>、<code>right</code> 和 <code>middle</code> 应定义为<strong>有符号整型</strong>，如 <code>int</code> 或 <code>int32_t</code>，以处理可能出现的负值。</li></ul></li><li><p><strong>升序与降序</strong>：</p><ul><li>根据数组的排序顺序（升序或降序），调整比较逻辑以确保正确缩小查找范围。</li></ul></li><li><p><strong>查找接近目标值的元素</strong>：</p><ul><li>除了查找目标值是否存在，二分查找法还可用于查找最接近目标值的元素下标。</li></ul></li></ol></blockquote><h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a><strong>代码实现</strong></h3><p>以下是二分查找法在C语言中的实现，包括<strong>升序查找</strong>和<strong>降序查找</strong>，以及查找最接近目标值的函数。</p><h4 id="1-升序二分查找"><a href="#1-升序二分查找" class="headerlink" title="1. 升序二分查找"></a><strong>1. 升序二分查找</strong></h4><p><strong>函数说明</strong>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief 升序数组的二分查找函数</span></span><br><span class="line"><span class="comment"> * @param arr 有序数组的首地址</span></span><br><span class="line"><span class="comment"> * @param size 数组的大小</span></span><br><span class="line"><span class="comment"> * @param key 目标值</span></span><br><span class="line"><span class="comment"> * @return 目标值的下标，若未找到返回-1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int32_t</span> <span class="title function_">AscBinarySearch</span><span class="params">(<span class="type">int32_t</span> *arr, <span class="type">int32_t</span> size, <span class="type">int32_t</span> key)</span> &#123;</span><br><span class="line">    <span class="type">int32_t</span> left = <span class="number">0</span>;               <span class="comment">// 左下标</span></span><br><span class="line">    <span class="type">int32_t</span> right = size - <span class="number">1</span>;       <span class="comment">// 右下标</span></span><br><span class="line">    <span class="type">int32_t</span> mid;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;         <span class="comment">// 循环条件</span></span><br><span class="line">        mid = left + (right - left) / <span class="number">2</span>;   <span class="comment">// 计算中间下标</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (key &lt; arr[mid]) &#123;</span><br><span class="line">            right = mid - <span class="number">1</span>;        <span class="comment">// 目标值在左半部分</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key &gt; arr[mid]) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;         <span class="comment">// 目标值在右半部分</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> mid;             <span class="comment">// 找到目标值</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;                        <span class="comment">// 未找到目标值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-降序二分查找"><a href="#2-降序二分查找" class="headerlink" title="2. 降序二分查找"></a><strong>2. 降序二分查找</strong></h4><p><strong>函数说明</strong>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief 降序数组的二分查找函数</span></span><br><span class="line"><span class="comment"> * @param arr 有序数组的首地址</span></span><br><span class="line"><span class="comment"> * @param size 数组的大小</span></span><br><span class="line"><span class="comment"> * @param key 目标值</span></span><br><span class="line"><span class="comment"> * @return 目标值的下标，若未找到返回-1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int32_t</span> <span class="title function_">DescBinarySearch</span><span class="params">(<span class="type">int32_t</span> *arr, <span class="type">int32_t</span> size, <span class="type">int32_t</span> key)</span> &#123;</span><br><span class="line">    <span class="type">int32_t</span> left = <span class="number">0</span>;               <span class="comment">// 左下标</span></span><br><span class="line">    <span class="type">int32_t</span> right = size - <span class="number">1</span>;       <span class="comment">// 右下标</span></span><br><span class="line">    <span class="type">int32_t</span> mid;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;         <span class="comment">// 循环条件</span></span><br><span class="line">        mid = left + (right - left) / <span class="number">2</span>;   <span class="comment">// 计算中间下标</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (key &gt; arr[mid]) &#123;</span><br><span class="line">            right = mid - <span class="number">1</span>;        <span class="comment">// 目标值在左半部分</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key &lt; arr[mid]) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;         <span class="comment">// 目标值在右半部分</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> mid;             <span class="comment">// 找到目标值</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;                        <span class="comment">// 未找到目标值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-升序查找最接近目标值的元素下标"><a href="#3-升序查找最接近目标值的元素下标" class="headerlink" title="3. 升序查找最接近目标值的元素下标"></a><strong>3. 升序查找最接近目标值的元素下标</strong></h4><p><strong>函数说明</strong>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief 升序数组中查找最接近目标值的元素下标</span></span><br><span class="line"><span class="comment"> * @param arr 有序数组的首地址</span></span><br><span class="line"><span class="comment"> * @param size 数组的大小</span></span><br><span class="line"><span class="comment"> * @param key 目标值</span></span><br><span class="line"><span class="comment"> * @return 最接近目标值的元素下标</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int32_t</span> <span class="title function_">AscNear</span><span class="params">(<span class="type">int32_t</span> *arr, <span class="type">int32_t</span> size, <span class="type">int32_t</span> key)</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int32_t</span> left = <span class="number">0</span>;               <span class="comment">// 左下标</span></span><br><span class="line">    <span class="type">int32_t</span> right = size - <span class="number">1</span>;       <span class="comment">// 右下标</span></span><br><span class="line">    <span class="type">int32_t</span> mid;</span><br><span class="line">    <span class="type">int32_t</span> index = size - <span class="number">1</span>;       <span class="comment">// 初始假设为最后一个元素</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;          <span class="comment">// 循环条件</span></span><br><span class="line">        mid = left + (right - left) / <span class="number">2</span>;   <span class="comment">// 计算中间下标</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (key &lt;= arr[mid]) &#123;</span><br><span class="line">            index = mid;             <span class="comment">// 记录当前中间下标</span></span><br><span class="line">            right = mid - <span class="number">1</span>;         <span class="comment">// 目标值在左半部分</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;          <span class="comment">// 目标值在右半部分</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> index;                     <span class="comment">// 返回最接近目标值的元素下标</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-降序查找最接近目标值的元素下标"><a href="#4-降序查找最接近目标值的元素下标" class="headerlink" title="4. 降序查找最接近目标值的元素下标"></a><strong>4. 降序查找最接近目标值的元素下标</strong></h4><p><strong>函数说明</strong>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief 降序数组中查找最接近目标值的元素下标</span></span><br><span class="line"><span class="comment"> * @param arr 有序数组的首地址</span></span><br><span class="line"><span class="comment"> * @param size 数组的大小</span></span><br><span class="line"><span class="comment"> * @param key 目标值</span></span><br><span class="line"><span class="comment"> * @return 最接近目标值的元素下标</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int32_t</span> <span class="title function_">DescNear</span><span class="params">(<span class="type">int32_t</span> *arr, <span class="type">int32_t</span> size, <span class="type">int32_t</span> key)</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int32_t</span> left = <span class="number">0</span>;               <span class="comment">// 左下标</span></span><br><span class="line">    <span class="type">int32_t</span> right = size - <span class="number">1</span>;       <span class="comment">// 右下标</span></span><br><span class="line">    <span class="type">int32_t</span> mid;</span><br><span class="line">    <span class="type">int32_t</span> index = size - <span class="number">1</span>;       <span class="comment">// 初始假设为最后一个元素</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;          <span class="comment">// 循环条件</span></span><br><span class="line">        mid = left + (right - left) / <span class="number">2</span>;   <span class="comment">// 计算中间下标</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (key &gt;= arr[mid]) &#123;</span><br><span class="line">            index = mid;             <span class="comment">// 记录当前中间下标</span></span><br><span class="line">            right = mid - <span class="number">1</span>;         <span class="comment">// 目标值在左半部分</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;          <span class="comment">// 目标值在右半部分</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> index;                     <span class="comment">// 返回最接近目标值的元素下标</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码讲解-1"><a href="#代码讲解-1" class="headerlink" title="代码讲解"></a><strong>代码讲解</strong></h3><h4 id="1-升序二分查找-1"><a href="#1-升序二分查找-1" class="headerlink" title="1. 升序二分查找"></a><strong>1. 升序二分查找</strong></h4><p><strong>功能</strong>：在一个升序排列的数组中查找目标值的下标。</p><p><strong>函数</strong>：<code>AscBinarySearch</code></p><p><strong>逻辑</strong>：</p><ul><li>如果目标值小于中间元素，则在左半部分继续查找。</li><li>如果目标值大于中间元素，则在右半部分继续查找。</li><li>如果等于中间元素，则返回该元素的下标。</li><li>若查找范围为空，返回-1。</li></ul><p><strong>示例</strong>：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int32_t</span> arr[<span class="number">6</span>] = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">20</span>&#125;;</span><br><span class="line"><span class="type">int32_t</span> index = AscBinarySearch(arr, <span class="number">6</span>, <span class="number">20</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;20 的下标 = %d。\n&quot;</span>, index);  <span class="comment">// 输出: 5</span></span><br></pre></td></tr></table></figure></p><h4 id="2-降序二分查找-1"><a href="#2-降序二分查找-1" class="headerlink" title="2. 降序二分查找"></a><strong>2. 降序二分查找</strong></h4><p><strong>功能</strong>：在一个降序排列的数组中查找目标值的下标。</p><p><strong>函数</strong>：<code>DescBinarySearch</code></p><p><strong>逻辑</strong>：</p><ul><li>如果目标值大于中间元素，则在左半部分继续查找。</li><li>如果目标值小于中间元素，则在右半部分继续查找。</li><li>如果等于中间元素，则返回该元素的下标。</li><li>若查找范围为空，返回-1。</li></ul><p><strong>示例</strong>：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int32_t</span> arr2[<span class="number">6</span>] = &#123;<span class="number">20</span>, <span class="number">14</span>, <span class="number">10</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">1</span>&#125;;</span><br><span class="line"><span class="type">int32_t</span> index = DescBinarySearch(arr2, <span class="number">6</span>, <span class="number">20</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;20 的下标 = %d。\n&quot;</span>, index);  <span class="comment">// 输出: 0</span></span><br></pre></td></tr></table></figure></p><h4 id="3-升序查找最接近目标值的元素下标-1"><a href="#3-升序查找最接近目标值的元素下标-1" class="headerlink" title="3. 升序查找最接近目标值的元素下标"></a><strong>3. 升序查找最接近目标值的元素下标</strong></h4><p><strong>功能</strong>：在一个升序排列的数组中查找最接近目标值的元素下标。</p><p><strong>函数</strong>：<code>AscNear</code></p><p><strong>逻辑</strong>：</p><ul><li>通过二分查找法，找到第一个大于等于目标值的元素下标。</li><li>如果目标值存在，则返回其下标。</li><li>如果不存在，则返回最接近的下标。</li></ul><p><strong>示例</strong>：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int32_t</span> index = AscNear(arr, <span class="number">6</span>, <span class="number">11</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;最接近 11 的元素下标 = %d，元素值 = %d。\n&quot;</span>, index, arr[index]);  <span class="comment">// 输出: 4, 元素14</span></span><br></pre></td></tr></table></figure></p><h4 id="4-降序查找最接近目标值的元素下标-1"><a href="#4-降序查找最接近目标值的元素下标-1" class="headerlink" title="4. 降序查找最接近目标值的元素下标"></a><strong>4. 降序查找最接近目标值的元素下标</strong></h4><p><strong>功能</strong>：在一个降序排列的数组中查找最接近目标值的元素下标。</p><p><strong>函数</strong>：<code>DescNear</code></p><p><strong>逻辑</strong>：</p><ul><li>通过二分查找法，找到第一个小于等于目标值的元素下标。</li><li>如果目标值存在，则返回其下标。</li><li>如果不存在，则返回最接近的下标。</li></ul><p><strong>示例</strong>：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int32_t</span> index = DescNear(arr2, <span class="number">6</span>, <span class="number">11</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;最接近 11 的元素下标 = %d，元素值 = %d。\n&quot;</span>, index, arr2[index]);  <span class="comment">// 输出: 2, 元素10</span></span><br></pre></td></tr></table></figure></p><h3 id="调试与问题解决"><a href="#调试与问题解决" class="headerlink" title="调试与问题解决"></a><strong>调试与问题解决</strong></h3><blockquote><p>在实现和调试二分查找法时，可能会遇到以下问题：</p><ol><li><p><strong>查找结果不正确</strong>：</p><ul><li><strong>原因</strong>：比较函数逻辑错误，或者数组未正确排序。</li><li><strong>解决方法</strong>：确保数组已按预期顺序排序，检查比较函数的返回值逻辑是否正确。</li></ul></li><li><p><strong>程序进入死循环</strong>：</p><ul><li><strong>原因</strong>：计算中间下标时溢出，或者变量类型使用不当。</li><li><strong>解决方法</strong>：使用<code>left + (right - left) / 2</code>计算中间下标，确保<code>left</code>、<code>right</code>和<code>mid</code>为有符号整型。</li></ul></li><li><p><strong>未找到目标值时返回错误</strong>：</p><ul><li><strong>原因</strong>：循环终止条件设置不正确，或者函数返回值错误。</li><li><strong>解决方法</strong>：检查循环条件是否为<code>left &lt;= right</code>，确保在未找到目标值时返回-1。</li></ul></li><li><p><strong>查找最接近目标值时返回错误</strong>：</p><ul><li><strong>原因</strong>：未正确更新最接近的元素下标。</li><li><strong>解决方法</strong>：在比较过程中记录最接近目标值的元素下标，并在循环结束后返回。</li></ul></li></ol></blockquote><h2 id="7-传感器任务框架搭建"><a href="#7-传感器任务框架搭建" class="headerlink" title="7.传感器任务框架搭建"></a>7.传感器任务框架搭建</h2><h3 id="1-分层架构概述"><a href="#1-分层架构概述" class="headerlink" title="1. 分层架构概述"></a><strong>1. 分层架构概述</strong></h3><p>在本节课中，我们将实现一个<strong>两层分层的应用层和驱动层</strong>的软件架构。这种架构的主要优势在于：</p><ul><li><strong>代码可复用</strong>：不同传感器的驱动可以在不修改应用层代码的情况下进行替换。</li><li><strong>代码可移植</strong>：通过统一的接口设计，软件架构可以适应不同的硬件平台。</li></ul><h3 id="2-驱动层的设计"><a href="#2-驱动层的设计" class="headerlink" title="2. 驱动层的设计"></a><strong>2. 驱动层的设计</strong></h3><p>在驱动层，我们实现一个<strong>统一的传感器框架</strong>。具体步骤如下：</p><ul><li><strong>驱动文件</strong>：创建一个驱动文件<code>driver.c</code>，由驱动层对外提供接口，供应用层调用。</li><li><strong>暴露函数</strong>：驱动层暴露获取传感器数据的函数，供外部应用层使用。</li></ul><h3 id="3-数据结构设计"><a href="#3-数据结构设计" class="headerlink" title="3. 数据结构设计"></a><strong>3. 数据结构设计</strong></h3><p>我们设计一个结构体来存储传感器的数据，结构体成员包括各类传感器的数据，如湿度、温度等。为了未来的扩展，还可以添加PM2.5、甲醛等传感器的数据。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _SENSOR_DRV_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _SENSOR_DRV_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">float</span> temp;   <span class="comment">// 温度，单位：摄氏度</span></span><br><span class="line">    <span class="type">uint8_t</span> humi; <span class="comment">// 湿度，单位：%</span></span><br><span class="line">&#125; SensorData_t;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">* @brief 传感器驱动初始化</span></span><br><span class="line"><span class="comment">* @param</span></span><br><span class="line"><span class="comment">* @return </span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SensorDrvInit</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">* @brief 获取传感器数据</span></span><br><span class="line"><span class="comment">* @param sensorData, 输出，传感器数据回写地址</span></span><br><span class="line"><span class="comment">* @return </span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">GetSensorData</span><span class="params">(SensorData_t *sensorData)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">* @brief 触发驱动转换传感器数据</span></span><br><span class="line"><span class="comment">* @param</span></span><br><span class="line"><span class="comment">* @return </span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SensorDrvProc</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><h3 id="4-驱动层实现"><a href="#4-驱动层实现" class="headerlink" title="4. 驱动层实现"></a><strong>4. 驱动层实现</strong></h3><p>在驱动层的源文件<code>sensor_drv.c</code>中，实现传感器驱动的初始化、数据转换和数据获取功能。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;gd32f30x.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;sensor_drv.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">* @brief 传感器驱动初始化</span></span><br><span class="line"><span class="comment">* @param</span></span><br><span class="line"><span class="comment">* @return </span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SensorDrvInit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 初始化相关硬件，如GPIO、ADC等</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">* @brief 触发驱动转换传感器数据</span></span><br><span class="line"><span class="comment">* @param</span></span><br><span class="line"><span class="comment">* @return </span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SensorDrvProc</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 触发ADC转换，读取传感器数据</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">* @brief 获取传感器数据</span></span><br><span class="line"><span class="comment">* @param sensorData, 输出，传感器数据回写地址</span></span><br><span class="line"><span class="comment">* @return </span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">GetSensorData</span><span class="params">(SensorData_t *sensorData)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 从ADC读取数据并转换为温度和湿度</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">* @brief 传感器任务处理函数</span></span><br><span class="line"><span class="comment">* @param </span></span><br><span class="line"><span class="comment">* @return </span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SensorTask</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    SensorDrvProc();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-应用层的设计与实现"><a href="#5-应用层的设计与实现" class="headerlink" title="5. 应用层的设计与实现"></a><strong>5. 应用层的设计与实现</strong></h3><p>在应用层，我们实现一个<code>app.c</code>文件，负责任务调度和传感器数据的获取与处理。</p><h4 id="5-1-任务调度结构体"><a href="#5-1-任务调度结构体" class="headerlink" title="5.1 任务调度结构体"></a><strong>5.1 任务调度结构体</strong></h4><p>首先，定义一个任务调度结构体，用于管理任务的执行状态和时间片。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 任务调度结构体 */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">uint8_t</span> run;                <span class="comment">// 调度标志，1：调度，0：挂起</span></span><br><span class="line">    <span class="type">uint16_t</span> timCount;          <span class="comment">// 时间片计数值</span></span><br><span class="line">    <span class="type">uint16_t</span> timRload;          <span class="comment">// 时间片重载值</span></span><br><span class="line">    <span class="type">void</span> (*pTaskFuncCb)(<span class="type">void</span>);  <span class="comment">// 函数指针变量，用来保存业务功能模块函数地址</span></span><br><span class="line">&#125; TaskComps_t;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> TaskComps_t g_taskComps[] = </span><br><span class="line">&#123;</span><br><span class="line">    &#123;<span class="number">0</span>, <span class="number">1000</span>, <span class="number">1000</span>,  HmiTask&#125;,</span><br><span class="line">    &#123;<span class="number">0</span>, <span class="number">1000</span>, <span class="number">1000</span>,  SensorTask&#125;</span><br><span class="line">    <span class="comment">/* 添加业务功能模块 */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TASK_NUM_MAX   (sizeof(g_taskComps) / sizeof(g_taskComps[0]))</span></span><br></pre></td></tr></table></figure><h4 id="5-2-任务处理与调度函数"><a href="#5-2-任务处理与调度函数" class="headerlink" title="5.2 任务处理与调度函数"></a><strong>5.2 任务处理与调度函数</strong></h4><p>实现任务处理函数<code>TaskHandler</code>和任务调度回调函数<code>TaskScheduleCb</code>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 任务处理函数 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">TaskHandler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint8_t</span> i = <span class="number">0</span>; i &lt; TASK_NUM_MAX; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (g_taskComps[i].run)                  <span class="comment">// 判断时间片标志</span></span><br><span class="line">        &#123;</span><br><span class="line">            g_taskComps[i].run = <span class="number">0</span>;              <span class="comment">// 标志清零</span></span><br><span class="line">            g_taskComps[i].pTaskFuncCb();        <span class="comment">// 执行调度业务功能模块</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">* @brief 在定时器中断服务函数中被间接调用，设置时间片标记，</span></span><br><span class="line"><span class="comment">         需要定时器1ms产生1次中断</span></span><br><span class="line"><span class="comment">* @param</span></span><br><span class="line"><span class="comment">* @return </span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">TaskScheduleCb</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint8_t</span> i = <span class="number">0</span>; i &lt; TASK_NUM_MAX; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (g_taskComps[i].timCount)</span><br><span class="line">        &#123;</span><br><span class="line">            g_taskComps[i].timCount--;</span><br><span class="line">            <span class="keyword">if</span> (g_taskComps[i].timCount == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                g_taskComps[i].run = <span class="number">1</span>;</span><br><span class="line">                g_taskComps[i].timCount = g_taskComps[i].timRload;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-热敏电阻"><a href="#8-热敏电阻" class="headerlink" title="8.热敏电阻"></a><strong>8.热敏电阻</strong></h2><h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a><strong>1. 简介</strong></h3><blockquote><p><strong>热敏电阻（Thermistor）</strong>是一种电阻值随温度变化而显著变化的电阻器件，主要分为：</p><ul><li><strong>负温度系数（NTC）</strong>：温度升高，阻值减小。</li><li><strong>正温度系数（PTC）</strong>：温度升高，阻值增大。</li></ul><p>我们使用的是<strong>负温度系数（NTC）</strong>热敏电阻，其阻值随温度升高而减小，反之亦然。</p></blockquote><h4 id="1-工作原理"><a href="#1-工作原理" class="headerlink" title="1. 工作原理"></a><strong>1. 工作原理</strong></h4><blockquote><h4 id="2-1-电路设计"><a href="#2-1-电路设计" class="headerlink" title="2.1 电路设计"></a><strong>2.1 电路设计</strong></h4><ul><li><strong>分压电路</strong>：热敏电阻与一个限流电阻（通常为1kΩ）串联，形成分压电路。</li><li><strong>ADC采集</strong>：通过ADC采集热敏电阻两端的电压值，转换为数字信号。</li></ul><h4 id="2-2-温度与阻值关系"><a href="#2-2-温度与阻值关系" class="headerlink" title="2.2 温度与阻值关系"></a><strong>2.2 温度与阻值关系</strong></h4><ul><li><strong>25摄氏度时</strong>：NTC热敏电阻的阻值为10kΩ。</li><li><strong>阻值变化</strong>：温度升高，阻值下降；温度降低，阻值上升。</li><li><strong>测量范围</strong>：-55°C到100°C，分辨率为1°C，精度为±1%。</li></ul></blockquote><h4 id="2-电压转换"><a href="#2-电压转换" class="headerlink" title="2. 电压转换"></a><strong>2. 电压转换</strong></h4><blockquote><h4 id="3-1-分压公式"><a href="#3-1-分压公式" class="headerlink" title="3.1 分压公式"></a><strong>3.1 分压公式</strong></h4><script type="math/tex; mode=display">V_{\text{adc}} = V_{\text{cc}} \times \frac{R_{\text{therm}}}{R_{\text{fixed}} + R_{\text{therm}}}</script><p>其中：</p><ul><li><code>R_therm</code>是热敏电阻的阻值。</li><li><code>R_fixed</code>是固定限流电阻。</li></ul><h4 id="3-2-示例计算"><a href="#3-2-示例计算" class="headerlink" title="3.2 示例计算"></a><strong>3.2 示例计算</strong></h4><ul><li><p><strong>25°C时</strong>：</p><script type="math/tex; mode=display">R_{\text{therm}} = 10kΩ</script><script type="math/tex; mode=display">V_{\text{adc}} = 3.3V \times \frac{10k}{10k + 10k} = 1.65V</script></li></ul><ul><li><p><strong>温度升高至较高温度（例如5kΩ）</strong>：</p><script type="math/tex; mode=display">R_{\text{therm}} = 5kΩ</script><script type="math/tex; mode=display">V_{\text{adc}} = 3.3V \times \frac{5k}{10k + 5k} = 1.1V</script></li></ul></blockquote><h4 id="3-温度计算"><a href="#3-温度计算" class="headerlink" title="3. 温度计算"></a><strong>3. 温度计算</strong></h4><blockquote><h4 id="4-1-直接映射"><a href="#4-1-直接映射" class="headerlink" title="4.1 直接映射"></a><strong>4.1 直接映射</strong></h4><ul><li><strong>阻值与温度表</strong>：通过预先测量不同温度下的阻值，建立阻值与温度的对应关系表。</li><li><strong>代码实现</strong>：在代码中直接将ADC读取的数值映射到相应的温度值，避免实时计算，节省CPU资源。</li></ul><h4 id="4-2-精度提升"><a href="#4-2-精度提升" class="headerlink" title="4.2 精度提升"></a><strong>4.2 精度提升</strong></h4><ul><li><p><strong>线性插值</strong>：为了实现更高的温度精度（如0.1°C），在相邻温度区间内进行线性插值计算。</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501190041723.png" alt="image-20241201203039214"></p><p>已知：</p><ul><li>28°C 对应 ADC 值 1913</li><li>29°C 对应 ADC 值 1869</li></ul><p>目标 ADC 值为 1889（写代码会用到此公式）：</p><script type="math/tex; mode=display">\text{温度} = 28 + \frac{(1889 - 1869)}{(1913 - 1869)} \times 1 \approx 28.45°C</script></li></ul></blockquote><h3 id="2-代码实现-2"><a href="#2-代码实现-2" class="headerlink" title="2. 代码实现"></a>2. 代码实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;gd32f30x.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;delay.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// NTC 热敏电阻 ADC 值查找表</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">uint16_t</span> g_ntcAdcTable[] = </span><br><span class="line">&#123;</span><br><span class="line"><span class="number">3123</span>, <span class="number">3089</span>, <span class="number">3051</span>, <span class="number">3013</span>, <span class="number">2973</span>, <span class="number">2933</span>, <span class="number">2893</span>, <span class="number">2852</span>, <span class="number">2810</span>, <span class="number">2767</span>,     <span class="comment">//0   ~   9℃</span></span><br><span class="line"><span class="number">2720</span>, <span class="number">2681</span>, <span class="number">2637</span>, <span class="number">2593</span>, <span class="number">2548</span>, <span class="number">2503</span>, <span class="number">2458</span>, <span class="number">2412</span>, <span class="number">2367</span>, <span class="number">2321</span>,     <span class="comment">//10  ~  19℃</span></span><br><span class="line"><span class="number">2275</span>, <span class="number">2230</span>, <span class="number">2184</span>, <span class="number">2138</span>, <span class="number">2093</span>, <span class="number">2048</span>, <span class="number">2002</span>, <span class="number">1958</span>, <span class="number">1913</span>, <span class="number">1869</span>,     <span class="comment">//20  ~  29℃</span></span><br><span class="line"><span class="number">1825</span>, <span class="number">1782</span>, <span class="number">1739</span>, <span class="number">1697</span>, <span class="number">1655</span>, <span class="number">1614</span>, <span class="number">1573</span>, <span class="number">1533</span>, <span class="number">1494</span>, <span class="number">1455</span>,     <span class="comment">//30  ~  39℃</span></span><br><span class="line"><span class="number">1417</span>, <span class="number">1380</span>, <span class="number">1343</span>, <span class="number">1307</span>, <span class="number">1272</span>, <span class="number">1237</span>, <span class="number">1203</span>, <span class="number">1170</span>, <span class="number">1138</span>, <span class="number">1106</span>,     <span class="comment">//40  ~  49℃</span></span><br><span class="line"><span class="number">1081</span>, <span class="number">1045</span>, <span class="number">1016</span>, <span class="number">987</span>,  <span class="number">959</span>,  <span class="number">932</span>,  <span class="number">905</span>,  <span class="number">879</span>,  <span class="number">854</span>,  <span class="number">829</span>,      <span class="comment">//50  ~  59℃</span></span><br><span class="line"><span class="number">806</span>,  <span class="number">782</span>,  <span class="number">760</span>,  <span class="number">738</span>,  <span class="number">716</span>,  <span class="number">696</span>,  <span class="number">675</span>,  <span class="number">656</span>,  <span class="number">637</span>,  <span class="number">618</span>,      <span class="comment">//60  ~  69℃</span></span><br><span class="line"><span class="number">600</span>,  <span class="number">583</span>,  <span class="number">566</span>,  <span class="number">550</span>,  <span class="number">534</span>,  <span class="number">518</span>,  <span class="number">503</span>,  <span class="number">489</span>,  <span class="number">475</span>,  <span class="number">461</span>,      <span class="comment">//70  ~  79℃</span></span><br><span class="line"><span class="number">448</span>,  <span class="number">435</span>,  <span class="number">422</span>,  <span class="number">410</span>,  <span class="number">398</span>,  <span class="number">387</span>,  <span class="number">376</span>,  <span class="number">365</span>,  <span class="number">355</span>,  <span class="number">345</span>,      <span class="comment">//80  ~  89℃</span></span><br><span class="line"><span class="number">335</span>,  <span class="number">326</span>,  <span class="number">316</span>,  <span class="number">308</span>,  <span class="number">299</span>,  <span class="number">290</span>,  <span class="number">283</span>,  <span class="number">274</span>,  <span class="number">267</span>,  <span class="number">259</span>,      <span class="comment">//90  ~  99℃</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NTC_TABLE_SIZE         (sizeof(g_ntcAdcTable) / sizeof(g_ntcAdcTable[0]))</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INDEX_TO_TEMP(index)   ((int32_t)index)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFF_NUM_SIZE 11</span></span><br><span class="line"><span class="type">static</span> <span class="type">uint16_t</span> g_temp10MplBuf[BUFF_NUM_SIZE];</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">float</span> g_tempData;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">GPIOInit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">rcu_periph_clock_enable(RCU_GPIOC);</span><br><span class="line">gpio_init(GPIOC, GPIO_MODE_AIN, GPIO_OSPEED_10MHZ, GPIO_PIN_3);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">ADCInit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 使能时钟；*/</span></span><br><span class="line">rcu_periph_clock_enable(RCU_ADC0);</span><br><span class="line"><span class="comment">/* 设置分频系数；*/</span></span><br><span class="line">rcu_adc_clock_config(RCU_CKADC_CKAPB2_DIV6);  <span class="comment">// 6分频，120MHz / 6 = 20MHz</span></span><br><span class="line"><span class="comment">/* 设置独立模式；*/</span></span><br><span class="line">adc_mode_config(ADC_MODE_FREE);</span><br><span class="line"><span class="comment">/* 设置连续模式；*/</span> </span><br><span class="line">adc_special_function_config(ADC0, ADC_CONTINUOUS_MODE, ENABLE);</span><br><span class="line"><span class="comment">/* 设置数据对齐；*/</span></span><br><span class="line">adc_data_alignment_config(ADC0, ADC_DATAALIGN_RIGHT);</span><br><span class="line"><span class="comment">/* 设置转换通道个数；*/</span> </span><br><span class="line">adc_channel_length_config(ADC0, ADC_REGULAR_CHANNEL, <span class="number">1</span>);</span><br><span class="line"><span class="comment">/* 设置转换哪一个通道以及所处序列位置；*/</span> </span><br><span class="line">adc_regular_channel_config(ADC0, <span class="number">0</span>, ADC_CHANNEL_13, ADC_SAMPLETIME_239POINT5);  <span class="comment">// PC3对应通道13，放在序列寄存器的0序列中，239.5个周期</span></span><br><span class="line"><span class="comment">/* 设置选择哪一个外部触发源；*/</span> </span><br><span class="line">adc_external_trigger_source_config(ADC0, ADC_REGULAR_CHANNEL, ADC0_1_2_EXTTRIG_REGULAR_NONE);</span><br><span class="line"><span class="comment">/* 使能外部触发；*/</span> </span><br><span class="line">adc_external_trigger_config(ADC0, ADC_REGULAR_CHANNEL, ENABLE);</span><br><span class="line"><span class="comment">/* 使能硬件滤波；*/</span> </span><br><span class="line">adc_oversample_mode_config(ADC0, ADC_OVERSAMPLING_ALL_CONVERT, ADC_OVERSAMPLING_SHIFT_4B, ADC_OVERSAMPLING_RATIO_MUL16);</span><br><span class="line">adc_oversample_mode_enable(ADC0);</span><br><span class="line"><span class="comment">/* 使能ADC；*/</span> </span><br><span class="line">adc_enable(ADC0);</span><br><span class="line"><span class="comment">/* 内部校准；*/</span> </span><br><span class="line">DelayNus(<span class="number">50</span>);</span><br><span class="line">adc_calibration_enable(ADC0);</span><br><span class="line">adc_software_trigger_enable(ADC0, ADC_REGULAR_CHANNEL);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">* @brief 算术平均滤波</span></span><br><span class="line"><span class="comment">* @param arr，数组首地址</span></span><br><span class="line"><span class="comment">* @param len，元素个数</span></span><br><span class="line"><span class="comment">* @return 平均运算结果</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">static</span> <span class="type">uint16_t</span> <span class="title function_">ArithAvgFltr</span><span class="params">(<span class="type">uint16_t</span> *arr, <span class="type">uint32_t</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint32_t</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">uint32_t</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line">sum += arr[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> (<span class="type">uint16_t</span>)(sum / len);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int32_t</span> <span class="title function_">DescBinarySearch</span><span class="params">(<span class="type">const</span> <span class="type">uint16_t</span> *arr, <span class="type">int32_t</span> size, <span class="type">uint16_t</span> key)</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int32_t</span> left = <span class="number">0</span>;</span><br><span class="line"><span class="type">int32_t</span> right = size - <span class="number">1</span>;</span><br><span class="line"><span class="type">int32_t</span> mid = <span class="number">0</span>;</span><br><span class="line"><span class="type">int32_t</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(left &lt;= right)</span><br><span class="line">&#123;</span><br><span class="line">mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(key &gt;= arr[mid])</span><br><span class="line">&#123;</span><br><span class="line">right = mid - <span class="number">1</span>;</span><br><span class="line">index = mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">left = mid + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> index;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">* @brief qsort函数调用的回调函数，比较规则，降序排列</span></span><br><span class="line"><span class="comment">* @param *_a，对应数组元素</span></span><br><span class="line"><span class="comment">* @param *_b，对应数组元素</span></span><br><span class="line"><span class="comment">* @return 比较结果</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">CmpCb</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *_a, <span class="type">const</span> <span class="type">void</span> *_b)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint16_t</span>* a = (<span class="type">uint16_t</span>*)_a;</span><br><span class="line"><span class="type">uint16_t</span>* b = (<span class="type">uint16_t</span>*)_b;</span><br><span class="line"><span class="type">int8_t</span> val = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(*a &lt; *b)</span><br><span class="line">&#123;</span><br><span class="line">val = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(*a &gt; *b)</span><br><span class="line">&#123;</span><br><span class="line">val = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">val = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">* @brief 中位值平均滤波</span></span><br><span class="line"><span class="comment">* @param arr，数组首地址</span></span><br><span class="line"><span class="comment">* @param len，元素个数，需要大于等于3个</span></span><br><span class="line"><span class="comment">* @return 平均运算结果</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">static</span> <span class="type">uint16_t</span> <span class="title function_">MedianAvgFltr</span><span class="params">(<span class="type">uint16_t</span> *arr, <span class="type">uint32_t</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">qsort(arr, len, <span class="keyword">sizeof</span>(<span class="type">uint16_t</span>), CmpCb);</span><br><span class="line"><span class="keyword">return</span> ArithAvgFltr(&amp;arr[<span class="number">1</span>], len - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint16_t</span> <span class="title function_">Get_ADCVal</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (!adc_flag_get(ADC0, ADC_FLAG_EOC));</span><br><span class="line"><span class="keyword">return</span> adc_regular_data_read(ADC0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">uint16_t</span> <span class="title function_">ADCtoTemp10Mpl</span><span class="params">(<span class="type">uint16_t</span> ADCVal)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 二分查找 找温度（下标）</span></span><br><span class="line"><span class="type">int32_t</span> index = DescBinarySearch(g_ntcAdcTable, NTC_TABLE_SIZE, ADCVal);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(index == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 表示温度为0</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算 </span></span><br><span class="line"><span class="type">uint16_t</span> Temp10Mpl = INDEX_TO_TEMP(index - <span class="number">1</span>) * <span class="number">10</span> + (g_ntcAdcTable[index - <span class="number">1</span>] - ADCVal) / (g_ntcAdcTable[index - <span class="number">1</span>] - g_ntcAdcTable[index]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> Temp10Mpl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">PushDataToBuf</span><span class="params">(<span class="type">uint16_t</span> temp10Mpl)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">static</span> <span class="type">uint16_t</span> s_index = <span class="number">0</span>;</span><br><span class="line">g_temp10MplBuf[s_index++] = temp10Mpl; </span><br><span class="line">s_index %= BUFF_NUM_SIZE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">* @brief NTC驱动初始化</span></span><br><span class="line"><span class="comment">* @param</span></span><br><span class="line"><span class="comment">* @return </span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Temp_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">GPIOInit();</span><br><span class="line">ADCInit();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">* @brief 触发驱动转换温度传感器数据</span></span><br><span class="line"><span class="comment">* @param</span></span><br><span class="line"><span class="comment">* @return </span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Temp_SensorProc</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">static</span> <span class="type">uint16_t</span> s_convertNum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获得ADC采集数据</span></span><br><span class="line"><span class="type">uint16_t</span> ADCVal = Get_ADCVal();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将ADC采集数据转换为十倍温度值</span></span><br><span class="line"><span class="type">uint16_t</span> temp10Mpl = ADCtoTemp10Mpl(ADCVal);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将十倍温度值放入Buffer中</span></span><br><span class="line">PushDataToBuf(temp10Mpl);</span><br><span class="line"></span><br><span class="line">s_convertNum++;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 采集小于3次直接用第一次采集数据代替</span></span><br><span class="line"><span class="keyword">if</span>(s_convertNum &lt; <span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line">g_tempData = g_temp10MplBuf[<span class="number">0</span>] / <span class="number">10.0f</span>;</span><br><span class="line"><span class="comment">//return ;// 少加return 直接触发</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s_convertNum &gt; BUFF_NUM_SIZE)</span><br><span class="line">&#123;</span><br><span class="line">s_convertNum = BUFF_NUM_SIZE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 快速排序 + 中值滤波 </span></span><br><span class="line">g_tempData = MedianAvgFltr(g_temp10MplBuf, s_convertNum) / <span class="number">10.0f</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">* @brief 获取温度传感器数据</span></span><br><span class="line"><span class="comment">* @param</span></span><br><span class="line"><span class="comment">* @return 温度数据，小数</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">float</span> <span class="title function_">Get_TempData</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> g_tempData;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-湿敏电阻"><a href="#9-湿敏电阻" class="headerlink" title="9.湿敏电阻"></a>9.湿敏电阻</h2><h3 id="1-简介-1"><a href="#1-简介-1" class="headerlink" title="1. 简介"></a><strong>1. 简介</strong></h3><p><strong>湿敏电阻（Humidity Sensitive Resistor）</strong>是一种对湿度变化敏感的电阻器件。由于材料特性的原因，为了防止极化和电解作用，湿敏电阻需要<strong>交流电源驱动</strong>。相比于热敏电阻，湿敏电阻的驱动电路更为复杂。</p><h4 id="1-相对湿度与绝对湿度"><a href="#1-相对湿度与绝对湿度" class="headerlink" title="1. 相对湿度与绝对湿度"></a><strong>1. 相对湿度与绝对湿度</strong></h4><p>在日常生活中，当我们说“湿度是50”，其实指的是<strong>相对湿度</strong>。相对湿度是指在某一特定温度下，空气中实际含有的水蒸气密度与该温度下水蒸气的饱和密度之比，通常以百分比表示。因此，“50”代表<strong>50%</strong>。</p><p>相对湿度与绝对湿度的区别如下：</p><ul><li><strong>相对湿度</strong>：空气中水蒸气的实际密度与饱和密度之比，表示为百分比。</li><li><strong>绝对湿度</strong>：在一定温度和压力条件下，空气中水蒸气的最大容量，通常以克每立方米（g/m³）表示。</li></ul><h4 id="2-驱动电路设计"><a href="#2-驱动电路设计" class="headerlink" title="2. 驱动电路设计"></a><strong>2. 驱动电路设计</strong></h4><p>驱动电路简易框图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501190042276.png" alt="image-20241201210622103"></p><p>以下是湿敏电阻的驱动电路设计要点：</p><ul><li><strong>驱动引脚</strong>：使用三个引脚，其中<code>PB0</code>和<code>PB1</code>用于交流电源驱动。具体配置如下：<ul><li>当<code>PB0</code>为高电平时，<code>PB1</code>为低电平。</li><li>当<code>PB0</code>为低电平时，<code>PB1</code>为高电平。</li></ul></li><li><strong>ADC采集端口</strong>：<code>PC4</code>为ADC采集端口，用于读取湿敏电阻上的电压值。</li><li><strong>电阻配置</strong>：<ul><li>湿敏电阻串联一个470Ω的电阻。</li><li>并联一个1MΩ的电阻。</li><li>使用39kΩ的分压电阻。</li></ul></li><li><strong>驱动频率</strong>：<strong><code>厂商建议使用1kHz的交流驱动频率</code></strong>，即每个周期1毫秒，高电平500微秒，低电平500微秒。但在实际项目中，为了降低频率需求，我们选择<strong>250Hz</strong>，即每个周期4毫秒，高电平2毫秒，低电平2毫秒。这一频率足以满足数据采集需求，同时减少定时器中断的负担。</li></ul><h4 id="3-驱动电路工作原理"><a href="#3-驱动电路工作原理" class="headerlink" title="3. 驱动电路工作原理"></a><strong>3. 驱动电路工作原理</strong></h4><p>在驱动电路中，通过<code>PB0</code>和<code>PB1</code>的高低电平交替，产生交流信号驱动湿敏电阻。<code>PC4</code>端口通过ADC采集湿敏电阻两端的电压值，并将其转换为数字信号用于后续处理。</p><p>湿度数据的计算</p><blockquote><h4 id="1：根据温度获取对应湿度的ADC数值"><a href="#1：根据温度获取对应湿度的ADC数值" class="headerlink" title="1：根据温度获取对应湿度的ADC数值"></a><strong>1：根据温度获取对应湿度的ADC数值</strong></h4><p>假设我们获得的温度数据是18摄氏度，正好位于15°C和20°C之间。湿度的间隔为5%，同样，温度的间隔也是5°C。</p><p><strong>计算过程</strong>：</p><ol><li><p>确定温度行：</p><ul><li><p>温度数据18°C位于15°C和20°C之间。</p></li><li><p>温度行索引计算：</p><script type="math/tex; mode=display">text{temp\_row} = \frac{18}{5} = 3.6 \approx 3</script><p>（向下取整，索引从0开始，表示15°C对应第3行）</p></li></ul></li><li><p>获取15°C和20°C下特定湿度的ADC数值：</p><ul><li>例如，20%湿度在15°C下对应的ADC数值为154，在20°C下为168。</li></ul></li><li><p><strong>线性插值计算18°C下20%湿度的ADC数值</strong>：</p><script type="math/tex; mode=display">\text{ADC}_{18} = \text{ADC}_{15} + \left( \frac{18 - 15}{20 - 15} \right) \times (\text{ADC}_{20} - \text{ADC}_{15}) = 154 + \left( \frac{3}{5} \right) \times (168 - 154) = 154 + 10.8 = 164.8 \approx 165</script><p>这样，我们得到18°C下20%湿度对应的ADC数值约为165。</p></li></ol><h4 id="2：根据ADC数值计算湿度"><a href="#2：根据ADC数值计算湿度" class="headerlink" title="2：根据ADC数值计算湿度"></a><strong>2：根据ADC数值计算湿度</strong></h4><ol><li><p>二分查找法定位ADC数值：</p><ul><li>使用二分查找法在对应温度行的ADC数值数组中查找目标ADC值。</li><li>假设目标ADC值为170，位于15°C下20%湿度（ADC=154）和20°C下20%湿度（ADC=168）之间。</li></ul></li><li><p>线性插值计算湿度：</p><script type="math/tex; mode=display">\text{湿度} = \text{湿度}_{\text{low}} + \left( \frac{\text{ADC}_{\text{low}} - \text{ADC}_{\text{current}}}{\text{ADC}_{\text{low}} - \text{ADC}_{\text{high}}} \right) \times (\text{湿度}_{\text{high}} - \text{湿度}_{\text{low}})</script></li></ol><p>   示例：</p><script type="math/tex; mode=display">\text{ADC}_{\text{low}} = 168</script><p>   20°C下20%湿度</p><script type="math/tex; mode=display">   \text{ADC}_{\text{high}} = 154</script><p>   15°C下20%湿度</p><script type="math/tex; mode=display">   \text{ADC}_{\text{current}} = 170</script><script type="math/tex; mode=display">   \text{湿度} = 20\% + \left( \frac{168 - 170}{168 - 154} \right) \times (25\% - 20\%) = 20\% + \left( \frac{-2}{14} \right) \times 5\% \approx 20\% - 0.714\% \approx 19.3\%</script></blockquote><h3 id="2-代码实现-3"><a href="#2-代码实现-3" class="headerlink" title="2.代码实现"></a>2.代码实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;gd32f30x.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;led_drv.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">uint16_t</span> g_adcVal;<span class="comment">// 全局变量，用于存储ADC转换的数值</span></span><br><span class="line"><span class="type">static</span> <span class="type">uint8_t</span> g_humiData;<span class="comment">// 全局变量，用于存储湿度值</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HUMI_LEVEL_NUM 18<span class="comment">// 湿度等级数量</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不同温度下的湿度对应ADC值表</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">uint16_t</span> g_rhADCVal[][HUMI_LEVEL_NUM] = &#123;</span><br><span class="line"><span class="comment">//         10%RH  15%RH  20%RH  25%RH  30%RH  35%RH  40%RH  45%RH  50%RH  55%RH  60%RH  65%RH  70%RH  75%RH  80%RH  85%RH  90%RH  95%RH               </span></span><br><span class="line"><span class="comment">/* 0℃*/</span>  &#123;<span class="number">154</span>,   <span class="number">155</span>,   <span class="number">160</span>,   <span class="number">165</span>,   <span class="number">177</span>,   <span class="number">204</span>,   <span class="number">257</span>,   <span class="number">354</span>,   <span class="number">516</span>,   <span class="number">803</span>,   <span class="number">1189</span>,  <span class="number">1633</span>,  <span class="number">2101</span>,  <span class="number">2579</span>,  <span class="number">2919</span>,  <span class="number">3204</span>,  <span class="number">3434</span>,  <span class="number">3595</span>,&#125;,</span><br><span class="line"><span class="comment">/* 5℃*/</span>  &#123;<span class="number">154</span>,   <span class="number">155</span>,   <span class="number">161</span>,   <span class="number">168</span>,   <span class="number">186</span>,   <span class="number">223</span>,   <span class="number">296</span>,   <span class="number">429</span>,   <span class="number">650</span>,   <span class="number">985</span>,   <span class="number">1408</span>,  <span class="number">1874</span>,  <span class="number">2330</span>,  <span class="number">2796</span>,  <span class="number">3113</span>,  <span class="number">3356</span>,  <span class="number">3571</span>,  <span class="number">3702</span>,&#125;,</span><br><span class="line"><span class="comment">/*10℃*/</span>  &#123;<span class="number">154</span>,   <span class="number">156</span>,   <span class="number">164</span>,   <span class="number">175</span>,   <span class="number">199</span>,   <span class="number">250</span>,   <span class="number">342</span>,   <span class="number">508</span>,   <span class="number">775</span>,   <span class="number">1154</span>,  <span class="number">1633</span>,  <span class="number">2127</span>,  <span class="number">2540</span>,  <span class="number">2945</span>,  <span class="number">3236</span>,  <span class="number">3456</span>,  <span class="number">3619</span>,  <span class="number">3736</span>,&#125;,</span><br><span class="line"><span class="comment">/*15℃*/</span>  &#123;<span class="number">154</span>,   <span class="number">157</span>,   <span class="number">168</span>,   <span class="number">183</span>,   <span class="number">217</span>,   <span class="number">284</span>,   <span class="number">410</span>,   <span class="number">619</span>,   <span class="number">941</span>,   <span class="number">1367</span>,  <span class="number">1835</span>,  <span class="number">2330</span>,  <span class="number">2750</span>,  <span class="number">3113</span>,  <span class="number">3370</span>,  <span class="number">3555</span>,  <span class="number">3676</span>,  <span class="number">3780</span>,&#125;,</span><br><span class="line"><span class="comment">/*20℃*/</span>  &#123;<span class="number">155</span>,   <span class="number">158</span>,   <span class="number">176</span>,   <span class="number">197</span>,   <span class="number">237</span>,   <span class="number">320</span>,   <span class="number">477</span>,   <span class="number">750</span>,   <span class="number">1121</span>,  <span class="number">1604</span>,  <span class="number">2075</span>,  <span class="number">2540</span>,  <span class="number">2919</span>,  <span class="number">3236</span>,  <span class="number">3442</span>,  <span class="number">3611</span>,  <span class="number">3736</span>,  <span class="number">3825</span>,&#125;,</span><br><span class="line"><span class="comment">/*25℃*/</span>  &#123;<span class="number">155</span>,   <span class="number">160</span>,   <span class="number">183</span>,   <span class="number">210</span>,   <span class="number">264</span>,   <span class="number">375</span>,   <span class="number">579</span>,   <span class="number">901</span>,   <span class="number">1338</span>,  <span class="number">1855</span>,  <span class="number">2298</span>,  <span class="number">2727</span>,  <span class="number">3055</span>,  <span class="number">3342</span>,  <span class="number">3539</span>,  <span class="number">3676</span>,  <span class="number">3780</span>,  <span class="number">3853</span>,&#125;,</span><br><span class="line"><span class="comment">/*30℃*/</span>  &#123;<span class="number">155</span>,   <span class="number">161</span>,   <span class="number">191</span>,   <span class="number">230</span>,   <span class="number">301</span>,   <span class="number">451</span>,   <span class="number">696</span>,   <span class="number">1062</span>,  <span class="number">1537</span>,  <span class="number">2075</span>,  <span class="number">2502</span>,  <span class="number">2894</span>,  <span class="number">3204</span>,  <span class="number">3427</span>,  <span class="number">3595</span>,  <span class="number">3719</span>,  <span class="number">3807</span>,  <span class="number">3871</span>,&#125;,</span><br><span class="line"><span class="comment">/*35℃*/</span>  &#123;<span class="number">156</span>,   <span class="number">164</span>,   <span class="number">202</span>,   <span class="number">250</span>,   <span class="number">344</span>,   <span class="number">508</span>,   <span class="number">803</span>,   <span class="number">1226</span>,  <span class="number">1728</span>,  <span class="number">2238</span>,  <span class="number">2705</span>,  <span class="number">3055</span>,  <span class="number">3302</span>,  <span class="number">3501</span>,  <span class="number">3652</span>,  <span class="number">3754</span>,  <span class="number">3834</span>,  <span class="number">3899</span>,&#125;,</span><br><span class="line"><span class="comment">/*40℃*/</span>  &#123;<span class="number">156</span>,   <span class="number">166</span>,   <span class="number">214</span>,   <span class="number">284</span>,   <span class="number">397</span>,   <span class="number">619</span>,   <span class="number">985</span>,   <span class="number">1429</span>,  <span class="number">1936</span>,  <span class="number">2430</span>,  <span class="number">2820</span>,  <span class="number">3143</span>,  <span class="number">3370</span>,  <span class="number">3547</span>,  <span class="number">3685</span>,  <span class="number">3780</span>,  <span class="number">3853</span>,  <span class="number">3909</span>,&#125;,</span><br><span class="line"><span class="comment">/*45℃*/</span>  &#123;<span class="number">157</span>,   <span class="number">171</span>,   <span class="number">237</span>,   <span class="number">315</span>,   <span class="number">477</span>,   <span class="number">750</span>,   <span class="number">1154</span>,  <span class="number">1604</span>,  <span class="number">2101</span>,  <span class="number">2540</span>,  <span class="number">2945</span>,  <span class="number">3236</span>,  <span class="number">3442</span>,  <span class="number">3603</span>,  <span class="number">3728</span>,  <span class="number">3816</span>,  <span class="number">3871</span>,  <span class="number">3918</span>,&#125;,</span><br><span class="line"><span class="comment">/*50℃*/</span>  &#123;<span class="number">158</span>,   <span class="number">174</span>,   <span class="number">253</span>,   <span class="number">354</span>,   <span class="number">545</span>,   <span class="number">865</span>,   <span class="number">1328</span>,  <span class="number">1835</span>,  <span class="number">2298</span>,  <span class="number">2727</span>,  <span class="number">3055</span>,  <span class="number">3329</span>,  <span class="number">3516</span>,  <span class="number">3660</span>,  <span class="number">3762</span>,  <span class="number">3843</span>,  <span class="number">3895</span>,  <span class="number">3938</span>,&#125;,</span><br><span class="line"><span class="comment">/*55℃*/</span>  &#123;<span class="number">159</span>,   <span class="number">179</span>,   <span class="number">278</span>,   <span class="number">401</span>,   <span class="number">634</span>,   <span class="number">941</span>,   <span class="number">1524</span>,  <span class="number">2027</span>,  <span class="number">2502</span>,  <span class="number">2844</span>,  <span class="number">3173</span>,  <span class="number">3398</span>,  <span class="number">3563</span>,  <span class="number">3693</span>,  <span class="number">3789</span>,  <span class="number">3862</span>,  <span class="number">3909</span>,  <span class="number">3947</span>,&#125;,</span><br><span class="line"><span class="comment">/*60℃*/</span>  &#123;<span class="number">160</span>,   <span class="number">184</span>,   <span class="number">301</span>,   <span class="number">457</span>,   <span class="number">739</span>,   <span class="number">1035</span>,  <span class="number">1711</span>,  <span class="number">2209</span>,  <span class="number">2662</span>,  <span class="number">2999</span>,  <span class="number">3275</span>,  <span class="number">3456</span>,  <span class="number">3611</span>,  <span class="number">3728</span>,  <span class="number">3807</span>,  <span class="number">3871</span>,  <span class="number">3918</span>,  <span class="number">3957</span>,&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TEMP_INTERVAL_VAL   5   <span class="comment">// 温度间隔值 (°C)</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HUMI_INTERVAL_VAL   5   <span class="comment">// 湿度间隔值 (%RH)</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HUMI_MAX_VAL        95  <span class="comment">// 最大湿度值 (%RH)</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HUMI_MIN_VAL        10  <span class="comment">// 最小湿度值 (%RH)</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TEMP_MAX_VAL        60  <span class="comment">// 最大温度值 (°C)</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">GPIOInit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">rcu_periph_clock_enable(RCU_GPIOC);</span><br><span class="line">gpio_init(GPIOC, GPIO_MODE_AIN, GPIO_OSPEED_MAX, GPIO_PIN_4);    <span class="comment">// ADC通道14</span></span><br><span class="line"></span><br><span class="line">rcu_periph_clock_enable(RCU_GPIOB);</span><br><span class="line">gpio_init(GPIOB, GPIO_MODE_OUT_PP, GPIO_OSPEED_50MHZ, GPIO_PIN_0 | GPIO_PIN_1);  <span class="comment">// 交流电源激励</span></span><br><span class="line">gpio_bit_write(GPIOB, GPIO_PIN_0, (bit_status)<span class="number">1</span>);</span><br><span class="line">gpio_bit_write(GPIOB, GPIO_PIN_1, (bit_status)<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">ADCInit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 使能时钟；*/</span></span><br><span class="line">rcu_periph_clock_enable(RCU_ADC1);</span><br><span class="line"><span class="comment">/* 设置分频系数；*/</span></span><br><span class="line">rcu_adc_clock_config(RCU_CKADC_CKAPB2_DIV6);  <span class="comment">// 6分频，120MHz / 6 = 20MHz</span></span><br><span class="line"><span class="comment">/* 设置独立模式；*/</span></span><br><span class="line">adc_mode_config(ADC_MODE_FREE);</span><br><span class="line"><span class="comment">/* 设置单次模式；*/</span> </span><br><span class="line">adc_special_function_config(ADC1, ADC_CONTINUOUS_MODE, DISABLE);</span><br><span class="line"><span class="comment">/* 设置数据对齐；*/</span></span><br><span class="line">adc_data_alignment_config(ADC1, ADC_DATAALIGN_RIGHT);</span><br><span class="line"><span class="comment">/* 设置转换通道个数；*/</span> </span><br><span class="line">adc_channel_length_config(ADC1, ADC_REGULAR_CHANNEL, <span class="number">1</span>);</span><br><span class="line"><span class="comment">/* 设置转换哪一个通道以及所处序列位置；*/</span> </span><br><span class="line">adc_regular_channel_config(ADC1, <span class="number">0</span>, ADC_CHANNEL_14, ADC_SAMPLETIME_71POINT5);  <span class="comment">// PC4对应通道14，放在序列寄存器的0序列中，71.5个周期</span></span><br><span class="line"><span class="comment">/* 设置选择哪一个外部触发源；*/</span> </span><br><span class="line">adc_external_trigger_source_config(ADC1, ADC_REGULAR_CHANNEL, ADC0_1_2_EXTTRIG_REGULAR_NONE);</span><br><span class="line"><span class="comment">/* 使能外部触发；*/</span> </span><br><span class="line">adc_external_trigger_config(ADC1, ADC_REGULAR_CHANNEL, ENABLE);</span><br><span class="line"><span class="comment">/* 使能硬件滤波；*/</span> </span><br><span class="line">adc_oversample_mode_config(ADC1, ADC_OVERSAMPLING_ALL_CONVERT, ADC_OVERSAMPLING_SHIFT_4B, ADC_OVERSAMPLING_RATIO_MUL16);</span><br><span class="line">adc_oversample_mode_enable(ADC1);</span><br><span class="line"><span class="comment">/* 使能ADC；*/</span> </span><br><span class="line">adc_enable(ADC1);</span><br><span class="line"><span class="comment">/* 内部校准；*/</span> </span><br><span class="line">DelayNus(<span class="number">50</span>);</span><br><span class="line">adc_calibration_enable(ADC1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">TimerInit</span><span class="params">(<span class="type">uint32_t</span> periodUs)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 使能定时器时钟；*/</span></span><br><span class="line">rcu_periph_clock_enable(RCU_TIMER4);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 复位定时器；*/</span></span><br><span class="line">timer_deinit(TIMER4);</span><br><span class="line"></span><br><span class="line">timer_parameter_struct timerInitPara;</span><br><span class="line">timer_struct_para_init(&amp;timerInitPara);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 设置预分频器值；*/</span></span><br><span class="line">timerInitPara.prescaler = <span class="number">120</span> - <span class="number">1</span>;     <span class="comment">// 输入给计数器的时钟频率为1Mhz，周期1us</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 设置自动重装载值；*/</span> </span><br><span class="line">timerInitPara.period = periodUs - <span class="number">1</span>;</span><br><span class="line">timer_init(TIMER4, &amp;timerInitPara);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使能定时器的计数更新中断；*/</span></span><br><span class="line">timer_interrupt_enable(TIMER4, TIMER_INT_UP);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使能定时器中断和优先级；*/</span></span><br><span class="line">nvic_irq_enable(TIMER4_IRQn, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使能定时器；*/</span> </span><br><span class="line">timer_enable(TIMER4);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">* @brief 湿度传感器驱动初始化</span></span><br><span class="line"><span class="comment">* @param</span></span><br><span class="line"><span class="comment">* @return </span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Humi_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">GPIOInit();</span><br><span class="line">ADCInit();</span><br><span class="line">Timer_Init(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">* @brief 获取数据寄存器中的 ADC 值</span></span><br><span class="line"><span class="comment">* @param</span></span><br><span class="line"><span class="comment">* @return ADC值</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">static</span> <span class="type">uint16_t</span> <span class="title function_">GetAdcVal</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 中断服务函数中每调用一次，使能ADC转换 */</span></span><br><span class="line">adc_software_trigger_enable(ADC1, ADC_REGULAR_CHANNEL);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 等待转换完成标志 */</span></span><br><span class="line">    <span class="keyword">while</span>(!adc_flag_get(ADC1, ADC_FLAG_EOC));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 读取数据寄存器 */</span></span><br><span class="line">    <span class="keyword">return</span> (adc_regular_data_read(ADC1));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">* @brief 翻转 IO 状态</span></span><br><span class="line"><span class="comment">* @param 无</span></span><br><span class="line"><span class="comment">* @return 无</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">AcPowerProc</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">gpio_bit_write(GPIOB, GPIO_PIN_0, (FlagStatus)((FlagStatus)<span class="number">1</span> - gpio_output_bit_get(GPIOB, GPIO_PIN_0)));</span><br><span class="line">gpio_bit_write(GPIOB, GPIO_PIN_1, (FlagStatus)((FlagStatus)<span class="number">1</span> - gpio_output_bit_get(GPIOB, GPIO_PIN_1)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">TIMER4_IRQHandler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">static</span> <span class="type">uint16_t</span> timerCount = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (timer_interrupt_flag_get(TIMER4, TIMER_INT_FLAG_UP) != RESET)</span><br><span class="line">&#123;</span><br><span class="line">timer_interrupt_flag_clear(TIMER4, TIMER_INT_FLAG_UP);</span><br><span class="line">timerCount++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (timerCount % <span class="number">2</span> == <span class="number">0</span>)     <span class="comment">// 每2ms反转IO口</span></span><br><span class="line">&#123;</span><br><span class="line">AcPowerProc();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (timerCount % <span class="number">400</span> == <span class="number">1</span>)  <span class="comment">// 每隔400ms，在高电平中间位置获取一次ADC的数据</span></span><br><span class="line">&#123;</span><br><span class="line">g_adcVal = GetAdcVal();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">* @brief 根据温度计算湿度对应的 ADC 值表</span></span><br><span class="line"><span class="comment">* @param arr 存储计算结果的数组</span></span><br><span class="line"><span class="comment">* @param temp 当前温度</span></span><br><span class="line"><span class="comment">* @return 无</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">CalcHumiAdcByTemp</span><span class="params">(<span class="type">uint16_t</span> *arr, <span class="type">uint8_t</span> temp)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint8_t</span> tempRow = temp / TEMP_INTERVAL_VAL;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 边界值温度直接返回其ADC值即可 */</span></span><br><span class="line"><span class="keyword">if</span> (temp % TEMP_INTERVAL_VAL == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memcpy</span>(arr, &amp;g_rhADCVal[tempRow][<span class="number">0</span>], HUMI_LEVEL_NUM * <span class="keyword">sizeof</span>(<span class="type">uint16_t</span>));</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">uint8_t</span> i = <span class="number">0</span>; i &lt; HUMI_LEVEL_NUM; i++)</span><br><span class="line">&#123;</span><br><span class="line">arr[i] = g_rhADCVal[tempRow][i] + (g_rhADCVal[tempRow + <span class="number">1</span>][i] - g_rhADCVal[tempRow][i]) * (tempRow) / TEMP_INTERVAL_VAL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">* @brief 使用二分法在升序数组中查找元素位置</span></span><br><span class="line"><span class="comment">* @param arr 升序数组</span></span><br><span class="line"><span class="comment">* @param size 数组大小</span></span><br><span class="line"><span class="comment">* @param key 查找的键值</span></span><br><span class="line"><span class="comment">* @return 找到的位置索引</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">static</span> <span class="type">int32_t</span> <span class="title function_">AsceBinarySearch</span><span class="params">(<span class="type">const</span> <span class="type">uint16_t</span> *arr, <span class="type">int32_t</span> size, <span class="type">uint16_t</span> key)</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int32_t</span> left = <span class="number">0</span>;              </span><br><span class="line"><span class="type">int32_t</span> right = size - <span class="number">1</span>;       </span><br><span class="line"><span class="type">int32_t</span> mid;</span><br><span class="line"><span class="type">int32_t</span> index = size - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (left &lt;= right)             </span><br><span class="line">&#123;</span><br><span class="line">mid = left + (right - left) / <span class="number">2</span>; </span><br><span class="line"><span class="keyword">if</span> (key &lt;= arr[mid])</span><br><span class="line">&#123;</span><br><span class="line">right = mid - <span class="number">1</span>;</span><br><span class="line">index = mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">left = mid + <span class="number">1</span>;  </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> index;               </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">uint8_t</span> <span class="title function_">ADCToHumi</span><span class="params">(<span class="type">uint16_t</span> *arr, <span class="type">uint16_t</span> adcVal)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int32_t</span> index = AsceBinarySearch(arr, HUMI_LEVEL_NUM, adcVal);</span><br><span class="line"><span class="keyword">if</span> (index == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> HUMI_MIN_VAL;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">uint8_t</span> humi = HUMI_MIN_VAL + (index - <span class="number">1</span>) * HUMI_INTERVAL_VAL +  HUMI_INTERVAL_VAL * (adcVal - arr[index - <span class="number">1</span>]) / (arr[index] - arr[index - <span class="number">1</span>]);</span><br><span class="line"><span class="keyword">return</span> humi;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">* @brief 触发驱动转换湿度传感器数据</span></span><br><span class="line"><span class="comment">* @param</span></span><br><span class="line"><span class="comment">* @return </span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Humi_SensorProc</span><span class="params">(<span class="type">uint8_t</span> temp)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (temp &gt; TEMP_MAX_VAL)</span><br><span class="line">&#123;</span><br><span class="line">temp = TEMP_MAX_VAL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint16_t</span> humiADCBuf[HUMI_LEVEL_NUM];</span><br><span class="line">CalcHumiAdcByTemp(humiADCBuf, temp);</span><br><span class="line">g_humiData = ADCToHumi(humiADCBuf, g_adcVal);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">* @brief 获取湿度传感器数据</span></span><br><span class="line"><span class="comment">* @param</span></span><br><span class="line"><span class="comment">* @return 湿度数据，整数</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">float</span> <span class="title function_">Get_HumiData</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> g_humiData;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="RS485"><a href="#RS485" class="headerlink" title="RS485"></a>RS485</h1><h2 id="1-RS485协议解读"><a href="#1-RS485协议解读" class="headerlink" title="1.RS485协议解读"></a><strong>1.RS485协议解读</strong></h2><blockquote><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412021947729.png" alt="image-20241202194707662" style="zoom: 150%;"></p><p>RS485采用的是双线传输，包含A信号线和B信号线。与RS232最本质的区别在于，RS485采用了差分模式。即在同一时刻，RS485总线要么在发送数据，要么在接收数据，因此是半双工的。</p><p>RS232是全双工的，使用两个信号线，一个用于发送数据，另一个用于接收数据。这是它们两个的主要区别。</p><p>由于采用差分模式，当A-B的电压差值大于0.2伏时，RS485总线传输逻辑电平1；当A-B小于-0.2伏时，传输逻辑电平0。如果A-B的电压差在-0.2伏到0.2伏之间，则无法识别逻辑电平。</p><p>这种差分模式可以提高抗干扰能力。例如，遇到脉冲干扰时，干扰会叠加在A和B信号线上，但由于差分模式，A-B的差值会抵消这些脉冲干扰。因此，RS485能够实现更远的通信距离，理论上可达1200米，远超RS232，广泛应用于工业现场。</p><p>RS485支持一主多从的通信方式，即一个主机可以连接多个从机。这种能力取决于芯片的转换能力和软件协议。</p></blockquote><h2 id="2-RS485硬件电路两种方案"><a href="#2-RS485硬件电路两种方案" class="headerlink" title="2.RS485硬件电路两种方案"></a><strong>2.RS485硬件电路两种方案</strong></h2><blockquote><p><strong>常规方案:</strong></p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412021957614.png" alt="image-20241202195740526"></p><p>使用常见的转换芯片，如SSP485。左侧部分连接到MCU单片机，涉及三个IO口，分别对应串口的RX、TX以及一个普通的IO口。在开发板上使用的是PC5口，用于切换RS485芯片的工作模式（发送或接收）。通过一个切换开关控制，并配有三个100欧姆的限流电阻起到缓冲作用。</p><p>右侧是RS485相关的电路部分，包括防护电路。主要有两个自恢复保险丝，起到过流保护，防止电流过大烧毁器件；三个TVS二极管，用于防止浪涌干扰。这些都是典型的防护电路，可以参考芯片的规格书（datasheet）获取这些电路信息，实际产品中也大量使用，放在自己的项目中没有问题。</p><p>左侧有两个上拉和下拉电阻。A信号线接一个上拉电阻到3.3伏，B信号线接一个下拉电阻到GND。这两个上下拉电阻是必须要加的，以保证RS485总线在空闲状态下A和B信号线呈现逻辑电平1，即电压差大于0.2伏。这样在空闲状态下，A和B信号线通过上下拉电阻分别为3.3伏和0伏，确保RS485总线电平为1。</p><p>另外，RS485有时需要在A和B信号线之间加上120欧姆的终端电阻，具体是否需要根据实际部署环境决定。如果系统中有多个节点且总线距离较长，可以在主机侧和最后一个从机侧各加一个120欧姆的终端电阻，以起到阻抗匹配、防止信号反射的作用。</p><p><strong>自收发电路:</strong></p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412021957032.png" alt="image-20241202195733946"></p><p>第二种方案是自收发电路，相较于第一种方案，它节省了一个IO口，仅使用串口的RX和TX。</p><p>具体实现方式如下：</p><p>串口的RX接到RO管脚，DI管脚接地。单片机的TX通过一个三极管连接到RE和DE管脚。这种设计虽然节省了IO口，但不太规范，实际应用中不推荐使用。之前使用这种电路时，遇到了RS485通信异常的问题，发现电阻损坏（虽然表面未烧毁，但电阻变为无穷大），原因可能与现场环境如雷击或强干扰有关。因此，建议采用第一种常规方案。</p><p><strong>自收发电路的工作原理</strong></p><p>在自收发电路中，当工作在接收模式时，单片机的TX默认是高电平，三极管导通，使RE被使能，RS485芯片进入接收模式，可以接收外部数据。当需要发送数据时，通过三极管切换至发送模式，发送对应的逻辑电平。由于使用了三极管的开关特性，频率特性与串口的波特率相关，适用于较低的波特率（如9600），高波特率下可能不稳定。</p><p>这种电路的优点是节省IO口，适用于IO资源有限的项目。但由于稳定性和可靠性问题，实际应用中建议优先选择常规方案。</p></blockquote><h1 id="MODBUS"><a href="#MODBUS" class="headerlink" title="MODBUS"></a>MODBUS</h1><h2 id="1-MODBUS协议解读"><a href="#1-MODBUS协议解读" class="headerlink" title="1.MODBUS协议解读"></a><strong>1.MODBUS协议解读</strong></h2><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412022050180.png" alt="image-20241202205031112"></p><p>RS485是一种电气协议，属于硬件级别的协议。而MODBUS是一种软件协议，这种软件协议既可以运行在RS485这种电气接口上，也可以运行在RS232或者以太网电气接口上。</p><p><strong>RS485相当于公路，MODBUS相当于交通规则，传输的数据就是汽车。</strong></p><blockquote><p><strong>标准开放性</strong></p><p>MODBUS协议是标准开放的，公开发表的，没有版权要求。这一点非常重要，因此我们才能放心大胆地使用MODBUS。相比之下，许多开源软件或协议有相关的版权要求，例如Linux，它遵从GPL协议，使用Linux内核的代码也必须开源。</p><p><strong>协议格式与兼容性</strong></p><p>MODBUS协议的消息帧格式非常简单，便于厂商开发和集成。在做产品时，尽量少使用私有协议（即自己定义的协议），因为这样无法与其他厂商的产品对接，尤其是在复杂庞大的系统中，可能有许多不同厂家的设备，系统将无法正常运行。因此，在使用通信协议时，一定要选择标准开放的协议。</p><p><strong>传输介质与报文类型</strong></p><p>MODBUS协议可以在RS485、RS232和以太网上传输，支持三种报文类型，包括ASCII、RTU（Remote Terminal Unit）和TCP。对于ASCII和RTU，通常运行在RS485和RS232电气接口上；而TCP则用于以太网接口。</p><p>在ASCII和RTU中，RTU模式最为常用。RTU使用二进制（或16进制）数据传输，而ASCII模式使用字符数据传输。</p><p><strong>报文介绍</strong></p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412022054120.png" alt="image-20241202205421028"></p><ul><li>绿色的线表示以太网，传输协议报文类型为TCP。</li><li>蓝色的线表示RS485电气接口。主机通过RS485连接多个从机，大家都使用一套MODBUS RTU协议进行集成。</li></ul><p><strong>MODBUS报文格式</strong></p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412022057133.png" alt="image-20241202205755053"></p><p>在传输数据时，一包数据通常包含多个字节，我们可以称之为一帧数据。其格式如下：</p><ol><li><strong>从机地址（1字节）</strong>：每个从机都有唯一的地址（ID），相当于门牌号，主机通过地址找到对应的从机。</li><li><strong>功能码（1字节）</strong>：指示这一帧数据的用途，例如查询数据、读取数据、修改数据或写入数据。</li><li><strong>数据部分（0-252字节）</strong>：根据功能码的不同，内容也不同。</li><li><strong>CRC校验码（2字节）</strong>：包括低字节和高字节，用于检测接收数据的正确性。</li></ol><p><strong>功能码</strong></p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412022059166.png" alt="image-20241202205953093"></p><p>MODBUS协议中有多个功能码，其中最常用的功能码：</p><ul><li>03：读多个寄存器</li><li>06：写单个寄存器</li><li>16：写多个寄存器</li></ul></blockquote><h2 id="2-MODBUS数据格式"><a href="#2-MODBUS数据格式" class="headerlink" title="2.MODBUS数据格式"></a>2.MODBUS<strong>数据格式</strong></h2><blockquote><p><strong>这里的寄存器不是指单片机中的物理寄存器，而是软件中的控制项。</strong>例如，控制传感器、继电器、开关等。这些寄存器在软件设计时需要分配唯一的地址，类似于PLC系统中的控制项。</p><p>以某个产品为例，支持RS485 MODBUS功能。软件设计时，需要为每个传感器（如PM2.5、温度、湿度、二氧化碳、TVOC、PM10）分配唯一的寄存器地址，并定义其数据格式（通常为两个字节）。</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412022107725.png" alt="image-20241202210742650" style="zoom:;"></p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412022102725.png" alt="image-20241202210254655"></p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412022106828.png" alt="image-20241202210609762"></p><p><strong>空闲间隔时间（3.5T）</strong></p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412031549792.png" alt="image-20241203154937731"></p><p>为了方便软件解析数据，MODBUS RTU协议规定两帧数据之间必须有3.5个字符时间的空闲间隔，称为3.5T。这有助于判断一帧数据是否接收完毕。具体时间计算如下：</p><ul><li>假设波特率为9600，字符时间为10位（1起始位 + 8数据位 + 1停止位）。</li><li>一个字符传输时间 = 10位 / 9600波特率 ≈ 1.04毫秒</li><li>3.5T ≈ 3.5 × 1.04 ≈ 3.64毫秒</li></ul><p>通常设计时，使用定时器来实现3.5T的检测。</p><p><strong>异常处理</strong></p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412022125615.png" alt="image-20241202212532544"></p><p>在实际应用中，可能会接收到错误的数据，此时需要进行异常处理。MODBUS定义了几种异常码，例如：</p><ul><li>01：非法功能码（从机不支持该功能码）</li><li>02：非法地址（地址超出范围）</li><li>03：非法数据值（数据值不在允许范围）</li><li>04：从机故障（解析数据时出错）</li></ul><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412022126452.png" alt="image-20241202212635382"></p><p>例如，主机发送了一个非法地址，或者数据值不合法，从机会返回对应的异常码通知主机。</p></blockquote><h2 id="3-MODBUS软件架构分层"><a href="#3-MODBUS软件架构分层" class="headerlink" title="3.MODBUS软件架构分层"></a><strong>3.MODBUS软件架构分层</strong></h2><p>采用分层架构，代码清晰：</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412022119111.png" alt></p><ol><li><strong>应用层</strong>：实现具体的业务逻辑，如数据处理和控制。</li><li><strong>中间件层</strong>：使用FreeMODBUS库，实现协议相关功能。</li><li><strong>驱动层</strong>：实现定时器和串口的初始化及中断功能。</li></ol><p>MODBUS协议本身格式简单，但在代码实现时涉及数据解析、异常处理和3.5T的检测，可能显得复杂。因此，建议使用开源的MODBUS库，如FreeMODBUS，来简化开发。FreeMODBUS已经实现了<strong>从机功能、异常处理和数据解析</strong>等，开发者只需实现驱动层接口，如定时器和串口中断，并编写业务逻辑代码。</p><h2 id="4-FREEMODBUS移植"><a href="#4-FREEMODBUS移植" class="headerlink" title="4.FREEMODBUS移植"></a>4.FREEMODBUS移植</h2><h3 id="1-库文件介绍"><a href="#1-库文件介绍" class="headerlink" title="1.库文件介绍"></a>1.库文件介绍</h3><blockquote><p>MODBUS文件夹：</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412032034194.png" alt="QQ20241203-203437"></p><p> <strong>ascii</strong>：这是实现ASCII码报文的，我们不需要。</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412032037696.png" alt="QQ20241203-203652"></p><p><strong>functions</strong>：这是实现读写线圈、读写寄存器相关的代码。通常使用功能码03、06、16这三个功能码就够了，其对应的代码文件就是 <code>MB_function_holding.c</code>和<strong><code>MB_utils.c</code></strong>，里面实现了一些通用的接口函数。</p><p><strong>include</strong> ：</p><p><strong>rtu</strong>：有CRC校验的代码以及RTU协议相关的报文。</p><p><strong>tcp：</strong></p><p><strong>mb.c：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412032044369.png" alt="QQ20241203-204445"></p><p><strong>demo：</strong>与驱动相关的一些参考代码，如定时器、串口初始化相关的。</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412032045170.png" alt="QQ20241203-204522"></p><p>其中，<strong>bare</strong> 这个目录里面是实现了代码模板，只有相关的一些结果函数，没有代码实现。其他的一些文件夹如 <strong>at91sam</strong>，这都是和具体单片机平台相关的一些代码参考，我们不需要。</p></blockquote><h3 id="2-代码工程配置"><a href="#2-代码工程配置" class="headerlink" title="2.代码工程配置"></a>2.代码工程配置</h3><blockquote><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412032056376.png" alt="QQ20241203-205549"></p><p>代码工程里面有三个文件夹是和Modbus相关的：</p><ul><li><strong>App_Modbus：</strong> 对应应用层</li><li><strong>Drv_Modbus</strong>： 对应驱动层</li><li><strong>Mid_Modbus</strong>： 对应中间件</li></ul><h3 id="文件添加"><a href="#文件添加" class="headerlink" title="文件添加"></a>文件添加</h3><ul><li>拷贝 <code>pot</code>里面的四个文件，放在 <strong><code>Drv_Modbus</code></strong>里，作为驱动。</li><li>拷贝 <code>Modbus_driver</code> 里面的 <code>functions</code>、<code>include</code>、<code>rtu</code>、<code>mb.c</code> 放在 <code>Mid_Modbus</code> 里。然后将 <code>functions</code> 里面没用的部分都删除，只保留 <code>mbfuncholding.c</code> 和 <code>mbutils.c</code>。</li></ul><p>除此之外，还有一些通用的应用代码，如 <code>hm_ia_pp_men.c3</code>，这个里面实现获取温湿度数据的一个任务，用来触发驱动去获取温湿度数据。然后 <strong>Drv_Modbus</strong>，我们放了一些延时的驱动、按键、LED灯、热敏电阻、失敏电阻、队列相关的内容。还有 <strong>gt32</strong> 库，和 ARM 内核相关的，这是整个工程目录结构的一部分。</p></blockquote><h3 id="3-编译与错误解决"><a href="#3-编译与错误解决" class="headerlink" title="3.编译与错误解决"></a>3.编译与错误解决</h3><blockquote><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412032123808.png" alt="QQ20241203-212326"></p><p><code>MB.c</code> 里面提示找不到这个头文件。我们看一下这个宏，它是通过宏来判断的。这些宏是在<code>MB_config.h</code> 里面定义的：</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412032128929.png" alt="QQ20241203-212554"></p><p>将<code>MB_ASCII_ENABLED</code>改为0，<code>MB_RTU_ENABLED</code>这个宏设置为1，<code>MB_TCP_ENABLED</code>改为0。</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412032128520.png" alt="QQ20241203-212657"></p><p>只保留<strong>读寄存器、写寄存器、写多个寄存器</strong>这三个功能码03、06、16。其他的都设置为0。</p><p>然后编译，提示 <code>MB_register_holding_callback</code> 这个函数没有定义实现。这个接口函数需要我们自己去实现，所以现在报错是正常的，我们先不管。</p></blockquote><h3 id="4-代码移植"><a href="#4-代码移植" class="headerlink" title="4.代码移植"></a>4.代码移植</h3><blockquote><h3 id="1-初始化流程"><a href="#1-初始化流程" class="headerlink" title="1.初始化流程"></a>1.初始化流程</h3><p>初始化相关代码实现要放在 <code>port_serial.c</code> 里，包含中断接收发送相关代码。定时器以及中断相关代码，放在 <code>port_timer.c</code> 里面。初始化函数是在 <code>mb.c</code> 的 <code>MB_init</code> 接口函数里面调用的。</p><h4 id="1-UART"><a href="#1-UART" class="headerlink" title="1.UART"></a>1.UART</h4><p>包含<strong><code>#include &quot;gd32f30x.h&quot;</code></strong>头文件</p><ul><li>硬件配置</li></ul><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412061906424.png" alt="QQ20241206-190523"></p><p>使用串口1，对应 GPIOA 的 PA3 和 PA2。然后，传递一个参数，代表波特率，启用接收发送功能，然后使能串口中断。除了使能了内核中的 NVIC 中断，还需要使能片上外设的串口中断。其中<strong>使能串口中断</strong>要把它放在 <code>enable</code> 这个函数里面，动态地由 FreeModbus 库去控制。</p><ul><li>切换RS485工作模式</li></ul><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412052127892.png" alt="QQ20241205-212635"></p><ul><li>串口初始化</li></ul><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412052129243.png" alt="QQ20241205-212909"></p><p>为了避免警告而用<code>void</code>强转，并将关于串口的初始化部分放到<code>xMBPortSerialInit</code>里，将<code>FLASE</code>改成<code>TRUE</code>。</p><h4 id="2-TIMER"><a href="#2-TIMER" class="headerlink" title="2.TIMER"></a>2.TIMER</h4><p>在 <code>port_timer.c</code> 里面，<code>xMBPortTimersInit</code>有一个参数：<code>usTim1Timerout50us</code>，这个参数表示的是50微秒的倍数。</p><p>比如设置为1，表示1×50微秒；设置为2，表示2×50微秒，即100微秒。设置为100微秒，意味着定时器100微秒后产生中断并进入中断服务函数。</p><ul><li><p>硬件配置</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412061923924.png" alt="QQ20241206-192334"></p><p>使能定时器计数器放在 <code>vMBPortTimersEnable</code> 和 <code>vMBPortTimersDisable</code> 这里面从而 FreeModbus 库能动态控制，对定时器进行打开、关闭以及计数清零。</p></li><li><p>定时器初始化 &amp; 空闲间隔时间计算</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412061934149.png" alt="QQ20241206-193426"></p><p>定时器初始化接口函数里面的50us倍数参数与3.5T空闲间隔时间有对应关系。<code>eMBRTUInit</code> 接口函数会调用定时器初始化结构函数，传入参数 <code>usTimerT35_50us</code>。如果波特率大于19200，那么这个参数传递的数值固定是35，35×50us，对应就是1750us。当波特率大于19200时，Modbus协议要求3.5T固定为1750us。</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412062014005.png" alt="image-20241206201408932"></p><p>若波特率小于等于19200时，要根据注释的公式和实际波特率计算出3.5T对应的空闲间隔时间。</p></li></ul><p>  FreeModbus库中是基于11位来计算3.5T空闲间隔时间，而在我们做串口初始化的时候，是基于10位来设置的，只差了一位，关系不大，对计时时间影响很小。</p><p><strong>一、整体流程概述</strong><br>FreeModbus库整体流程可分为初始化与运行两部分：  </p><ul><li><strong>初始化阶段</strong>：对Modbus协议栈进行初始化，包括设置串口、定时器以及回调函数等。  </li><li><strong>运行阶段</strong>：在<code>while(1)</code>主循环中持续调用<code>eMBPoll()</code>接口函数。该函数根据接收到的数据包和事件标志进行状态机调度，执行相应的读写寄存器操作，并通过相应的发送函数返回结果。</li></ul><p><strong>二、接收与处理数据的状态机流程</strong>  </p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412062043659.png" alt="image-20241206203909544"></p><ol><li><strong>数据接收过程</strong>：</li></ol><p>   当接收到一完整帧的数据包后（由串口接收中断与定时器3.5T间隔判断），FreeModbus库会将事件标志<code>eEvent</code>设置为<code>EV_FRAME_RECEIVED</code>。此时在<code>eMBPoll()</code>中检测到该事件标志后，会调用对应的<code>FrameReceiveCur()</code>函数（函数指针指向<code>MBRTUReceive()</code>）从中断保存区拷贝数据至处理区，并将事件标志设置为<code>EV_EXECUTE</code>，以便后续处理。</p><ol><li><p><strong>功能码处理</strong>：<br>在<code>eMBPoll()</code>中，根据已设置的事件标志和状态机逻辑，会调用<code>pxHandler</code>（函数指针）指向的功能码处理函数（如0x03、0x06、0x10等）。这些功能码对应的处理函数会调用用户实现的回调函数（如<code>eMBRegHoldingCB()</code>），以实现寄存器数据的读写。</p></li><li><p><strong>数据发送响应</strong>：<br>当数据处理完成后，会调用<code>MBFrameSendCur()</code>（指向<code>MBRTUSend()</code>的函数指针）将处理后的数据打包通过串口发送给主机。</p></li></ol><p><strong>三、串口中断与定时器中断的详细说明</strong>  </p><ol><li><p><strong>串口接收中断</strong>：<br>在串口接收中断服务程序中，每接收到一个字节数据，就会调用<code>prvvUARTRxISR()</code>接口函数（最终调用<code>xMBRTUReceiveFSM()</code>）。  </p><ul><li>若是第一个字节数据，则状态机从空闲状态切换到接收状态，并启动3.5T定时器（<code>MBPortTimerEnable()</code>）。  </li><li>每接收一个字节数据，都重新启动定时器，确保只在接收完成后（总线空闲3.5T）才触发定时器中断。</li></ul></li><li><p><strong>定时器中断</strong>：<br>当3.5T定时器中断触发时（表示一帧数据已接收完毕且总线空闲），在中断服务函数中调用<code>prvvTIMERExpiredISR()</code>（最终调用<code>xMBRTUTimerT35Expired()</code>）。该函数会将事件标志设置为<code>EV_FRAME_RECEIVED</code>，告知主流程数据帧已接收完整，等待处理。</p></li><li><p><strong>串口发送中断</strong>：<br>发送采用中断方式逐字节发送。当需发送数据时，在<code>MBRTUSend()</code>中设置相关标志，并通过<code>USART</code>的发送中断服务函数<code>prvvUARTTxReadyISR()</code>（最终调用<code>xMBRTUTransmitFSM()</code>）实现一个字节一个字节的发送。  </p><p>需要注意的是，为确保最后一个字节数据完整发送，建议使用<code>TC</code>中断标志（发送完成标志）而不是<code>TBE</code>（发送寄存器空）标志，这样可以避免最后一个字节还未实际发送完成就过早切换485芯片至接收模式，导致数据丢失。</p></li></ol><p><strong>四、485收发控制与中断使能</strong><br>FreeModbus库在<code>eMBPortSerialEnable()</code>接口函数中，根据参数<code>rxEnable</code>和<code>txEnable</code>来控制串口的接收、发送中断和485收发控制端：  </p><ul><li>当<code>rxEnable = TRUE</code>时：使能接收中断，并将485收发引脚（如PC5）拉低进入接收状态。  </li><li>当<code>txEnable = TRUE</code>时：使能发送中断，并将485收发引脚拉高进入发送状态。当发送完成后，再恢复至接收模式。</li></ul><p>使用<code>TC</code>中断可确保在最后一个字节完全发送完成后再切换至接收状态，避免数据丢失。</p><p><strong>五、用户回调函数与业务逻辑实现</strong><br>FreeModbus库在处理功能码时会调用用户需要实现的回调函数，如<code>eMBRegHoldingCB()</code>。用户在该函数中根据读写请求来访问实际硬件、传感器或内存中的数据。该过程将业务层数据与Modbus协议处理分离，有利于保持代码清晰和可维护。</p><p><strong>六、移植与代码修改说明</strong><br>在移植FreeModbus到具体平台时，需要实现以下接口函数：  </p><ul><li>串口初始化与读写函数（<code>prvvUARTTxReadyISR()</code>、<code>prvvUARTRxISR()</code>、<code>prvvUARTTxComplete()</code>）  </li><li>定时器初始化与中断处理函数（<code>prvvTIMERExpiredISR()</code>）  </li><li>485方向控制（GPIO引脚）  </li><li>自定义回调函数（如<code>eMBRegHoldingCB()</code>）</li></ul><p>另外，在<code>MBFunctionHolding.c</code>中有些小错误，需要做如下修改：  </p><ul><li>去掉不必要的自增操作，以免地址偏移错误。  </li><li>对寄存器数量计算时应使用按字节拼接的位运算（<code>|=</code>），确保高低字节正确合并。  </li></ul><p>通过这些修正和完善，将能使FreeModbus在目标平台上稳定工作，并正确处理Modbus主机的读写请求。</p></blockquote><h1 id="IIC"><a href="#IIC" class="headerlink" title="IIC"></a>IIC</h1><h2 id="1-IIC协议解读"><a href="#1-IIC协议解读" class="headerlink" title="1.IIC协议解读"></a>1.IIC协议解读</h2><blockquote><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412131829756.png" alt="image-20241213182936683"></p><p>最常用的例如UART（串口）、I²C、SPI、CAN总线、USB，这些都是串行通信。</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412131855012.png" alt="image-20241213185508950"></p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412131830718.png" alt="image-20241213183034659"></p><p>对于I²C总线，它是同步通信，因为它有一个时钟信号线。I²C总线一共两个信号线，一个是时钟信号线（SCL），一个是数据线（SDA）。而异步通信，比如UART（串口），没有时钟信号线。</p><p>对于同步通信，由于有时钟信号，接收端根据时钟信号的脉冲来检测和解析数据线上的数据是0还是1。因此，对于同步通信来说，对持续时间的要求没有那么严格，可以快一点或慢一点都没关系。</p><p>对于异步通信，在数据传输时，时序要求非常严格。接收端和发送端必须严格按照固定的波特率去发送和解析数据。例如9600波特率，接收端接收到数据时，会根据9600波特率对应每一个二进制位的持续时间去解析数据，是二进制的0还是1。</p><p><strong>I²C总线是半双工的，因为只有两个信号线（SCL和SDA），在同一时刻只能进行发送或接收。</strong></p><p>I²C总线和MODBUS一样，支持一主多从的通信方式，即一个主机可以连接多个从机。例如，在一个总线上，可以将单片机作为主机，挂载多个从机，如EEPROM、触摸屏芯片、温湿度传感器等。</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412131540868.png" alt="image-20241213154014804"></p><p>在总线上，有多个节点设备要求这些设备内部需要将SDA和SCL总线配置成开漏输出模式，而不能设计成推挽输出模式。</p><p>设备内部设计成开漏输出模式，还需要在总线上使用两个上拉电阻，每条总线都加一个上拉电阻，阻值一般是3kΩ到10kΩ，典型值是4.7kΩ。<strong>通过开漏输出和上拉电阻能够实现限流的功能。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412131541437.png" alt="image-20241213154145377"></p><p>假如总线上有两个设备：</p><ol><li>第一个设备要输出高电平1，上拉电阻将总线拉高，开漏输出管不导通，总线保持高电平。</li><li>另一个设备要输出低电平0，它的开漏输出管导通，将总线拉低。</li></ol><p><strong>由于开漏输出模式，多个设备可以安全地连接在同一总线上，而不会像推挽输出模式那样导致短路和损坏器件。</strong></p></blockquote><h2 id="2-IIC总线的数据格式"><a href="#2-IIC总线的数据格式" class="headerlink" title="2.IIC总线的数据格式"></a><strong>2.IIC总线的数据格式</strong></h2><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412131906232.png" alt="image-20241213190652166"></p><p><strong>时钟频率与数据传输</strong></p><blockquote><p>I²C总线支持多种时钟频率，如100kHz（标准模式）、400kHz（快速模式）、1MHz（高速模式）。</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412131912451.png" alt="image-20241213191225388"></p><p><code>主机控制SCL时钟信号，而SDA信号线由主机或从机控制。在传输数据时，SDA信号线的数据只能在SCL为低电平时变化，在SCL为高电平时保持稳定，供接收方读取。</code></p></blockquote><h3 id="1-起始、停止信号"><a href="#1-起始、停止信号" class="headerlink" title="1.起始、停止信号"></a><strong>1.起始、停止信号</strong></h3><blockquote><p><code>在空闲状态时，SDA和SCL信号线都保持高电平。</code></p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412131914019.png" alt="image-20241213191453961"></p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412131916321.png" alt="image-20241213191612262"></p><p><code>当需要传输数据时，主机发起起始信号，开始数据传输；传输完成后，主机发起停止信号，返回空闲状态。</code></p></blockquote><h3 id="2-发送字节"><a href="#2-发送字节" class="headerlink" title="2.发送字节"></a><strong>2.发送字节</strong></h3><blockquote><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412131922777.png" alt="image-20241213192215715"></p><p><code>主机使SCL高电平时间维持周期的一半值（以上），从机才能检测到SDA数据。</code></p></blockquote><h3 id="3-读取字节"><a href="#3-读取字节" class="headerlink" title="3.读取字节"></a><strong>3.读取字节</strong></h3><blockquote><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412131928260.png" alt="image-20241213192838194"></p><p><code>主机读取数据时，主机必须先释放SDA线。因为在IIC协议中，SDA线是双向的，既可以由主机控制，也可以由从机控制。主机在读取数据时，必须释放SDA线，使得从机能够在该线上写入数据。如果主机没有释放SDA线而仍然保持为低电平，则无论从机在该时刻发送的是0还是1，最终都会被拉成0，因为主机仍然控制着SDA线。</code></p></blockquote><h3 id="4-发送应答"><a href="#4-发送应答" class="headerlink" title="4.发送应答"></a><strong>4.发送应答</strong></h3><blockquote><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412131944748.png" alt="image-20241213194439683"></p><p><code>每发送一个字节数据后，接收方需要发送一个应答位，表示是否成功接收。应答位是一个单独的位，低电平表示应答，高电平表示非应答。</code></p></blockquote><h3 id="5-接收应答"><a href="#5-接收应答" class="headerlink" title="5.接收应答"></a><strong>5.接收应答</strong></h3><blockquote><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412131938993.png" alt="image-20241213193803925"></p><p><strong><code>同样，从机接收应答时，主机必须先释放SDA线，将SDA线的控制权交给从机。</code></strong></p></blockquote><p><strong>异常处理</strong></p><p>在实际应用中，可能会遇到数据传输错误或通信中断。I²C协议本身没有定义具体的异常码，但在实现时需要考虑以下情况：</p><ol><li><strong>总线冲突</strong>：多个主机同时尝试控制总线，导致信号冲突。</li><li><strong>应答失败</strong>：从机未能正确应答，可能由于设备故障或地址错误。</li><li><strong>超时</strong>：数据传输过程中，等待应答或数据超时。</li></ol><p><strong>开发建议</strong></p><p>I²C协议实现相对简单，但在多从机环境下，需要注意地址分配和总线管理。建议使用开源的IIC驱动库，如Linux内核中的IIC驱动，或嵌入式系统中的I²C库，以简化开发过程，提高可靠性。</p><p><strong>软件架构分层</strong></p><p>采用分层架构，代码清晰：</p><ol><li><strong>应用层</strong>：实现具体的业务逻辑，如传感器数据读取和控制。</li><li><strong>中间件层</strong>：使用I²C驱动库，实现协议相关功能。</li><li><strong>驱动层</strong>：实现I²C硬件接口的初始化及中断功能。</li></ol><h2 id="3-EEPROM"><a href="#3-EEPROM" class="headerlink" title="3.EEPROM"></a>3.EEPROM</h2><blockquote><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412132024705.png" alt="image-20241213202400643"></p><p>存储器可以分为两类：</p><ol><li><strong>易失性存储器（RAM）</strong>，即内存，掉电后数据会丢失。</li><li><strong>非易失性存储器（ROM）</strong>，掉电后数据不会丢失。</li></ol><p>RAM进一步分为：</p><ul><li><strong>静态RAM（SRAM）</strong></li><li><strong>动态RAM（DRAM）</strong></li></ul></blockquote><h3 id="1-ROM的发展历程"><a href="#1-ROM的发展历程" class="headerlink" title="1.ROM的发展历程"></a>1.ROM的发展历程</h3><ol><li><strong>掩膜ROM（Mask ROM）</strong>：出厂时就写入数据，之后不可修改。</li><li><strong>PROM</strong>：可编程ROM，通过特殊手段可以在出厂后写入一次数据，但只能修改一次。</li><li><strong>EPROM</strong>：可擦除可编程ROM，采用紫外线擦除并重新写入数据，支持多次擦写。</li><li><strong>EEPROM（电可擦除可编程ROM）</strong>：与EPROM类似，但采用电流擦除，支持多次擦写。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412132025153.png" alt="image-20241213202541090"></p><h3 id="2-EEPROM与Flash的区别"><a href="#2-EEPROM与Flash的区别" class="headerlink" title="2.EEPROM与Flash的区别"></a>2.EEPROM与Flash的区别</h3><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412132025477.png" alt="image-20241213202552418"></p><ul><li><strong>EEPROM</strong>：可以随机访问并修改任何字节，支持数据保存100年，擦写次数可达100万次。它的成本较高，容量较小，如<strong>24C02</strong>为256字节。</li><li><strong>Flash</strong>：闪存通常按块擦除，相比EEPROM，它可以支持更大的存储容量（如U盘使用的NAND Flash），并且具有较低的成本。</li></ul><p>Flash分为两种：</p><ol><li><strong>NOR Flash</strong>：数据线和地址线分开，支持随机寻址，适用于代码存储。</li><li><strong>NAND Flash</strong>：数据线和地址线复用，不能随机寻址，但擦除和写入速度较快，成本较低，适用于大容量存储（U盘）。</li></ol><h3 id="3-AT24C02的工作原理"><a href="#3-AT24C02的工作原理" class="headerlink" title="3.AT24C02的工作原理"></a>3.AT24C02的工作原理</h3><p>AT24C02是一个小容量的EEPROM，容量为256字节（2Kbits），每个字节都有唯一的地址。支持按字节或按页写入，能够在掉电后保存数据。使用IIC协议与主机通信，可以通过控制信号进行数据的读写操作。它支持多字节读取和写入，具有较高的可靠性，但容量有限，适用于小容量存储应用。</p><h4 id="1-写数据"><a href="#1-写数据" class="headerlink" title="1.写数据"></a>1.写数据</h4><blockquote><ol><li><p><strong><code>写入一个字节</code></strong></p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412151225078.png" alt="image-20241215122519962"></p><ul><li><strong>起始信号</strong>：主机发送起始信号。</li><li><strong>设备地址和写控制位</strong>：主机发送24C02的地址及写控制位。</li><li><strong>数据地址</strong>：主机指定要写入数据的地址（0-255）。</li><li><strong>数据</strong>：主机发送要写入的数据字节。</li><li><strong>应答信号</strong>：24C02返回应答信号（ACK）。</li><li><strong>停止信号</strong>：主机发送停止信号。</li></ul></li><li><p><code>按页写</code></p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412151226127.png" alt="image-20241215122659056"></p><ul><li>每个页包含8个字节，24C02总共有32页（256字节 ÷ 8字节/页）。</li><li>可以选择从任意字节地址开始写入（例如从地址1开始），但每页的最大写入字节数为8个。如果超过8个字节，会跨页，需重新发送写信号。</li></ul></li></ol></blockquote><h4 id="2-读数据"><a href="#2-读数据" class="headerlink" title="2.读数据"></a>2.读数据</h4><blockquote><ol><li><p><strong>单字节读取</strong>： </p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412151316197.png" alt="image-20241215131603127"></p><ul><li>主机发送设备地址和写控制位，指定要读取的起始地址（假写）。</li><li>主机发送起始信号后，再次发送设备地址和读控制位，24C02返回指定地址的数据。</li><li>主机发送非应答信号，并发送停止信号。</li></ul></li><li><p><strong>多字节读取</strong>：</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412151316341.png" alt="image-20241215131617281"></p><ul><li>与单字节读取类似，主机只需发送起始地址，24C02内部有地址计数器，可以连续返回后续地址的数据，直到主机发送非应答信号。</li></ul></li></ol><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412151324403.png" alt="image-20241215132401331"></p></blockquote><h3 id="4-代码实现"><a href="#4-代码实现" class="headerlink" title="4.代码实现"></a>4.代码实现</h3><h4 id="1-软件模拟IIC"><a href="#1-软件模拟IIC" class="headerlink" title="1.软件模拟IIC"></a>1.软件模拟IIC</h4><h5 id="1-起始信号"><a href="#1-起始信号" class="headerlink" title="1.起始信号"></a>1.起始信号</h5><blockquote><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412151324633.png" alt="image-20241215132434566"></p></blockquote><h5 id="2-停止信号"><a href="#2-停止信号" class="headerlink" title="2.停止信号"></a>2.停止信号</h5><blockquote><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412151325702.png" alt="image-20241215132539631"></p></blockquote><h5 id="3-发送字节"><a href="#3-发送字节" class="headerlink" title="3.发送字节"></a>3.发送字节</h5><blockquote><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412151326402.png" alt="image-20241215132622333"></p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412151326453.png" alt="image-20241215132635387"></p></blockquote><h5 id="4-读取字节"><a href="#4-读取字节" class="headerlink" title="4.读取字节"></a>4.读取字节</h5><blockquote><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412151327329.png" alt="image-20241215132703258"></p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412151327848.png" alt="image-20241215132722771"></p></blockquote><h5 id="5-发送应答"><a href="#5-发送应答" class="headerlink" title="5.发送应答"></a>5.发送应答</h5><blockquote><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412151328592.png" alt="image-20241215132804524"></p><p><strong>发送应答后，主机必须手动释放SDA线，不然从机没办法发送数据。</strong></p></blockquote><h5 id="6-接收应答"><a href="#6-接收应答" class="headerlink" title="6.接收应答"></a>6.接收应答</h5><blockquote><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202412151328049.png" alt="image-20241215132809986"></p></blockquote><h4 id="2-硬件IIC"><a href="#2-硬件IIC" class="headerlink" title="2.硬件IIC"></a>2.硬件IIC</h4>]]></content>
      
      
      <categories>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GD32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2024/10/27/RTT/RTT%E9%97%AE%E9%A2%98%E5%90%88%E9%9B%86/"/>
      <url>/2024/10/27/RTT/RTT%E9%97%AE%E9%A2%98%E5%90%88%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h1 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h1><h2 id="问题一："><a href="#问题一：" class="headerlink" title="问题一："></a>问题一：</h2><p>如图：</p><p><strong>这个代码189只有一次，难不成第一次执行rt_kprintf不是在92行而是189行，92和114是我想要的行数，可是189并不是我期望看到的结果。</strong></p><p><img src="/2024/10/27/RTT/RTT%E9%97%AE%E9%A2%98%E5%90%88%E9%9B%86/QQ20241027-213440.png" alt></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">rt_thread_t</span> th1_ptr, th2_ptr, th3_ptr;</span><br><span class="line"><span class="type">rt_mutex_t</span> mutex1_ptr;</span><br><span class="line"><span class="type">void</span> <span class="title function_">th1_printf</span><span class="params">(<span class="type">void</span> *parameter)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        rt_mutex_take(mutex1_ptr, RT_WAITING_FOREVER);</span><br><span class="line">        rt_kprintf(<span class="string">&quot;In %s,func %s is running! the line is %d!\r\n&quot;</span> ,__FILE__,__FUNCTION__, __LINE__);</span><br><span class="line">        rt_thread_mdelay(<span class="number">1000</span>);</span><br><span class="line">        rt_mutex_release(mutex1_ptr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">th2_printf</span><span class="params">(<span class="type">void</span> *parameter)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        rt_kprintf(<span class="string">&quot;In %s,func %s is running! the priority is %d!\r\n&quot;</span> ,__FILE__,__FUNCTION__, th3_ptr-&gt;current_priority);</span><br><span class="line">        rt_thread_mdelay(<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">th3_printf</span><span class="params">(<span class="type">void</span> *parameter)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        rt_mutex_take(mutex1_ptr, RT_WAITING_FOREVER);</span><br><span class="line">        rt_kprintf(<span class="string">&quot;In %s,func %s is running! the line is %d!\r\n&quot;</span> ,__FILE__,__FUNCTION__, __LINE__);</span><br><span class="line">        rt_thread_mdelay(<span class="number">1000</span>);</span><br><span class="line">        rt_mutex_release(mutex1_ptr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    mutex1_ptr = rt_mutex_create(<span class="string">&quot;mutex1_ptr&quot;</span>, RT_IPC_FLAG_FIFO);</span><br><span class="line">    <span class="keyword">if</span>(mutex1_ptr == RT_NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        LOG_E(<span class="string">&quot;mutex1_ptr rt_mutex_create failed!\r\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    th1_ptr = rt_thread_create(<span class="string">&quot;th1&quot;</span>, th1_printf, <span class="literal">NULL</span>, <span class="number">1024</span>, <span class="number">7</span>, <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">if</span>(th1_ptr == RT_NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        LOG_E(<span class="string">&quot;th1_printf rt_thread_create failed!\r\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> -RT_ENOMEM;</span><br><span class="line">    &#125;</span><br><span class="line">    rt_thread_startup(th1_ptr);</span><br><span class="line"></span><br><span class="line">    th2_ptr = rt_thread_create(<span class="string">&quot;th2&quot;</span>, th2_printf, <span class="literal">NULL</span>, <span class="number">1024</span>, <span class="number">8</span>, <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">if</span>(th2_ptr == RT_NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        LOG_E(<span class="string">&quot;th2_printf rt_thread_create failed!\r\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> -RT_ENOMEM;</span><br><span class="line">    &#125;</span><br><span class="line">    rt_thread_startup(th2_ptr);</span><br><span class="line"></span><br><span class="line">    th3_ptr = rt_thread_create(<span class="string">&quot;th3&quot;</span>, th3_printf, <span class="literal">NULL</span>, <span class="number">1024</span>, <span class="number">9</span>, <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">if</span>(th3_ptr == RT_NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        LOG_E(<span class="string">&quot;th3_printf rt_thread_create failed!\r\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> -RT_ENOMEM;</span><br><span class="line">    &#125;</span><br><span class="line">    rt_thread_startup(th3_ptr);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> RT_EOK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解释一下为啥最后是这么打印的，而且还多出来一个189这个数</p><hr><h3 id="代码结构及线程逻辑"><a href="#代码结构及线程逻辑" class="headerlink" title="代码结构及线程逻辑"></a><strong>代码结构及线程逻辑</strong></h3><ol><li><p><strong>三个线程：</strong></p><ul><li><code>th1_printf</code> 和 <code>th3_printf</code> 都使用 <code>mutex1_ptr</code> 互斥锁来同步访问共享资源，打印行号。</li><li><code>th2_printf</code> 打印线程的优先级，没有使用锁。</li></ul></li><li><p><strong>线程创建：</strong></p><ul><li><code>th1_ptr</code> 线程：优先级为 <code>7</code></li><li><code>th2_ptr</code> 线程：优先级为 <code>8</code></li><li><code>th3_ptr</code> 线程：优先级为 <code>9</code></li></ul></li><li><p><strong>线程行为：</strong></p><ul><li><code>th1_printf</code> 和 <code>th3_printf</code> 都会拿到互斥锁后打印，然后延时 <code>1000ms</code>，再释放锁（放锁期间其他获锁的线程无法执行）。</li><li><code>th2_printf</code> 每隔 <code>100ms</code> 打印一次当前的线程优先级（使用的是 <code>th3_ptr</code> 的优先级）。</li><li><strong>互斥锁保证</strong>，同时只有一个线程能够访问共享资源（此处是打印输出）。</li></ul></li></ol><hr><h3 id="为什么-189-行号只出现一次"><a href="#为什么-189-行号只出现一次" class="headerlink" title="为什么 189 行号只出现一次"></a>为什么 <code>189</code> 行号只出现一次</h3><p>在 <code>th2_printf</code> 中的打印语句是：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rt_kprintf(<span class="string">&quot;In %s,func %s is running! the priority is %d!\r\n&quot;</span> ,__FILE__,__FUNCTION__, th3_ptr-&gt;current_priority);</span><br></pre></td></tr></table></figure><p>这个打印语句没有使用 <code>__LINE__</code> 宏，因此不会打印出当前代码的实际行号 <code>189</code>。但是，在编译输出时，<code>__FILE__</code> 中的文件名和默认行号会在 <code>rt_kprintf</code> 函数中被初始化为 <code>189</code>。这通常是因为编译器可能会在特定的情况下把文件中的行号记录在输出中，但 <code>th2_printf</code> 的这一行在程序首次运行时仅被执行一次，因此显示了 <code>189</code> 行号。</p><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><ul><li><strong><code>189</code></strong> 是代码中 <strong><code>rt_kprintf</code></strong> 在 <code>th2_printf</code> 中的实际行号。</li><li>频繁打印的原因是 <strong><code>th2_printf</code></strong> 没有使用互斥锁，且延迟时间较短（100ms）。</li><li><code>th1_printf</code> 和 <code>th3_printf</code> 的执行顺序受互斥锁和 1000ms 的延时控制，因此打印频率较低。</li><li>打印输出的顺序与实时操作系统中的线程调度机制有关，线程优先级和延时会影响打印内容的出现顺序。</li><li><code>189</code> 只出现一次，可能是因为编译后的代码在首次运行时输出了 <code>th2_printf</code> 的代码位置（默认显示为 <code>189</code>）。而 <code>92</code> 和 <code>114</code> 行反复出现，是因为这些行在 <code>th1_printf</code> 和 <code>th3_printf</code> 中包含了 <code>__LINE__</code> 宏，它们的行号会在每次打印时被正确解析并输出。</li></ul><h2 id="问题二："><a href="#问题二：" class="headerlink" title="问题二："></a>问题二：</h2><p>代码有什么问题？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化超声波传感器的外部接口</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">Sr04_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">rt_err_t</span> ret = RT_EOK;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用内部初始化函数</span></span><br><span class="line">    Ultra_Init(&amp;csbModel);</span><br><span class="line"></span><br><span class="line">    <span class="type">rt_thread_t</span> Sr04_thread = rt_thread_create(<span class="string">&quot;Sr04_thread&quot;</span>, Sr04_thread_entry, RT_NULL, <span class="keyword">sizeof</span>(Sr04_thread), THREAD_PRIORITY, THREAD_TIMESLICE);</span><br><span class="line">    <span class="keyword">if</span> (Sr04_thread == RT_NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        rt_kprintf(<span class="string">&quot;Sr04_thread is created failed!\r\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ret = RT_ERROR;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 启动线程</span></span><br><span class="line">    rt_thread_startup(Sr04_thread);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印初始化信息</span></span><br><span class="line">    rt_kprintf(<span class="string">&quot;Sr04_Init Init successfully\r\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>问题是栈溢出，为什么？</p><p><img src="/2024/10/27/RTT/RTT%E9%97%AE%E9%A2%98%E5%90%88%E9%9B%86/QQ20241112-105259.png" alt="QQ20241112-105259"></p><p>你提到的代码：</p><p>这里的 <code>sizeof(Sr04_thread)</code> 作为栈大小是不合适的，这可能是导致栈溢出的原因。原因在于 <code>sizeof(Sr04_thread)</code> 实际上只返回指针的大小（通常是4字节或8字节），而不是实际的栈大小。</p><h3 id="修改建议："><a href="#修改建议：" class="headerlink" title="修改建议："></a>修改建议：</h3><p>为了避免栈溢出，应该提供合适的栈大小。可以使用已定义的 <code>THREAD_STACK_SIZE</code>。正确的代码如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">rt_thread_t</span> Sr04_thread = rt_thread_create(<span class="string">&quot;Sr04_thread&quot;</span>, sr04_thread_entry, RT_NULL, THREAD_STACK_SIZE, THREAD_PRIORITY, THREAD_TIMESLICE);</span><br></pre></td></tr></table></figure></p><p>在这个修订中，<code>THREAD_STACK_SIZE</code> 是一个定义好的宏，代表为线程分配的栈大小（这里为 <code>1024</code> 字节）。这个大小通常足够处理测距的逻辑操作，但具体需要根据你的程序栈空间的需求来调整。错误地使用 <code>sizeof(Sr04_thread)</code> 会导致为线程分配非常小的栈空间，从而引发栈溢出。</p><h3 id="详细解释"><a href="#详细解释" class="headerlink" title="详细解释"></a>详细解释</h3><ul><li><strong><code>sizeof(Sr04_thread)</code> 返回的只是指针大小</strong>：<code>rt_thread_t</code> 是指向线程对象的指针，而 <code>sizeof</code> 操作返回的仅仅是指针的大小（比如 4 或 8 字节），远远不足以作为线程的栈空间。</li><li><strong>使用 <code>THREAD_STACK_SIZE</code></strong>：在创建线程时，应该为栈提供足够的大小，以确保函数调用、局部变量等可以正确地分配到栈中。</li></ul><p>此外，检查以下几点来进一步避免栈溢出问题：</p><ol><li><strong>栈大小设置</strong>：如果 <code>1024</code> 字节的栈空间不足，可以适当地增加，例如 <code>2048</code> 或 <code>4096</code> 字节。</li><li><strong>栈消耗较多的操作</strong>：避免在线程中调用可能消耗大量栈的操作，比如递归调用或大量的局部变量分配。</li><li><strong>调试信息</strong>：可以通过增加调试日志来追踪线程的执行过程，或者启用 RT-Thread 的栈溢出检测功能（如果可用），以便更好地理解问题所在。</li></ol><p>总结来说，改用合适的栈大小而不是 <code>sizeof</code> 操作符来避免栈溢出问题，这将确保线程运行的稳定性。</p><h1 id="结构体对齐"><a href="#结构体对齐" class="headerlink" title="结构体对齐"></a>结构体对齐</h1><p>在您的代码中，宏 <code>ALIGN(RT_ALIGN_SIZE)</code> 出现在了两个线程的堆栈声明中，如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ALIGN(RT_ALIGN_SIZE)</span><br><span class="line"><span class="type">static</span> <span class="type">char</span> thread1_stack[<span class="number">1024</span>];</span><br><span class="line"><span class="type">static</span> <span class="type">char</span> thread2_stack[<span class="number">1024</span>];</span><br></pre></td></tr></table></figure><p><code>ALIGN</code> 宏用于确保这些堆栈在内存中的起始地址是按照某个边界对齐的，这个边界通常由 <code>RT_ALIGN_SIZE</code> 决定。这种对齐操作有助于提高 CPU 访问数据的效率。在这里，我将借助这段代码详细解释结构体和内存对齐的概念，以及它是如何提高系统效率的。</p><h3 id="1-什么是内存对齐？"><a href="#1-什么是内存对齐？" class="headerlink" title="1. 什么是内存对齐？"></a>1. <strong>什么是内存对齐？</strong></h3><p><strong>内存对齐</strong> 是指将数据存储在特定的内存地址边界上。现代处理器在读取内存中的数据时，通常效率最高的方式是以某些特定的地址对齐读取（如 4 字节、8 字节等）。内存对齐使得 CPU 在读取或写入数据时，能够更快地访问内存。</p><p>在您的代码中，堆栈是为线程分配的一段内存区域，<code>ALIGN(RT_ALIGN_SIZE)</code> 用于确保这段内存的起始地址对齐到特定的边界。比如 <code>RT_ALIGN_SIZE</code> 可能是 4 或 8，这就意味着内存地址必须是 4 或 8 的倍数。</p><h3 id="2-为什么需要内存对齐？"><a href="#2-为什么需要内存对齐？" class="headerlink" title="2. 为什么需要内存对齐？"></a>2. <strong>为什么需要内存对齐？</strong></h3><ul><li><p><strong>硬件限制</strong>：很多 CPU 要求访问内存时，数据的地址必须是字长（如 4 字节、8 字节）的倍数，否则访问需要多个指令来完成，造成额外的性能开销。<strong>例如，如果 4 字节数据没有对齐到 4 字节边界，那么读取该数据就可能需要两次内存读取操作。</strong></p></li><li><p><strong>缓存友好性</strong>：内存对齐有助于更好地利用 CPU 缓存，减少缓存的失效。<strong>当数据对齐时，CPU 能够更有效地加载和存储数据块，减少因缓存缺失造成的性能下降。</strong></p></li></ul><h3 id="3-结构体对齐和效率提高"><a href="#3-结构体对齐和效率提高" class="headerlink" title="3. 结构体对齐和效率提高"></a>3. <strong>结构体对齐和效率提高</strong></h3><p>假设您在一个线程中定义了一个数据结构，比如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">char</span> a;       <span class="comment">// 1 字节</span></span><br><span class="line">    <span class="type">int</span> b;        <span class="comment">// 4 字节</span></span><br><span class="line">    <span class="type">short</span> c;      <span class="comment">// 2 字节</span></span><br><span class="line">&#125; Example;</span><br></pre></td></tr></table></figure><ul><li>如果不进行内存对齐，这个结构体的内存分布可能是这样的：<ul><li><code>char a</code> 占用 1 字节。</li><li><code>int b</code> 由于其需要 4 字节对齐，它的地址会是一个 4 的倍数。这意味着在 <code>a</code> 之后，可能需要 3 字节的填充（padding）才能使 <code>b</code> 对齐到 4 字节的边界。</li><li><code>short c</code> 通常要求 2 字节对齐，可能会产生额外的填充字节。</li></ul></li></ul><p>对齐后的内存布局如下所示：</p><div class="table-container"><table><thead><tr><th>字段</th><th>大小 (字节)</th><th>偏移量 (字节)</th><th>备注</th></tr></thead><tbody><tr><td>a</td><td>1</td><td>0</td><td></td></tr><tr><td>填充</td><td>3</td><td>1-3</td><td>为对齐 <code>b</code></td></tr><tr><td>b</td><td>4</td><td>4-7</td><td>4 字节对齐</td></tr><tr><td>c</td><td>2</td><td>8-9</td><td>2 字节对齐</td></tr><tr><td>填充</td><td>2</td><td>10-11</td><td>结构体对齐</td></tr></tbody></table></div><ul><li><p><strong>未对齐</strong> 的情况下，访问字段 <code>b</code> 时可能需要额外的指令，因为 <code>b</code> 的内存可能跨越多个内存地址，而不是单个指令能一次性读取的区域。</p></li><li><p><strong>对齐后</strong>，每个字段的地址都是它所需要的对齐边界，因此读取和写入操作可以更有效地执行。这减少了处理器处理额外指令的时间，提高了代码执行的效率。</p></li></ul><h3 id="4-作用"><a href="#4-作用" class="headerlink" title="4. 作用"></a>4. <strong>作用</strong></h3><p><code>ALIGN(RT_ALIGN_SIZE)</code> 的使用确保了线程堆栈的起始地址是对齐的。具体来说：</p><ul><li><p><strong>线程堆栈</strong> 对齐到特定的内存边界（如 4 或 8 字节），可以确保 CPU 访问线程堆栈中的变量时，效率更高。尤其是对于嵌入式系统中的 RT-Thread 这样的实时操作系统，高效的堆栈访问对于响应速度至关重要。</p></li><li><p>如果没有对齐，线程堆栈可能在内存中是零散的，这会使得对栈上的局部变量访问时产生额外的内存访问开销，特别是当这些变量在指令中需要按块（如 4 字节）访问时。</p></li></ul><h3 id="5-对齐的宏-ALIGN-是如何提高效率的"><a href="#5-对齐的宏-ALIGN-是如何提高效率的" class="headerlink" title="5. 对齐的宏 ALIGN 是如何提高效率的"></a>5. <strong>对齐的宏 <code>ALIGN</code> 是如何提高效率的</strong></h3><p>对齐宏 <code>ALIGN</code> 的主要目的是确保分配的内存地址符合 CPU 最佳访问模式，通常是：</p><ul><li><p><strong>更少的 CPU 时钟周期</strong>：数据对齐可以使得处理器在读取或写入内存时减少所需的时钟周期，因为它可以一次性读取数据块，而无需分成两次访问。</p></li><li><p><strong>提高缓存命中率</strong>：当内存中的数据被正确对齐时，处理器读取的缓存行更有可能完整地包含所需数据，从而减少缓存失效。</p></li></ul><p>通过使用 <code>ALIGN(RT_ALIGN_SIZE)</code>，可以确保：</p><ul><li><p><strong>堆栈起始地址是对齐的</strong>，这样堆栈上的变量访问更有效，避免了未对齐的访问引起的性能损失。</p></li><li><p><strong>结构体和数据访问更快</strong>，从而提高整个系统的实时响应能力，这对于 RT-Thread 这样的实时操作系统至关重要。</p></li></ul><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>在您的代码中使用 <code>ALIGN(RT_ALIGN_SIZE)</code> 的目的是确保线程堆栈的地址对齐到一个特定的边界，这样做的好处是：</p><ul><li><strong>提高 CPU 访问内存的效率</strong>，因为对齐内存使得 CPU 访问时只需单次操作而不是多次分段操作。</li><li><strong>减少内存访问的额外开销</strong>，尤其是在读取和写入未对齐的数据时避免额外的指令和时钟周期的浪费。</li><li><strong>提高代码的执行速度</strong>，尤其是需要频繁访问堆栈中的局部变量和其他数据的场景。</li></ul><p>这对于实时系统中的调度和响应时间来说尤为重要，因此在 RT-Thread 这样的嵌入式系统中，内存对齐是一个非常关键的优化手段。</p><h1 id="邮箱"><a href="#邮箱" class="headerlink" title="邮箱"></a>邮箱</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">rt_thread_t</span> th1_ptr, th2_ptr;</span><br><span class="line"><span class="type">rt_mailbox_t</span> mb_ptr;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> str1[]=<span class="string">&quot;12345&quot;</span>;</span><br><span class="line"><span class="type">char</span> str2[]=<span class="string">&quot;67890&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">th1_recv</span><span class="params">(<span class="type">void</span> *parameter)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">rt_err_t</span> ret;</span><br><span class="line">    <span class="type">char</span>* Recv;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ret = rt_mb_recv(mb_ptr, (<span class="type">rt_ubase_t</span>*)&amp;Recv, RT_WAITING_FOREVER);</span><br><span class="line">        <span class="keyword">if</span>(ret == RT_EOK)</span><br><span class="line">        &#123;</span><br><span class="line">            rt_kprintf(<span class="string">&quot;rt_mb_recv is %s!\r\n&quot;</span> ,Recv);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            LOG_E(<span class="string">&quot;mb rt_mb_recv failed!\r\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        rt_thread_mdelay(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">th2_send</span><span class="params">(<span class="type">void</span> *parameter)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">rt_err_t</span> ret;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ret = rt_mb_send(mb_ptr,(<span class="type">rt_ubase_t</span>)str1);</span><br><span class="line">        <span class="keyword">if</span>(ret != RT_EOK)</span><br><span class="line">        &#123;</span><br><span class="line">            LOG_E(<span class="string">&quot;mb rt_mb_send failed!\r\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        rt_thread_mdelay(<span class="number">1000</span>);</span><br><span class="line">        ret = rt_mb_send(mb_ptr,(<span class="type">rt_ubase_t</span>)str2);</span><br><span class="line">        <span class="keyword">if</span>(ret != RT_EOK)</span><br><span class="line">        &#123;</span><br><span class="line">            LOG_E(<span class="string">&quot;mb rt_mb_send failed!\r\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        rt_thread_mdelay(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    mb_ptr = rt_mb_create(<span class="string">&quot;mb_ptr&quot;</span>, <span class="number">4</span>, RT_IPC_FLAG_FIFO);<span class="comment">// 四封邮件</span></span><br><span class="line">    <span class="keyword">if</span>(mb_ptr == RT_NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        LOG_E(<span class="string">&quot;mb_ptr rt_mb_create failed!\r\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    th1_ptr = rt_thread_create(<span class="string">&quot;th1&quot;</span>, th1_recv, <span class="literal">NULL</span>, <span class="number">1024</span>, <span class="number">7</span>, <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">if</span>(th1_ptr == RT_NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        LOG_E(<span class="string">&quot;th1_recv rt_thread_create failed!\r\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> -RT_ENOMEM;</span><br><span class="line">    &#125;</span><br><span class="line">    rt_thread_startup(th1_ptr);</span><br><span class="line"></span><br><span class="line">    th2_ptr = rt_thread_create(<span class="string">&quot;th2&quot;</span>, th2_send, <span class="literal">NULL</span>, <span class="number">1024</span>, <span class="number">8</span>, <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">if</span>(th2_ptr == RT_NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        LOG_E(<span class="string">&quot;th2_send rt_thread_create failed!\r\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> -RT_ENOMEM;</span><br><span class="line">    &#125;</span><br><span class="line">    rt_thread_startup(th2_ptr);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> RT_EOK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为什么定义的邮箱容量为 4，但可以发送五个字节的数据而没有报错。</p><h3 id="1-邮箱-Mailbox-的工作机制"><a href="#1-邮箱-Mailbox-的工作机制" class="headerlink" title="1. 邮箱 (Mailbox) 的工作机制"></a>1. <strong>邮箱 (<code>Mailbox</code>) 的工作机制</strong></h3><p>在 RT-Thread 中，<strong>邮箱 (<code>Mailbox</code>)</strong> 是一种用于线程间通信的同步机制，类似于其他 RTOS 中的消息队列。<strong>邮箱并不是直接存储数据，而是存储指针</strong>。换句话说，邮箱中保存的是内存中数据的地址（指针），而不是数据本身的内容。</p><ul><li><p><strong>邮箱容量</strong>：</p><ul><li>您创建了一个邮箱，其容量为 <strong>4</strong>：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mb_ptr = rt_mb_create(<span class="string">&quot;mb_ptr&quot;</span>, <span class="number">4</span>, RT_IPC_FLAG_FIFO);</span><br></pre></td></tr></table></figure>这表示这个邮箱最多可以存储 <strong>4 个指针</strong>，即最多可以存放 <strong>4 个消息地址</strong>。</li></ul></li><li><p><strong>数据的传递方式</strong>：</p><ul><li>在您代码中，通过 <code>rt_mb_send(mb_ptr, (rt_ubase_t)str1)</code> 将字符串 <code>str1</code> 的地址发送到邮箱中。</li><li><strong>邮箱并不关心字符串的长度</strong>，因为它只存储了字符串的地址（指针）。这个地址是一个固定大小的数据（通常是 4 或 8 字节，取决于系统的字长），与字符串长度无关。</li></ul></li></ul><h3 id="2-邮箱存储的是指针"><a href="#2-邮箱存储的是指针" class="headerlink" title="2. 邮箱存储的是指针"></a>2. <strong>邮箱存储的是指针</strong></h3><ul><li><strong>存储指针</strong>：当调用 <code>rt_mb_send(mb_ptr, (rt_ubase_t)str1)</code> 时，您发送的是指针 <code>str1</code>，这个指针指向字符串 <code>&quot;12345&quot;</code> 的首地址。</li><li><strong>邮箱容量的含义</strong>：定义邮箱容量为 <code>4</code>，并不意味着可以存储 <code>4 个字节</code>，而是说<strong>邮箱可以存储 4 个指针</strong>。<ul><li>每次调用 <code>rt_mb_send</code>，邮箱会存储这个消息的指针，并将其传递给接收方。</li></ul></li></ul><h3 id="3-具体解释您的代码"><a href="#3-具体解释您的代码" class="headerlink" title="3. 具体解释您的代码"></a>3. <strong>具体解释您的代码</strong></h3><ul><li><p>您的代码中，线程 <code>th2_send</code> 向邮箱发送两次字符串地址：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ret = rt_mb_send(mb_ptr, (<span class="type">rt_ubase_t</span>)str1);</span><br><span class="line">ret = rt_mb_send(mb_ptr, (<span class="type">rt_ubase_t</span>)str2);</span><br></pre></td></tr></table></figure><ul><li><strong><code>str1</code></strong> 的内容是 <code>&quot;12345&quot;</code>，<strong>5 个字节</strong>，但发送给邮箱的是指向这个字符串的 <strong>地址</strong>。</li><li><strong><code>str2</code></strong> 的内容是 <code>&quot;67890&quot;</code>，也是 <strong>5 个字节</strong>，同样发送的是这个字符串的 <strong>地址</strong>。</li></ul></li><li><p><strong>邮箱的容量是 <code>4</code></strong>：</p><ul><li>这表示邮箱可以存储 <strong>4 个指针</strong>。每个指针的大小通常是 <strong>4 字节</strong>（在 32 位系统中）或者 <strong>8 字节</strong>（在 64 位系统中），与指针所指向的数据大小无关。</li><li>因此，尽管您的字符串 <code>str1</code> 和 <code>str2</code> 各有 <strong>5 个字节</strong>，邮箱中只是保存了它们的 <strong>首地址</strong>，并不是直接保存字符串的内容。</li><li>由于您只发送了两次数据，邮箱并未达到其存储指针的上限（容量为 4），所以不会报错。</li></ul></li></ul><h3 id="4-关于发送的数据量与邮箱容量"><a href="#4-关于发送的数据量与邮箱容量" class="headerlink" title="4. 关于发送的数据量与邮箱容量"></a>4. <strong>关于发送的数据量与邮箱容量</strong></h3><ul><li><strong>邮箱容量</strong>：邮箱容量表示能存储的消息数（指针个数），而不是每条消息的数据量。因此，即使每条消息的数据量不同，邮箱只关心存储的指针的数量。</li><li><strong>发送 5 个字节没有报错</strong>：<ul><li>由于邮箱只存储指针，而不是字符串内容本身，邮箱的容量与字符串的大小无关。因此可以发送任意长度的数据，只要邮箱中有足够的空间（定义的缓冲区足够大）存储指针即可。</li><li>在您的代码中，<code>str1</code> 和 <code>str2</code> 分别是 5 字节的字符串，但发送到邮箱的内容只是它们的内存地址，而这些地址是 <strong>固定长度的指针</strong>。</li></ul></li></ul><h3 id="5-接收数据"><a href="#5-接收数据" class="headerlink" title="5. 接收数据"></a>5. <strong>接收数据</strong></h3><ul><li>在 <code>th1_recv</code> 线程中，使用 <code>rt_mb_recv(mb_ptr, (rt_ubase_t*)&amp;Recv, RT_WAITING_FOREVER)</code> 接收来自邮箱的消息。<ul><li><strong><code>Recv</code></strong> 是一个指针，用于保存从邮箱接收到的指针值。</li><li>接收到指针之后，使用 <code>rt_kprintf(&quot;rt_mb_recv is %s!\r\n&quot; ,Recv);</code> 打印字符串内容，这样可以打印出 <code>str1</code> 或 <code>str2</code> 的内容。</li></ul></li></ul><h3 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. <strong>总结</strong></h3><ul><li><strong>邮箱的容量 <code>4</code> 表示它能存储 4 个指针</strong>，即可以存储 4 个消息的地址，而不是指向数据的大小。消息内容的实际长度无关紧要，因为邮箱只存储指向消息的指针。</li><li><strong>每次发送的是字符串的地址</strong>，而不是字符串本身。因此，无论字符串是 <code>&quot;12345&quot;</code> 还是更长的字符串，只要邮箱中有足够的空间来存储指针，就不会报错。</li><li>这就是为什么定义的邮箱容量为 <code>4</code>，但可以发送指向长度为 5 字节（或更大）的数据指针的原因。邮箱中只关心存储多少个消息的地址，而不关心数据的实际长度。</li></ul><p>希望这个解释能帮助您更好地理解 RT-Thread 中的邮箱机制以及为什么发送 5 个字节的字符串并不会受到邮箱容量限制的原因。</p><h1 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h1><h2 id="问题一：内存分配错误"><a href="#问题一：内存分配错误" class="headerlink" title="问题一：内存分配错误"></a>问题一：内存分配错误</h2><p>如图：</p><p><img src="/2024/10/27/RTT/RTT%E9%97%AE%E9%A2%98%E5%90%88%E9%9B%86/QQ20241028-204753.png" alt="QQ20241028-204753"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">rt_thread_t</span> th1_ptr, th2_ptr;</span><br><span class="line"><span class="type">rt_mq_t</span> mq_ptr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">msg</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> Recv_ptr[<span class="number">100</span>];<span class="comment">//////////////</span></span><br><span class="line">    <span class="type">uint16_t</span> Recv_ptr_len;</span><br><span class="line">&#125;<span class="type">msg_t</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> str1[]=<span class="string">&quot;12345678&quot;</span>;</span><br><span class="line"><span class="type">char</span> str2[]=<span class="string">&quot;67890&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">th1_recv</span><span class="params">(<span class="type">void</span> *parameter)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">rt_err_t</span> ret;</span><br><span class="line">    <span class="type">msg_t</span> Msg_Info;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ret = rt_mq_recv(mq_ptr, &amp;Msg_Info, <span class="keyword">sizeof</span>(<span class="type">msg_t</span>), RT_WAITING_FOREVER);</span><br><span class="line">        <span class="keyword">if</span>(ret &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            rt_kprintf(<span class="string">&quot;rt_mq_recv is %s the len is %d!\r\n&quot;</span> ,Msg_Info.Recv_ptr,Msg_Info.Recv_ptr_len);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            LOG_E(<span class="string">&quot;mq rt_mq_recv failed!\r\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">th2_send</span><span class="params">(<span class="type">void</span> *parameter)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">rt_err_t</span> ret;</span><br><span class="line">    <span class="type">msg_t</span> Msg_Info;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">strcpy</span>(Msg_Info.Recv_ptr, str1);</span><br><span class="line">        Msg_Info.Recv_ptr_len = <span class="built_in">strlen</span>(Msg_Info.Recv_ptr);</span><br><span class="line"></span><br><span class="line">        ret = rt_mq_send(mq_ptr, &amp;Msg_Info, <span class="keyword">sizeof</span>(<span class="type">msg_t</span>));</span><br><span class="line">        <span class="keyword">if</span>(ret != RT_EOK)</span><br><span class="line">        &#123;</span><br><span class="line">            LOG_E(<span class="string">&quot;mq_ptr rt_mq_send failed!\r\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        rt_thread_mdelay(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">strcpy</span>(Msg_Info.Recv_ptr, str2);</span><br><span class="line">        Msg_Info.Recv_ptr_len = <span class="built_in">strlen</span>(Msg_Info.Recv_ptr);</span><br><span class="line">        ret = rt_mq_send(mq_ptr, &amp;Msg_Info, <span class="keyword">sizeof</span>(<span class="type">msg_t</span>));</span><br><span class="line">        <span class="keyword">if</span>(ret != RT_EOK)</span><br><span class="line">        &#123;</span><br><span class="line">            LOG_E(<span class="string">&quot;mq_ptr rt_mq_send failed!\r\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        rt_thread_mdelay(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    mq_ptr = rt_mq_create(<span class="string">&quot;mq_ptr&quot;</span>, (<span class="type">rt_size_t</span>)<span class="keyword">sizeof</span>(<span class="type">msg_t</span>), (<span class="type">rt_size_t</span>)<span class="number">4</span>, RT_IPC_FLAG_FIFO);</span><br><span class="line">    <span class="keyword">if</span>(mq_ptr == RT_NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        LOG_E(<span class="string">&quot;mq_ptr rt_mq_create failed!\r\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    th1_ptr = rt_thread_create(<span class="string">&quot;th1&quot;</span>, th1_recv, <span class="literal">NULL</span>, <span class="number">1024</span>, <span class="number">7</span>, <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">if</span>(th1_ptr == RT_NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        LOG_E(<span class="string">&quot;th1_recv rt_thread_create failed!\r\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> -RT_ENOMEM;</span><br><span class="line">    &#125;</span><br><span class="line">    rt_thread_startup(th1_ptr);</span><br><span class="line"></span><br><span class="line">    th2_ptr = rt_thread_create(<span class="string">&quot;th2&quot;</span>, th2_send, <span class="literal">NULL</span>, <span class="number">1024</span>, <span class="number">8</span>, <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">if</span>(th2_ptr == RT_NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        LOG_E(<span class="string">&quot;th2_send rt_thread_create failed!\r\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> -RT_ENOMEM;</span><br><span class="line">    &#125;</span><br><span class="line">    rt_thread_startup(th2_ptr);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> RT_EOK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>为什么把 char Recv_ptr[100]换成 char* Recv_ptr，就有问题。</strong></p><p>你不在定义的时候初始化就意味着没有分配内存，下次要存入字符串需要动态申请内存才可。</p><p>根据你的描述和提供的图片，问题出在你将结构体 <code>msg_t</code> 中的 <code>char Recv_ptr[100]</code> 改为 <code>char* Recv_ptr</code> 时。这很可能导致了访问违规，这是由于内存分配不正确，而不一定是栈溢出问题。</p><h3 id="关键区别："><a href="#关键区别：" class="headerlink" title="关键区别："></a>关键区别：</h3><ol><li><p><strong><code>char Recv_ptr[100]</code>:</strong><br>当你在结构体中将 <code>Recv_ptr</code> 定义为固定大小的数组时，数组的内存会随着结构体实例一起分配。这意味着每次创建 <code>msg_t</code> 的实例时，都会为 <code>Recv_ptr</code> 分配空间。这种方式较为安全，因为缓冲区的内存是自动分配的。</p></li><li><p><strong><code>char* Recv_ptr</code>:</strong><br>当你将 <code>Recv_ptr</code> 改为指针时，它只保存一个字符数组的地址，但你<strong>必须负责为 <code>Recv_ptr</code> 指向的数据分配内存</strong>。如果你没有明确分配内存（例如，使用 <code>malloc</code> 或静态分配），那么在用 <code>strcpy</code> 复制数据到 <code>Recv_ptr</code> 时就会出现问题。这可能会导致未定义行为、程序崩溃或类似你看到的错误。</p></li></ol><h3 id="你图片中的错误："><a href="#你图片中的错误：" class="headerlink" title="你图片中的错误："></a>你图片中的错误：</h3><ul><li><code>IMPRECISERR</code> 表示发生了不精确的总线错误，通常是由于非法的内存访问引发的。此类错误通常发生在指针没有正确初始化或指向了无效的内存时（例如，如果你尝试用 <code>strcpy</code> 向未分配内存的指针写入数据）。</li></ul><h3 id="建议："><a href="#建议：" class="headerlink" title="建议："></a>建议：</h3><ol><li><p><strong>内存分配</strong>：<br>如果你想使用 <code>char* Recv_ptr</code>，你必须动态分配内存。在 <code>th2_send</code> 中使用 <code>Recv_ptr</code> 之前，你需要像这样分配内存：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Msg_Info.Recv_ptr = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">100</span> * <span class="keyword">sizeof</span>(<span class="type">char</span>));  <span class="comment">// 分配内存</span></span><br><span class="line"><span class="keyword">if</span> (Msg_Info.Recv_ptr == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">    LOG_E(<span class="string">&quot;内存分配失败！\r\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;  <span class="comment">// 适当处理错误</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用完内存后，还要确保释放内存，否则会导致内存泄漏：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">free</span>(Msg_Info.Recv_ptr);</span><br></pre></td></tr></table></figure></li><li><p><strong>另一种方法（保持数组）</strong>：<br>如果你不想处理手动内存管理，可以继续使用 <code>Recv_ptr[100]</code> 作为数组。这样，内存会自动随结构体分配，减少类似问题的出现几率。</p></li></ol><h3 id="结论："><a href="#结论：" class="headerlink" title="结论："></a>结论：</h3><p>你在图片中看到的错误是由于内存访问违规引发的总线错误（IMPRECISERR），而不是栈溢出问题。根本原因是你将数组改为指针，但没有为指针分配内存。你可以选择手动管理内存（使用 <code>malloc/free</code>），或者恢复使用更安全的 <code>char Recv_ptr[100]</code> 数组版本。</p><h1 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h1><h2 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h2><p>如图：</p><p><img src="/2024/10/27/RTT/RTT%E9%97%AE%E9%A2%98%E5%90%88%E9%9B%86/QQ20241029-190812.png" alt="QQ20241029-190812"></p><p>在这段代码中，定时器被创建为一个周期性、软定时器，初始超时时间为100个tick。定时器的回调函数<code>timer_callback</code>会打印当前的tick计数（<code>rt_tick_get()</code>）。</p><p>代码可能在2020这个tick值处停止并无法继续的原因如下：</p><ol><li><p><strong>定时器控制函数（<code>rt_timer_control</code>）</strong>：你使用<code>rt_timer_control</code>将超时时间设置为2000个tick。然而，这一行代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RT_ASSERT((*(<span class="type">rt_tick_t</span> *)arg) &lt; RT_TICK_MAX / <span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>是一个安全检查。此断言确保设置的超时时间不超过<code>RT_TICK_MAX / 2</code>，因为如果值太大，可能会导致定时器计算出现溢出或意外行为。例如，如果<code>RT_TICK_MAX</code>为4096，那么<code>RT_TICK_MAX / 2</code>就是2048，这意味着超时时间不能超过此限制。</p></li><li><p><strong>断言的作用</strong>：这个断言是为了防止系统接受接近<code>RT_TICK_MAX</code>的超时时间值，这样做可以避免tick计数器溢出或环绕带来的不可预测结果。通过将定时间隔限制在一个安全阈值内（小于<code>RT_TICK_MAX</code>的一半），可以避免这些问题。</p></li><li><p><strong>停止在2020的原因</strong>：当你尝试将定时间隔设置为2000个tick时，这可能会接近或超过tick计数器的最大容量，尤其是在<code>RT_TICK_MAX</code>不比2020大很多的情况下。如果达到<code>RT_TICK_MAX</code>，tick计数器可能会环绕或根据系统内部限制停止递增，从而导致程序在2020处停滞。</p></li></ol><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>检查系统的<code>RT_TICK_MAX</code>值，确保定时器的超时时间（2000个tick）远小于<code>RT_TICK_MAX / 2</code>。如果有必要，可以在<code>rt_timer_control</code>函数中减少超时时间，以避免触发该断言。</p><h1 id="互斥量"><a href="#互斥量" class="headerlink" title="互斥量"></a>互斥量</h1><h2 id="问题一-1"><a href="#问题一-1" class="headerlink" title="问题一"></a>问题一</h2><p><strong><code>rt_mutex_take</code></strong>为啥会出现断言错误？</p><p>这个错误说明在中断服务例程（ISR）中调用了<code>_rt_mutex_take</code>函数，而在RT-Thread中，<strong>不允许在中断上下文中使用互斥量</strong>。这是因为互斥量的实现通常依赖于线程调度，<code>而中断上下文中不允许进行线程调度操作</code>。因此，尝试在ISR中使用互斥量时，会触发断言失败，从而导致报错。</p><h3 id="为什么不能在中断中使用互斥量？"><a href="#为什么不能在中断中使用互斥量？" class="headerlink" title="为什么不能在中断中使用互斥量？"></a>为什么不能在中断中使用互斥量？</h3><ol><li><strong>线程调度限制</strong>：互斥量的实现通常需要支持阻塞等待（比如线程进入等待队列），这是在中断上下文中不能做的操作，因为中断不支持线程切换。</li><li><strong>中断实时性</strong>：中断服务例程的设计应尽量简短、快速完成，以保证系统的实时性。互斥量的使用可能导致在ISR中长时间等待资源，影响系统性能。</li></ol><h3 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h3><p>如果在中断服务例程中需要保护共享资源，可以采用其他适用于中断环境的同步机制，例如<strong>信号量</strong>或<strong>禁用中断</strong>。</p><p>以下是几种可替代的方法：</p><h4 id="方法-1：使用信号量"><a href="#方法-1：使用信号量" class="headerlink" title="方法 1：使用信号量"></a>方法 1：使用信号量</h4><p>如果你的需求只是通知某个线程去处理资源，而不需要在ISR中直接访问互斥量，可以使用信号量来实现异步通知。</p><ul><li>在ISR中发送信号量，通知后台线程去处理资源。</li><li>后台线程等待信号量并在获取到信号量后，再使用互斥量去访问共享资源。</li></ul><p>示例代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;rtthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建互斥量</span></span><br><span class="line"><span class="type">static</span> <span class="type">rt_mutex_t</span> serial2_mutex = RT_NULL;</span><br><span class="line"><span class="type">static</span> <span class="type">rt_mutex_t</span> serial3_mutex = RT_NULL;</span><br><span class="line"><span class="type">static</span> <span class="type">rt_mutex_t</span> face_flag_mutex = RT_NULL;</span><br><span class="line"><span class="type">static</span> <span class="type">rt_mutex_t</span> temp_mutex = RT_NULL;</span><br><span class="line"><span class="type">static</span> <span class="type">rt_mutex_t</span> dist_mutex = RT_NULL;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Mutex_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    serial2_mutex = rt_mutex_create(<span class="string">&quot;serial2_mutex&quot;</span>, RT_IPC_FLAG_FIFO);</span><br><span class="line">    serial3_mutex = rt_mutex_create(<span class="string">&quot;serial3_mutex&quot;</span>, RT_IPC_FLAG_FIFO);</span><br><span class="line">    face_flag_mutex = rt_mutex_create(<span class="string">&quot;face_flag_mutex&quot;</span>, RT_IPC_FLAG_FIFO);</span><br><span class="line">    temp_mutex = rt_mutex_create(<span class="string">&quot;temp_mutex&quot;</span>, RT_IPC_FLAG_FIFO);</span><br><span class="line">    dist_mutex = rt_mutex_create(<span class="string">&quot;dist_mutex&quot;</span>, RT_IPC_FLAG_FIFO);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (serial2_mutex == RT_NULL || serial3_mutex == RT_NULL ||</span><br><span class="line">        face_flag_mutex == RT_NULL || temp_mutex == RT_NULL || dist_mutex == RT_NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        rt_kprintf(<span class="string">&quot;Failed to create one or more mutexes!\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 串口写操作示例</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">write_to_serial2</span><span class="params">(<span class="type">const</span> <span class="type">uint8_t</span> *data, <span class="type">size_t</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">    rt_mutex_take(serial2_mutex, RT_WAITING_FOREVER); <span class="comment">// 加锁</span></span><br><span class="line">    rt_device_write(Serial2, <span class="number">0</span>, data, size);</span><br><span class="line">    rt_mutex_release(serial2_mutex); <span class="comment">// 解锁</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问 faceCheckFlag 的示例</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">set_face_check_flag</span><span class="params">(<span class="type">uint8_t</span> value)</span></span><br><span class="line">&#123;</span><br><span class="line">    rt_mutex_take(face_flag_mutex, RT_WAITING_FOREVER); <span class="comment">// 加锁</span></span><br><span class="line">    faceCheckFlag = value;</span><br><span class="line">    rt_mutex_release(face_flag_mutex); <span class="comment">// 解锁</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">get_face_check_flag</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint8_t</span> value;</span><br><span class="line">    rt_mutex_take(face_flag_mutex, RT_WAITING_FOREVER); <span class="comment">// 加锁</span></span><br><span class="line">    value = faceCheckFlag;</span><br><span class="line">    rt_mutex_release(face_flag_mutex); <span class="comment">// 解锁</span></span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问 temp 的示例</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">set_temp</span><span class="params">(<span class="type">float</span> value)</span></span><br><span class="line">&#123;</span><br><span class="line">    rt_mutex_take(temp_mutex, RT_WAITING_FOREVER); <span class="comment">// 加锁</span></span><br><span class="line">    temp = value;</span><br><span class="line">    rt_mutex_release(temp_mutex); <span class="comment">// 解锁</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">float</span> <span class="title function_">get_temp</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">float</span> value;</span><br><span class="line">    rt_mutex_take(temp_mutex, RT_WAITING_FOREVER); <span class="comment">// 加锁</span></span><br><span class="line">    value = temp;</span><br><span class="line">    rt_mutex_release(temp_mutex); <span class="comment">// 解锁</span></span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问 Dist 的示例</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">set_dist</span><span class="params">(<span class="type">rt_uint32_t</span> value)</span></span><br><span class="line">&#123;</span><br><span class="line">    rt_mutex_take(dist_mutex, RT_WAITING_FOREVER); <span class="comment">// 加锁</span></span><br><span class="line">    Dist = value;</span><br><span class="line">    rt_mutex_release(dist_mutex); <span class="comment">// 解锁</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">rt_uint32_t</span> <span class="title function_">get_dist</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">rt_uint32_t</span> value;</span><br><span class="line">    rt_mutex_take(dist_mutex, RT_WAITING_FOREVER); <span class="comment">// 加锁</span></span><br><span class="line">    value = Dist;</span><br><span class="line">    rt_mutex_release(dist_mutex); <span class="comment">// 解锁</span></span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方法-2：禁用中断"><a href="#方法-2：禁用中断" class="headerlink" title="方法 2：禁用中断"></a>方法 2：禁用中断</h4><p>在一些实时要求不高的情况下，也可以在进入临界区时短暂禁用中断，从而保护共享资源。</p><p>示例代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">access_shared_resource_in_isr_safe</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">rt_base_t</span> level = rt_hw_interrupt_disable();  <span class="comment">// 禁用中断</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 访问共享资源</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    rt_hw_interrupt_enable(level);  <span class="comment">// 恢复中断</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><ul><li><strong>在ISR中不要使用互斥量</strong>。使用信号量通知后台线程完成任务或临时禁用中断可以替代互斥量。</li><li><strong>使用信号量</strong>适用于需要线程响应的情况；<strong>禁用中断</strong>适用于快速完成资源访问的情况。</li></ul><p>通过这样处理，你可以避免断言失败的错误，同时确保系统的安全性和稳定性。</p><h1 id="延时函数的使用"><a href="#延时函数的使用" class="headerlink" title="延时函数的使用"></a>延时函数的使用</h1><h2 id="问题一-2"><a href="#问题一-2" class="headerlink" title="问题一"></a>问题一</h2><p>虽然打印出<strong>Thread_Uart2 created successfully and started</strong>.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">UART2_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">rt_err_t</span> ret = RT_EOK;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化环形缓冲区</span></span><br><span class="line">    rt_ringbuffer_init(&amp;rxRingBuffer, rxBuffer, UART_BUFFER_SIZE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建接收信号量</span></span><br><span class="line">    rxUart2Sem = rt_sem_create(<span class="string">&quot;rxUart2Sem&quot;</span>, <span class="number">0</span>, RT_IPC_FLAG_FIFO);</span><br><span class="line">    <span class="keyword">if</span> (rxUart2Sem == RT_NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        rt_kprintf(<span class="string">&quot;rxUart2Sem rt_sem_create failed!\r\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ret = RT_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查找系统中的串口二设备</span></span><br><span class="line">    Serial2 = rt_device_find(SAMPLE_UART2_NAME);</span><br><span class="line">    <span class="keyword">if</span> (Serial2 == RT_NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        rt_kprintf(<span class="string">&quot;find %s failed!\r\n&quot;</span>, SAMPLE_UART2_NAME);</span><br><span class="line">        <span class="keyword">return</span> ret = RT_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 以中断接收及轮询发送模式打开串口设备</span></span><br><span class="line">    rt_device_open(Serial2, RT_DEVICE_FLAG_INT_RX);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置接收回调函数</span></span><br><span class="line">    rt_device_set_rx_indicate(Serial2, UART2_Input);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建线程Thread_Uart2</span></span><br><span class="line">    <span class="type">rt_thread_t</span> Thread_Uart2 = rt_thread_create(<span class="string">&quot;Thread_Uart2&quot;</span>, Thread_Uart2_Entry, RT_NULL, <span class="number">2048</span>, <span class="number">25</span>, <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">if</span> (Thread_Uart2 == RT_NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        rt_kprintf(<span class="string">&quot;Thread_Uart2 is created failed!\r\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ret = RT_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (Thread_Uart2 == RT_NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        rt_kprintf(<span class="string">&quot;Thread_Uart2 creation failed!\r\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        rt_kprintf(<span class="string">&quot;Thread_Uart2 created successfully and started.\r\n&quot;</span>);</span><br><span class="line">        rt_thread_startup(Thread_Uart2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 打印初始化信息</span></span><br><span class="line">    rt_kprintf(<span class="string">&quot;UART2 Init successfully\r\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>表示线程调度开始，但是主函数没有延时函数，线程也没办法运行，因为把打印放线程函数最前面，也没办法打印1，所以到底是什么问题？</p><p>从你的描述来看，尽管 <code>Thread_Uart2</code> 线程已经成功创建和启动，但在主函数没有延时的情况下，<code>Thread_Uart2</code> 仍然无法运行，这表明主线程可能在某种程度上“阻塞”了其他线程的执行。这种情况可能是由以下原因导致的：</p><h3 id="1-主线程优先级较高，导致-Thread-Uart2-得不到执行"><a href="#1-主线程优先级较高，导致-Thread-Uart2-得不到执行" class="headerlink" title="1. 主线程优先级较高，导致 Thread_Uart2 得不到执行"></a>1. 主线程优先级较高，导致 <code>Thread_Uart2</code> 得不到执行</h3><ul><li>在 RT-Thread 或类似的实时操作系统中，如果主线程的优先级高于其他线程，并且没有延时，主线程会一直占用 CPU 时间，导致优先级较低的 <code>Thread_Uart2</code> 没有机会执行。</li><li><strong>解决方法</strong>：尝试将 <code>Thread_Uart2</code> 的优先级设置得比主线程高，确保 <code>Thread_Uart2</code> 能够抢占主线程的执行，具体代码如下：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">rt_thread_t</span> Thread_Uart2 = rt_thread_create(<span class="string">&quot;Thread_Uart2&quot;</span>, Thread_Uart2_Entry, RT_NULL, <span class="number">2048</span>, <span class="number">10</span>, <span class="number">10</span>);</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-主线程处于忙等待状态"><a href="#2-主线程处于忙等待状态" class="headerlink" title="2. 主线程处于忙等待状态"></a>2. 主线程处于忙等待状态</h3><ul><li>如果主线程没有延时函数，并且处于一个忙等待的循环中，那么主线程会不断消耗 CPU 时间，即使它的优先级不高，也会挤占系统资源，导致其他线程难以获得执行机会。</li><li><strong>解决方法</strong>：确保主线程中至少有一个适当的延时调用（例如 <code>rt_thread_mdelay(100)</code>），这样可以让出 CPU 给其他线程。</li></ul><h3 id="3-主线程设置的优先级较低，但被无限占用"><a href="#3-主线程设置的优先级较低，但被无限占用" class="headerlink" title="3. 主线程设置的优先级较低，但被无限占用"></a>3. 主线程设置的优先级较低，但被无限占用</h3><ul><li>如果主线程的优先级较低，但它在一个忙等待的循环中（例如一直在调用某个操作而没有任何延时），尽管其他线程优先级更高，调度器仍然可能在某些情况下无法及时切换到 <code>Thread_Uart2</code>。</li><li><strong>解决方法</strong>：将主线程的逻辑设计成非阻塞模式，或者确保有足够的时间片供高优先级线程运行。</li></ul><h3 id="调试方法"><a href="#调试方法" class="headerlink" title="调试方法"></a>调试方法</h3><p>为了进一步确认问题，你可以在 <code>main()</code> 中进行如下测试：</p><ol><li><strong>将主线程优先级设置为更低的值</strong>，确保 <code>Thread_Uart2</code> 的优先级高于主线程。</li><li><strong>在主线程中添加延时</strong>，测试一下是否会影响 <code>Thread_Uart2</code> 的执行。</li></ol><p>这两条经验证都是可以的！！！！！</p><ol><li>在 <code>Thread_Uart2_Entry</code> 开始处添加打印：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rt_kprintf(<span class="string">&quot;Thread_Uart2 is running.\n&quot;</span>);</span><br></pre></td></tr></table></figure>如果该打印仍然无法显示，则说明确实是调度冲突问题。</li></ol><p><strong>主线程是主函数的while（1）吗？</strong></p><p>是的，通常在嵌入式系统中，<strong>主函数中的 <code>while(1)</code> 循环</strong>可以被看作是主线程的执行体。当主函数进入 <code>while(1)</code> 循环后，它就会不断地执行循环体内的代码，这被视为主线程的持续运行。</p><p>如果主函数中的 <code>while(1)</code> 循环没有任何延时或者其他阻塞操作，主线程将会持续占用 CPU 时间，这会影响系统对其他线程的调度。由于 RT-Thread 是一个实时操作系统，线程调度是基于优先级和时间片的。如果主线程占用了太多的 CPU 时间，其他优先级相对较低或者相同优先级的线程就很难得到执行机会。</p><h3 id="如何优化主函数中的-while-1-循环"><a href="#如何优化主函数中的-while-1-循环" class="headerlink" title="如何优化主函数中的 while(1) 循环"></a>如何优化主函数中的 <code>while(1)</code> 循环</h3><p>为了避免主线程占用过多的 CPU 时间，你可以在 <code>while(1)</code> 循环中添加一些延时或者其他释放 CPU 的操作，例如：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 主线程的主要任务</span></span><br><span class="line">    tempProc();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 让出 CPU，给其他线程执行的机会</span></span><br><span class="line">    rt_thread_mdelay(<span class="number">100</span>);  <span class="comment">// 延时 100 毫秒</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h3><p>如果没有延时，主线程的 <code>while(1)</code> 循环将会不断运行，占用 CPU 资源，影响到其他线程（例如你的串口接收线程）得到执行的机会。在主函数中添加 <code>rt_thread_mdelay(100)</code> 延时后，CPU 会被释放一段时间，系统能够调度其他线程正常运行。</p><h1 id="PWM初始化"><a href="#PWM初始化" class="headerlink" title="PWM初始化"></a>PWM初始化</h1><p>这里没加rt_device_open，为啥还能用？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化PWM设备，设置默认周期和脉冲宽度</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Pwm_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 查找PWM设备</span></span><br><span class="line">    pwmDev = (<span class="keyword">struct</span> rt_device_pwm*)rt_device_find(PWM_DEV_NAME);</span><br><span class="line">    <span class="keyword">if</span> (pwmDev == RT_NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        rt_kprintf(<span class="string">&quot;Pwm_Init run failed! can&#x27;t find %s device!\n&quot;</span>, PWM_DEV_NAME); <span class="comment">// 打印错误信息</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置PWM默认周期和脉冲宽度</span></span><br><span class="line">    rt_pwm_set(pwmDev, PWM_DEV_CHANNEL, PWM_PERIOD, PWM_CLOSED_PULSE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使能PWM</span></span><br><span class="line">    rt_pwm_enable(pwmDev, PWM_DEV_CHANNEL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 RT-Thread 中，PWM 设备是通过 <code>rt_device_find</code> 获取到设备控制块的指针后进行操作的，并不需要显式调用 <code>rt_device_open</code> 函数。</p><p>这是因为 <strong>PWM</strong> 驱动程序通常没有针对设备进行多用户访问控制，也不涉及硬件设备的多态操作，因此大部分的 PWM 驱动并没有实现或不需要实现 <code>Open</code> 操作。</p><p>具体来说：</p><ol><li><p><strong>PWM驱动初始化</strong>：<code>rt_device_find</code> 查找设备后，直接获取到设备对象（<code>pwmDev</code>），如果设备正确注册并且可以找到，这个指针就已经可以直接使用。</p></li><li><p><strong>PWM驱动的实现逻辑</strong>：在 RT-Thread 的设备驱动框架中，PWM 设备驱动通常注册的是 <code>rt_device_pwm_ops</code> 操作集，其中包括了设置周期和脉冲宽度 (<code>set</code>) 以及使能 (<code>enable</code>) 的函数。</p><p>这些函数可以直接操作 PWM 硬件寄存器，而不涉及对设备进行打开和关闭的资源控制。因此，调用这些函数时，不需要经过 <code>rt_device_open</code>。</p></li><li><p><strong>设备访问模型</strong>：不像某些需要复用资源的设备（如串口、SPI）需要通过 <code>open</code> 函数来进行资源分配和访问控制，PWM 通常被视为独占的硬件资源，因此不需要显式调用 <code>open</code> 函数。这让代码更加简洁，也方便用户在单个任务中使用 PWM。</p></li></ol><p>因此，这段代码可以正常工作，是因为 PWM 驱动的设计特性以及 RT-Thread 框架的设备驱动模型允许直接通过找到的设备控制块调用 <code>rt_pwm_set</code> 和 <code>rt_pwm_enable</code> 等函数，而不需要通过 <code>rt_device_open</code> 进行初始化。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>合集</title>
      <link href="/2024/10/04/%E6%9D%82%E8%B0%88/%E5%90%88%E9%9B%86/"/>
      <url>/2024/10/04/%E6%9D%82%E8%B0%88/%E5%90%88%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h1 id="动态窗口"><a href="#动态窗口" class="headerlink" title="动态窗口"></a>动态窗口</h1><p>理解这个动态窗口可以从它的<strong>设计目的</strong>和<strong>运行机制</strong>两个角度来分析。动态窗口是为了确保系统只处理最近一段时间（比如3秒）内的数据，并通过一个<strong>环形缓冲区</strong>来实现数据的添加和移除。而且动态窗口可以看作是<strong>FIFO</strong>（先进先出）或者<strong>队列</strong>的一种实现形式，尤其是在处理实时数据或流数据时，动态窗口的工作方式和队列或FIFO的行为非常相似。</p><p>动态窗口的机制是为了确保数据的实时性和有效性，通过环形缓冲区和读写指针的管理，保证系统在有限的内存中处理最近的（例如3秒）数据，并能及时丢弃过期数据。这种设计广泛用于需要处理连续数据流的场景，例如传感器数据采集、网络流量监控等。</p><h2 id="动态窗口的设计目的"><a href="#动态窗口的设计目的" class="headerlink" title="动态窗口的设计目的"></a>动态窗口的设计目的</h2><ol><li><strong>实时性数据处理</strong>：系统需要在一个<strong>固定的时间范围</strong>内（如3秒）处理数据，而不是无限制地存储所有历史数据。动态窗口保证了系统只对最近一段时间的数据进行计算或分析，保证数据的实时性。</li><li><strong>节省内存</strong>：通过环形缓冲区的设计，系统不需要无限制地扩展内存，只需要一定大小的缓冲区来存储最近的数据。超出时间窗口的数据会被移除，腾出空间给新数据。</li><li><strong>滑动窗口</strong>：每当有新数据进入时，窗口会“滑动”——添加新数据的同时，移除超出时间范围的数据，保证窗口内的数据始终是最新的。</li></ol><h3 id="动态窗口的运行机制"><a href="#动态窗口的运行机制" class="headerlink" title="动态窗口的运行机制"></a>动态窗口的运行机制</h3><ol><li><strong>环形缓冲区</strong>：<ul><li>环形缓冲区的设计允许在有限的空间内进行数据的“读”和“写”操作。</li><li><code>buffer_start_r</code> 是读指针，表示当前窗口的<strong>起始位置</strong>，指向最旧的数据。</li><li><code>buffer_end_w</code> 是写指针，表示当前窗口的<strong>结束位置</strong>，指向最近写入的数据。</li></ul></li><li><strong>添加新数据</strong>：<ul><li>当新数据被采集后，它会被放入到 <code>buffer_end_w</code> 位置，并更新写指针 <code>buffer_end_w</code>，将其移到下一个可写入的位置。</li><li>如果写指针追上了读指针（即缓冲区满了），系统就需要调整 <code>buffer_start_r</code> 来丢弃最旧的数据，从而保证新数据有空间写入。</li></ul></li><li><strong>移除超时数据</strong>：<ul><li>每次写入新数据后，系统会检查缓冲区中的最旧数据（<code>buffer_start_r</code>）是否已经超出了设定的时间窗口（例如3秒）。</li><li>通过一个 <code>while</code> 循环，移除所有时间戳超过3秒的旧数据，直到缓冲区内的数据全部在最近3秒内为止。</li></ul></li></ol><h3 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h3><ol><li><strong>动态窗口本质上是一个滑动窗口</strong>：当新数据写入时，窗口会自动“滑动”，旧数据会被移除，新数据会被加入。窗口的大小（例如3秒）是固定的，但窗口内的数据内容会随时间变化。</li><li><strong>读写指针的管理</strong>：环形缓冲区通过读写指针来控制数据的读写，确保不会出现数据覆盖或错误。<code>buffer_start_r</code>（读指针）负责指出当前有效数据的最早位置，<code>buffer_end_w</code>（写指针）则指向下一个写入位置。</li><li><strong>时间范围的维护</strong>：通过对比当前时间与数据时间戳，可以有效地维护3秒这个时间窗口，确保在每次添加新数据时，只保留最近3秒内的数据。</li></ol><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// PH值结构体成员</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">uint32_t</span> <span class="type">time_t</span>;  <span class="comment">// 时间戳</span></span><br><span class="line">    <span class="type">uint32_t</span> adc_val; <span class="comment">// adc值</span></span><br><span class="line">&#125; <span class="type">adc_data_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PH值动态窗口环形缓冲区结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">uint16_t</span> buffer_start_r; <span class="comment">// 读</span></span><br><span class="line">    <span class="type">uint16_t</span> buffer_end_w;   <span class="comment">// 写</span></span><br><span class="line">    <span class="type">adc_data_t</span> adc_buffer[BUFFER_SIZE];</span><br><span class="line">&#125; Ph_ring_buffer;</span><br><span class="line"></span><br><span class="line">Ph_ring_buffer buffer[BUFFER_SIZE];</span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> Pd_mutation_status = <span class="number">0</span>; <span class="comment">// 突变状态</span></span><br><span class="line"><span class="type">uint8_t</span> Ph_overrun_status = <span class="number">0</span>;  <span class="comment">// 超限状态</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将采集到的adc值放到时间窗口中, 添加新数据到缓冲区并管理窗口数据</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">add_data_to_win</span><span class="params">(Ph_ring_buffer *buffer, <span class="type">uint16_t</span> current, <span class="type">uint16_t</span> adc)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 将时间戳和采集电压放入结构体中</span></span><br><span class="line">    buffer-&gt;adc_buffer[buffer-&gt;buffer_end_w].<span class="type">time_t</span> = current;</span><br><span class="line">    buffer-&gt;adc_buffer[buffer-&gt;buffer_end_w].adc_val = adc;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 循环30次，一次100ms，相当于一个采集3s内数据的动态窗口</span></span><br><span class="line">    buffer-&gt;buffer_end_w = (buffer-&gt;buffer_end_w + <span class="number">1</span>) % BUFFER_SIZE;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果缓冲区满了，调整buffer_start写指针</span></span><br><span class="line">    <span class="keyword">if</span> (buffer-&gt;buffer_start_r == buffer-&gt;buffer_end_w)</span><br><span class="line">    &#123;</span><br><span class="line">        buffer-&gt;buffer_start_r = (buffer-&gt;buffer_start_r + <span class="number">1</span>) % BUFFER_SIZE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// buffer_start_r </span></span><br><span class="line">    <span class="keyword">while</span> ((current - buffer-&gt;adc_buffer[buffer-&gt;buffer_start_r].<span class="type">time_t</span>) &gt; WINDOW_SIZE_MS)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 移动写指针，更新动态窗口</span></span><br><span class="line">        buffer-&gt;buffer_start_r = (buffer-&gt;buffer_start_r + <span class="number">1</span>) % BUFFER_SIZE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">check_Ph_val__sudden_change</span><span class="params">(Ph_ring_buffer *buffer, <span class="type">uint16_t</span> *p)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint32_t</span> Ph_max = buffer-&gt;adc_buffer[buffer-&gt;buffer_end_w].adc_val;</span><br><span class="line">    <span class="type">uint32_t</span> Ph_min = buffer-&gt;adc_buffer[buffer-&gt;buffer_end_w].adc_val;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> index = buffer-&gt;buffer_start_r;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 必须保证环形缓冲区内可以读，处理完先前写入环形缓冲区的数据。</span></span><br><span class="line">    <span class="keyword">while</span> (index != buffer-&gt;buffer_end_w)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 查找最大值</span></span><br><span class="line">        <span class="keyword">if</span> (Ph_max &lt; buffer-&gt;adc_buffer[index].adc_val)</span><br><span class="line">        &#123;</span><br><span class="line">            Ph_max = buffer-&gt;adc_buffer[index].adc_val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 查找最小值</span></span><br><span class="line">        <span class="keyword">if</span> (Ph_min &gt; buffer-&gt;adc_buffer[index].adc_val)</span><br><span class="line">        &#123;</span><br><span class="line">            Ph_min = buffer-&gt;adc_buffer[index].adc_val;</span><br><span class="line">        &#125;</span><br><span class="line">        index = (index + <span class="number">1</span>) % BUFFER_SIZE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint16_t</span> Ph_overrun = Ph_max - Ph_min;</span><br><span class="line">    <span class="comment">// 注意为什么这样写，而不是直接(*p)++;</span></span><br><span class="line">    <span class="keyword">if</span> (Ph_overrun &gt; pd_val)</span><br><span class="line">    &#123;</span><br><span class="line">        Pd_mutation_status = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (Pd_mutation_status == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Pd_mutation_status = <span class="number">0</span>;</span><br><span class="line">        (*p)++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ucLed[<span class="number">2</span>] = (Ph_overrun &gt; pd_val) ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h2><p>这段代码实现了一个<strong>动态窗口环形缓冲区</strong>，用于存储和管理最近一段时间（例如3秒）内的采集数据。该缓冲区的作用是持续存储传感器（如ADC）采集到的数据，并在每次采集新数据时，移除超出时间窗口范围（即超过3秒）的旧数据，保证系统只处理最新的、有效的数据。下面是对代码的详细解释：</p><h3 id="结构体定义"><a href="#结构体定义" class="headerlink" title="结构体定义"></a><strong>结构体定义</strong></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">uint32_t</span> <span class="type">time_t</span>;  <span class="comment">// 时间戳</span></span><br><span class="line">    <span class="type">uint32_t</span> adc_val; <span class="comment">// ADC采集的电压值</span></span><br><span class="line">&#125; <span class="type">adc_data_t</span>;</span><br></pre></td></tr></table></figure><ul><li><code>adc_data_t</code> 结构体包含两个成员：<ul><li><code>time_t</code>：表示数据采集的时间戳。</li><li><code>adc_val</code>：存储ADC采集到的电压值。</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">uint16_t</span> buffer_start_r; <span class="comment">// 读指针（缓冲区的起始位置）</span></span><br><span class="line">    <span class="type">uint16_t</span> buffer_end_w;   <span class="comment">// 写指针（缓冲区的结束位置）</span></span><br><span class="line">    <span class="type">adc_data_t</span> adc_buffer[BUFFER_SIZE]; <span class="comment">// 环形缓冲区，用于存储ADC采集数据</span></span><br><span class="line">&#125; Ph_ring_buffer;</span><br></pre></td></tr></table></figure><ul><li><code>Ph_ring_buffer</code> 是环形缓冲区的结构体：<ul><li><code>buffer_start_r</code>：指向当前有效数据的起始位置（读指针）。</li><li><code>buffer_end_w</code>：指向下一个将要写入数据的位置（写指针）。</li><li><code>adc_buffer</code>：这是实际存储数据的缓冲区，大小为 <code>BUFFER_SIZE</code>。</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ph_ring_buffer buffer[BUFFER_SIZE];</span><br></pre></td></tr></table></figure><ul><li>创建了一个 <code>buffer</code> 实例，用于存储数据。</li></ul><h3 id="add-data-to-win-函数详细解释"><a href="#add-data-to-win-函数详细解释" class="headerlink" title="add_data_to_win 函数详细解释"></a><strong><code>add_data_to_win</code> 函数详细解释</strong></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">add_data_to_win</span><span class="params">(Ph_ring_buffer *buffer, <span class="type">uint16_t</span> current, <span class="type">uint16_t</span> adc)</span></span><br></pre></td></tr></table></figure><ul><li>该函数用于将新采集的 ADC 数据（<code>adc</code>）添加到动态时间窗口中，并移除超出3秒的数据。</li><li><p>参数：</p><ul><li><code>buffer</code>：指向环形缓冲区的指针。</li><li><code>current</code>：当前的时间戳。</li><li><code>adc</code>：采集到的ADC值。</li></ul><p><strong>将新数据添加到缓冲区</strong></p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">buffer-&gt;adc_buffer[buffer-&gt;buffer_end_w].<span class="type">time_t</span> = current;</span><br><span class="line">buffer-&gt;adc_buffer[buffer-&gt;buffer_end_w].adc_val = adc;</span><br></pre></td></tr></table></figure><ul><li><p>将当前时间戳和采集到的电压值存入 <code>buffer_end_w</code> 位置，表示新采集的数据被放入缓冲区。</p><p><strong>移动写指针</strong></p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">buffer-&gt;buffer_end_w = (buffer-&gt;buffer_end_w + <span class="number">1</span>) % BUFFER_SIZE;</span><br></pre></td></tr></table></figure><ul><li><p>写指针 <code>buffer_end_w</code> 向前移动一个位置，指向下一个可以写入数据的位置。因为这是一个环形缓冲区，当写指针到达缓冲区末尾时，它会回到起始位置（通过 <code>% BUFFER_SIZE</code> 实现的）。</p><p><strong>处理缓冲区满的情况</strong></p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (buffer-&gt;buffer_start_r == buffer-&gt;buffer_end_w)</span><br><span class="line">&#123;</span><br><span class="line">    buffer-&gt;buffer_start_r = (buffer-&gt;buffer_start_r + <span class="number">1</span>) % BUFFER_SIZE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>如果写指针 <code>buffer_end_w</code> 追上了读指针 <code>buffer_start_r</code>，这意味着缓冲区满了。此时，需要将读指针 <code>buffer_start_r</code> 向前移动一位，以丢弃最早的数据，确保有空间存储新数据。这样可以保证缓冲区的数据始终处于<strong>先进先出（FIFO）</strong>的顺序。</p><p><strong>移除超出3秒的数据</strong></p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> ((current - buffer-&gt;adc_buffer[buffer-&gt;buffer_start_r].<span class="type">time_t</span>) &gt; WINDOW_SIZE_MS)</span><br><span class="line">&#123;</span><br><span class="line">    buffer-&gt;buffer_start_r = (buffer-&gt;buffer_start_r + <span class="number">1</span>) % BUFFER_SIZE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>这里通过一个 <code>while</code> 循环检查缓冲区中最早的数据（<code>buffer_start_r</code>）是否超出了设定的时间窗口（例如3秒）。</p><ul><li><code>current - buffer-&gt;adc_buffer[buffer-&gt;buffer_start_r].time_t &gt; WINDOW_SIZE_MS</code>：如果当前时间和最早数据的时间戳之差超过了 <code>WINDOW_SIZE_MS</code>（窗口大小，假设是3000毫秒），则表明该数据已经超时，不再需要。</li></ul></li><li><p>每次找到超时数据后，将读指针 <code>buffer_start_r</code> 向前移动一位，直到所有超出时间窗口的数据都被移除。</p></li></ul><p>2.5. <strong><code>while</code> 和 <code>if</code> 的选择</strong></p><ul><li>这里使用 <code>while</code> 来确保<strong>所有超出3秒的数据都被移除</strong>，即使有多个数据已经超出了时间窗口，<code>while</code> 循环会一直移动读指针，直到缓冲区中的数据都在3秒之内。</li><li>如果使用 <code>if</code>，则只会移除<strong>一个超出窗口的数据</strong>，这可能会导致缓冲区中仍然保留一些超时数据，无法确保整个窗口只包含最新的3秒内数据。</li></ul><ol><li><strong>总结与理解</strong></li></ol><ul><li><p>这个动态窗口是一个<strong>基于时间的滑动窗口</strong>，通过环形缓冲区实现，目的在于只保留最近的3秒数据。每次新数据写入时：</p><ul><li>新数据加入到缓冲区。</li><li>缓冲区满了时丢弃最早的数据。</li><li>检查并移除超过3秒的数据。</li></ul></li><li><p><strong>读写指针</strong>：通过 <code>buffer_start_r</code> 和 <code>buffer_end_w</code> 来管理数据的添加和移除，确保缓冲区始终在指定时间范围内保持有效数据，类似于队列的先进先出（FIFO）机制。</p></li><li><p><strong>动态窗口的滑动</strong>：每次新数据加入后，窗口会自动滑动，移除旧数据，保持窗口内的数据在3秒范围内。</p></li></ul><h2 id="FIFO与动态窗口异同"><a href="#FIFO与动态窗口异同" class="headerlink" title="FIFO与动态窗口异同"></a>FIFO与动态窗口异同</h2><h3 id="动态窗口与FIFO-队列的相似点"><a href="#动态窗口与FIFO-队列的相似点" class="headerlink" title="动态窗口与FIFO/队列的相似点"></a><strong>动态窗口与FIFO/队列的相似点</strong></h3><ul><li><p><strong>先进先出</strong>：动态窗口中的数据处理顺序是<strong>按时间顺序</strong>进行的，最早进入窗口的数据在超出时间范围或队列满时最先被移除，这与FIFO和队列的先进先出特性一致。</p></li><li><p><strong>顺序性</strong>：无论是动态窗口还是FIFO/队列，都保证了数据按照进入的顺序进行处理，新数据会按顺序添加，旧数据按顺序移除。</p></li></ul><h3 id="动态窗口与FIFO-队列的不同点"><a href="#动态窗口与FIFO-队列的不同点" class="headerlink" title="动态窗口与FIFO/队列的不同点"></a><strong>动态窗口与FIFO/队列的不同点</strong></h3><ul><li><p><strong>时间限制</strong>：队列和FIFO通常不考虑时间因素，而动态窗口的核心是按时间来管理数据。数据是否被移除不仅取决于它是否是最早的，还取决于它是否超出了时间窗口的范围。</p></li><li><p><strong>内存管理</strong>：FIFO或队列可以是动态大小，而动态窗口通常使用<strong>固定大小的环形缓冲区</strong>，限制存储的数据量。如果缓冲区满了，新数据将覆盖最旧的数据。</p></li></ul><h1 id="测量按键按下时间"><a href="#测量按键按下时间" class="headerlink" title="测量按键按下时间"></a>测量按键按下时间</h1><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><ol><li>使用定时器 2 通道 2 来捕获按键 2 按下时间，并通过串口打印。 </li><li>计一个数的时间：1us，PSC=71，ARR=65535 </li><li>下降沿捕获、输入通道 2 映射在 TI2 上、不分频、不滤波</li></ol><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p><img src="/2024/10/04/%E6%9D%82%E8%B0%88/%E5%90%88%E9%9B%86/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20241007130731.png" alt="微信截图_20241007130731"></p><p><strong>PA1和TIM2的Channel 2 相连。</strong></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ic.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;string.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 捕获状态结构体，存储捕获标志和计数状态</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">uint8_t</span> succeed_flag;  <span class="comment">// 成功捕获标志</span></span><br><span class="line">    <span class="type">uint8_t</span> rising_flag;   <span class="comment">// 上升沿标志</span></span><br><span class="line">    <span class="type">uint8_t</span> falling_flag;  <span class="comment">// 下降沿标志</span></span><br><span class="line">    <span class="type">uint16_t</span> timout_cnt;   <span class="comment">// 超时计数</span></span><br><span class="line">&#125; capture_status = &#123;<span class="number">0</span>&#125;;    <span class="comment">// 初始化为 0</span></span><br><span class="line"></span><br><span class="line"><span class="type">uint16_t</span> last_cnt = <span class="number">0</span>;  <span class="comment">// 存储最后一次捕获值</span></span><br><span class="line"></span><br><span class="line">TIM_HandleTypeDef ic_handle = &#123;<span class="number">0</span>&#125;;  <span class="comment">// 定时器句柄</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定时器输入捕获初始化函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">ic_init</span><span class="params">(<span class="type">uint16_t</span> arr, <span class="type">uint16_t</span> psc)</span></span><br><span class="line">&#123;</span><br><span class="line">    TIM_IC_InitTypeDef ic_config = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定时器实例配置为TIM2</span></span><br><span class="line">    ic_handle.Instance = TIM2;</span><br><span class="line">    ic_handle.Init.Prescaler = psc;          <span class="comment">// 预分频器设置</span></span><br><span class="line">    ic_handle.Init.Period = arr;             <span class="comment">// 自动重装载值</span></span><br><span class="line">    ic_handle.Init.CounterMode = TIM_COUNTERMODE_UP;  <span class="comment">// 向上计数模式</span></span><br><span class="line">    HAL_TIM_IC_Init(&amp;ic_handle);             <span class="comment">// 初始化定时器</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置输入捕获通道参数</span></span><br><span class="line">    ic_config.ICPolarity = TIM_ICPOLARITY_FALLING;  <span class="comment">// 捕获下降沿</span></span><br><span class="line">    ic_config.ICSelection = TIM_ICSELECTION_DIRECTTI; <span class="comment">// 直接输入捕获</span></span><br><span class="line">    ic_config.ICPrescaler = TIM_ICPSC_DIV1;   <span class="comment">// 输入捕获不分频</span></span><br><span class="line">    ic_config.ICFilter = <span class="number">0</span>;                   <span class="comment">// 不使用滤波</span></span><br><span class="line">    HAL_TIM_IC_ConfigChannel(&amp;ic_handle, &amp;ic_config, TIM_CHANNEL_2);  <span class="comment">// 配置通道2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使能定时器更新中断</span></span><br><span class="line">    __HAL_TIM_ENABLE_IT(&amp;ic_handle, TIM_IT_UPDATE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 启动通道2的输入捕获功能（带中断）</span></span><br><span class="line">    HAL_TIM_IC_Start_IT(&amp;ic_handle, TIM_CHANNEL_2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TIM2相关硬件资源初始化</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_TIM_IC_MspInit</span><span class="params">(TIM_HandleTypeDef *htim)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(htim-&gt;Instance == TIM2)</span><br><span class="line">    &#123;</span><br><span class="line">        GPIO_InitTypeDef gpio_initstruct;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使能GPIOA时钟</span></span><br><span class="line">        __HAL_RCC_GPIOA_CLK_ENABLE();</span><br><span class="line">        <span class="comment">// 使能TIM2时钟</span></span><br><span class="line">        __HAL_RCC_TIM2_CLK_ENABLE();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化GPIOA引脚1，用作输入</span></span><br><span class="line">        gpio_initstruct.Pin = GPIO_PIN_1;</span><br><span class="line">        gpio_initstruct.Mode = GPIO_MODE_INPUT;</span><br><span class="line">        gpio_initstruct.Pull = GPIO_PULLUP;  <span class="comment">// 上拉模式</span></span><br><span class="line">        gpio_initstruct.Speed = GPIO_SPEED_FREQ_HIGH; <span class="comment">// 高速</span></span><br><span class="line">        HAL_GPIO_Init(GPIOA, &amp;gpio_initstruct);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 配置定时器中断优先级，并使能TIM2的中断</span></span><br><span class="line">        HAL_NVIC_SetPriority(TIM2_IRQn, <span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">        HAL_NVIC_EnableIRQ(TIM2_IRQn);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TIM2中断服务函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">TIM2_IRQHandler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_TIM_IRQHandler(&amp;ic_handle);  <span class="comment">// 调用HAL库的中断处理</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输入捕获中断回调函数（捕获到上升沿或下降沿时执行）</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_TIM_IC_CaptureCallback</span><span class="params">(TIM_HandleTypeDef *htim)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 判断是否为TIM2的中断</span></span><br><span class="line">    <span class="keyword">if</span>(htim-&gt;Instance == TIM2)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 如果捕获未成功</span></span><br><span class="line">        <span class="keyword">if</span>(capture_status.succeed_flag == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 如果捕获到下降沿</span></span><br><span class="line">            <span class="keyword">if</span>(capture_status.falling_flag == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 捕获上升沿</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;捕获到上升沿\r\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 捕获成功</span></span><br><span class="line">                capture_status.succeed_flag = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 读取捕获值（时间）</span></span><br><span class="line">                last_cnt = HAL_TIM_ReadCapturedValue(&amp;ic_handle, TIM_CHANNEL_2);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 重置捕获极性为下降沿</span></span><br><span class="line">                TIM_RESET_CAPTUREPOLARITY(&amp;ic_handle, TIM_CHANNEL_2);</span><br><span class="line">                TIM_SET_CAPTUREPOLARITY(&amp;ic_handle, TIM_CHANNEL_2, TIM_ICPOLARITY_FALLING);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 捕获到下降沿</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;捕获到下降沿\r\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 重置捕获状态</span></span><br><span class="line">                <span class="built_in">memset</span>(&amp;capture_status, <span class="number">0</span>, <span class="keyword">sizeof</span>(capture_status));</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 设置为捕获下降沿标志</span></span><br><span class="line">                capture_status.falling_flag = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 停止定时器，并重置计数器</span></span><br><span class="line">                __HAL_TIM_DISABLE(&amp;ic_handle);</span><br><span class="line">                __HAL_TIM_SET_COUNTER(&amp;ic_handle, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 设置捕获极性为上升沿</span></span><br><span class="line">                TIM_RESET_CAPTUREPOLARITY(&amp;ic_handle, TIM_CHANNEL_2);</span><br><span class="line">                TIM_SET_CAPTUREPOLARITY(&amp;ic_handle, TIM_CHANNEL_2, TIM_ICPOLARITY_RISING);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 重新使能定时器</span></span><br><span class="line">                __HAL_TIM_ENABLE(&amp;ic_handle);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定时器更新中断回调函数（周期到达后溢出）</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_TIM_PeriodElapsedCallback</span><span class="params">(TIM_HandleTypeDef *htim)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(htim-&gt;Instance == TIM2)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 如果捕获未成功且已经捕获到下降沿，增加超时计数</span></span><br><span class="line">        <span class="keyword">if</span>(capture_status.succeed_flag == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(capture_status.falling_flag == <span class="number">1</span>)</span><br><span class="line">                capture_status.timout_cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算按下时间并打印</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">pressed_time_get</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(capture_status.succeed_flag == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 计算按下时间：超时计数 * 最大计数值 + 最后一次捕获值</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;按下时间：%d us\r\n&quot;</span>, capture_status.timout_cnt * <span class="number">65536</span> + last_cnt);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 重置捕获状态</span></span><br><span class="line">        <span class="built_in">memset</span>(&amp;capture_status, <span class="number">0</span>, <span class="keyword">sizeof</span>(capture_status));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个代码主要用于配置定时器输入捕获（Input Capture, IC）功能，以捕获输入信号的上升沿和下降沿，计算信号的脉宽（即信号在低电平和高电平下的持续时间）。通过定时器的中断机制，可以在每次捕获到信号边缘时记录时间戳，从而计算信号的持续时间。</p><p>能够实现同时测量两个相邻的相反边沿的时间差。</p><p><img src="/2024/10/04/%E6%9D%82%E8%B0%88/%E5%90%88%E9%9B%86/image-20241005125420458.png" alt="image-20241005125420458"></p><h1 id="解析串口数据"><a href="#解析串口数据" class="headerlink" title="解析串口数据"></a>解析串口数据</h1><h2 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*    格式为 先s600\n，后c10\n    */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 对收到的命令进行处理</span></span><br><span class="line"><span class="comment"> * @param &#123;uint16_t&#125; *rate 采样率</span></span><br><span class="line"><span class="comment"> * @param &#123;uint16_t&#125; *duration 采样时长</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 例如：&quot;s1000\n&quot;  s表示下发的是采样率     1000表示采样率（每分钟采样1000次） 单位min</span></span><br><span class="line"><span class="comment">// 例如：&quot;c60\n&quot;    c表示下发的是采集时长   60表示采样60s。 收到这个命令之后开启ADC和定时器开始采集 单位s</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Heart_Cmd_Proc</span><span class="params">(<span class="type">uint16_t</span> *rate, <span class="type">uint16_t</span> *duration)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 等待命令接收完毕</span></span><br><span class="line">    <span class="keyword">while</span> (ringbuffer_is_empty(&amp;usart_rb))</span><br><span class="line">    &#123;</span><br><span class="line">        ; <span class="comment">// 空循环等待</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从环形缓冲区读取数据</span></span><br><span class="line">    ringbuffer_read(&amp;usart_rb, Usart_Read_Buffer, <span class="keyword">sizeof</span>(Usart_Read_Buffer));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义临时变量来存储命令解析的值</span></span><br><span class="line">    <span class="type">uint16_t</span> Temp_Rate = <span class="number">0</span>;</span><br><span class="line">    <span class="type">uint16_t</span> Temp_Duration = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析字符串</span></span><br><span class="line">    <span class="comment">// 解析 s 命令</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">sscanf</span>((<span class="type">const</span> <span class="type">char</span> *)Usart_Read_Buffer, <span class="string">&quot;s%hu\n&quot;</span>, &amp;Temp_Rate) == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        *rate = Temp_Rate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清空接收缓冲区</span></span><br><span class="line">    <span class="built_in">memset</span>(Usart_Read_Buffer, <span class="number">0</span>, <span class="keyword">sizeof</span>(Usart_Read_Buffer));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清空环形缓冲区</span></span><br><span class="line">    <span class="built_in">memset</span>(&amp;usart_rb, <span class="number">0</span>, <span class="keyword">sizeof</span>(usart_rb));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 等待 c 命令接收完毕</span></span><br><span class="line">    <span class="keyword">while</span> (G_isToReceiveCompleted == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ; <span class="comment">// 空循环等待</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 再次读取数据</span></span><br><span class="line">    <span class="keyword">while</span> (ringbuffer_is_empty(&amp;usart_rb))</span><br><span class="line">    &#123;</span><br><span class="line">        ; <span class="comment">// 空循环等待</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从环形缓冲区读取数据</span></span><br><span class="line">    ringbuffer_read(&amp;usart_rb, Usart_Read_Buffer, <span class="keyword">sizeof</span>(Usart_Read_Buffer));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析 c 命令</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">sscanf</span>((<span class="type">const</span> <span class="type">char</span> *)Usart_Read_Buffer, <span class="string">&quot;c%hu\n&quot;</span>, &amp;Temp_Duration) == <span class="number">1</span> &amp;&amp; G_isToReceiveCompleted)</span><br><span class="line">    &#123;</span><br><span class="line">        *duration = Temp_Duration;</span><br><span class="line">        Debug_Printfln(<span class="string">&quot;请下发指令: 采样率(s600\\n)和采样时长(c10\\n)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重置完成标志</span></span><br><span class="line">    G_isToReceiveCompleted = <span class="number">0</span>; <span class="comment">// 重置状态以等待下一个命令</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清空DMA缓冲区</span></span><br><span class="line">    <span class="built_in">memset</span>(Usart_Read_Buffer, <span class="number">0</span>, <span class="keyword">sizeof</span>(Usart_Read_Buffer));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_UARTEx_RxEventCallback</span><span class="params">(UART_HandleTypeDef *huart, <span class="type">uint16_t</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (huart-&gt;Instance == USART1)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 将接收到的数据写入环形缓冲区</span></span><br><span class="line">        <span class="keyword">if</span> (!ringbuffer_is_full(&amp;usart_rb))</span><br><span class="line">        &#123;</span><br><span class="line">            ringbuffer_write(&amp;usart_rb, Usart_Write_Buffer, size);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加 &#x27;\0&#x27; 结束符，确保字符串可以被正确解析</span></span><br><span class="line">        Usart_Write_Buffer[size] = <span class="string">&#x27;\0&#x27;</span>; <span class="comment">// 确保 DMA 接收的内容是以 &#x27;\0&#x27; 结束的字符串</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查是否接收到了完整的 c 命令</span></span><br><span class="line">        <span class="type">char</span> *c_ptr = <span class="built_in">strstr</span>((<span class="type">const</span> <span class="type">char</span> *)Usart_Write_Buffer, <span class="string">&quot;c&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (c_ptr != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 查找换行符，确保命令以 &#x27;\n&#x27; 结尾</span></span><br><span class="line">            <span class="type">char</span> *newline_ptr = <span class="built_in">strchr</span>(c_ptr, <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span> (newline_ptr != <span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 确保命令长度合理</span></span><br><span class="line">                <span class="keyword">if</span> (newline_ptr - c_ptr &gt; <span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 检查数字部分是否正确</span></span><br><span class="line">                    <span class="type">int</span> temp_duration;</span><br><span class="line">                    <span class="comment">// 使用 sscanf 解析 c 后面的数字</span></span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">sscanf</span>(c_ptr, <span class="string">&quot;c%d&quot;</span>, &amp;temp_duration) == <span class="number">1</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">// 接收到完整的 c 命令，设置标志</span></span><br><span class="line">                        G_isToReceiveCompleted = <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 清空DMA缓冲区</span></span><br><span class="line">        <span class="built_in">memset</span>(Usart_Write_Buffer, <span class="number">0</span>, <span class="keyword">sizeof</span>(Usart_Write_Buffer));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的问题是，先发送s600\n，然后能解析并得到600这个数据，而之后再发送c10\n，却无法正确地解析得到10这个数据。</p><p>原因就是我们第一次解析完600后，不仅要清空接收缓冲区Usart_Read_Buffer，还要要清空环形缓冲区usart_rb。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   // 清空接收缓冲区</span><br><span class="line">   memset(Usart_Read_Buffer, 0, sizeof(Usart_Read_Buffer));</span><br><span class="line"></span><br><span class="line">// 清空环形缓冲区</span><br><span class="line">   memset(&amp;usart_rb, 0, sizeof(usart_rb));</span><br></pre></td></tr></table></figure><h2 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;gd32f30x.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;led_drv.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">rcu_periph_enum RCU_Usart;<span class="comment">// UART外设的时钟</span></span><br><span class="line">rcu_periph_enum RCU_GPIO;<span class="comment">// GPIO外设的时钟</span></span><br><span class="line"><span class="type">uint32_t</span> GPIO;<span class="comment">// GPIO端口号（如GPIOA）</span></span><br><span class="line"><span class="type">uint32_t</span> USART_Num;<span class="comment">// 串口号，例如USART0</span></span><br><span class="line"><span class="type">uint32_t</span> txPin;         <span class="comment">// 发送引脚</span></span><br><span class="line"><span class="type">uint32_t</span> rxPin;         <span class="comment">// 接收引脚</span></span><br><span class="line"><span class="type">uint8_t</span> irq;             <span class="comment">// 中断号</span></span><br><span class="line">&#125; UART_Info_t;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> UART_Info_t g_uartInfo = &#123;RCU_USART0, RCU_GPIOA, GPIOA, USART0, GPIO_PIN_9, GPIO_PIN_10, USART0_IRQn&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">GPIO_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">rcu_periph_clock_enable(g_uartInfo.RCU_GPIO);</span><br><span class="line">gpio_init(g_uartInfo.RCU_GPIO, GPIO_MODE_AF_PP, GPIO_OSPEED_10MHZ, g_uartInfo.txPin);</span><br><span class="line">gpio_init(g_uartInfo.RCU_GPIO, GPIO_MODE_IPU, GPIO_OSPEED_10MHZ, g_uartInfo.rxPin);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">USART_Init</span><span class="params">(<span class="type">uint32_t</span> baudRate)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 使能UART时钟；*/</span></span><br><span class="line">rcu_periph_clock_enable(g_uartInfo.RCU_Usart);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 复位UART；*/</span></span><br><span class="line">usart_deinit(g_uartInfo.USART_Num);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 通过USART_CTL0寄存器的WL设置字长；*/</span> </span><br><span class="line">usart_word_length_set(g_uartInfo.USART_Num, USART_WL_8BIT);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 通过USART_CTL0寄存器的PCEN设置校验位；*/</span> </span><br><span class="line">usart_parity_config(g_uartInfo.USART_Num, USART_PM_NONE);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 在USART_CTL1寄存器中写STB[1:0]位来设置停止位的长度；*/</span> </span><br><span class="line">usart_stop_bit_set(g_uartInfo.USART_Num, USART_STB_1BIT);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 在USART_BAUD寄存器中设置波特率；*/</span> </span><br><span class="line">usart_baudrate_set(g_uartInfo.USART_Num, baudRate);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 在USART_CTL0寄存器中设置TEN位，使能发送功能；*/</span></span><br><span class="line">usart_transmit_config(g_uartInfo.USART_Num, USART_TRANSMIT_ENABLE);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 在USART_CTL0寄存器中设置TEN位，使能接收功能；*/</span></span><br><span class="line">usart_receive_config(g_uartInfo.USART_Num, USART_RECEIVE_ENABLE);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使能串口接收中断；*/</span></span><br><span class="line">usart_interrupt_enable(g_uartInfo.USART_Num, USART_INT_RBNE);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使能串口中断；*/</span></span><br><span class="line">nvic_irq_enable(g_uartInfo.irq, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 在USART_CTL0寄存器中置位UEN位，使能UART；*/</span> </span><br><span class="line">usart_enable(g_uartInfo.USART_Num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">* @brief USB转串口硬件初始化</span></span><br><span class="line"><span class="comment">* @param</span></span><br><span class="line"><span class="comment">* @return </span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Usb_to_ComDrvInit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">GPIO_Init();</span><br><span class="line">USART_Init(<span class="number">115200</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">***********************************************************************</span></span><br><span class="line"><span class="comment">包格式：帧头0  帧头1  数据域长度  功能字   LED编号  亮/灭  异或校验数据</span></span><br><span class="line"><span class="comment">        0x55   0xAA    0x03      0x06     0x00     0x01      0xFB</span></span><br><span class="line"><span class="comment">***********************************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FRAME_HEAD_0        0x55  </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FRAME_HEAD_1        0xAA</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CTRL_DATA_LEN       3     <span class="comment">//数据域长度</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PACKET_DATA_LEN     (CTRL_DATA_LEN + 4)  <span class="comment">//包长度</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FUNC_DATA_INDEX       3     <span class="comment">//功能字数组下标</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED_CTRL_CODE       0x06  <span class="comment">//功能字</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_BUF_SIZE 20</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">uint8_t</span> g_rcvDataBuf[MAX_BUF_SIZE] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">bool</span> g_pktRcvd = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">UartData_Proc</span><span class="params">(<span class="type">uint8_t</span> Data)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">static</span> <span class="type">uint8_t</span> Tmp_index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">g_rcvDataBuf[Tmp_index++] = Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (Tmp_index)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="comment">// 解析数据帧头</span></span><br><span class="line"><span class="keyword">if</span>(g_rcvDataBuf[<span class="number">0</span>] != FRAME_HEAD_0)</span><br><span class="line">&#123;</span><br><span class="line">Tmp_index = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line"><span class="comment">// 解析数据帧头</span></span><br><span class="line"><span class="keyword">if</span>(g_rcvDataBuf[<span class="number">1</span>] != FRAME_HEAD_1)</span><br><span class="line">&#123;</span><br><span class="line">Tmp_index = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> PACKET_DATA_LEN:</span><br><span class="line"><span class="comment">// 是否收到完整的数据包（7Bytes）</span></span><br><span class="line">g_pktRcvd = <span class="literal">true</span>;</span><br><span class="line">Tmp_index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">* @brief 对数据进行异或运算</span></span><br><span class="line"><span class="comment">* @param data, 存储数组的首地址</span></span><br><span class="line"><span class="comment">* @param len, 要计算的元素的个数</span></span><br><span class="line"><span class="comment">* @return 异或运算结果</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">static</span> <span class="type">uint8_t</span> <span class="title function_">CalXorSum</span><span class="params">(<span class="type">const</span> <span class="type">uint8_t</span> *data, <span class="type">uint32_t</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint8_t</span> xorSum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">uint32_t</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line">xorSum ^= data[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> xorSum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">* @brief LED控制处理函数</span></span><br><span class="line"><span class="comment">* @param ctrlData，结构体指针，传入LED的编号和状态</span></span><br><span class="line"><span class="comment">* @return </span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">uint8_t</span> LedNum;</span><br><span class="line"><span class="type">uint8_t</span> LedState;</span><br><span class="line">&#125; LedCtrlInfo_t;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">CtrlLed</span><span class="params">(LedCtrlInfo_t *ctrlData)</span></span><br><span class="line">&#123;</span><br><span class="line">ctrlData-&gt;LedState != <span class="number">0</span> ? TurnOnLed(ctrlData-&gt;LedNum) : TurnOffLed(ctrlData-&gt;LedNum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">* @brief USB转串口任务处理函数</span></span><br><span class="line"><span class="comment">* @param</span></span><br><span class="line"><span class="comment">* @return </span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Usb_to_ComTask</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!g_pktRcvd)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 成功接收到数据</span></span><br><span class="line">g_pktRcvd = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (CalXorSum(g_rcvDataBuf, PACKET_DATA_LEN - <span class="number">1</span>) != g_rcvDataBuf[PACKET_DATA_LEN - <span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 校验完成</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (g_rcvDataBuf[FUNC_DATA_INDEX] == LED_CTRL_CODE)</span><br><span class="line">&#123;</span><br><span class="line">CtrlLed((LedCtrlInfo_t *)(&amp;g_rcvDataBuf[FUNC_DATA_INDEX + <span class="number">1</span>]));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">* @brief 串口0中断服务函数</span></span><br><span class="line"><span class="comment">* @param</span></span><br><span class="line"><span class="comment">* @return </span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">USART0_IRQHandler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(usart_interrupt_flag_get(g_uartInfo.USART_Num, USART_INT_FLAG_RBNE) != RESET) </span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 清楚对应中断标志位</span></span><br><span class="line">usart_interrupt_flag_clear(g_uartInfo.USART_Num, USART_INT_FLAG_RBNE);</span><br><span class="line"><span class="type">uint8_t</span> uData = (<span class="type">uint8_t</span>)usart_data_receive(g_uartInfo.USART_Num);</span><br><span class="line">UartData_Proc(uData);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">* @brief printf函数默认打印输出到显示器，如果要输出到串口，</span></span><br><span class="line"><span class="comment"> 必须重新实现fputc函数，将输出指向串口，称为重定向</span></span><br><span class="line"><span class="comment">* @param</span></span><br><span class="line"><span class="comment">* @return </span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">fputc</span><span class="params">(<span class="type">int</span> ch, FILE *f)</span></span><br><span class="line">&#123;</span><br><span class="line">usart_data_transmit(g_uartInfo.USART_Num, (<span class="type">uint8_t</span>)ch);</span><br><span class="line"><span class="keyword">while</span> (RESET == usart_flag_get(g_uartInfo.USART_Num, USART_FLAG_TBE));</span><br><span class="line"><span class="keyword">return</span> ch;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>g_rcvDataBuf[FUNC_DATA_INDEX + 1]</strong><code>是被用作传入</code><strong>CtrlLed()</strong><code>函数的参数，并且通过类型转换为</code>LedCtrlInfo_t` 结构体指针。</p><p><strong>结构体 <code>LedCtrlInfo_t</code></strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">uint8_t</span> LedNum;</span><br><span class="line">    <span class="type">uint8_t</span> LedState;</span><br><span class="line">&#125; LedCtrlInfo_t;</span><br></pre></td></tr></table></figure><p>这个结构体包含两个字段：</p><ul><li><code>LedNum</code>：表示LED的编号。</li><li><code>LedState</code>：表示LED的状态（例如亮或灭）。</li></ul><p><strong>数据包的结构</strong></p><p>根据你提供的通信协议格式：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">包格式：帧头<span class="number">0</span>  帧头<span class="number">1</span>  数据域长度  功能字   LED编号  亮/灭  异或校验数据</span><br><span class="line">        <span class="number">0x55</span>   <span class="number">0xAA</span>    <span class="number">0x03</span>      <span class="number">0x06</span>     <span class="number">0x00</span>     <span class="number">0x01</span>      <span class="number">0xFB</span></span><br></pre></td></tr></table></figure><ul><li><strong>帧头0：0x55</strong></li><li><strong>帧头1：0xAA</strong></li><li><strong>数据域长度：0x03</strong></li><li><strong>功能字：0x06（表示这是一个控制LED的命令）</strong></li><li><strong>LED编号：例如 0x00，表示某个特定编号的LED</strong></li><li><strong>LED亮/灭：例如 0x01（亮）或 0x00（灭）</strong></li><li><strong>异或校验数据：0xFB（整个数据包的校验和）</strong></li></ul><p><strong><code>g_rcvDataBuf</code> 的结构</strong></p><ul><li><code>g_rcvDataBuf</code> 是用于存储接收到的整帧数据的缓冲区。</li><li><code>FUNC_DATA_INDEX</code> 的值是 <code>3</code>，它指向数据包中功能字的位置，即 <code>g_rcvDataBuf[3]</code>。</li></ul><p>当我们调用 <code>CtrlLed()</code> 函数时，使用的参数是：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CtrlLed((LedCtrlInfo_t *)(&amp;g_rcvDataBuf[FUNC_DATA_INDEX + <span class="number">1</span>]));</span><br></pre></td></tr></table></figure><p>这里 <code>&amp;g_rcvDataBuf[FUNC_DATA_INDEX + 1]</code> 的含义是指向 <code>g_rcvDataBuf</code> 中第 <code>FUNC_DATA_INDEX + 1</code> 个字节的地址，也就是 <code>g_rcvDataBuf[4]</code>。</p><p><strong>为什么两个字节能映射到结构体</strong></p><p>这里将指针强制转换为 <code>LedCtrlInfo_t *</code>，它的作用是将 <code>g_rcvDataBuf</code> 中从 <code>FUNC_DATA_INDEX + 1</code> 开始的两个字节作为一个 <code>LedCtrlInfo_t</code> 类型结构体来使用。</p><p>具体来说：</p><ul><li><code>g_rcvDataBuf[4]</code>：映射到结构体中的 <code>LedNum</code> 字段。</li><li><code>g_rcvDataBuf[5]</code>：映射到结构体中的 <code>LedState</code> 字段。</li></ul><p>通过这种强制类型转换，代码可以直接把 <code>g_rcvDataBuf</code> 缓冲区中的数据解释为一个 <code>LedCtrlInfo_t</code> 结构体，从而更方便地访问 <code>LedNum</code> 和 <code>LedState</code>。</p><p><strong>举例说明</strong></p><p>假设你接收的数据包如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x55, 0xAA, 0x03, 0x06, 0x00, 0x01, 0xFB</span><br></pre></td></tr></table></figure><ul><li><code>g_rcvDataBuf[4]</code> 等于 <code>0x00</code>，表示 <code>LedNum</code> 为 0。</li><li><code>g_rcvDataBuf[5]</code> 等于 <code>0x01</code>，表示 <code>LedState</code> 为亮（1）。</li></ul><p>这样，在 <code>CtrlLed()</code> 中的 <code>ctrlData-&gt;LedNum</code> 等于 <code>0x00</code>，<code>ctrlData-&gt;LedState</code> 等于 <code>0x01</code>，你就可以通过调用适当的函数来控制对应的 LED 状态（比如 <code>TurnOnLed(0)</code>）。</p><p><strong>总结</strong></p><ul><li><code>g_rcvDataBuf[FUNC_DATA_INDEX + 1]</code> 开始的两个字节其实分别代表了 LED 的编号和状态。</li><li>通过将 <code>&amp;g_rcvDataBuf[FUNC_DATA_INDEX + 1]</code> 强制转换为 <code>LedCtrlInfo_t *</code>，可以直接将接收的数据包的这两个字节映射到 <code>LedCtrlInfo_t</code> 结构体中。</li><li>这种处理方式简化了数据解析的过程，使得代码更易读、更易维护。</li></ul><p>虽然 <code>g_rcvDataBuf[FUNC_DATA_INDEX + 1]</code> 只是一个字节的开始，但通过强制类型转换，它被解释为 <code>LedCtrlInfo_t</code> 结构体，包含两个字节的数据，这样就可以同时解析出 LED 的编号和状态。</p><p>这两个字节在数据包中是连续排列的，所以能够通过指针转换的方式映射到结构体的各个字段中。这种连续排列的特性使得你可以把接收的数据解释为一个特定的结构体。</p><p>因此，这种做法的前提是数据在内存中的布局是连续的，数据包的格式也需要与结构体的字段顺序和大小一致，因此在你编写通信协议和解析代码时，这一点必须严格保证。如果数据不连续或者大小不匹配，强制类型转换会导致错误的解析结果，甚至会出现程序崩溃等问题。</p><h1 id="标志位"><a href="#标志位" class="headerlink" title="标志位"></a>标志位</h1><h2 id="问题一：独立变量"><a href="#问题一：独立变量" class="headerlink" title="问题一：独立变量"></a>问题一：独立变量</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint8_t</span> Pd_mutation_status = <span class="number">0</span>; <span class="comment">// 突变状态</span></span><br><span class="line"><span class="type">uint8_t</span> Ph_overrun_status = <span class="number">0</span>;  <span class="comment">// 超限状态</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">check_freq_data</span><span class="params">(<span class="type">freq_data_t</span> *buffer, <span class="type">uint8_t</span> *nd_change_arr, <span class="type">uint8_t</span> *nh_change_arr)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint32_t</span> freqMax = buffer[bufferStartRead].freqVal;</span><br><span class="line">    <span class="type">uint32_t</span> freqMin = buffer[bufferStartRead].freqVal;</span><br><span class="line">    <span class="type">uint16_t</span> index = bufferStartRead;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 频率超限</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (buffer[index].freqVal &lt; param_arr[<span class="number">1</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        Ph_overrun_status = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (Ph_overrun_status == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        (*nh_change_arr)++;</span><br><span class="line">        Ph_overrun_status = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 环形缓冲区不为空</span></span><br><span class="line">    <span class="keyword">while</span> (index != bufferEndWrite)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 循环处理30个频率数据</span></span><br><span class="line">        <span class="keyword">if</span> (freqMax &lt; buffer[index].freqVal)</span><br><span class="line">        &#123;</span><br><span class="line">            freqMax = buffer[index].freqVal;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (freqMin &gt; buffer[index].freqVal)</span><br><span class="line">        &#123;</span><br><span class="line">            freqMin = buffer[index].freqVal;</span><br><span class="line">        &#125;</span><br><span class="line">        index = (index + <span class="number">1</span>) % BUFFER_SIZE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 频率突变</span></span><br><span class="line">    <span class="keyword">if</span> (freqMax - freqMin &lt; param_arr[<span class="number">0</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        Pd_mutation_status = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (Pd_mutation_status == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        (*nd_change_arr)++;</span><br><span class="line">        Pd_mutation_status = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint32_t</span> tim_ic_buffer[<span class="number">2</span>][<span class="number">64</span>]; <span class="comment">// 存储输入捕获值的缓冲区</span></span><br><span class="line"><span class="type">int32_t</span> tim_ic_val[<span class="number">2</span>];         <span class="comment">// 最终计算得到的输入捕获值</span></span><br><span class="line"><span class="type">uint32_t</span> tim_ic_temp[<span class="number">2</span>];       <span class="comment">// 临时存储输入捕获计算的中间值</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">ic_proc</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint32_t</span> current_time = HAL_GetTick(); <span class="comment">// 记录当前时间</span></span><br><span class="line"></span><br><span class="line">    tim_ic_temp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    tim_ic_temp[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i; i &lt; <span class="number">64</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tim_ic_temp[<span class="number">0</span>] += tim_ic_buffer[<span class="number">0</span>][i];</span><br><span class="line">        tim_ic_temp[<span class="number">1</span>] += tim_ic_buffer[<span class="number">1</span>][i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算平均值</span></span><br><span class="line">    tim_ic_temp[<span class="number">0</span>] /= <span class="number">64</span>;</span><br><span class="line">    tim_ic_temp[<span class="number">1</span>] /= <span class="number">64</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算频率值，单位为Hz</span></span><br><span class="line">    tim_ic_val[<span class="number">0</span>] = (<span class="type">int</span>)((<span class="type">float</span>)(<span class="number">1000.0f</span> * <span class="number">1000.0f</span>) / (<span class="type">float</span>)tim_ic_temp[<span class="number">0</span>]);</span><br><span class="line">    tim_ic_val[<span class="number">1</span>] = (<span class="type">int</span>)((<span class="type">float</span>)(<span class="number">1000.0f</span> * <span class="number">1000.0f</span>) / (<span class="type">float</span>)tim_ic_temp[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 校准频率值</span></span><br><span class="line">    tim_ic_val[<span class="number">0</span>] += param_arr[<span class="number">2</span>];</span><br><span class="line">    tim_ic_val[<span class="number">1</span>] += param_arr[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将计算得到的频率值限制在1到20000之间</span></span><br><span class="line">    limit_value((<span class="type">uint32_t</span> *)&amp;tim_ic_val[<span class="number">0</span>], <span class="number">1</span>, <span class="number">400</span>, <span class="number">20000</span>);</span><br><span class="line">    limit_value((<span class="type">uint32_t</span> *)&amp;tim_ic_val[<span class="number">1</span>], <span class="number">1</span>, <span class="number">400</span>, <span class="number">20000</span>);</span><br><span class="line"></span><br><span class="line">    add_freq_data(buffer_A, current_time, tim_ic_val[<span class="number">0</span>]);</span><br><span class="line">    check_freq_data(buffer_A, &amp;statistical_array[<span class="number">0</span>], &amp;statistical_array[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">    add_freq_data(buffer_B, current_time, tim_ic_val[<span class="number">1</span>]);</span><br><span class="line">    check_freq_data(buffer_B, &amp;statistical_array[<span class="number">1</span>], &amp;statistical_array[<span class="number">3</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>满足频率突变或超限的条件后，对应的<code>(*nd_change_arr)++、(*nh_change_arr)++</code>会一直++而不是只加一次。</p><p>解决方法：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint8_t</span> Pd_A_mutation_status = <span class="number">0</span>; <span class="comment">// 突变状态</span></span><br><span class="line"><span class="type">uint8_t</span> Pd_B_mutation_status = <span class="number">0</span>; <span class="comment">// 突变状态</span></span><br><span class="line"><span class="type">uint8_t</span> Ph_A_overrun_status = <span class="number">0</span>;  <span class="comment">// 超限状态</span></span><br><span class="line"><span class="type">uint8_t</span> Ph_B_overrun_status = <span class="number">0</span>;  <span class="comment">// 超限状态</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">check_freq_data</span><span class="params">(<span class="type">freq_data_t</span> *buffer, <span class="type">uint8_t</span> *nd_change_arr, <span class="type">uint8_t</span> *nh_change_arr)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint32_t</span> freqMax = buffer[bufferStartRead].freqVal;</span><br><span class="line">    <span class="type">uint32_t</span> freqMin = buffer[bufferStartRead].freqVal;</span><br><span class="line">    <span class="type">uint16_t</span> index = bufferStartRead;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 频率超限</span></span><br><span class="line">    <span class="keyword">if</span> (nh_change_arr == &amp;statistical_array[<span class="number">2</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (buffer[index].freqVal &lt; param_arr[<span class="number">1</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            Ph_A_overrun_status = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (Ph_A_overrun_status == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            (*nh_change_arr)++;</span><br><span class="line">            Ph_A_overrun_status = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (nh_change_arr == &amp;statistical_array[<span class="number">3</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (buffer[index].freqVal &lt; param_arr[<span class="number">1</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            Ph_B_overrun_status = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (Ph_B_overrun_status == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            (*nh_change_arr)++;</span><br><span class="line">            Ph_B_overrun_status = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 环形缓冲区不为空</span></span><br><span class="line">    <span class="keyword">while</span> (index != bufferEndWrite)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 循环处理30个频率数据</span></span><br><span class="line">        <span class="keyword">if</span> (freqMax &lt; buffer[index].freqVal)</span><br><span class="line">        &#123;</span><br><span class="line">            freqMax = buffer[index].freqVal;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (freqMin &gt; buffer[index].freqVal)</span><br><span class="line">        &#123;</span><br><span class="line">            freqMin = buffer[index].freqVal;</span><br><span class="line">        &#125;</span><br><span class="line">        index = (index + <span class="number">1</span>) % BUFFER_SIZE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 频率突变</span></span><br><span class="line">    <span class="keyword">if</span> (nd_change_arr == &amp;statistical_array[<span class="number">0</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (freqMax - freqMin &lt; param_arr[<span class="number">0</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            Pd_A_mutation_status = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (Pd_A_mutation_status == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            (*nd_change_arr)++;</span><br><span class="line">            Pd_A_mutation_status = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (nd_change_arr == &amp;statistical_array[<span class="number">1</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (freqMax - freqMin &lt; param_arr[<span class="number">0</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            Pd_B_mutation_status = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (Pd_B_mutation_status == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            (*nd_change_arr)++;</span><br><span class="line">            Pd_B_mutation_status = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以我们要使用独立的标志位去分别控制A和B，因此我们可以先判断传入参数的地址，分别处理<code>nd_change_arr</code>和<code>nh_change_arr</code>。</p><h3 id="主要改动与分析"><a href="#主要改动与分析" class="headerlink" title="主要改动与分析"></a>主要改动与分析</h3><p>在你的原始代码中，似乎有两个主要问题，导致了 <code>(*nd_change_arr)++</code> 进入一个不断递增的循环：</p><ol><li><p><strong>状态标志变量未区分 A 和 B 通道</strong>：<br>在最初版本中，你的 <code>Pd_mutation_status</code> 是一个单一的状态标志变量，而在新版本中，你引入了 <strong><code>Pd_A_mutation_status</code></strong> 和 <strong><code>Pd_B_mutation_status</code></strong> 两个状态变量。它们分别对应不同的 <code>nd_change_arr</code> 参数（即 <code>statistical_array[0]</code> 和 <code>statistical_array[1]</code>），从而实现了对 A 通道和 B 通道的独立控制。</p><p>旧版本中，由于同一个状态标志变量 <code>Pd_mutation_status</code> 被复用，可能导致状态无法正确反映 A 和 B 通道的独立状态变化。每次 <code>check_freq_data()</code> 被调用时，该标志可能一直被错误地设置，从而导致 <code>(*nd_change_arr)</code> 反复增加。</p><p>通过分别使用 <code>Pd_A_mutation_status</code> 和 <code>Pd_B_mutation_status</code>，你确保了各个通道的频率变化标志不会互相干扰，从而使得相应的计数 (<code>(*nd_change_arr)++</code>) 仅在符合特定条件时增加一次，而不是每次都符合同样的条件。</p></li><li><p><strong>明确的条件和标志变量设置</strong>：<br>现在你为 A 和 B 通道分别处理了两个逻辑条件，确保了 <code>freqMax - freqMin &lt; param_arr[0]</code> 的情况被独立地判断。这样，如果当前频率波动符合设定条件，标志位会被设置为 <code>1</code>，并且在 <code>(*nd_change_arr)++</code> 执行后状态重置为 <code>0</code>。通过这种状态机式的设计，标志位必须先通过 “突变发生” 再通过 “突变消失” 的过程，这样逻辑变得更加清晰和严谨。</p></li><li><p><strong>不同统计数组的分开处理</strong>：<br>你还将 <code>nh_change_arr</code> 和 <code>nd_change_arr</code> 的处理逻辑分开得更加清楚，并且使用了 <code>statistical_array[2]</code> 和 <code>statistical_array[3]</code> 来区别不同的变化处理。这样确保了各个变化情况（如 A 通道和 B 通道的频率突变）是独立判断的，不会相互影响。由于数组引用和标志的单独管理，逻辑不再重叠，从而避免了多次累加的问题。</p></li></ol><h3 id="为什么现在只会加一次？"><a href="#为什么现在只会加一次？" class="headerlink" title="为什么现在只会加一次？"></a>为什么现在只会加一次？</h3><p>现在的逻辑可以理解为一个 <strong>有限状态机</strong>，它有两个状态：</p><ul><li>状态 <code>0</code>：没有发生突变。</li><li>状态 <code>1</code>：检测到突变并准备计数。</li></ul><p>在进入 <code>check_freq_data()</code> 函数时：</p><ul><li>如果符合条件（<code>freqMax - freqMin &lt; param_arr[0]</code>），状态从 <code>0</code> 变为 <code>1</code>，表示检测到了频率突变。</li><li>在下一次进入这个函数时，如果之前状态是 <code>1</code> 并且频率已经不再突变（<code>else if (Pd_A_mutation_status == 1)</code>），则 <code>(*nd_change_arr)++</code> 执行，并将状态重置为 <code>0</code>。</li></ul><p>因此，每个通道在频率突变时只会有一次状态变化，并且在突变消失后才会执行累加操作。这个状态重置的设计确保了不会在每次调用时反复累加。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>你之所以成功修复了这个问题，主要是因为：</p><ol><li>你对 A 通道和 B 通道使用了独立的状态标志（<code>Pd_A_mutation_status</code> 和 <code>Pd_B_mutation_status</code>）。</li><li>状态标志的明确区分，使得每个突变状态只会触发一次 <code>(*nd_change_arr)++</code>，而不是反复累加。</li><li>通过这种状态控制的方式，有效避免了逻辑混乱导致的条件反复触发。</li></ol><p>这样清晰的状态管理可以确保系统按预期工作，避免任何的累加错误。继续保持良好的编程实践，状态机的管理是非常重要的概念，特别是在实时信号处理这样的场景中。</p><h2 id="问题二-1"><a href="#问题二-1" class="headerlink" title="问题二"></a>问题二</h2><p>如何巧妙的实现LED在低频模式、高频模式切换期间，指示灯 LED 以 0.1 秒为间隔切换亮、 灭状态，模式切换完成后熄灭？</p><p>正常情况下，可以会定义旧模式和新模式两个变量，当新旧模式变亮不等时，则加入指示灯 LED 以 0.1 秒为间隔切换亮、 灭状态的需求，之后再写5s后熄灭的逻辑。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(uwTick - pwm_tick &gt;= <span class="number">100</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(freq_val != (pwm_output_mode?<span class="number">8000</span>:<span class="number">4000</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        ucLed[<span class="number">1</span>] ^= <span class="number">1</span>;</span><br><span class="line">        freq_val += (<span class="number">4000</span> / <span class="number">50</span>) * (pwm_output_mode?<span class="number">1</span>:<span class="number">-1</span>);</span><br><span class="line">        pwm_set_frequency(freq_val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        ucLed[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    pwm_tick = uwTick;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码主要实现了一个LED指示灯（假设为<code>LD2</code>）在PWM频率模式切换时以0.1秒的间隔闪烁，在模式切换完成后熄灭。代码实现的关键在于<code>PWM_Output_Mode</code>的变化。</p><p>具体过程如下：</p><ol><li><strong>逻辑判断频率变化</strong>：<ul><li><code>PWM_Output_Mode</code>控制PWM频率模式：<code>0</code>表示低频（4000Hz），<code>1</code>表示高频（8000Hz）。</li><li>当<code>PWM_Output_Mode</code>发生变化时，程序会检查当前<code>Freq_Val</code>是否达到了目标值（即低频时目标为4000，高频时目标为8000）。如果没有达到，则通过<code>Freq_Val</code>的增量控制逐步逼近目标频率。</li></ul></li><li><strong>频率逐步调节</strong>（代码在主函数里循环处理）：<ul><li><code>Freq_Val</code>会根据<code>PWM_Output_Mode</code>的状态，以每次步进 <code>(8000 - 4000) / 50 = 80Hz</code> 的方式逐渐逼近目标值（4000或8000）。</li><li>每隔100ms，<code>Freq_Val</code>会增加或减少80Hz，使得频率在50个时间间隔（即约5秒）内逐步完成从4000到8000或反之的切换。</li></ul></li><li><strong>LED闪烁控制</strong>：<ul><li>在<code>Freq_Val</code>未达到目标频率之前，<code>ucLed[1] ^= 1;</code>会每100ms取反一次，使得<code>LD2</code>以0.1秒为间隔闪烁，持续50次，也就是<strong>5000ms</strong>。</li><li>当频率调整完成，即<code>Freq_Val</code>达到了目标频率值（4000或8000）时，<code>ucLed[1]</code>被设为0，表示<code>LD2</code>熄灭。</li></ul></li><li><strong>模式切换后LED熄灭</strong>：<ul><li>由于<code>LD2</code>的状态完全受<code>Freq_Val</code>是否达到目标值控制，当模式切换完成且<code>Freq_Val</code>稳定在目标频率时，<code>LD2</code>将保持熄灭，不再闪烁。</li></ul></li></ol><p>通过这种逻辑，代码能够满足以下需求：在模式切换的过程中（约5秒内），<code>LD2</code>每100ms闪烁一次，表示正在进行切换。一旦切换完成，LED即熄灭。</p><p>这个方法比较巧妙，巧在写改变频率值的需求正好构造出来LED的需求逻辑。</p><h1 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">led_disp</span><span class="params">(<span class="type">uint8_t</span> *ucled)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint8_t</span> temp = <span class="number">0x00</span>;</span><br><span class="line">    <span class="comment">// 记录上次LED状态</span></span><br><span class="line">    <span class="type">static</span> <span class="type">uint8_t</span> temp_old = <span class="number">0xff</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 让数组第一个灯对应板子上第一个灯也就是最高位</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> pos = <span class="number">0</span>; pos &lt; <span class="number">8</span>; pos++)</span><br><span class="line">    &#123;</span><br><span class="line">        temp |= (ucled[pos] &lt;&lt; pos);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (temp != temp_old)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 清零高八位</span></span><br><span class="line">        GPIOC-&gt;ODR &amp;= <span class="number">0x00ff</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 转回正逻辑，并左移高八位到对应IO</span></span><br><span class="line">        GPIOC-&gt;ODR |= ~(temp &lt;&lt; <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打开锁存器 高电平有效</span></span><br><span class="line">        GPIOD-&gt;BSRR |= (<span class="number">0x01</span> &lt;&lt; <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭锁存器 低电平有效</span></span><br><span class="line">        GPIOD-&gt;BRR |= (<span class="number">0x01</span> &lt;&lt; <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 更新状态</span></span><br><span class="line">        temp_old = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>static uint8_t temp_old = 0xff;</code> 主要有两个作用：</p><ol><li><strong>在函数调用间保持值不变</strong>：将 <code>temp_old</code> 声明为 <code>static</code> 可以确保它的值在多次调用 <code>led_disp()</code> 时保持不变。如果不加 <code>static</code>，每次调用该函数时 <code>temp_old</code> 都会重新初始化为 <code>0xff</code>。由于 <code>temp_old</code> 用来存储上一次的 LED 状态，这种值的保持是非常重要的。只有当 <code>temp</code>（新的 LED 状态）不同于 <code>temp_old</code> 时，才会更新 <code>temp_old</code>，这使得 <code>led_disp()</code> 可以有效地检测到 LED 状态的变化。</li><li><strong>限制变量的作用域</strong>：虽然 <code>temp_old</code> 在函数调用间保留其值，但由于 <code>static</code> 的作用域规则，它仍然只在 <code>led_disp()</code> 函数内部有效。这可以防止代码其他部分修改 <code>temp_old</code>，从而减少潜在的错误或冲突。</li></ol><p>总结来说，这里的 <code>static</code> 是为了在多次函数调用中保留上一次的 LED 状态，同时将变量的作用域限制在 <code>led_disp()</code> 函数内。</p><h1 id="运算符计算顺序"><a href="#运算符计算顺序" class="headerlink" title="运算符计算顺序"></a>运算符计算顺序</h1><p><code>Freq_Val != (!PWM_Output_Mode ? 4000 : 8000))</code>与<code>if (Freq_Val != (!PWM_Output_Mode) ? 4000 : 8000)</code>计算的结果一样吗？</p><p>这两个表达式在计算逻辑上有所不同，主要差异在于它们使用的运算符优先级以及具体的语法结构。</p><h3 id="1-表达式"><a href="#1-表达式" class="headerlink" title="1. 表达式"></a>1. 表达式</h3><p><code>(Freq_Val != (!PWM_Output_Mode ? 4000 : 8000))</code></p><p>在这个表达式中，首先计算<code>!PWM_Output_Mode</code>的值（取反操作），然后将其结果用于三元运算符<code>(? :)</code>，再与<code>Freq_Val</code>进行不等比较操作。这是一个复合条件表达式。</p><p>计算步骤如下：</p><ol><li><strong>取反</strong>：<code>!PWM_Output_Mode</code>，这一步将<code>PWM_Output_Mode</code>布尔取反。</li><li><strong>三元运算</strong>：根据取反后的布尔值，如果<code>!PWM_Output_Mode</code>为<code>true</code>，则结果为<code>4000</code>；否则为<code>8000</code>。</li><li><strong>比较</strong>：将上述三元运算的结果与<code>Freq_Val</code>进行不等比较。如果<code>Freq_Val</code>不等于三元运算结果，则整个表达式为<code>true</code>，否则为<code>false</code>。</li></ol><h3 id="2-表达式"><a href="#2-表达式" class="headerlink" title="2. 表达式"></a>2. 表达式</h3><p><code>if (Freq_Val != (!PWM_Output_Mode) ? 4000 : 8000)</code></p><p>在这种写法中，由于<code>if</code>语句的语法要求，实际结构被解读为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (Freq_Val != (!PWM_Output_Mode)) </span><br><span class="line">    <span class="number">4000</span>;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">    <span class="number">8000</span>;</span><br></pre></td></tr></table></figure><p>这个写法会被编译器识别为条件语句的<code>if-else</code>结构，而不是直接的三元运算符。具体的执行流程如下：</p><ol><li><strong>不等比较</strong>：<code>Freq_Val != (!PWM_Output_Mode)</code>，首先将<code>PWM_Output_Mode</code>取反，并与<code>Freq_Val</code>进行不等比较。</li><li><strong>条件执行</strong>：根据比较结果，如果<code>Freq_Val</code>不等于取反后的<code>PWM_Output_Mode</code>值，则执行<code>4000</code>；否则执行<code>8000</code>。</li></ol><hr><h3 id="总结对比"><a href="#总结对比" class="headerlink" title="总结对比"></a>总结对比</h3><ul><li><strong>第一种写法</strong>：是一个单独的表达式，返回的是一个布尔值，表示<code>Freq_Val</code>是否与<code>(!PWM_Output_Mode ? 4000 : 8000)</code>相等。</li><li><strong>第二种写法</strong>：由于<code>if</code>语句的结构，表示条件控制逻辑，而非布尔比较。</li></ul><h1 id="时间戳"><a href="#时间戳" class="headerlink" title="时间戳"></a>时间戳</h1><h2 id="问题一-1"><a href="#问题一-1" class="headerlink" title="问题一"></a>问题一</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">errorCnt++;</span><br><span class="line"><span class="keyword">if</span> (errorCnt &gt;= <span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;errorCnt is %d&quot;</span>, errorCnt);</span><br><span class="line">    errorTick = HAL_GetTick();</span><br><span class="line">    <span class="keyword">if</span> (HAL_GetTick() - errorTick &gt;= <span class="number">100</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ucLed[<span class="number">1</span>] ^= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (HAL_GetTick() - errorTick &gt;= <span class="number">5000</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ucLed[<span class="number">1</span>] ^= <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为啥这样不能实现当时间戳大于100ms时，LED闪烁，时间戳大于5000ms时，LED灭。</p><p>出现这个问题的原因在于代码的逻辑结构。在你的代码中，当 <code>errorCnt</code> 大于等于3时，执行 <code>errorTick = HAL_GetTick();</code> 赋值语句。这样会导致 <code>errorTick</code> 每次进入该 <code>if</code> 语句时都会被重置，因此 <code>HAL_GetTick() - errorTick</code> 的值始终接近0，从而无法达到100或5000的条件，导致LED不会闪烁。</p><p>为了实现 <code>ucLED[1]</code> 的闪烁，你需要将 <code>errorTick</code> 的赋值逻辑放在外部，这样在 <code>errorCnt &gt;= 3</code> 之后，不会再改变 <code>errorTick</code> 的值，从而可以通过 <code>HAL_GetTick() - errorTick</code> 来检测时间间隔。以下是修改建议：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">led_proc</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    led_disp(ucLed);</span><br><span class="line"></span><br><span class="line">    ucLed[<span class="number">0</span>] = lcd_disp_mode;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (HAL_GetTick() - errorTick &gt;= <span class="number">100</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ucLed[<span class="number">1</span>] ^= (errorCnt &gt;= <span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (HAL_GetTick() - errorTick &gt;= <span class="number">5000</span> &amp;&amp; errorCnt &gt;= <span class="number">3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        errorCnt = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">key_proc</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (key_down == <span class="number">4</span> &amp;&amp; lcd_disp_mode == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">memcmp</span>(passWordData, passWordInputData, <span class="keyword">sizeof</span>(passWordInputData)) == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 密码正确，进入输出状态界面</span></span><br><span class="line">            lcd_disp_mode = <span class="number">1</span>;</span><br><span class="line">            Shift_Tick = HAL_GetTick();</span><br><span class="line">            <span class="comment">// 密码正确,清0输入错误次数</span></span><br><span class="line">            errorCnt = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 密码错误，清除输入密码</span></span><br><span class="line">            <span class="built_in">memset</span>(passWordInputData, <span class="string">&#x27;@&#x27;</span>, <span class="keyword">sizeof</span>(passWordInputData));</span><br><span class="line">            <span class="comment">// 密码错误次数</span></span><br><span class="line">            errorCnt++;</span><br><span class="line">            <span class="keyword">if</span> (errorCnt &gt;= <span class="number">3</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                errorTick = HAL_GetTick();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解释-1"><a href="#解释-1" class="headerlink" title="解释"></a>解释</h3><ol><li><code>errorTick</code> 仅在第一次进入时赋值，不会每次进入都重置。</li><li>使用 <code>HAL_GetTick()</code> 来判断时间是否超过100ms，如果是，则切换 <code>ucLED[1]</code> 的状态并重置 <code>errorTick</code>，以实现闪烁效果。</li><li>另外增加了一个 <code>5000ms</code> 的判断，超过5秒则关闭 <code>ucLED[1]</code> 并重置 <code>errorCnt</code> 和 <code>errorTick</code>，以便重新计时和计数。</li></ol><p>这样调整后，你的代码就能够按照预期工作，实现 <code>ucLED[1]</code> 的闪烁效果。</p><p>因此我们可以知道，用时间戳进行判断的时候，我们可以在完成某一逻辑需求下，先获取此时的时间值，然后在别的函数或者其他地方用时间戳相差来实现需求。</p><h1 id="整型提升"><a href="#整型提升" class="headerlink" title="整型提升"></a>整型提升</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>（g_irCode[<span class="number">2</span>] == ~g_irCode[<span class="number">3</span>]）</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>括号里表达式的值是真是假？二者不相等，即为假！</p><p>在 C 语言中，即使 <code>g_irCode[2]</code> 和 <code>g_irCode[3]</code> 都是 <code>uint8_t</code> 类型，在进行位操作时可能会发生数据类型的“提升”，这会影响 <code>~</code> 操作符的结果。</p><h3 id="问题原因：类型提升"><a href="#问题原因：类型提升" class="headerlink" title="问题原因：类型提升"></a>问题原因：类型提升</h3><p>在表达式 <code>~g_irCode[3]</code> 中，即使 <code>g_irCode[3]</code> 是 <code>uint8_t</code> 类型，编译器会将它提升为 <code>int</code> 类型，以符合标准的操作数要求。提升为 <code>int</code> 后，<code>g_irCode[3]</code> 的范围从 <code>0x00</code> - <code>0xFF</code> 变为 <code>0x00000000</code> - <code>0x000000FF</code>。接着，取反操作 <code>~</code> 会在整个 <code>int</code> 范围（通常是 32 位）内执行位反转，而不是仅限于 <code>uint8_t</code> 的 8 位。</p><h3 id="示例：具体过程"><a href="#示例：具体过程" class="headerlink" title="示例：具体过程"></a>示例：具体过程</h3><ol><li>假设 <code>g_irCode[2] = 0x55</code> 和 <code>g_irCode[3] = 0x55</code>。</li><li><code>~g_irCode[3]</code> 被提升为 <code>int</code> 类型。<ul><li><code>g_irCode[3]</code> 实际上变成了 <code>0x00000055</code>（32 位）。</li></ul></li><li>取反操作 <code>~</code> 作用于整个 32 位：<ul><li><code>~0x00000055</code> 结果是 <code>0xFFFFFFAA</code>。</li></ul></li><li><code>0xFFFFFFAA</code> 是一个 32 位有符号整数，而 <code>g_irCode[2]</code> 仍然是 8 位的 <code>uint8_t</code> 值 <code>0x55</code>，这就导致两者不相等。</li></ol><h3 id="解决方案：确保取反后只保留-8-位"><a href="#解决方案：确保取反后只保留-8-位" class="headerlink" title="解决方案：确保取反后只保留 8 位"></a>解决方案：确保取反后只保留 8 位</h3><p>为确保结果在 8 位 <code>uint8_t</code> 范围内，你可以通过强制转换将结果截断为 8 位：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(g_irCode[<span class="number">2</span>] == (<span class="type">uint8_t</span>)(~g_irCode[<span class="number">3</span>]))</span><br></pre></td></tr></table></figure><p>这样，<code>~g_irCode[3]</code> 的结果会先取反为 <code>0xFFFFFFAA</code>，然后再强制转换为 <code>uint8_t</code>，最终只保留低 8 位，得到 <code>0xAA</code>，即符合预期的取反值。</p><h1 id="sizeof"><a href="#sizeof" class="headerlink" title="sizeof"></a>sizeof</h1><p><code>sizeof()里放数组名和struct+结构体名是不是就能准确的算出数组和结构体的大小？</code></p><p><code>sizeof()</code> 运算符在 C 和 C++ 中确实可以用于计算数组和结构体的大小：</p><ol><li><p><strong>数组</strong>：当 <code>sizeof()</code> 中放入数组名（例如 <code>sizeof(array)</code>）时，它会返回整个数组的总大小（单位是字节）。例如，对于 <code>int array[10];</code>，<code>sizeof(array)</code> 会返回 <code>10 * sizeof(int)</code> 的值，这表示整个数组所占的内存空间。如果传递的是指针而不是数组名，比如 <code>int *array_ptr</code>，那么 <code>sizeof(array_ptr)</code> 得到的只是指针本身的大小（通常是 4 或 8 字节），而不是数组的总大小。</p></li><li><p><strong>结构体</strong>：<code>sizeof(struct StructName)</code> 或 <code>sizeof(structure_variable)</code> 可以准确地计算结构体所占的内存大小。<code>sizeof</code> 会考虑结构体内部字段的对齐（alignment），并且会将所有字段的大小加在一起，因此返回的值就是结构体占用的总字节数。</p></li></ol><p>所以，将数组名和结构体名传给 <code>sizeof()</code> 确实能准确计算出数组和结构体的内存大小。这种方法在编译期直接计算，效率高且准确。<code>sizeof()</code>确实能准确计算其字节大小，包括<code>&#39;\0&#39;</code>等所有元素。</p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p><code>sizeof</code>和<code>strlen</code>在用途上有不同的场景，特别是在数组和字符串的处理中。以下是它们的适用场景及示例：</p><h3 id="1-使用-sizeof-的情况"><a href="#1-使用-sizeof-的情况" class="headerlink" title="1. 使用 sizeof 的情况"></a>1. 使用 <code>sizeof</code> 的情况</h3><ul><li><strong>数组的总大小</strong>：<code>sizeof</code>用于计算整个数组的字节数，包括任何内容在内的总大小，<strong>适用于非字符串类型的数组和固定大小的字符串数组。</strong></li><li><strong>结构体的总大小</strong>：<code>sizeof</code>用于获取结构体在内存中占用的总字节数，包括所有字段和可能的填充字节。</li></ul><p><strong>示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 整数数组</span></span><br><span class="line">    <span class="type">int</span> arr[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;数组的大小: %lu 字节\n&quot;</span>, <span class="keyword">sizeof</span>(arr)); <span class="comment">// 输出为整个数组的字节数，例如20字节（假设int是4字节）</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 字符数组</span></span><br><span class="line">    <span class="type">char</span> str[<span class="number">10</span>] = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;字符数组的大小: %lu 字节\n&quot;</span>, <span class="keyword">sizeof</span>(str)); <span class="comment">// 输出10字节，即数组分配的总大小，不管实际存储的内容</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 结构体</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">MyStruct</span> &#123;</span></span><br><span class="line">        <span class="type">int</span> a;</span><br><span class="line">        <span class="type">double</span> b;</span><br><span class="line">        <span class="type">char</span> c;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;结构体的大小: %lu 字节\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> MyStruct)); <span class="comment">// 输出结构体的总大小，包括字段和填充</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于结构体，只能使用 <code>sizeof</code> 来计算其大小，因为 <code>strlen</code> 只适用于字符串，而结构体中通常包含多种不同类型的数据，不适合作为字符串处理。</p><h3 id="2-使用-strlen-的情况"><a href="#2-使用-strlen-的情况" class="headerlink" title="2. 使用 strlen 的情况"></a>2. 使用 <code>strlen</code> 的情况</h3><ul><li><strong>字符串的实际长度</strong>：<code>strlen</code>用于计算字符串内容的实际长度（不包括末尾的<code>\0</code>），通常用于字符数组（C字符串）。</li><li>只适用于字符串数组，不适用于非字符串数组或结构体。</li></ul><p><strong>示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 字符串</span></span><br><span class="line">    <span class="type">char</span> str[<span class="number">10</span>] = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;字符串的实际长度: %lu\n&quot;</span>, <span class="built_in">strlen</span>(str)); <span class="comment">// 输出5，因为&quot;hello&quot;的长度为5，不包括结尾的&#x27;\0&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 空字符串上</span></span><br><span class="line">    <span class="type">char</span> emptyStr[<span class="number">10</span>] = <span class="string">&quot;&quot;</span>; </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;空字符串的实际长度: %lu\n&quot;</span>, <span class="built_in">strlen</span>(emptyStr)); <span class="comment">// 输出0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 非字符串数组 (strlen不适用)</span></span><br><span class="line">    <span class="type">int</span> arr[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    <span class="comment">// printf(&quot;%lu\n&quot;, strlen(arr)); // 错误！strlen不适用于非字符串类型</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><ul><li><strong>用 <code>sizeof</code></strong>：用于获取数组的总大小（字节数）或结构体的总字节数。适合于非字符串数组（如<code>int</code>数组）和结构体。</li><li><strong>用 <code>strlen</code></strong>：用于获取字符串（字符数组）的实际字符长度，不包括末尾的<code>\0</code>。适合于字符串数组。</li></ul><h1 id="文件路径打印"><a href="#文件路径打印" class="headerlink" title="文件路径打印"></a>文件路径打印</h1><h2 id="问题一-2"><a href="#问题一-2" class="headerlink" title="问题一"></a>问题一</h2><p>为啥实际打印效果是这样的，如图所示。</p><p><img src="/2024/10/04/%E6%9D%82%E8%B0%88/%E5%90%88%E9%9B%86/QQ20241116-134323.png" alt="QQ20241116-134323"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> FILENAME (strrchr(__FILE__, <span class="string">&#x27;\\&#x27;</span>) ? strrchr(__FILE__, <span class="string">&#x27;\\&#x27;</span>) + 1 : __FILE__)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Debug_Printf(format, ...) printf(<span class="string">&quot;[%s:%d]--&quot;</span> format, FILENAME, __LINE__, ##__VA_ARGS__)</span></span><br></pre></td></tr></table></figure><p><strong>路径分隔符不匹配的问题</strong>： 您的 <code>FILENAME</code> 宏使用了 <code>strrchr(__FILE__, &#39;\\&#39;)</code> 来获取文件名，但实际路径可能使用的是斜杠 <code>/</code>，而不是反斜杠 <code>\\</code>。这会导致 <code>strrchr(__FILE__, &#39;\\&#39;)</code> 返回空指针，从而执行宏中的 <code>__FILE__</code>，即打印出完整路径。</p><p><strong>解决方案</strong>： 修改 <code>FILENAME</code> 宏，使其同时支持 <code>/</code> 和 <code>\\</code> 路径分隔符，例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> FILENAME ((strrchr(__FILE__, <span class="string">&#x27;/&#x27;</span>) ? strrchr(__FILE__, <span class="string">&#x27;/&#x27;</span>) : strrchr(__FILE__, <span class="string">&#x27;\\&#x27;</span>)) ? (strrchr(__FILE__, <span class="string">&#x27;/&#x27;</span>) ? strrchr(__FILE__, <span class="string">&#x27;/&#x27;</span>) + 1 : strrchr(__FILE__, <span class="string">&#x27;\\&#x27;</span>) + 1) : __FILE__)</span></span><br></pre></td></tr></table></figure><p>或者更简化的方法：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> FILENAME (strrchr(__FILE__, <span class="string">&#x27;/&#x27;</span>) ? strrchr(__FILE__, <span class="string">&#x27;/&#x27;</span>) + 1 : (strrchr(__FILE__, <span class="string">&#x27;\\&#x27;</span>) ? strrchr(__FILE__, <span class="string">&#x27;\\&#x27;</span>) + 1 : __FILE__))</span></span><br></pre></td></tr></table></figure><p><strong>打印位置格式化问题</strong>： 打印输出显示的是 <code>[./Core/Src/main.c:94]</code>，说明文件路径的分隔符是 <code>/</code>，这和 <code>FILENAME</code> 宏里假设的 <code>\\</code> 不一致。</p><p><strong>调试环境或编译器行为差异</strong>： 不同的编译器或 IDE 可能在 <code>__FILE__</code> 中提供不同格式的路径。例如：</p><ul><li>Windows 环境下通常使用反斜杠 <code>\\</code>。</li><li>Unix/Linux 或跨平台编译器（如 GCC 或 Clang）可能使用正斜杠 <code>/</code>。</li></ul><p>这种差异会直接影响 <code>strrchr()</code> 的匹配结果。</p><p><strong>日志显示方式影响</strong>： 如果是通过串口助手显示日志，请确保没有其他格式化过程（例如某些脚本或日志系统会对路径或信息进行格式化处理）。</p><h2 id="问题二-2"><a href="#问题二-2" class="headerlink" title="问题二"></a>问题二</h2><p>进一步详细解释为啥 <code>FILENAME</code> 宏使用了 <code>strrchr(__FILE__, &#39;\\&#39;)</code> 来获取文件名，但实际路径可能使用的是斜杠 /，而不是反斜杠 \。这会导致 <code>strrchr(__FILE__, &#39;\\&#39;)</code> 返回空指针，从而执行宏中的 <strong>FILE</strong>，即打印出完整路径？</p><h3 id="1-路径分隔符与操作系统"><a href="#1-路径分隔符与操作系统" class="headerlink" title="1. 路径分隔符与操作系统"></a>1. <strong>路径分隔符与操作系统</strong></h3><ul><li><strong>Windows</strong>: 通常使用反斜杠 <code>\</code> 作为路径分隔符。例如：<code>C:\Users\Documents\main.c</code>。</li><li><strong>Unix/Linux</strong>: 使用正斜杠 <code>/</code> 作为路径分隔符。例如：<code>/home/user/main.c</code>。</li><li><strong>跨平台编译器（如 GCC 或 Clang）</strong>: 即使在 Windows 平台上编译，编译器通常会在 <code>__FILE__</code> 宏中返回正斜杠 <code>/</code>，因为这是标准化的路径分隔符，便于跨平台兼容。</li></ul><h3 id="2-FILE-的实际值"><a href="#2-FILE-的实际值" class="headerlink" title="2. __FILE__ 的实际值"></a>2. <strong><code>__FILE__</code> 的实际值</strong></h3><ul><li><code>__FILE__</code> 是预定义宏，它表示当前编译单元的文件路径，具体值由编译器决定。</li><li>在大多数编译器中：<ul><li><strong>绝对路径</strong>: <code>__FILE__</code> 包含完整的文件路径。例如：<code>C:/project/src/main.c</code>。</li><li><strong>相对路径</strong>: 如果文件是通过相对路径传递给编译器，<code>__FILE__</code> 的值可能是相对路径，例如：<code>src/main.c</code>。</li></ul></li><li>关键问题是：<strong>路径中的分隔符格式由编译器决定</strong>，即使在 Windows 上，许多跨平台编译器（如 GCC）依然会使用正斜杠 <code>/</code>。</li></ul><h3 id="3-strrchr-的行为"><a href="#3-strrchr-的行为" class="headerlink" title="3. strrchr 的行为"></a>3. <strong><code>strrchr</code> 的行为</strong></h3><p><code>strrchr</code> 函数用于查找字符串中某个字符的最后一次出现，语法如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> *<span class="title function_">strrchr</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *str, <span class="type">int</span> ch)</span>;</span><br></pre></td></tr></table></figure><ul><li>如果找到目标字符（如 <code>&#39;\\&#39;</code> 或 <code>&#39;/&#39;</code>），返回该字符在字符串中的指针。</li><li>如果未找到目标字符，返回 <code>NULL</code>。</li></ul><h3 id="4-为什么-strrchr-FILE-39-39-会返回-NULL？"><a href="#4-为什么-strrchr-FILE-39-39-会返回-NULL？" class="headerlink" title="4. 为什么 strrchr(__FILE__, &#39;\\&#39;) 会返回 NULL？"></a>4. <strong>为什么 <code>strrchr(__FILE__, &#39;\\&#39;)</code> 会返回 <code>NULL</code>？</strong></h3><p>如果 <code>__FILE__</code> 中的路径分隔符是正斜杠 <code>/</code>，例如：<code>/home/user/main.c</code>，那么：</p><ul><li><code>strrchr(__FILE__, &#39;\\&#39;)</code> 会尝试寻找反斜杠 <code>\</code>。</li><li>因为路径中根本没有反斜杠，<code>strrchr</code> 将返回 <code>NULL</code>。</li></ul><p>当返回 <code>NULL</code> 时，您的宏会进入三目运算符的 <code>: __FILE__</code> 分支，因此最终打印整个路径。</p><h1 id="硬件异常（HardFault）"><a href="#硬件异常（HardFault）" class="headerlink" title="硬件异常（HardFault）"></a>硬件异常（HardFault）</h1><h2 id="数组越界访问"><a href="#数组越界访问" class="headerlink" title="数组越界访问"></a>数组越界访问</h2><p>这段代码，有什么问题？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">* @brief 中位值平均滤波</span></span><br><span class="line"><span class="comment">* @param arr，数组首地址</span></span><br><span class="line"><span class="comment">* @param len，元素个数，需要大于等于3个</span></span><br><span class="line"><span class="comment">* @return 平均运算结果</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">static</span> <span class="type">uint16_t</span> <span class="title function_">MedianAvgFltr</span><span class="params">(<span class="type">uint16_t</span> *arr, <span class="type">uint32_t</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">qsort(arr, len, <span class="keyword">sizeof</span>(<span class="type">uint16_t</span>), CmpCb);</span><br><span class="line"><span class="keyword">return</span> ArithAvgFltr(&amp;arr[<span class="number">1</span>], len - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">* @brief 触发驱动转换温度传感器数据</span></span><br><span class="line"><span class="comment">* @param</span></span><br><span class="line"><span class="comment">* @return </span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Temp_SensorProc</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">static</span> <span class="type">uint16_t</span> s_convertNum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获得ADC采集数据</span></span><br><span class="line"><span class="type">uint16_t</span> ADCVal = Get_ADCVal();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将ADC采集数据转换为十倍温度值</span></span><br><span class="line"><span class="type">uint16_t</span> temp10Mpl = ADCtoTemp10Mpl(ADCVal);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将十倍温度值放入Buffer中</span></span><br><span class="line">PushDataToBuf(temp10Mpl);</span><br><span class="line"></span><br><span class="line">s_convertNum++;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 采集小于3次直接用第一次采集数据代替</span></span><br><span class="line"><span class="keyword">if</span>(s_convertNum &lt; <span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line">g_tempData = g_temp10MplBuf[<span class="number">0</span>] / <span class="number">10.0f</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s_convertNum &gt; BUFF_NUM_SIZE)</span><br><span class="line">&#123;</span><br><span class="line">s_convertNum = BUFF_NUM_SIZE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 快速排序 + 中值滤波 </span></span><br><span class="line">g_tempData = MedianAvgFltr(g_temp10MplBuf, s_convertNum) / <span class="number">10.0f</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每调用一次<code>Temp_SensorProc</code>函数，都会采集一次ADC数据，<code>s_convertNum</code></p><p>会记录采集次数。在小于3次的情况下，一旦调用<code>MedianAvgFltr</code>函数，那么<code>len - 2 &lt; 0</code>，导致数组越界进入硬件故障处理程序 (<code>HardFault_Handler</code>) 。</p><p>程序进入硬件故障处理程序 (<code>HardFault_Handler</code>) 的原因通常是因为直接访问了未定义的内存区域，导致不可预期的行为。在 Cortex-M 系列 MCU（比如你使用的 GD32F30x）中，CPU 会进行内存保护，如果尝试访问非法地址，可能会触发硬件异常，导致进入 <code>HardFault_Handler</code>。</p><h3 id="1-原因"><a href="#1-原因" class="headerlink" title="1.原因"></a>1.原因</h3><ol><li><strong>无效的内存访问</strong><ul><li><strong>栈内存溢出</strong>：如果函数访问了超出数组大小的地址，就有可能修改到本不属于它的内存区域，甚至可能覆盖堆栈。这样会导致调用返回地址丢失，函数在返回时无法正常跳转，进而引发异常。</li><li><strong>访问不可访问的区域</strong>：某些微控制器的内存区域可能是不可访问的（比如保留区域），如果越界访问到这些区域，就会触发 <code>HardFault</code>。</li></ul></li><li><strong>程序执行错误</strong><ul><li>当越界访问破坏了函数的返回地址或者栈上的数据时，程序的控制流就会被破坏。当函数返回时，由于返回地址错误，程序指针 (<code>PC</code>) 可能跳转到一个不合法的地址，这种情况下，硬件无法找到有效的指令来执行，就会进入 <code>HardFault_Handler</code>。</li></ul></li><li><strong>具体的示例</strong><ul><li>比如，在 <code>ArithAvgFltr()</code> 函数中，传入了错误的 <code>len</code> 值（比如大于数组的实际长度），那么在循环中 <code>arr[i]</code> 就可能访问到越界的内存，导致未定义行为。</li><li>在函数 <code>MedianAvgFltr()</code> 中调用 <code>qsort()</code> 进行排序后，再访问 <code>arr</code> 时，如果 <code>len</code> 传入错误，同样会造成越界，进而引发硬件故障。</li></ul></li></ol><h3 id="2-解决方法"><a href="#2-解决方法" class="headerlink" title="2.解决方法"></a>2.解决方法</h3><p>如何避免数组越界进入 <code>HardFault_Handler</code>？</p><ol><li><p><strong>检查数组的边界条件</strong></p><ul><li><p>在使用任何数组之前，必须确保其索引不会超过数组的最大范围。</p></li><li><p>在调用 <code>ArithAvgFltr()</code>、<code>MedianAvgFltr()</code> 等涉及数组操作的函数时，增加对 <code>len</code> 的检查。例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (arr == <span class="literal">NULL</span> || len == <span class="number">0</span> || len &gt; BUFF_NUM_SIZE) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  <span class="comment">// 防止传入无效的长度或指针</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>增加防护代码</strong></p><ul><li><p>在每次访问数组时，都可以添加边界检查，确保访问的索引没有超过数组的大小。例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">uint32_t</span> i = <span class="number">0</span>; i &lt; len; i++) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= BUFF_NUM_SIZE) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 这里添加错误处理逻辑，避免越界访问</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sum += arr[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>使用硬件调试器</strong></p><ul><li>使用硬件调试器（如 J-Link 或其他支持 SWD 的调试器）可以设置硬件断点，并在访问非法内存地址时中断程序，便于定位越界访问的源头。</li></ul></li></ol><p>可以修改如下内容以避免数组越界导致的 <code>HardFault</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">* @brief 触发驱动转换温度传感器数据</span></span><br><span class="line"><span class="comment">* @param</span></span><br><span class="line"><span class="comment">* @return </span></span><br><span class="line"><span class="comment">***********************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">TempSensorProc</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">static</span> <span class="type">uint16_t</span> s_convertNum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">uint16_t</span> adcVal = GetAdcVal();</span><br><span class="line"><span class="type">uint16_t</span> temp10Mpl = AdcToTemp10Mpl(adcVal);</span><br><span class="line"></span><br><span class="line">PushDataToBuf(temp10Mpl);</span><br><span class="line">s_convertNum++;</span><br><span class="line"><span class="keyword">if</span> (s_convertNum &lt; <span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line">g_tempData = g_temp10MplBuf[<span class="number">0</span>] / <span class="number">10.0f</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (s_convertNum &gt; MAX_BUF_SIZE)</span><br><span class="line">&#123;</span><br><span class="line">s_convertNum = MAX_BUF_SIZE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">g_tempData = MedianAvgFltr(g_temp10MplBuf, s_convertNum) / <span class="number">10.0f</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里加<code>return</code>后，使用数组就不会进行非法内存访问，从而避免程序进入 <code>HardFault_Handler</code>。</p><p>因此，<strong>数组越界</strong>会导致进入 <code>HardFault_Handler</code> 是因为 <strong>MCU 中有内存访问保护</strong>，<strong>越界访问会导致访问未定义的内存地址</strong>，<strong>可能会影响堆栈或跳转到无效指令</strong>，<strong>最终触发硬件异常</strong>。为了避免这种情况，必须进行边界检查、合理使用数组并确保指针操作的合法性。</p><h1 id="总线异常（Bus-Fault）"><a href="#总线异常（Bus-Fault）" class="headerlink" title="总线异常（Bus Fault）"></a>总线异常（Bus Fault）</h1><h2 id="1-外部中断"><a href="#1-外部中断" class="headerlink" title="1.外部中断"></a>1.外部中断</h2><p>按键未按下导致外部中断触发的问题与清不清中断标志位没关系，但仍然会进入总线访问异常中断。总线访问异常（Bus Fault）通常与访问非法地址、栈溢出或其他内存错误有关。</p><h3 id="1-原因-1"><a href="#1-原因-1" class="headerlink" title="1.原因"></a>1.<strong>原因</strong></h3><ol><li><p><strong>外部中断配置不当</strong>：</p><ul><li>如果外部中断配置（例如 EXTI0）或中断向量表的处理不正确，可能会触发不可预期的行为，导致访问非法内存区域。特别是在外部中断服务程序（ISR）中进行非法操作时。</li><li>如果没有正确配置中断的优先级或中断处理函数中访问了非法内存（如未初始化的指针、NULL 指针、未对齐访问等），会引发总线访问异常。</li></ul></li><li><p><strong>外设的中断触发条件</strong>：</p><ul><li>即使按键没有按下，中断仍然可能被触发，尤其是如果外部中断线的状态没有正确检查或配置。</li><li>比如，如果 GPIO 输入引脚的电平状态未正确处理，可能会导致外部中断触发。若该中断服务函数（ISR）未正确清除中断标志位或处理中断时访问了无效地址，可能会导致异常。</li></ul></li><li><p><strong>中断服务函数访问非法内存</strong>：</p><ul><li>在你的 <code>EXTI0_IRQHandler</code> 函数中，如果在处理中访问了无效的内存地址或使用了未初始化的指针，程序会进入总线访问异常。</li></ul></li><li><p><strong>外设寄存器配置问题</strong>：</p><ul><li>如果访问了未初始化或无效的外设寄存器，可能会导致总线访问异常。例如，在你的代码中，如果中断源没有正确配置或清除，外设可能未正确初始化，导致访问外设时发生异常。</li></ul></li></ol><h3 id="2-解决方法-1"><a href="#2-解决方法-1" class="headerlink" title="2.解决方法"></a><strong>2.解决方法</strong></h3><ol><li><p><strong>确认 GPIO 配置正确</strong>：<br>你的按键连接到 <code>GPIOA</code> 的 <code>PIN_0</code>，在 <code>GPIOInit</code> 函数中配置为输入浮空状态。这可能会导致不稳定的中断触发，因为浮空输入可能接收到噪声信号，导致不必要的中断触发。</p><p><strong>改进</strong>：</p><ul><li>使用上拉或下拉电阻，确保在按键没有按下时，GPIO 引脚的电平是确定的，避免触发不必要的中断。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpio_init(GPIOA, GPIO_MODE_IN_PULLUP, GPIO_OSPEED_2MHZ, GPIO_PIN_0);  <span class="comment">// 使用上拉</span></span><br></pre></td></tr></table></figure></li><li><p><strong>检查外部中断配置</strong>：<br>外部中断（<code>EXTI0</code>）的触发配置可能是下降沿触发（<code>EXTI_TRIG_FALLING</code>），在没有按键按下时如果引脚状态变化（比如引脚接收到噪声或浮空），可能会导致中断触发，进而进入 <code>EXTI0_IRQHandler</code>。</p><p><strong>改进</strong>：</p><ul><li>确保中断只在按键按下时触发，并使用适当的防抖方法，或者在外部中断服务函数中检查 GPIO 引脚的实际状态。</li></ul></li><li><p><strong>ISR 中的非法内存访问</strong>：<br>确保 <code>EXTI0_IRQHandler</code> 中没有非法的内存访问操作。比如，在 ISR 中访问未初始化的指针或执行不合法的内存操作都会导致总线访问异常。</p><p><strong>改进</strong>：</p><ul><li>检查并确保 ISR 中没有不必要的内存操作，避免使用指针访问未分配的内存。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">EXTI0_IRQHandler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (exti_interrupt_flag_get(EXTI_0)) &#123;</span><br><span class="line">        exti_interrupt_flag_clear(EXTI_0);</span><br><span class="line">        <span class="comment">// 这里确保中断标志位已清除且没有非法内存操作</span></span><br><span class="line">        ToggleLed(LED1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>检查 NVIC 配置</strong>：<br>中断优先级配置不当也可能导致中断服务程序执行时进入异常状态。确保 NVIC 中断优先级正确配置。</p><p><strong>改进</strong>：</p><ul><li>确保 <code>NVIC</code> 中断优先级正确设置，避免优先级冲突或中断失效。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvic_irq_enable(EXTI0_IRQn, <span class="number">1</span>, <span class="number">1</span>);  <span class="comment">// 中断优先级设置为 1</span></span><br></pre></td></tr></table></figure></li></ol><ul><li>按键未按下，可能因为浮空输入或者未正确配置上拉/下拉电阻，导致不必要的外部中断触发。</li><li>总线访问异常通常与非法内存访问相关，可能是在 ISR 中访问了未初始化或非法的内存地址。</li><li>确保外设中断配置、GPIO 引脚状态以及中断服务程序中的内存操作正确。</li><li>最重要的是，检查并确保在中断服务函数中没有非法的内存访问或资源竞争，并且中断标志被正确清除。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STM32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STM32进阶篇</title>
      <link href="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/"/>
      <url>/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h1 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h1><h2 id="系统定时器"><a href="#系统定时器" class="headerlink" title="系统定时器"></a>系统定时器</h2><h3 id="系统定时器简介"><a href="#系统定时器简介" class="headerlink" title="系统定时器简介"></a>系统定时器简介</h3><p>系统定时器（SysTick系统）是属于CM3内核，内嵌在NVIC中。</p><p>系统定时器是一个24bit的向下<strong>递减</strong>的计数器，计数器每计数一次的时间为<strong>1 / SYSCLK</strong>，一般我们设置系统时钟SYSCLK（与AHB相同）等于72M。当重装载数值寄存器的值递减到0的时候，系统定时器就产生一次中断，以此循环往复。</p><p>SysTick定时器能产生中断，CM3为它专门开出一个异常类型，并且在向量表中有它的一席之地。它使操作系统和其它系统软件在CM3器件间的移植变得简单多了，因为在所有CM3产品间SysTick的处理方式都是相同的。</p><p>系统定时器一般用于操作系统，用于产生时基，维持操作系统的心跳。SysTick定时器除了能服务于操作系统之外，还能用于其它目的：如作为一个闹铃，用于测量时间等。</p><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172558968364055.png" alt="img"></p><h3 id="与SysTick相关的寄存器"><a href="#与SysTick相关的寄存器" class="headerlink" title="与SysTick相关的寄存器"></a>与SysTick相关的寄存器</h3><p>有4个寄存器与SysTick有关。在core_cm3.h中可以看到有个类型定义的就是SysTick。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    __IO <span class="type">uint32_t</span> CTRL;                         <span class="comment">/*!&lt; Offset: 0x00  SysTick Control and Status Register */</span></span><br><span class="line">    __IO <span class="type">uint32_t</span> LOAD;                         <span class="comment">/*!&lt; Offset: 0x04  SysTick Reload Value Register       */</span></span><br><span class="line">    __IO <span class="type">uint32_t</span> VAL;                          <span class="comment">/*!&lt; Offset: 0x08  SysTick Current Value Register      */</span></span><br><span class="line">    __IO <span class="type">uint32_t</span> CALIB;                        <span class="comment">/*!&lt; Offset: 0x0C  SysTick Calibration Register        */</span></span><br><span class="line">&#125; SysTick_Type</span><br></pre></td></tr></table></figure><p><strong>CTRL</strong></p><p>SysTick控制和状态寄存器。</p><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-17255896836381.png" alt="img"></p><p>说明:关于<strong>CLKSOURCE</strong>位,当0时,时钟频率是AHB/8, 当1时,时钟频率是AHB。</p><p><strong>LOAD</strong> </p><p>SysTick重装载寄存器。</p><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-17255896836382.png" alt="img"></p><p><strong>VAL</strong></p><p>SysTick当前数值寄存器。</p><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-17255896836383.png" alt="img"></p><p><strong>CALIB</strong></p><p>SysTick 校准数值寄存器。很少用到。</p><h3 id="系统中断案例：LED灯闪烁"><a href="#系统中断案例：LED灯闪烁" class="headerlink" title="系统中断案例：LED灯闪烁"></a>系统中断案例：LED灯闪烁</h3><h4 id="需求描述"><a href="#需求描述" class="headerlink" title="需求描述"></a>需求描述</h4><p>利用<strong>系统定时器的中断</strong>，每隔1s 让LED1灯闪烁一次。</p><h4 id="硬件电路设计"><a href="#硬件电路设计" class="headerlink" title="硬件电路设计"></a>硬件电路设计</h4><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-17255896836384.png" alt="img"></p><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-17255896836385.png" alt="img"></p><ol><li><h4 id="软件设计（寄存器）"><a href="#软件设计（寄存器）" class="headerlink" title="软件设计（寄存器）"></a>软件设计（寄存器）</h4></li></ol><p><a href="https://xiza3i1x6q4.feishu.cn/wiki/FNlqwxVkria9T0kUno1cqPamn6g">系统定时器所需要的寄存器详解</a></p><ol><li><h5 id="main-c"><a href="#main-c" class="headerlink" title="main.c"></a><strong>main.c</strong></h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Driver_USART.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Driver_SysTick.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Driver_LED.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Driver_USART1_Init();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;系统定时器实验开始...\r\n&quot;</span>);</span><br><span class="line">    Driver_LED_Init();</span><br><span class="line">    Driver_SysTick_Init();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h5 id="Driver-SysTick-h"><a href="#Driver-SysTick-h" class="headerlink" title="Driver_SysTick.h"></a><strong>Driver_SysTick.h</strong></h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __DRIVER_SYSTICK_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __DRIVER_SYSTICK_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Driver_LED.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_SysTick_Init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><ol><li><h5 id="Driver-SysTick-c"><a href="#Driver-SysTick-c" class="headerlink" title="Driver_SysTick.c"></a><strong>Driver_SysTick.c</strong></h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Driver_SysTick.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_SysTick_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 配置时钟源  1=AHB(72MHz) 0=AHB/8 */</span></span><br><span class="line">    SysTick-&gt;CTRL |= SysTick_CTRL_CLKSOURCE;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 2. 使能中断 */</span></span><br><span class="line">    SysTick-&gt;CTRL |= SysTick_CTRL_TICKINT;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 3. 定时器 1ms 产生一次中断 */</span></span><br><span class="line">    SysTick-&gt;LOAD = <span class="number">72000</span> - <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 4. 使能定时器 */</span></span><br><span class="line">    SysTick-&gt;CTRL |= SysTick_CTRL_ENABLE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 每1ms产生一次中断</span></span><br><span class="line"><span class="type">uint16_t</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">SysTick_Handler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    count++;</span><br><span class="line">    <span class="keyword">if</span> (count == <span class="number">1000</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, count);</span><br><span class="line">        count = <span class="number">0</span>;</span><br><span class="line">        Driver_LED_Toggle(LED_1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h5 id="Driver-LED-h"><a href="#Driver-LED-h" class="headerlink" title="Driver_LED.h"></a><strong>Driver_LED.h</strong></h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __DRIVER_LED_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __DRIVER_LED_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED_1 GPIO_ODR_ODR0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED_2 GPIO_ODR_ODR1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED_3 GPIO_ODR_ODR8</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_Init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_On</span><span class="params">(<span class="type">uint32_t</span> led)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_Off</span><span class="params">(<span class="type">uint32_t</span> led)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_Toggle</span><span class="params">(<span class="type">uint32_t</span> led)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_OnAll</span><span class="params">(<span class="type">uint32_t</span> leds[], <span class="type">uint8_t</span> size)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_OffAll</span><span class="params">(<span class="type">uint32_t</span> leds[], <span class="type">uint8_t</span> size)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><ol><li><h5 id="Driver-LED-c"><a href="#Driver-LED-c" class="headerlink" title="Driver_LED.c"></a>Driver_LED.c</h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Driver_LED.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 对LED进行初始化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 打开GPIOA的时钟 */</span></span><br><span class="line">    RCC-&gt;APB2ENR |= RCC_APB2ENR_IOPAEN;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 2. 给用到的端口的所有 PIN (PA0 PA1 PA8) 设置工作模式: 通用推挽输出 MODE:11  CNF:00 */</span></span><br><span class="line">    GPIOA-&gt;CRL |= (GPIO_CRL_MODE0 | GPIO_CRL_MODE1);</span><br><span class="line">    GPIOA-&gt;CRL &amp;= ~(GPIO_CRL_CNF0 | GPIO_CRL_CNF1);</span><br><span class="line">    </span><br><span class="line">    GPIOA-&gt;CRH |= GPIO_CRH_MODE8;</span><br><span class="line">    GPIOA-&gt;CRH &amp;= ~GPIO_CRH_CNF8;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 3. 关闭所有灯  */</span></span><br><span class="line">    Driver_LED_Off(LED_1);</span><br><span class="line">    Driver_LED_Off(LED_2);</span><br><span class="line">    Driver_LED_Off(LED_3);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 点亮指定的LED</span></span><br><span class="line"><span class="comment"> * @param &#123;uint32_t&#125; led 要点亮的LED</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_On</span><span class="params">(<span class="type">uint32_t</span> led)</span></span><br><span class="line">&#123;</span><br><span class="line">    GPIOA-&gt;ODR &amp;= ~led;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 关闭指定的LED</span></span><br><span class="line"><span class="comment"> * @param &#123;uint32_t&#125; led 要关闭的LED</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_Off</span><span class="params">(<span class="type">uint32_t</span> led)</span></span><br><span class="line">&#123;</span><br><span class="line">    GPIOA-&gt;ODR |= led;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 翻转LED的状态</span></span><br><span class="line"><span class="comment"> * @param &#123;uint32_t&#125; led 要翻转的LED</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_Toggle</span><span class="params">(<span class="type">uint32_t</span> led)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 读取引脚的电平,如果是1(目前是关闭), 打开, 否则就关闭 */</span></span><br><span class="line">    <span class="keyword">if</span> ((GPIOA-&gt;IDR &amp; led) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Driver_LED_Off(led);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        Driver_LED_On(led);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 打开数组中所有的灯</span></span><br><span class="line"><span class="comment"> * @param &#123;uint32_t&#125; leds 所有灯</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; size 灯的个数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_OnAll</span><span class="params">(<span class="type">uint32_t</span> leds[], <span class="type">uint8_t</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint8_t</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Driver_LED_On(leds[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 关闭数组中所有的灯</span></span><br><span class="line"><span class="comment"> * @param &#123;uint32_t&#125; leds 所有灯</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; size 灯的个数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_OffAll</span><span class="params">(<span class="type">uint32_t</span> leds[], <span class="type">uint8_t</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint8_t</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Driver_LED_Off(leds[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h4 id="软件设计（HAL库）"><a href="#软件设计（HAL库）" class="headerlink" title="软件设计（HAL库）"></a>软件设计（HAL库）</h4></li><li><h5 id="STM32CubeMX设置"><a href="#STM32CubeMX设置" class="headerlink" title="STM32CubeMX设置"></a>STM32CubeMX设置</h5></li></ol><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-17255896836386.png" alt="img"></p><ol><li><h5 id="SysTick初始化代码解读"><a href="#SysTick初始化代码解读" class="headerlink" title="SysTick初始化代码解读"></a>SysTick初始化代码解读</h5></li></ol><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-17255896836387.png" alt="img"></p><p>在HAL库初始化的时候，会初始化SysTick定时器。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">HAL_StatusTypeDef <span class="title function_">HAL_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* Set Interrupt Group Priority */</span></span><br><span class="line">    HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);</span><br><span class="line">    <span class="comment">// 初始化系统滴答定时器：参数是滴答定时器中断优先级，默认是15</span></span><br><span class="line">    HAL_InitTick(TICK_INT_PRIORITY);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Init the low level hardware */</span></span><br><span class="line">    HAL_MspInit();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Return function status */</span></span><br><span class="line">    <span class="keyword">return</span> HAL_OK;</span><br><span class="line">&#125;</span><br><span class="line">__weak HAL_StatusTypeDef <span class="title function_">HAL_InitTick</span><span class="params">(<span class="type">uint32_t</span> TickPriority)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* Configure the SysTick to have interrupt in 1ms time basis*/</span></span><br><span class="line">    <span class="comment">// 配置滴答定时器：每1ms产生一次中断</span></span><br><span class="line">    <span class="comment">// SystemCoreClock = 72MHz（经过RCC配置后）</span></span><br><span class="line">    <span class="comment">// uwTickFreq = 1</span></span><br><span class="line">    <span class="comment">// 参数 = 72000 就是重转载寄存器的值。这个值减到0产生一次中断</span></span><br><span class="line">    <span class="comment">// 时钟频率是72MHz，计数72次是1us，所以计数72000次就是1ms</span></span><br><span class="line">    <span class="comment">// 所以1ms会产生一次中断</span></span><br><span class="line">    <span class="keyword">if</span> (HAL_SYSTICK_Config(SystemCoreClock / (<span class="number">1000U</span> / uwTickFreq)) &gt; <span class="number">0U</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> HAL_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Configure the SysTick IRQ priority */</span></span><br><span class="line">    <span class="keyword">if</span> (TickPriority &lt; (<span class="number">1UL</span> &lt;&lt; __NVIC_PRIO_BITS))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 设置SysTick的优先级：抢占优先级15（最低） 和响应优先级0</span></span><br><span class="line">        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, <span class="number">0U</span>);</span><br><span class="line">        uwTickPrio = TickPriority;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> HAL_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Return function status */</span></span><br><span class="line">    <span class="keyword">return</span> HAL_OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">uint32_t</span> <span class="title function_">HAL_SYSTICK_Config</span><span class="params">(<span class="type">uint32_t</span> TicksNumb)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> SysTick_Config(TicksNumb);</span><br><span class="line">&#125;</span><br><span class="line">__STATIC_INLINE <span class="type">uint32_t</span> <span class="title function_">SysTick_Config</span><span class="params">(<span class="type">uint32_t</span> ticks)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ((ticks - <span class="number">1UL</span>) &gt; SysTick_LOAD_RELOAD_Msk)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">return</span> (<span class="number">1UL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">      <span class="comment">// 重装载寄存器的值。计数器的初始值</span></span><br><span class="line">    SysTick-&gt;LOAD = (<span class="type">uint32_t</span>)(ticks - <span class="number">1UL</span>); </span><br><span class="line">      <span class="comment">// 中断优先级</span></span><br><span class="line">    NVIC_SetPriority (SysTick_IRQn, (<span class="number">1UL</span> &lt;&lt; __NVIC_PRIO_BITS) - <span class="number">1UL</span>);</span><br><span class="line">      <span class="comment">// 设置当前数值寄存器的值 </span></span><br><span class="line">    SysTick-&gt;VAL = <span class="number">0UL</span>;</span><br><span class="line">      <span class="comment">// 1. 设置时钟源为内部时钟源</span></span><br><span class="line">      <span class="comment">// 2. 当计数至0时，产生异常</span></span><br><span class="line">      <span class="comment">// 3. 使能SysTick计数器</span></span><br><span class="line">    SysTick-&gt;CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">0UL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4></li><li><p>前面的这些参数都可以根据需要进行调整。</p></li><li>一般建议把SysTick定时器的抢占优先级设置为最高（数字越小，优先级越高）。<strong>否则在其他中断中使用延时函数的时候会阻塞卡死</strong>。<strong>（强调：**</strong><code>HAL_Delay()</code><strong><strong>函数记时是由Systick中断来对uwtick进行累加</strong></strong>。假设不改优先级，由于Systick中断优先级为15，无法竞争高优先级的中断，因此会卡住）**</li></ol><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-17255896836388.png" alt="img"></p><ol><li>为啥默认将系统时钟（SystemCoreClock）设置为16,000,000（16 MHz）啊？</li></ol><p>通常是因为这是许多微控制器（MCU）的默认主频。这个值对应于许多常见的晶体振荡器（如16 MHz晶振），它们通常用于驱动微控制器的主时钟。</p><ol><li><strong>兼容性**</strong>和广泛应用**：16 MHz晶振是许多MCU的标准配置之一，因此HAL库默认使用这个值以确保在大多数情况下的兼容性和可用性。</li><li><strong>简化配置</strong>：使用一个广泛使用的默认值可以简化初步设置和开发过程，特别是对于初学者和快速原型开发。</li><li><strong>默认启动频率</strong>：大多数MCU在上电时会使用内部的默认时钟源，而许多MCU的默认内部时钟频率为16 MHz。</li><li><strong>易于调试和文档支持</strong>：HAL库通常有详细的文档和示例，这些示例使用默认的系统时钟频率，以便开发人员可以轻松理解和调试代码。</li></ol><p>另外，通常情况下，SystemCoreClock 变量会在系统初始化过程中被修改为实际的主时钟频率。</p><p>系统时钟的配置是通过RCC（Reset and Clock Control）模块来完成的，具体来说，当你在代码中配置了 MCU 的主时钟频率（例如使用HAL库中的 <code>HAL_RCC_ClockConfig()</code> 函数），RCC模块会根据你的配置更新系统时钟的实际值，并且会更新 SystemCoreClock 变量以反映新的主时钟频率。</p><p>总结来说，SystemCoreClock 变量的值会在你配置了主时钟频率之后被更新，以便反映当前的系统时钟配置。</p><ol><li>SysTick-&gt;LOAD 怎么设置，什么时候减1？</li></ol><p><strong>要生成一个周期为N个处理器**</strong>时钟周期<strong><strong>的多镜头计时器，请使用N-1的RELOAD值。例如，如果每100个</strong></strong>时钟脉冲<strong>**需要SysTick中断，则将RELOAD设置为99。如果要在N个处理器时钟周期的延迟后发送一个SysTick中断，则使用值为N的RELOAD。例如，如果需要在400个时钟脉冲后发送一个SysTick中断，则将RELOAD设置为400。</strong></p><ol><li><p>系统滴答定时器中断回调函数解读</p></li><li><h5 id="stm32f1xx-it-c"><a href="#stm32f1xx-it-c" class="headerlink" title="stm32f1xx_it.c"></a>stm32f1xx_it.c</h5></li></ol><p>在 <strong>stm32f1xx_it.c</strong> 中已经定义了<strong>中断**</strong>服务<strong>**函数。</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">SysTick_Handler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* USER CODE BEGIN SysTick_IRQn 0 */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* USER CODE END SysTick_IRQn 0 */</span></span><br><span class="line">    HAL_IncTick();</span><br><span class="line">    <span class="comment">/* USER CODE BEGIN SysTick_IRQn 1 */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* USER CODE END SysTick_IRQn 1 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HAL定义的弱中断回调函数，我们只需要重新实现这个就可以  </p><p>uwTick是一个全局变量，每1ms中断一次，每产生一次中断就加1，所以这个变量表示的计时的ms值。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">__weak <span class="type">void</span> <span class="title function_">HAL_IncTick</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    uwTick += uwTickFreq;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h5 id="main-c-1"><a href="#main-c-1" class="headerlink" title="main.c"></a>main.c</h5></li></ol><p>在main.c中添加我们自己的实现。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">HAL_IncTick</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    uwTick += uwTickFreq;</span><br><span class="line">    <span class="keyword">if</span> (uwTick % <span class="number">1000</span> == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 产生了1s的计时</span></span><br><span class="line">        <span class="comment">// 翻转LED灯</span></span><br><span class="line">        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h3 id="延时函数工具类（寄存器）"><a href="#延时函数工具类（寄存器）" class="headerlink" title="延时函数工具类（寄存器）"></a>延时函数工具类（寄存器）</h3></li><li><h4 id="delay-h"><a href="#delay-h" class="headerlink" title="delay.h"></a>delay.h</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __delay_h</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __delay_h</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span>    <span class="comment">// Device header</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay_us</span><span class="params">(<span class="type">uint16_t</span> us)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay_ms</span><span class="params">(<span class="type">uint16_t</span> ms)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay_s</span><span class="params">(<span class="type">uint16_t</span> s)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><ol><li><h4 id="delay-c"><a href="#delay-c" class="headerlink" title="delay.c"></a>delay.c</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;delay.h&quot;</span> <span class="comment">// Device header</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay_us</span><span class="params">(<span class="type">uint16_t</span> us)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 设计定时器重装值 */</span></span><br><span class="line">    SysTick-&gt;LOAD = <span class="number">72</span> * us;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 清除当前计数值 */</span></span><br><span class="line">    SysTick-&gt;VAL = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 设置内部时钟源（2位-&gt;1）,不需要中断（1位-&gt;0），并启动定时器(0位-&gt;1) */</span></span><br><span class="line">    SysTick-&gt;CTRL = <span class="number">0x5</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 等待计数到0，如果计数到0则16位会置为1 SysTick_CTRL_COUNTFLAG 在检查后不会自动清除为0，</span></span><br><span class="line"><span class="comment">    它仅在下一次计数周期开始时由硬件自动清除为0。下面关掉计数器不用管SysTick_CTRL_COUNTFLAG */</span></span><br><span class="line">    <span class="keyword">while</span> (!(SysTick-&gt;CTRL &amp; SysTick_CTRL_COUNTFLAG));</span><br><span class="line">     </span><br><span class="line">    <span class="comment">/* 关闭定时器 */</span></span><br><span class="line">    SysTick-&gt;CTRL &amp;= ~SysTick_CTRL_ENABLE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay_ms</span><span class="params">(<span class="type">uint16_t</span> ms)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (ms--)</span><br><span class="line">    &#123;</span><br><span class="line">        Delay_us(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay_s</span><span class="params">(<span class="type">uint16_t</span> s)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (s--)</span><br><span class="line">    &#123;</span><br><span class="line">        Delay_ms(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">udelay</span><span class="params">(<span class="type">int</span> us)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 获得寄存器的初始计数值 */</span></span><br><span class="line">    <span class="type">uint32_t</span> Time_Old = SysTick-&gt;VAL;</span><br><span class="line">    <span class="comment">/* 获得寄存器的重装载值 */</span></span><br><span class="line">    <span class="type">uint32_t</span> Load = SysTick-&gt;LOAD;</span><br><span class="line">    <span class="type">uint32_t</span> Ticks = us * (Load + <span class="number">1</span>) / <span class="number">1000</span>;</span><br><span class="line">    <span class="type">uint32_t</span> Cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">uint32_t</span> Time_New = SysTick-&gt;VAL;</span><br><span class="line">        <span class="keyword">if</span> (Time_Old &gt;= Time_New)</span><br><span class="line">        &#123;</span><br><span class="line">            Cnt += Time_Old - Time_New;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            Cnt += Time_Old + Load + <span class="number">1</span> - Time_New;</span><br><span class="line">        &#125;</span><br><span class="line">        Time_Old = Time_New;</span><br><span class="line">        <span class="keyword">if</span> (Cnt &gt;= Ticks)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">mdelay</span><span class="params">(<span class="type">int</span> ms)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ms; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        udelay(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//精确度: </span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    udelay 函数通过读取 SysTick 计数器的值来实现微秒级延时。它使用了一个循环来累计计数器的差值，以达到指定的延时时间。这种方法相对较为精确，因为它能够比较实时地检测到计数器的变化并作出调整。</span></span><br><span class="line"><span class="comment">    Delay_us 函数则是直接设置 SysTick 的加载值和启动定时器，然后等待定时器计数完成。这种方法的精确度取决于 SysTick 定时器的时钟频率和加载值的设置。 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//效率:</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    udelay 函数虽然精确，但是通过循环来等待延时，这可能会占用较多的 CPU 资源，特别是当需要较长的延时时。因为它需要不断地检查计数器的值。 </span></span><br><span class="line"><span class="comment">    Delay_us 函数则是配置定时器后就可以让其自己计数，CPU 不需要进行主动等待。这在延时较长时可能会更加高效，因为可以让 CPU 去执行其他任务。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ol><li><h2 id="基本定时器"><a href="#基本定时器" class="headerlink" title="基本定时器"></a>基本定时器</h2></li></ol><p>定时器是STM32中一个非常强大的外设，功能强大，用途很广。STM32F103系列提供了8个定时器：2个基本定时器(TIM6,7)，4个通用定时器(TIM2-5)，2个高级定时器(TIM1和TIM8)。</p><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-17255896836399.png" alt="img"></p><ul><li><strong>TIM6</strong>和<strong>TIM7</strong>是基本定时器。</li><li><strong>TM2 - TIM5</strong>是通用定时器。</li><li><strong>TM1</strong>和<strong>TM8</strong>是高级定时器。</li></ul><ol><li><h3 id="基本定时器介绍"><a href="#基本定时器介绍" class="headerlink" title="基本定时器介绍"></a>基本定时器介绍</h3></li></ol><p>基本定时器TIM6和TIM7各包含一个16位自动装载计数器，由各自的可编程预分频器驱动。</p><p>这2个定时器是互相独立的，不共享任何资源。</p><p>这个2个基本定时器只能向上计数，由于没有外部IO，所以只能计时，不能对外部脉冲进行计数。</p><p>功能：定时中断，主模式，触发DAC。</p><p>定时器框图如图所示：</p><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172558968363910.png" alt="img"></p><p>特点：</p><p>● 16位自动重装载累加计数器 </p><p>● 16位可编程(可实时修改)预分频器，用于对输入的时钟按系数为1～65536之间的任意数值分频</p><p>● 触发DAC的同步电路 </p><p>● 在更新事件(计数器溢出)时产生中断/DMA请求</p><p>时基单元包含： </p><p>● 计数器寄存器(TIMx_CNT)  </p><p>● 预分频寄存器(TIMx_PSC)  </p><p>● 自动重装载寄存器(TIMx_ARR) </p><p>注意：</p><p>1、计数器寄存器从零开始自增，自增到自动重装载寄存器的装载值后，再来一个时钟上升沿，才会使计数器溢出，并产生一个更新事件。比如设置好定时器，使其计数器每加1个单位的时间为1ms（基本定时器只能向上计数），想要让36ms后触发中断（前提主函数里使能更新中断），此时自动重装载寄存器应该是 36 - 1 。</p><p>2、即使中断功能没有被启用，定时器溢出后仍会发生更新事件，这是定时器硬件工作的一部分。</p><p>3、自动重装载寄存器是预加载的，且其本质上是由影子寄存器的装载值决定。</p><p>4、预分频寄存器具有缓冲，可以在运行过程中改变它的数值，新的预分频数值将在<strong>下一个更新事件</strong>时起作用。</p><p>5、计数器的时钟频率CK_CNT等于 fCK_PSC / (PSC[15:0]+1) 。</p><p>试想一下，如果我突然改变自动重装载寄存器的装载值，那计数器溢出的时间怎么变？</p><p>答案：立即更新或者等计数器溢出后更新。</p><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172558968363911.png" alt="img"></p><p>配成Disable（即没有预加载），则立即更新；配成Enable（即有预加载），则定时器计数器溢出后更新。</p><p><strong>Enable：</strong></p><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172558968363912.png" alt="img"></p><p><strong>Disable:</strong></p><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172558968363913.png" alt="img"></p><p><strong>上图反应出更新事件（UEV）来临后，更新中断标志位（UIF）都会由硬件置 1 ，且不会自动置 0 ，必须手动清除！！！！</strong></p><ol><li><h3 id="基本定时器案例：LED灯闪烁"><a href="#基本定时器案例：LED灯闪烁" class="headerlink" title="基本定时器案例：LED灯闪烁"></a>基本定时器案例：LED灯闪烁</h3></li><li><h4 id="需求描述-1"><a href="#需求描述-1" class="headerlink" title="需求描述"></a>需求描述</h4></li></ol><p>利用基本定时器定时功能，实现LED_2亮-&gt;1s-&gt;LED_2灭 -&gt;1s …。</p><ol><li><h4 id="硬件电路设计-1"><a href="#硬件电路设计-1" class="headerlink" title="硬件电路设计"></a>硬件电路设计</h4></li></ol><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172558968363914.png" alt="img"></p><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172558968363915.png" alt="img"></p><ol><li><h4 id="软件设计（寄存器）-1"><a href="#软件设计（寄存器）-1" class="headerlink" title="软件设计（寄存器）"></a>软件设计（寄存器）</h4><p> <a href="https://xiza3i1x6q4.feishu.cn/wiki/JuwzwEYXniQ4FkkEmeuch1krntg">基本定时器所需要的寄存器</a></p></li><li><h5 id="main-c-2"><a href="#main-c-2" class="headerlink" title="main.c"></a>main.c</h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span> <span class="comment">// Device header</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;led.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;usart.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;timer6.h&quot;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    LED_Init();</span><br><span class="line">    usart1_init();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;基本定时器实验....\r\n&quot;</span>);</span><br><span class="line">    TIM6_Init();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h5 id="Driver-TIM6-h"><a href="#Driver-TIM6-h" class="headerlink" title="Driver_TIM6.h"></a>Driver_TIM6.h</h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __DRIVER_TIM6_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __DRIVER_TIM6_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Driver_LED.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Driver_USART.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_TIM6_Init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><ol><li><h5 id="Driver-TIM6-c"><a href="#Driver-TIM6-c" class="headerlink" title="Driver_TIM6.c"></a>Driver_TIM6.c</h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Driver_TIM6.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 给定时器6进行初始化</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_TIM6_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 给定时器6开启时钟*/</span></span><br><span class="line">    RCC-&gt;APB1ENR |= RCC_APB1ENR_TIM6EN;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 2. 设置预分频值: 分频值7199表示7200分频。分频后频率10K，周期100us */</span></span><br><span class="line">    TIM6-&gt;PSC = <span class="number">7200</span> - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 3. 设置自动重转载寄存器的值，决定中断发生的频率。</span></span><br><span class="line"><span class="comment">        假设设置为9999，表示计数器计数10000次发生一次中断。</span></span><br><span class="line"><span class="comment">        计数一次100us，10000次1000000us，正好1s */</span></span><br><span class="line">    TIM6-&gt;ARR = <span class="number">10000</span> - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 4. 使能更新中断 (小中断) */</span></span><br><span class="line">    TIM6-&gt;DIER |= TIM_DIER_UIE;<span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* NVIC配置 */</span></span><br><span class="line">    <span class="comment">/* 5. 设置中断优先级分组 */</span></span><br><span class="line">    NVIC_SetPriorityGrouping(<span class="number">3</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 6. 设置中断优先级 */</span></span><br><span class="line">    NVIC_SetPriority(TIM6_IRQn, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 7. 使能定时器6的中断 (大中断) */</span></span><br><span class="line">    NVIC_EnableIRQ(TIM6_IRQn);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 8. 使能计数器 */</span></span><br><span class="line">    TIM6-&gt;CR1 |= TIM_CR1_CEN;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: TIM6的中断服务函数</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">TIM6_IRQHandler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    TIM6-&gt;SR &amp;= ~TIM_SR_UIF;<span class="comment">//</span></span><br><span class="line">    Drviver_LED_Toggle(LED_1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;1s\r\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><p>中断标志位必须软件清除，自己构造中断服务函数的话一定先判断是不是需要的中断，然后清楚对应的中断标志位。（HAL库也是这么干的）</p><ol><li><h4 id="软件设计（HAL库）-1"><a href="#软件设计（HAL库）-1" class="headerlink" title="软件设计（HAL库）"></a>软件设计（HAL库）</h4></li><li><p><strong>STM32CubeMX配置</strong></p></li></ol><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172558968363916.png" alt="img"></p><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172558968363917.png" alt="img"></p><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172558968363918.png" alt="img"></p><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172558968363919.png" alt="img"></p><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172558968363920.png" alt="img"></p><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172558968363921.png" alt="img"></p><ol><li><strong>生成的定时器相关代码介绍（tim.c）</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">TIM_HandleTypeDef htim6;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* TIM6 init function */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">MX_TIM6_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    TIM_MasterConfigTypeDef sMasterConfig = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    htim6.Instance = TIM6;</span><br><span class="line">    htim6.Init.Prescaler = <span class="number">7200</span> - <span class="number">1</span>;</span><br><span class="line">    htim6.Init.CounterMode = TIM_COUNTERMODE_UP;</span><br><span class="line">    htim6.Init.Period = <span class="number">10000</span> - <span class="number">1</span>;</span><br><span class="line">    htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;</span><br><span class="line">    <span class="keyword">if</span> (HAL_TIM_Base_Init(&amp;htim6) != HAL_OK)</span><br><span class="line">    &#123;</span><br><span class="line">        Error_Handler();</span><br><span class="line">    &#125;</span><br><span class="line">    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;</span><br><span class="line">    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;</span><br><span class="line">    <span class="keyword">if</span> (HAL_TIMEx_MasterConfigSynchronization(&amp;htim6, &amp;sMasterConfig) != HAL_OK)</span><br><span class="line">    &#123;</span><br><span class="line">        Error_Handler();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_TIM_Base_MspInit</span><span class="params">(TIM_HandleTypeDef *tim_baseHandle)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (tim_baseHandle-&gt;Instance == TIM6)</span><br><span class="line">    &#123;</span><br><span class="line">        __HAL_RCC_TIM6_CLK_ENABLE();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* TIM6 interrupt Init */</span></span><br><span class="line">        HAL_NVIC_SetPriority(TIM6_IRQn, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        HAL_NVIC_EnableIRQ(TIM6_IRQn);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><strong>添加定时器6的中断回调函数</strong> </li></ol><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172558968363922.png" alt="img"></p><p>在 tim.c 中添加HAL库的定时器<strong>溢出中断</strong>回调函数。（定时器的回调函数比较多，这次我们只使用到了溢出中断回调函数）。</p><ol><li><h5 id="tim-c"><a href="#tim-c" class="headerlink" title="tim.c"></a>tim.c</h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN 1 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_TIM_PeriodElapsedCallback</span><span class="params">(TIM_HandleTypeDef *htim)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 定时器6产生中断。任何一个定时器产生中断都会进入到这个方法中，所以需要判断下定时器实例</span></span><br><span class="line">    <span class="keyword">if</span> (htim-&gt;Instance == TIM6)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 翻转LEDB</span></span><br><span class="line">        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;1\r\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* USER CODE END 1 */</span></span><br></pre></td></tr></table></figure><ol><li><h5 id="main-c-3"><a href="#main-c-3" class="headerlink" title="main.c"></a>main.c</h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_Init();</span><br><span class="line">    SystemClock_Config();</span><br><span class="line">    MX_GPIO_Init();</span><br><span class="line">    MX_TIM6_Init();</span><br><span class="line">       </span><br><span class="line">    <span class="comment">// 启动定时器6</span></span><br><span class="line">    HAL_TIM_Base_Start_IT(&amp;htim6);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Start\r\n&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h4 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h4></li></ol><p>这个程序没有问题吗？ </p><p>当然有，单片机一上电，”Start” 和 “1” 几乎同时出现，之后每过 1s 串口打印 “1” ,这是我们调试出来的问题！为啥？</p><p><strong>别忘了，预分频器的特点，它也有影子寄存器，但只有计数器溢出，触发一次更新事件后，才能将设置的预分频器的值更新到其影子寄存器上，由于我们使能了中断，因此第一次的中断没有分频，频率特别快（72MHz）,使得计数器的值加到10000速率极快。</strong></p><p>所以如何解决呢？</p><p>用 <strong>TIMx_EGR</strong> 寄存器操作，提前设置一个<strong>更新事件</strong>，让第一次中断前有一次更新事件，从而更新预分频器的影子寄存器。</p><ol><li><h5 id="寄存器版本："><a href="#寄存器版本：" class="headerlink" title="寄存器版本："></a><strong>寄存器版本：</strong></h5><ol><li><h6 id="Driver-TIM6-c-1"><a href="#Driver-TIM6-c-1" class="headerlink" title="Driver_TIM6.c"></a>Driver_TIM6.c</h6></li></ol></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Driver_TIM6.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 给定时器6进行初始化</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_TIM6_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 给定时器6开启时钟*/</span></span><br><span class="line">    RCC-&gt;APB1ENR |= RCC_APB1ENR_TIM6EN;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 2. 设置预分频值: 分频值7199表示7200分频。分频后频率10K，周期100us */</span></span><br><span class="line">    TIM6-&gt;PSC = <span class="number">7200</span> - <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 3. 设置自动重转载寄存器的值，决定中断发生的频率。</span></span><br><span class="line"><span class="comment">        假设设置为9999，表示计数器计数10000次发生一次中断。</span></span><br><span class="line"><span class="comment">        计数一次100us，10000次1000000us，正好1s */</span></span><br><span class="line">    TIM6-&gt;ARR = <span class="number">10000</span> - <span class="number">1</span>;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">/* 为了避免一启动立即进入更新中断,可以先产生一个更新事件 */</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//法一</span></span><br><span class="line">    TIM6-&gt;EGR |= TIM_EGR_UG;</span><br><span class="line">    TIM6-&gt;SR &amp;= ~TIM_SR_UIF;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//法二</span></span><br><span class="line">    TIM6-&gt;CR1 |= TIM_CR1_URS;</span><br><span class="line">    TIM6-&gt;EGR |= TIM_EGR_UG;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 使能更新中断前而不是后 */</span></span><br><span class="line">    <span class="comment">/* 4. 使能更新中断 (小中断开关) */</span></span><br><span class="line">    TIM6-&gt;DIER |= TIM_DIER_UIE;<span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* NVIC配置 */</span></span><br><span class="line">    <span class="comment">/* 5. 设置中断优先级分组 */</span></span><br><span class="line">    NVIC_SetPriorityGrouping(<span class="number">3</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 6. 设置中断优先级 */</span></span><br><span class="line">    NVIC_SetPriority(TIM6_IRQn, <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 7. 使能定时器6的中断 (大中断开关) */</span></span><br><span class="line">    NVIC_EnableIRQ(TIM6_IRQn);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 8. 使能计数器 */</span></span><br><span class="line">    TIM6-&gt;CR1 |= TIM_CR1_CEN;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><p>为啥加完 TIM6-&gt;EGR |= TIM_EGR_UG; 后还要清 UIF 标志位？</p><p>这是因为，TIM6 和 TIM7 的状态寄存器(TIMx_SR)中的UIF（Update Interrupt Flag）会在产生更新事件时被置为 1，中断看的也是 UIF  标志位，如果不清除也是会进入中断的。</p><p>还有一个寄存器也可以解决这个问题，那就是 <strong>CR1</strong> 中的 <strong>URS</strong> 位！</p><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172558968363923.png" alt="img"></p><p>因此将 “ URS “ 置为 1 ，由于我们使能了中断，所以<strong>只有定时器溢出产生更新事件才可将 “ UIF “ 置为 1</strong> ，<strong>软件产生的更新事件无法将 “ UIF “ 置为 1</strong> ！</p><ol><li><h5 id="HAL版本："><a href="#HAL版本：" class="headerlink" title="HAL版本："></a><strong>HAL版本：</strong></h5><ol><li><h6 id="main-c-4"><a href="#main-c-4" class="headerlink" title="main.c"></a>main.c</h6></li></ol></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_Init();</span><br><span class="line">    SystemClock_Config();</span><br><span class="line">    MX_GPIO_Init();</span><br><span class="line">    MX_TIM6_Init();</span><br><span class="line">    MX_USART1_UART_Init();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Start\r\n&quot;</span>);</span><br><span class="line">    <span class="comment">/* 启动定时器: 使能计数器 */</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    __HAL_TIM_CLEAR_FLAG(&amp;htim6, TIM_FLAG_UPDATE);</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    HAL_TIM_Base_Start_IT(&amp;htim6);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>点开 <strong>MX_TIM6_Init</strong> 函数中的 <strong>HAL_TIM_Base_Init</strong> ，在其中找到 <strong>TIM_Base_SetConfig ，</strong>在这个函数最后<strong>官方已经加了</strong> <strong>TIMx-&gt;EGR = TIM_EGR_UG; 这句话，</strong>因此我们只需要在HAL库里清除标志位就行了，法一即可！</p><p><strong>总之，无论怎样，软件生成更新事件是必须的！！</strong></p><p>为了避免一启动立即进入更新中断,可以先产生一个更新事件一定要先放使能更新上面，不然软件产生更新事件后会立即进入中断，这时预分频影子寄存器仍是0（也就是一分频），大约139us就可以加到10000的数，从而 139 us就进入中断（这种软件设置中断可以粗略地认为与定时器溢出中断等价），同时预分频和重装载寄存器会同时更新到对应的影子寄存器，之后就会正常。</p><p><em>当你设置 TIM6-&gt;CR1 |= TIM_CR1_URS; 之后，更新事件将仅由计数器溢出/下溢引发，而不会由预分频器变化或手动生成的更新事件引发。因此，手动生成更新事件 TIM6-&gt;EGR |= TIM_EGR_UG;</em>会更新影子寄存器，但不会触发更新事件中断，因为此时的更新事件并不包括手动生成的更新事件。</p><p>因此，无论是否触发更新事件中断，影子寄存器的值都会在更新事件发生时得到更新。</p><ol><li><h3 id="基本定时器案例：基本定时器延时"><a href="#基本定时器案例：基本定时器延时" class="headerlink" title="基本定时器案例：基本定时器延时"></a>基本定时器案例：基本定时器延时</h3><ol><li><strong>Driver_TIM6.c</strong></li></ol></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Delay_ms</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 给定时器6开启时钟*/</span></span><br><span class="line">    RCC-&gt;APB1ENR |= RCC_APB1ENR_TIM6EN;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 2. 设置预分频值: 分频值7199表示7200分频。分频后频率10K，周期100us */</span></span><br><span class="line">    TIM6-&gt;PSC = <span class="number">7200</span> - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 3. 设置自动重转载寄存器的值，决定中断发生的频率。*/</span></span><br><span class="line">    TIM6-&gt;ARR = <span class="number">10</span> * us - <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 4. 计数器使能前产生更新事件，让硬件更新预分频影子寄存器 */</span></span><br><span class="line">    TIM6-&gt;EGR |= TIM_EGR_UG;<span class="comment">//设置更新事件</span></span><br><span class="line">    TIM6-&gt;SR &amp;= ~TIM_SR_UIF;<span class="comment">//清除 UIF 标志位</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 5. 使能计数器 */</span></span><br><span class="line">    TIM6-&gt;CR1 |= TIM_CR1_CEN;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 6. 等待计数器溢出产生更新中断改变UIF位 */</span>    </span><br><span class="line">    <span class="keyword">while</span>((TIM6-&gt;SR &amp; TIM_SR_UIF) == <span class="number">0</span>);</span><br><span class="line">    <span class="comment">//while((TIM6-&gt;CNT &lt; us - 1) == 0);</span></span><br><span class="line">    </span><br><span class="line">    TIM6-&gt;SR &amp;= ~TIM_SR_UIF;<span class="comment">//清除 UIF 标志位</span></span><br><span class="line">    <span class="comment">/* 7. 关闭计数器 */</span></span><br><span class="line">    TIM6-&gt;CR1 &amp;= ~TIM_CR1_CEN;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实系统嘀嗒定时器本质与基本定时器一样，区别仅仅是每一次基本定时器溢出会产生更新事件，UIF 标志位需要清除！</p><ol><li><h2 id="通用定时器"><a href="#通用定时器" class="headerlink" title="通用定时器"></a>通用定时器</h2></li></ol><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172558968363924.png" alt="img"></p><ol><li><h3 id="通用定时器介绍"><a href="#通用定时器介绍" class="headerlink" title="通用定时器介绍"></a>通用定时器介绍</h3></li></ol><p>通用定时器有4个分别是：TIM2、TIM3、TIM4、TIM5。它们拥有基本定时器所有功能。并增加如下功能：</p><ol><li><strong>多种时钟源。</strong></li></ol><p>对于时钟源来说有三种选项：</p><ul><li>1、内部时钟模式（默认时钟源是内部时钟），一般都是72MHz，与基本定时器一致。</li><li>2、外部时钟源模式 1 ：<ul><li>1、使用定时器自身通道的输出引脚作为时钟源。</li><li>2、每个定时器都有4个通道。</li><li>3、只有<strong>通道1</strong> 和<strong>通道 2</strong> 才能作为是时钟信号源。</li></ul></li><li>3、外部时钟源模式 2 ：<ul><li>1、使用定时器的特殊引脚 <strong>ETR</strong> 引脚的信号作为时钟源。</li><li>2、每个通用定时器都有 <strong>ETR</strong> 引脚，可以看芯片手册查找。</li></ul></li></ul><p>注意：</p><p>1、外部时钟源一般用于定时器级联。</p><p>2、不配置时钟源默认就是内部时钟（72MHz）。</p><p>3、大部分情况下，内部时钟源够用，这些知识要懂，面试可能用的到。</p><ol><li><strong>向上计数（加），向下计数（减），向上/向下（先加后减）。</strong>当然我们使用的时候更喜欢<strong>向上计数</strong>。</li></ol><ul><li>向下计数：</li></ul><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172558968363925.png" alt="img"></p><p>从自动重装载寄存器值开始计数，一直减到0，然后再来一个时钟周期，定时器溢出产生更新事件，UIF 位置 1 ，之后循环。</p><ul><li>向上计数（<strong>默认，可以不配置</strong>）：</li></ul><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172558968363926.png" alt="img"></p><p>与基本定时器（只能向上计数）一样，都是从0开始加，一直加到自动重装载寄存器值，然后再来一个时钟信号，计数器溢出，产生更新事件，UIF 位置 1，之后循环。</p><ul><li>中央对齐模式：</li></ul><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172558968363927.png" alt="img"></p><p><strong>从0开始向上计数</strong>，一直计数到 <strong>自动重装载寄存器值 - 1</strong> ，再来一个时钟信号，计数器溢出，产生更新事件；再从 <strong>自动重装载寄存器值</strong> 开始<strong>向下递减到1，</strong>再来一个时钟信号，计数器溢出，产生更新事件，然后继续从0开始计数，之后循环。</p><p>根据手册上的通用定时器框图可知，输入比较和输入捕获不能同时发生！</p><ol><li><strong>输入捕获。</strong></li></ol><ul><li>此功能可以捕获输入通道上信号的上升沿或下降沿。</li><li>多用于测量<strong>PWM的周期|频率</strong>，只要测出连续两个上升沿或下降沿的时间间隔就可以计算<strong>周期|频率</strong>；只要再测出有效电平的时间再除以周期，便可以算出占空比。</li><li>输入捕获部分：<ul><li>1、计数器部分。</li><li>2、捕获比较寄存器。（也有影子寄存器，分析方法和自动重装载寄存器一样）</li><li>3、输入部分：<ul><li>共四路输入信号。</li><li>每路都有自己的输入引脚。</li><li>注意：四路输入捕获引脚和四路输出比较引脚是一致的。</li><li>对于同一路引脚，只能处于输入捕获或输出比较，不可兼得。</li><li>可以配置输入捕获的极性（即上升沿、下降沿或两者）。</li></ul></li><li>捕获：即信号来到捕获比较寄存器的同时，计数器CNT的值会更新到输入捕获比较寄存器。（CCR1包含了由上一次输入捕获1事件(IC1)传输的计数器值，也就是<strong>捕获比较寄存器的值一直保留上一次的值，直到下一次更新，计数器的值可是瞬息万变的，别搞混了</strong>）</li><li>捕获中断通常在计数器值被存储到捕获寄存器之后触发。也就是说，当捕获事件发生并且计数器值被更新到捕获寄存器时，如果捕获中断使能并且中断条件满足，捕获中断就会被触发。</li><li>注意：计数器会在捕获边沿之前持续计数。输入捕获事件仅在检测到设置的边沿时才会将当前计数器的值记录下来。</li></ul></li></ul><ol><li><strong>输出比较。</strong></li></ol><ul><li>主要是输出方波。（因为数字芯片无法输出正弦波这种信号）</li><li>输出比较部分：<ul><li>1、计数器部分。</li><li>2、捕获比较寄存器。（也有影子寄存器，分析方法和自动重装载寄存器一样）</li><li>3、输出部分：<ul><li>每个定时器有四个通道。</li><li>可以同时比较四路通道。</li></ul></li></ul></li><li>输出比较八种模式：</li></ul><p>由CCMR1寄存器的<strong>OC1M[2,0]</strong>,共3位来控制</p><p>假设计数器的值为CNT，捕获比较寄存器的值是CCRx = 60</p><ol><li><strong>OC1M[2,0] = 000</strong> <ol><li><strong>输出冻结，CNT与CCR比较的结果不影响输出。</strong></li></ol></li><li><strong>OC1M[2,0] = 001</strong><ol><li><strong>强制输出有效电平，一旦CNT = CCR（满足条件下），强制输出有效电平再也不改变。</strong></li></ol></li><li><strong>OC1M[2,0] = 010</strong><ol><li><strong>强制输出无效电平，一旦CNT = CCR（满足条件下），强制输出无效电平再也不改变。</strong></li></ol></li><li><p><strong>OC1M[2,0] = 011</strong></p><ol><li><p><strong>输出翻转，一旦CNT = CCR，则翻转输出。高-&gt;低，低-&gt;高。</strong></p></li><li><p><strong>输出结果其实就是一个**</strong>方波<strong><strong>，</strong></strong>频率为计数器溢出频率的一半<strong>**，占空比为60%。</strong></p></li><li><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172558968363928.png" alt="img"></p></li></ol></li><li><strong>OC1M[2,0] = 100</strong><ol><li><strong>强制输出低电平，只要定时器启动，无论CNT 是否等于 CCR 都会输出低电平。相当于一整个周期都是低电平1</strong></li></ol></li><li><strong>OC1M[2,0] = 101</strong><ol><li><strong>强制输出高电平，只要定时器启动，无论CNT 是否等于 CCR 都会输出高电平。相当于一整个周期都是高电平！</strong></li></ol></li><li><p><strong>OC1M[2,0] = 110</strong></p><ol><li><p><strong>PWM 模式一:</strong></p></li><li><p><strong>CNT &lt; CCR 输出有效电平</strong></p></li><li><p><strong>CNT &gt;= CCR 输出无效电平</strong></p></li></ol></li><li><p><strong>OC1M[2,0] = 111</strong></p><ol><li><p><strong>PWM 模式二:</strong></p></li><li><p><strong>CNT &lt; CCR 输出无效电平</strong></p></li><li><p><strong>CNT &gt;= CCR 输出有效电平</strong></p></li></ol></li></ol><ul><li><p><strong>PWM模式一和二的占空比相加为100%！</strong></p></li><li><p><strong>注意：</strong>以通道 1 为例，IC1进入预分频器，可以对高频信号选择分频。</p><ul><li><p>信号从预分频器出来，信号为IC1PS</p></li><li><ul><li>会产生捕获比较事件。</li><li>如果使能中断，也会产生捕获比较中断。</li><li>此时计数器CNT的值会更新到捕获比较寄存器（因为信号进入滤波器和边沿检测器时，一旦有设置的边沿信号被检测，在其检测期间，计数器 CNT 的值会被同步捕获并存储到捕获比较寄存器，同时计数器会继续正常递增）。</li></ul></li></ul></li></ul><p><strong>与基本定时器一样，计数器溢每一次溢出，事件都是必须产生的，而只有使能相应中断位后，对应的中断才会产生，同时对应的中断标志位也会置为 1 。</strong></p><ol><li>PWM生成。</li><li><p>支持针对定位的增量（正交）编码器和霍尔传感器电路。</p></li><li><h3 id="通用定时器案例1：LED呼吸灯——PWM脉冲"><a href="#通用定时器案例1：LED呼吸灯——PWM脉冲" class="headerlink" title="通用定时器案例1：LED呼吸灯——PWM脉冲"></a>通用定时器案例1：LED呼吸灯——PWM脉冲</h3></li></ol><p>使用通用定时器的输出比较功能。</p><ol><li><h4 id="需求描述-2"><a href="#需求描述-2" class="headerlink" title="需求描述"></a>需求描述</h4></li></ol><p>输出占空比可调的PWM波形，作用到二极管，使二极管（LED2）呈现呼吸灯的效果。</p><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172558968363929.png" alt="img"></p><p><strong>PA1</strong>复用的是TIM5<em>CH2和TIM2</em> CH2，我们选择TIM5_CH2。</p><ol><li><h4 id="如何生成PWM"><a href="#如何生成PWM" class="headerlink" title="如何生成PWM"></a>如何生成PWM</h4><ol><li>PWM介绍</li><li>定时器的输出比较功能</li></ol></li><li><h4 id="硬件电路设计-2"><a href="#硬件电路设计-2" class="headerlink" title="硬件电路设计"></a>硬件电路设计</h4></li></ol><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172558968363930.png" alt="img"></p><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172558968363931.png" alt="img"></p><ol><li><h4 id="软件设计（寄存器）-2"><a href="#软件设计（寄存器）-2" class="headerlink" title="软件设计（寄存器）"></a>软件设计（寄存器）</h4><p> <a href="https://xiza3i1x6q4.feishu.cn/wiki/HEL4wVxrGibeJAksRJKcPHfDnzg">通用定时器生成PWM案例用到的寄存器详解</a></p></li><li><h5 id="Driver-TIM5-h"><a href="#Driver-TIM5-h" class="headerlink" title="Driver_TIM5.h"></a>Driver_TIM5.h</h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __DRIVER_TIM5_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __DRIVER_TIM5_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_TIM5_Init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_TIM5_Start</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_TIM5_Stop</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_TIM5_SetDutyCycle</span><span class="params">(<span class="type">uint8_t</span> dutyCycle)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><ol><li><h5 id="Driver-TIM5-c"><a href="#Driver-TIM5-c" class="headerlink" title="Driver_TIM5.c"></a>Driver_TIM5.c</h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Driver_TIM5.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_TIM5_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1.  开启时钟*/</span></span><br><span class="line">    <span class="comment">/* 1.1 定时器5的时钟 */</span></span><br><span class="line">    RCC-&gt;APB1ENR |= RCC_APB1ENR_TIM5EN;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 1.2 GPIO的时钟 PA */</span></span><br><span class="line">    RCC-&gt;APB2ENR |= RCC_APB2ENR_IOPAEN;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 2. 设置GPIO的复用推挽输出 PA1 CNF = 10 MODE = 11*/</span></span><br><span class="line">    GPIOA-&gt;CRL |= (GPIO_CRL_CNF1_1 | GPIO_CRL_MODE1);</span><br><span class="line">    GPIOA-&gt;CRL &amp;= ~GPIO_CRL_CNF1_0;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 3. 定时器配置 */</span></span><br><span class="line">    <span class="comment">/* 3.1 预分频器的配置 */</span></span><br><span class="line">    TIM5-&gt;PSC = <span class="number">7200</span> - <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 3.2 自动重装载寄存器的配置 */</span></span><br><span class="line">    TIM5-&gt;ARR = <span class="number">100</span> - <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 3.3 计数器的计数方向 0 = 向上 1 = 向下*/</span></span><br><span class="line">    TIM5-&gt;CR1 &amp;= ~TIM_CR1_DIR;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 3.4 配置通道2的捕获比较寄存器 */</span></span><br><span class="line">    TIM5-&gt;CCR2 = <span class="number">97</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 3.5 把通道2配置为输出  CCMR1_CC2S = 00 */</span></span><br><span class="line">    TIM5-&gt;CCMR1 &amp;= ~TIM_CCMR1_CC2S;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 3.6 配置通道的输出比较模式 CCMR1_OC2M = 110*/</span></span><br><span class="line">    TIM5-&gt;CCMR1 |= TIM_CCMR1_OC2M_2;</span><br><span class="line">    TIM5-&gt;CCMR1 |= TIM_CCMR1_OC2M_1;</span><br><span class="line">    TIM5-&gt;CCMR1 &amp;= ~TIM_CCMR1_OC2M_0;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 3.7 使能通道2比较  CCER_CC2E = 1 */</span></span><br><span class="line">    TIM5-&gt;CCER |= TIM_CCER_CC2E;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 3.8 设置通道的极性 0 = 高电平有效  1 = 低电平有效 */</span></span><br><span class="line">    TIM5-&gt;CCER &amp;= ~TIM_CCER_CC2P;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_TIM5_Start</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 使能计数器 */</span></span><br><span class="line">    TIM5-&gt;CR1 |= TIM_CR1_CEN;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_TIM5_Stop</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 关闭计数器 */</span></span><br><span class="line">    TIM5-&gt;CR1 &amp;= ~TIM_CR1_CEN;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_TIM5_SetDutyCycle</span><span class="params">(<span class="type">uint8_t</span> dutyCycle)</span></span><br><span class="line">&#123;</span><br><span class="line">    TIM5-&gt;CCR2 = dutyCycle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h5 id="Driver-LED-h-1"><a href="#Driver-LED-h-1" class="headerlink" title="Driver_LED.h"></a>Driver_LED.h</h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __DRIVER_LED_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __DRIVER_LED_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED_1 GPIO_ODR_ODR0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED_2 GPIO_ODR_ODR1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED_3 GPIO_ODR_ODR8</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_Init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_On</span><span class="params">(<span class="type">uint32_t</span> led)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_Off</span><span class="params">(<span class="type">uint32_t</span> led)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_Toggle</span><span class="params">(<span class="type">uint32_t</span> led)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_OnAll</span><span class="params">(<span class="type">uint32_t</span> leds[], <span class="type">uint8_t</span> size)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_OffAll</span><span class="params">(<span class="type">uint32_t</span> leds[], <span class="type">uint8_t</span> size)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><ol><li><h5 id="Driver-LED-c-1"><a href="#Driver-LED-c-1" class="headerlink" title="Driver_LED.c"></a>Driver_LED.c</h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Driver_LED.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 对LED进行初始化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 打开GPIOA的时钟 */</span></span><br><span class="line">    RCC-&gt;APB2ENR |= RCC_APB2ENR_IOPAEN;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 2. 给用到的端口的所有 PIN (PA0 PA1 PA8) 设置工作模式: 通用推挽输出 MODE:11  CNF:00 */</span></span><br><span class="line">    GPIOA-&gt;CRL |= (GPIO_CRL_MODE0 | GPIO_CRL_MODE1);</span><br><span class="line">    GPIOA-&gt;CRL &amp;= ~(GPIO_CRL_CNF0 | GPIO_CRL_CNF1);</span><br><span class="line"></span><br><span class="line">    GPIOA-&gt;CRH |= GPIO_CRH_MODE8;</span><br><span class="line">    GPIOA-&gt;CRH &amp;= ~GPIO_CRH_CNF8;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 3. 关闭所有灯  */</span></span><br><span class="line">    Driver_LED_Off(LED_1);</span><br><span class="line">    Driver_LED_Off(LED_2);</span><br><span class="line">    Driver_LED_Off(LED_3);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 点亮指定的LED</span></span><br><span class="line"><span class="comment"> * @param &#123;uint32_t&#125; led 要点亮的LED</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_On</span><span class="params">(<span class="type">uint32_t</span> led)</span></span><br><span class="line">&#123;</span><br><span class="line">    GPIOA-&gt;ODR &amp;= ~led;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 关闭指定的LED</span></span><br><span class="line"><span class="comment"> * @param &#123;uint32_t&#125; led 要关闭的LED</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_Off</span><span class="params">(<span class="type">uint32_t</span> led)</span></span><br><span class="line">&#123;</span><br><span class="line">    GPIOA-&gt;ODR |= led;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 翻转LED的状态</span></span><br><span class="line"><span class="comment"> * @param &#123;uint32_t&#125; led 要翻转的LED</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_Toggle</span><span class="params">(<span class="type">uint32_t</span> led)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 读取引脚的电平,如果是1(目前是关闭), 打开, 否则就关闭 */</span></span><br><span class="line">    <span class="keyword">if</span> ((GPIOA-&gt;IDR &amp; led) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Driver_LED_Off(led);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        Driver_LED_On(led);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 打开数组中所有的灯</span></span><br><span class="line"><span class="comment"> * @param &#123;uint32_t&#125; leds 所有灯</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; size 灯的个数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_OnAll</span><span class="params">(<span class="type">uint32_t</span> leds[], <span class="type">uint8_t</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint8_t</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Driver_LED_On(leds[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 关闭数组中所有的灯</span></span><br><span class="line"><span class="comment"> * @param &#123;uint32_t&#125; leds 所有灯</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; size 灯的个数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_OffAll</span><span class="params">(<span class="type">uint32_t</span> leds[], <span class="type">uint8_t</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint8_t</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Driver_LED_Off(leds[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h5 id="main-c-5"><a href="#main-c-5" class="headerlink" title="main.c"></a>main.c</h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Driver_USART.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Driver_SysTick.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Driver_LED.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Driver_TIM5.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Driver_USART1_Init();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;系统定时器实验开始...\r\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Driver_TIM5_Init();</span><br><span class="line"></span><br><span class="line">    Driver_TIM5_Start();</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> dutyCycle = <span class="number">0</span>;</span><br><span class="line">    <span class="type">uint8_t</span> dir = <span class="number">0</span>; <span class="comment">// 变大</span></span><br><span class="line"></span><br><span class="line">    Driver_TIM5_SetDutyCycle(dutyCycle);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (dir == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            dutyCycle += <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (dutyCycle &gt;= <span class="number">99</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                dir = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            dutyCycle -= <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (dutyCycle &lt;= <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                dir = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        Driver_TIM5_SetDutyCycle(dutyCycle);</span><br><span class="line">        Delay_ms(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h4 id="软件设计（HAL库）-2"><a href="#软件设计（HAL库）-2" class="headerlink" title="软件设计（HAL库）"></a>软件设计（HAL库）</h4></li><li><p><strong>STM32CubeMX配置</strong></p></li></ol><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172558968363932.png" alt="img"></p><ol><li>定时器配置代码展示（tim.c）</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">TIM_HandleTypeDef htim5;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* TIM5 init function */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">MX_TIM5_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* USER CODE BEGIN TIM5_Init 0 */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* USER CODE END TIM5_Init 0 */</span></span><br><span class="line"></span><br><span class="line">    TIM_ClockConfigTypeDef sClockSourceConfig = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    TIM_MasterConfigTypeDef sMasterConfig = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    TIM_OC_InitTypeDef sConfigOC = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* USER CODE BEGIN TIM5_Init 1 */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* USER CODE END TIM5_Init 1 */</span></span><br><span class="line">    htim5.Instance = TIM5;</span><br><span class="line">    htim5.Init.Prescaler = <span class="number">7200</span> - <span class="number">1</span>;</span><br><span class="line">    htim5.Init.CounterMode = TIM_COUNTERMODE_UP;</span><br><span class="line">    htim5.Init.Period = <span class="number">100</span> - <span class="number">1</span>;</span><br><span class="line">    htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;</span><br><span class="line">    htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;</span><br><span class="line">    <span class="keyword">if</span> (HAL_TIM_Base_Init(&amp;htim5) != HAL_OK)</span><br><span class="line">    &#123;</span><br><span class="line">        Error_Handler();</span><br><span class="line">    &#125;</span><br><span class="line">    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;</span><br><span class="line">    <span class="keyword">if</span> (HAL_TIM_ConfigClockSource(&amp;htim5, &amp;sClockSourceConfig) != HAL_OK)</span><br><span class="line">    &#123;</span><br><span class="line">        Error_Handler();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (HAL_TIM_PWM_Init(&amp;htim5) != HAL_OK)</span><br><span class="line">    &#123;</span><br><span class="line">        Error_Handler();</span><br><span class="line">    &#125;</span><br><span class="line">    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;</span><br><span class="line">    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;</span><br><span class="line">    <span class="keyword">if</span> (HAL_TIMEx_MasterConfigSynchronization(&amp;htim5, &amp;sMasterConfig) != HAL_OK)</span><br><span class="line">    &#123;</span><br><span class="line">        Error_Handler();</span><br><span class="line">    &#125;</span><br><span class="line">    sConfigOC.OCMode = TIM_OCMODE_PWM1;</span><br><span class="line">    sConfigOC.Pulse = <span class="number">0</span>;</span><br><span class="line">    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;</span><br><span class="line">    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;</span><br><span class="line">    <span class="keyword">if</span> (HAL_TIM_PWM_ConfigChannel(&amp;htim5, &amp;sConfigOC, TIM_CHANNEL_2) != HAL_OK)</span><br><span class="line">    &#123;</span><br><span class="line">        Error_Handler();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* USER CODE BEGIN TIM5_Init 2 */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* USER CODE END TIM5_Init 2 */</span></span><br><span class="line">    HAL_TIM_MspPostInit(&amp;htim5);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_TIM_Base_MspInit</span><span class="params">(TIM_HandleTypeDef *tim_baseHandle)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (tim_baseHandle-&gt;Instance == TIM5)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* USER CODE BEGIN TIM5_MspInit 0 */</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* USER CODE END TIM5_MspInit 0 */</span></span><br><span class="line">        <span class="comment">/* TIM5 clock enable */</span></span><br><span class="line">        __HAL_RCC_TIM5_CLK_ENABLE();</span><br><span class="line">        <span class="comment">/* USER CODE BEGIN TIM5_MspInit 1 */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* USER CODE END TIM5_MspInit 1 */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_TIM_MspPostInit</span><span class="params">(TIM_HandleTypeDef *timHandle)</span></span><br><span class="line">&#123;</span><br><span class="line">    GPIO_InitTypeDef GPIO_InitStruct = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">if</span> (timHandle-&gt;Instance == TIM5)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* USER CODE BEGIN TIM5_MspPostInit 0 */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* USER CODE END TIM5_MspPostInit 0 */</span></span><br><span class="line"></span><br><span class="line">        __HAL_RCC_GPIOA_CLK_ENABLE();</span><br><span class="line">        <span class="comment">/* TIM5 GPIO Configuration</span></span><br><span class="line"><span class="comment">        PA1     ------&gt; TIM5_CH2 */</span></span><br><span class="line">        GPIO_InitStruct.Pin = GPIO_PIN_1;</span><br><span class="line">        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;</span><br><span class="line">        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;</span><br><span class="line">        HAL_GPIO_Init(GPIOA, &amp;GPIO_InitStruct);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* USER CODE BEGIN TIM5_MspPostInit 1 */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* USER CODE END TIM5_MspPostInit 1 */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>添加其他代码 </p></li><li><h5 id="tim-c-1"><a href="#tim-c-1" class="headerlink" title="tim.c"></a>tim.c</h5></li></ol><p>添加修改占空比的函数，并在tim.h中声明。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN 1 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">setDutyCycle</span><span class="params">(<span class="type">uint16_t</span> dutyCycle)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 设置捕获比较寄存器的值</span></span><br><span class="line">    __HAL_TIM_SetCompare(&amp;htim5, TIM_CHANNEL_2, dutyCycle);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* USER CODE END 1 */</span></span><br></pre></td></tr></table></figure><ol><li><h5 id="main-c-6"><a href="#main-c-6" class="headerlink" title="main.c"></a>main.c</h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_Init();</span><br><span class="line">    SystemClock_Config();</span><br><span class="line">    MX_GPIO_Init();</span><br><span class="line">    MX_TIM5_Init();</span><br><span class="line">    </span><br><span class="line">    HAL_TIM_PWM_Start(&amp;htim5, TIM_CHANNEL_2);</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> dutyCycle = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int8_t</span> step = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (dutyCycle &lt;= <span class="number">0</span> || dutyCycle &gt;= <span class="number">99</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            step = -step;</span><br><span class="line">        &#125;</span><br><span class="line">        dutyCycle += step;</span><br><span class="line">        setDutyCycle(dutyCycle);</span><br><span class="line">        HAL_Delay(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h3 id="通用定时器实验2：测量PWM的频率-周期"><a href="#通用定时器实验2：测量PWM的频率-周期" class="headerlink" title="通用定时器实验2：测量PWM的频率/周期"></a>通用定时器实验2：测量PWM的频率/周期</h3></li><li><h4 id="需求描述-3"><a href="#需求描述-3" class="headerlink" title="需求描述"></a>需求描述</h4></li></ol><p>上一个案例我们输出了PWM波，这个案例我们使用<strong>输入捕获</strong>功能，来测试PWM波的频率/周期。把测到的结果通过串口发送到电脑，检查测试的结果。</p><ol><li><h4 id="如何测量PWM周期-频率"><a href="#如何测量PWM周期-频率" class="headerlink" title="如何测量PWM周期/频率"></a>如何测量PWM周期/频率</h4></li><li><h4 id="硬件电路设计-3"><a href="#硬件电路设计-3" class="headerlink" title="硬件电路设计"></a>硬件电路设计</h4></li></ol><p>TIM5的CH2输出PWM波。</p><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172558968363933.png" alt="img"></p><p>使用TIM4的CH1来捕获PWM信号。</p><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172558968363934.png" alt="img"></p><p>使用杜邦线把PA1连接到PB6，就可以完成我们的测量任务。</p><p>测量时设置一个周期使其在此期间计数器不溢出。</p><p>且测量频率不能高于设置的<strong>计数器的频率（时钟频率分频到计数器的频率）</strong>，不然，一个周期到了，但此时计数器连一个数也记不上。解决方法：多测几个周期，测量的频率再分频。</p><ol><li><h4 id="软件设计（寄存器）-3"><a href="#软件设计（寄存器）-3" class="headerlink" title="软件设计（寄存器）"></a>软件设计（寄存器）</h4></li></ol><p>暂时无法在飞书文档外展示此内容</p><ol><li><h5 id="Driver-TIM4-h"><a href="#Driver-TIM4-h" class="headerlink" title="Driver_TIM4.h"></a>Driver_TIM4.h</h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __DRIVER_TIM4_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __DRIVER_TIM4_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_TIM4_Init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_TIM4_Start</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">double</span> <span class="title function_">Driver_TIM4_GetPWMCycle</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">double</span> <span class="title function_">Driver_TIM4_GetPWMFreq</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><ol><li><h5 id="Driver-TIM4-c"><a href="#Driver-TIM4-c" class="headerlink" title="Driver_TIM4.c"></a>Driver_TIM4.c</h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Driver_TIM4.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_TIM4_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 开启时钟 */</span></span><br><span class="line">    <span class="comment">/* 1.1 TIM4的时钟 */</span></span><br><span class="line">    RCC-&gt;APB1ENR |= RCC_APB1ENR_TIM4EN;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 1.2 把引脚(PB6) 对应的端口开启时钟*/</span></span><br><span class="line">    RCC-&gt;APB2ENR |= RCC_APB2ENR_IOPBEN;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 2. PB6设置为输入: 浮空输入 CNF=01 MODE=00 */</span></span><br><span class="line">    GPIOB-&gt;CRL &amp;= ~(GPIO_CRL_CNF6_1 | GPIO_CRL_MODE6);</span><br><span class="line">    GPIOB-&gt;CRL |= GPIO_CRL_CNF6_0;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 3. 配置定时器的时基部分 */</span></span><br><span class="line">    <span class="comment">/* 3.1 预分频系数配置 分频后计数器的时钟时1MHz 周期:1us*/</span></span><br><span class="line">    TIM4-&gt;PSC = <span class="number">72</span> - <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 3.2 自动重装载寄存器的值: 设置最大,尽量避免溢出 */</span></span><br><span class="line">    TIM4-&gt;ARR = <span class="number">65535</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 3.3 计数方向: 向上计数 */</span></span><br><span class="line">    TIM4-&gt;CR1 &amp;= ~TIM_CR1_DIR;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 4. 输入捕获部分 */</span></span><br><span class="line">    <span class="comment">/* 4.1 TI1的选择: 把CH1直接连接到TI1 */</span></span><br><span class="line">    TIM4-&gt;CR2 &amp;= ~TIM_CR2_TI1S;<span class="comment">//默认，可以不用配</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 4.2 信号的输入滤波器: 不滤波  CCMR1_IC1F=0000 */</span></span><br><span class="line">    TIM4-&gt;CCMR1 &amp;= ~TIM_CCMR1_IC1F;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 4.3 配置边沿检测器: 上升沿 CCER_CC1P=0  1下降沿捕获*/</span></span><br><span class="line">    TIM4-&gt;CCER &amp;= ~TIM_CCER_CC1P;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 4.4 通道1配置为输入,并把信号映射到IC1  CC1S=01 */</span></span><br><span class="line">    TIM4-&gt;CCMR1 &amp;= ~TIM_CCMR1_CC1S_1;</span><br><span class="line">    TIM4-&gt;CCMR1 |= TIM_CCMR1_CC1S_0;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 4.5 对信号做分频(信号频率比较高的时候) CCMR1_IC1PSC=00不分频 01=2分频 10=4分频 11=8分频*/</span></span><br><span class="line">    TIM4-&gt;CCMR1 &amp;= ~TIM_CCMR1_IC1PSC;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 4.6 通道1输入捕获使能 CCER_CC1E=1 */</span></span><br><span class="line">    TIM4-&gt;CCER |= TIM_CCER_CC1E;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 4.7 开启捕获中断 DIER_CC1IE=1 */</span></span><br><span class="line">    TIM4-&gt;DIER |= TIM_DIER_CC1IE;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 5. NVIC的配置 */</span></span><br><span class="line">    <span class="comment">/* 5.1 优先级组 */</span></span><br><span class="line">    NVIC_SetPriorityGrouping(<span class="number">3</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 5.2 优先级 */</span></span><br><span class="line">    NVIC_SetPriority(TIM4_IRQn, <span class="number">3</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 5.3 使能中断 */</span></span><br><span class="line">    NVIC_EnableIRQ(TIM4_IRQn);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_TIM4_Start</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    TIM4-&gt;CR1 |= TIM_CR1_CEN; <span class="comment">/* 计数器使能 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_TIM4_Stop</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    TIM4-&gt;CR1 &amp;= ~TIM_CR1_CEN; <span class="comment">/* 计数器失能 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 记录上升沿的个数 */</span></span><br><span class="line"><span class="type">uint8_t</span> raiseEdgeCount = <span class="number">0</span>;</span><br><span class="line"><span class="comment">/* 存储信号的周期 */</span></span><br><span class="line"><span class="type">uint16_t</span> t = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* TIM4中断服务函数 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">TIM4_IRQHandler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 判断是否是TIM4的通道1发生了捕获中断 */</span></span><br><span class="line">    <span class="keyword">if</span> (TIM4-&gt;SR &amp; TIM_SR_CC1IF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* 中断标记位清除 */</span></span><br><span class="line">        TIM4-&gt;SR &amp;= ~TIM_SR_CC1IF;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 上升沿个数 */</span></span><br><span class="line">        raiseEdgeCount++;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* 如果是第1个上升沿,则清零计数器,让计数器从0开始计数 */</span></span><br><span class="line">        <span class="keyword">if</span> (raiseEdgeCount == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            TIM4-&gt;CNT = <span class="number">0</span>; <span class="comment">/* 计数器清零 */</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (raiseEdgeCount == <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">/* 读取捕获寄存器的值,就是周期 单位是us*/</span></span><br><span class="line">            t = TIM4-&gt;CCR1;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">/* 上升沿的计数从0重新计数 */</span></span><br><span class="line">            raiseEdgeCount = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 返回PWM的周期 ms*/</span></span><br><span class="line"><span class="type">double</span> <span class="title function_">Driver_TIM4_GetPWMCycle</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> t / <span class="number">1000.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 返回PWM的频率 */</span></span><br><span class="line"><span class="type">double</span> <span class="title function_">Driver_TIM4_GetPWMFreq</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1000000</span> / t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h5 id="main-c-7"><a href="#main-c-7" class="headerlink" title="main.c"></a>main.c</h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Driver_USART.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Delay.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Driver_TIM5.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Driver_TIM4.h&quot;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Driver_USART1_Init();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;系统定时器实验开始...\r\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Driver_TIM5_Init();</span><br><span class="line">    Driver_TIM5_Start();</span><br><span class="line"></span><br><span class="line">    Driver_TIM4_Init();</span><br><span class="line">    Driver_TIM4_Start();</span><br><span class="line">    <span class="type">double</span> t, f;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        t = Driver_TIM4_GetPWMCycle();</span><br><span class="line">        f = Driver_TIM4_GetPWMFreq();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;t=%.4fms, f=%.4fHz\r\n&quot;</span>, t, f);</span><br><span class="line"></span><br><span class="line">        Delay_ms(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为啥将引脚配置为浮空输入啊？因为测信号频率是通过检测信号边沿实现的，高低电平是待测频率控制的！</p><p>将输入捕获通道引脚配置为浮空输入，主要是为了优化信号的捕获和测量效果。这里有几个关键原因：</p><ol><li><strong>减少干扰</strong>：<ol><li><strong>减少噪声</strong>：未连接的引脚可能会受到周围噪声的影响，配置为浮空输入可以减少这些噪声对信号捕获的干扰。通过将引脚设置为浮空输入，可以避免未连接引脚上的噪声干扰导致不准确的计数。</li><li><strong>防止错误触发</strong>：如果引脚没有正确连接到信号源，未连接状态可能会产生随机的电平波动。将引脚配置为浮空输入有助于减少这种潜在的干扰，从而提高捕获事件的可靠性。</li></ol></li><li><strong>信号稳定性</strong>：<ol><li><strong>边沿检测</strong>：频率测量通常基于信号的边沿（上升沿或下降沿）。如果信号引脚配置为浮空输入，捕获模块仅在实际信号边沿到达时才会触发，而不会受到<strong>电平稳定性</strong>问题的影响。这样可以确保捕获到的边沿信息是准确的。</li></ol></li><li><strong>电平兼容性</strong>：<ol><li><strong>避免干扰电平</strong>：当引脚配置为浮空输入时，它不会被内部电路或者外部干扰源所驱动，因此不容易被意外的高电平或低电平影响。这对于频率测量特别重要，因为信号的变化（边沿）是关键，而不是静态电平。</li></ol></li><li><strong>优化测量精度</strong>：<ol><li><strong>精确捕获</strong>：在测量高频信号时，浮空输入模式可以减少由于输入信号不稳定导致的测量误差。这样可以提高捕获精度，特别是在频率和时间精度要求较高的应用中。</li></ol></li></ol><p>总之，浮空输入模式在处理频率测量和边沿捕获时，能够有效地提高信号捕获的准确性和稳定性，避免潜在的干扰和测量误差。</p><ol><li><h4 id="软件设计（HAL库）-3"><a href="#软件设计（HAL库）-3" class="headerlink" title="软件设计（HAL库）"></a>软件设计（HAL库）</h4></li><li><h5 id="STM32CubeMX配置"><a href="#STM32CubeMX配置" class="headerlink" title="STM32CubeMX配置"></a><strong>STM32CubeMX配置</strong></h5></li></ol><p>复制上一个工程。</p><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172558968363935.png" alt="img"></p><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172558968363936.png" alt="img"></p><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172558968363937.png" alt="img"></p><ol><li><h5 id="TIM4初始化代码（HAL库自动生成）"><a href="#TIM4初始化代码（HAL库自动生成）" class="headerlink" title="TIM4初始化代码（HAL库自动生成）"></a>TIM4初始化代码（HAL库自动生成）</h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">MX_TIM4_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* USER CODE BEGIN TIM4_Init 0 */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* USER CODE END TIM4_Init 0 */</span></span><br><span class="line"></span><br><span class="line">    TIM_ClockConfigTypeDef sClockSourceConfig = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    TIM_MasterConfigTypeDef sMasterConfig = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    TIM_IC_InitTypeDef sConfigIC = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* USER CODE BEGIN TIM4_Init 1 */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* USER CODE END TIM4_Init 1 */</span></span><br><span class="line">    htim4.Instance = TIM4;</span><br><span class="line">    htim4.Init.Prescaler = <span class="number">72</span> - <span class="number">1</span>;</span><br><span class="line">    htim4.Init.CounterMode = TIM_COUNTERMODE_UP;</span><br><span class="line">    htim4.Init.Period = <span class="number">65536</span> - <span class="number">1</span>;</span><br><span class="line">    htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;</span><br><span class="line">    htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;</span><br><span class="line">    <span class="keyword">if</span> (HAL_TIM_Base_Init(&amp;htim4) != HAL_OK)</span><br><span class="line">    &#123;</span><br><span class="line">        Error_Handler();</span><br><span class="line">    &#125;</span><br><span class="line">    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;</span><br><span class="line">    <span class="keyword">if</span> (HAL_TIM_ConfigClockSource(&amp;htim4, &amp;sClockSourceConfig) != HAL_OK)</span><br><span class="line">    &#123;</span><br><span class="line">        Error_Handler();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (HAL_TIM_IC_Init(&amp;htim4) != HAL_OK)</span><br><span class="line">    &#123;</span><br><span class="line">        Error_Handler();</span><br><span class="line">    &#125;</span><br><span class="line">    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;</span><br><span class="line">    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;</span><br><span class="line">    <span class="keyword">if</span> (HAL_TIMEx_MasterConfigSynchronization(&amp;htim4, &amp;sMasterConfig) != HAL_OK)</span><br><span class="line">    &#123;</span><br><span class="line">        Error_Handler();</span><br><span class="line">    &#125;</span><br><span class="line">    sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;</span><br><span class="line">    sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;</span><br><span class="line">    sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;</span><br><span class="line">    sConfigIC.ICFilter = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (HAL_TIM_IC_ConfigChannel(&amp;htim4, &amp;sConfigIC, TIM_CHANNEL_1) != HAL_OK)</span><br><span class="line">    &#123;</span><br><span class="line">        Error_Handler();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* USER CODE BEGIN TIM4_Init 2 */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* USER CODE END TIM4_Init 2 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h5 id="添加其他代码"><a href="#添加其他代码" class="headerlink" title="添加其他代码"></a>添加其他代码</h5></li><li><h6 id="tim-c-2"><a href="#tim-c-2" class="headerlink" title="tim.c"></a><strong>tim.c</strong></h6></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 记录上升沿的个数 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 提前配置好了上升沿触发，因此每来一个上升沿会触发输入捕获</span></span><br><span class="line"><span class="comment">中断，raiseEdgeCount++，从而用raiseEdgeCount模拟上升沿个数*/</span></span><br><span class="line"><span class="type">uint8_t</span> raiseEdgeCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 存储信号的周期 */</span></span><br><span class="line"><span class="type">uint16_t</span> t = <span class="number">0</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_TIM_IC_CaptureCallback</span><span class="params">(TIM_HandleTypeDef *htim)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (htim-&gt;Instance == TIM4)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (htim-&gt;Channel == HAL_TIM_ACTIVE_CHANNEL_1)<span class="comment">//这里是输入捕获中断的回调函数，所以可以判断通道，如果是是更新中断的回调函数可不敢判断通道啊！</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">/* 上升沿个数 */</span></span><br><span class="line">            raiseEdgeCount++;</span><br><span class="line">            <span class="comment">/* 如果是第1个上升沿,则清零计数器,让计数器从0开始计数 */</span></span><br><span class="line">            <span class="keyword">if</span> (raiseEdgeCount == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// TIM4-&gt;CNT = 0; /* 计数器清零 */</span></span><br><span class="line">                __HAL_TIM_SetCounter(htim, <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (raiseEdgeCount == <span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">/* 读取捕获寄存器的值,就是周期 单位是us*/</span></span><br><span class="line">                <span class="comment">//t = TIM4-&gt;CCR1;</span></span><br><span class="line">                t = __HAL_TIM_GetCompare(htim, TIM_CHANNEL_1);</span><br><span class="line">                <span class="comment">/* 上升沿的计数从0重新计数 */</span></span><br><span class="line">                raiseEdgeCount = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 返回PWM的周期 ms */</span></span><br><span class="line"><span class="type">double</span> <span class="title function_">Driver_TIM4_GetPWMCycle</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> t / <span class="number">1000.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 返回PWM的频率 （对应换算的周期 s）*/</span></span><br><span class="line"><span class="type">double</span> <span class="title function_">Driver_TIM4_GetPWMFreq</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1000000</span> / t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><p><strong>以后类似频率、周期这种数，一定要想着不能用uint8_t,要不然溢出了。</strong></p><ol><li><h6 id="main-c-8"><a href="#main-c-8" class="headerlink" title="main.c"></a><strong>main.c</strong></h6></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    HAL_Init();</span><br><span class="line">    SystemClock_Config();</span><br><span class="line">    MX_GPIO_Init();</span><br><span class="line">    MX_TIM4_Init();</span><br><span class="line">    MX_TIM5_Init();</span><br><span class="line">    MX_USART1_UART_Init();</span><br><span class="line">    </span><br><span class="line">    HAL_TIM_PWM_Start(&amp;htim5, TIM_CHANNEL_2); <span class="comment">// 让tim5产生pwm</span></span><br><span class="line"></span><br><span class="line">    HAL_TIM_IC_Start_IT(&amp;htim4, TIM_CHANNEL_1);</span><br><span class="line"></span><br><span class="line">    <span class="type">double</span> t, f;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        t = Driver_TIM4_GetPWMCycle();</span><br><span class="line">        f = Driver_TIM4_GetPWMFreq();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;t=%.4fms, f=%.4fHz\r\n&quot;</span>, t, f);</span><br><span class="line"></span><br><span class="line">        HAL_Delay(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相比，输出比较没有必要开中断。原因是我们不需要处理输出比较过程中的信号，而我们需要处理输入捕获过程中的边沿信号来计算周期、占空比等数据！</p><p>因此，输入捕获需要精确记录时间点并处理捕获事件，而输出比较只是产生预设的信号，不涉及实时数据处理。</p><ol><li><h4 id="思考-1"><a href="#思考-1" class="headerlink" title="思考"></a>思考</h4></li></ol><p>回到定时器有关于输入捕获的介绍，可知CCRx的值会保持不变直到下一次输入捕获发生，为啥不直接读 <strong>CCRx寄存器</strong> 而是用 <strong>全局变量T</strong> 来接收？</p><p>原因：我们<strong>TIM5设置的PWM的周期为10ms，</strong>分频后TIM4每次计数耗费<strong>1us</strong>，因此CNT如果从0开始，需要TIM4的CNT计10000次才能到达一个周期。</p><p><strong>假设将 tim.c 中的 变量t 换成CCR1寄存器，raiseEdgeCount = 2的情况就舍弃了，只有raiseEdgeCount = 1，初始CNT清0。</strong></p><p>首先第一个上升沿没有问题，<strong>捕获比较完后进入中断</strong>，<strong>CNT清0</strong>，此时没有读<strong>CCR1寄存器</strong>的值，其次，第二个上升沿来临后，CNT肯定加到10000，之后并没有CNT清0这一步骤<strong>，</strong>然后第二个上升沿来临<strong>，此时CNT的值从10000已经增到20000，将CNT的20000捕获到CCR1后，进入中断，此时 raiseEdgeCount = 1，CNT清0。</strong></p><p>因此最终会导致测出的数为 10ms，20ms，10ms，20ms 循环下去。</p><p>有无更好的方法，当然？</p><ol><li><h5 id="tim-c-3"><a href="#tim-c-3" class="headerlink" title="tim.c"></a><strong>tim.c</strong></h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN 1 */</span></span><br><span class="line"><span class="comment">/* 记录上升沿的个数 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 提前配置好了上升沿触发，因此每来一个上升沿会触发输入捕获</span></span><br><span class="line"><span class="comment">中断，raiseEdgeCount++，从而用raiseEdgeCount模拟上升沿个数*/</span></span><br><span class="line"><span class="type">uint8_t</span> raiseEdgeCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 存储信号的周期 */</span></span><br><span class="line"><span class="type">uint16_t</span> t = <span class="number">0</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_TIM_IC_CaptureCallback</span><span class="params">(TIM_HandleTypeDef *htim)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (htim-&gt;Instance == TIM4)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (htim-&gt;Channel == HAL_TIM_ACTIVE_CHANNEL_1)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// TIM4-&gt;CNT = 0; /* 计数器清零 */</span></span><br><span class="line">            __HAL_TIM_SetCounter(&amp;htim4, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 返回PWM的周期 ms */</span></span><br><span class="line"><span class="type">double</span> <span class="title function_">Driver_TIM4_GetPWMCycle</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> __HAL_TIM_GetCompare(&amp;htim4, TIM_CHANNEL_1) / <span class="number">1000.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 返回PWM的频率 （对应换算的周期 s）*/</span></span><br><span class="line"><span class="type">double</span> <span class="title function_">Driver_TIM4_GetPWMFreq</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1000000.0</span> / __HAL_TIM_GetCompare(&amp;htim4, TIM_CHANNEL_1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE END 1 */</span></span><br></pre></td></tr></table></figure><p>其实这样做与后面的实验3是一个思路。</p><ol><li><h3 id="通用定时器实验3：同时测量PWM的频率-周期和占空比"><a href="#通用定时器实验3：同时测量PWM的频率-周期和占空比" class="headerlink" title="通用定时器实验3：同时测量PWM的频率/周期和占空比"></a>通用定时器实验3：同时测量PWM的频率/周期和占空比</h3></li><li><h4 id="需求描述-4"><a href="#需求描述-4" class="headerlink" title="需求描述"></a>需求描述</h4></li></ol><p>用一个定时器的2个通道<strong>同时测量频率和占空比</strong>。</p><p>测试频率好理解，连续的两个上升沿就可以了。测试占空比就需要<strong>连续的一个上升沿和一个下降沿</strong>，用前面的知识是无法实现了，因为需要在这个通道即要检测上升沿，也要检测下降沿，是无法实现的。</p><p>所以，要测量占空比，需要用到新的知识：定时器的<strong>从模式</strong>和PWM输入模式。</p><ol><li><h4 id="触发输入和从模式"><a href="#触发输入和从模式" class="headerlink" title="触发输入和从模式"></a>触发输入和从模式</h4></li><li><h5 id="触发输入："><a href="#触发输入：" class="headerlink" title="触发输入："></a><strong>触发输入：</strong></h5></li></ol><p>定时器触发信号分为两类：</p><ul><li>1、<strong>触发输入信号（TRGI）**</strong>（一般用于定时器从模式）**：<ul><li>从外部过来（也可能从自己的通道过来）到本定时器的信号。可以用来控制本定时器的一些动作，比如复位。这种情况下<strong>本定时器</strong>就处于<strong>从模式</strong>。被别人控制。</li></ul></li><li>第一类：</li></ul><p><strong>TS[2:0] = 000 - 011 共四个</strong></p><p>这四种分别为内部触发0 - 3 （TR0 - TR4），来源于<strong>其他定时器</strong>的<strong>TRGO</strong>信号，经过芯片内部连接来到本定时器<strong>ITR0/1/2/3</strong>。<strong>内部连接是定死的，无法更改</strong>。</p><p>​     例：TIM2的TRGO信号连到了TIM1的ITR0，最终ITRx中的某个信号经过信号选择器成为TRGI。</p><ul><li>第二类：</li></ul><p><strong>TS[2:0] = 111 共一个</strong></p><ul><li>来源于外部触发引脚 <strong>ETR</strong> 。ETR是外部固定的引脚与第一类的引脚不是一回事！</li><li><p>经过极性选择，边沿检测器和预分频器，输入滤波器，成为TRGI信号。</p></li><li><p>第三类：</p></li></ul><p><strong>TS[2:0] = 100 共一个</strong></p><ul><li>来源于<strong>定时器自身通道 1</strong> 信号。</li><li>经过输入滤波器和边沿检测器，得到TI1F_ED信号。</li><li><p><strong>上升沿和下降沿都会产生TI1F_ED信号。</strong></p></li><li><p><strong>第四类</strong>：</p></li></ul><p><strong>TS[2:0] = 101 - 110 共二个</strong></p><ul><li>来源于<strong>定时器自身的通道 1</strong> 或<strong>通道 2</strong> 信号。</li><li>结果输入滤波器和边沿检测器的，得到TI1FP1 和 TI2FP2 信号。</li><li>上升沿或下降沿都会产生，<strong>只能选择一种边沿触发方式</strong>，最终成为TRGI信号。</li></ul><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172558968363938.png" alt="img"></p><ul><li>2、<strong>触发输出信号（TRGO）**</strong>（一般用于定时器主模式）**：<ul><li>是本定时器输出到其他定时器或其他外设的信号。</li><li>用于与其他定时器的级联（触发其他定时器或外设的工作）。</li><li>可以控制别人。</li></ul></li></ul><ol><li><h5 id="定时器从模式："><a href="#定时器从模式：" class="headerlink" title="定时器从模式："></a><strong>定时器从模式：</strong></h5></li></ol><p>前面介绍八个TRGI信号，<strong>这些TRGI信号要控制定时器，必须将被控制的定时器设置为从模式。</strong></p><p>从模式控制寄存器 <strong>SMCR</strong> 的 <strong>SMS[2:0]</strong> 位，来配置从模式工作模式。<strong>（默认 000 关闭状态）</strong></p><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172558968363939.png" alt="img"></p><p><strong>上述手册表述不准确，不一定是上升沿，也可以是下降沿。</strong></p><ul><li>1、<strong>SMS[2:0] = 000</strong></li></ul><p><strong>关闭从模式</strong>。</p><ul><li>2、<strong>SMS[2:0] = 001 - 011</strong></li></ul><p><strong>编码器模式 1 - 3</strong> 在平衡车项目中可以用到。</p><ul><li>3、<strong>SMS[2:0] = 100</strong></li></ul><p><strong>复位模式</strong>。触发输入的边沿（上升沿或下降沿）会重新初始化计数器（就相当于<strong>让计数器从 0</strong> 开始计数），这样<strong>就不需要手动清0计数器，也不需要（**</strong>像实验2一样）<strong>**数上升沿个数，从而硬件实现自动完成测量，比手动清0更精确</strong>。</p><ul><li>4、<strong>SMS[2:0] = 101</strong></li></ul><p><strong>门控模式</strong>。TRGI上升沿启动计数器，下降沿停止计数器。</p><ul><li>5、<strong>SMS[2:0] = 110</strong></li></ul><p><strong>触发模式</strong>。TRGI上升沿启动计数器，但是不会停止计数器。</p><ul><li>6、<strong>SMS[2:0] = 111</strong></li></ul><p><strong>外部时钟模式1。</strong></p><ol><li><h4 id="PWM输入模式"><a href="#PWM输入模式" class="headerlink" title="PWM输入模式"></a>PWM输入模式</h4></li></ol><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172558968363940.png" alt="img"></p><p>以信号从通道1输入为例，经过输入滤波器和边沿检测器得到两路信号：<strong>TI1FP1 和 TI2FP2</strong>，这二者极性相反，一个得到输入的上升沿（TI1FP1 ），一个得到输入的下降沿（TI2FP2）。</p><p>为啥可以实现自动测量？</p><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172558968363941.png" alt="img"></p><p>解释：第一次上升沿来临，IC1捕获，IC2不捕获（因为是下降沿触发），但由于设置了IC1为复位模式（上升沿复位），所以IC1的值会清空。然后下降沿来临，IC2捕获，第二次上升沿来临，IC1捕获，从而根据捕获值，算出数据。<strong>（自动）</strong></p><p>不用管上图标红处。</p><p><strong>因此，在此过程中我们无需使用中断。</strong></p><ol><li><h4 id="软件设计（寄存器）-4"><a href="#软件设计（寄存器）-4" class="headerlink" title="软件设计（寄存器）"></a>软件设计（寄存器）</h4></li></ol><p>暂时无法在飞书文档外展示此内容</p><ol><li><h5 id="Driver-TIM4-h-1"><a href="#Driver-TIM4-h-1" class="headerlink" title="Driver_TIM4.h"></a>Driver_TIM4.h</h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __DRIVER_TIM4_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __DRIVER_TIM4_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_TIM4_Init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_TIM4_Start</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">double</span> <span class="title function_">Driver_TIM4_GetPWMCycle</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">double</span> <span class="title function_">Driver_TIM4_GetPWMFreq</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">double</span> <span class="title function_">Driver_TIM4_GetDutyCycle</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><ol><li><h5 id="Driver-TIM4-c-1"><a href="#Driver-TIM4-c-1" class="headerlink" title="Driver_TIM4.c"></a>Driver_TIM4.c</h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Driver_TIM4.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_TIM4_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 开启时钟 */</span></span><br><span class="line">    <span class="comment">/* 1.1 TIM4的时钟 */</span></span><br><span class="line">    RCC-&gt;APB1ENR |= RCC_APB1ENR_TIM4EN;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 1.2 把引脚(PB6) 对应的端口开启时钟*/</span></span><br><span class="line">    RCC-&gt;APB2ENR |= RCC_APB2ENR_IOPBEN;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 2. PB6设置为输入: 浮空输入 CNF=01 MODE=00 */</span></span><br><span class="line">    GPIOB-&gt;CRL &amp;= ~(GPIO_CRL_CNF6_1 | GPIO_CRL_MODE6);</span><br><span class="line">    GPIOB-&gt;CRL |= GPIO_CRL_CNF6_0;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 3. 配置定时器的时基部分 */</span></span><br><span class="line">    <span class="comment">/* 3.1 预分频系数配置 分频后计数器的时钟时1MHz 周期:1us*/</span></span><br><span class="line">    TIM4-&gt;PSC = <span class="number">72</span> - <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 3.2 自动重装载寄存器的值: 设置最大,尽量避免溢出 */</span></span><br><span class="line">    TIM4-&gt;ARR = <span class="number">65535</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 3.3 计数方向: 向上计数 */</span></span><br><span class="line">    TIM4-&gt;CR1 &amp;= ~TIM_CR1_DIR;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 4. 输入捕获部分 */</span></span><br><span class="line">    <span class="comment">/* 4.1 输入信号不滤波 */</span></span><br><span class="line">    TIM4-&gt;CCMR1 &amp;= ~TIM_CCMR1_IC1F;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 4.2 配置边缘检测: 去IC1上升沿 去IC2的下降沿 */</span></span><br><span class="line">    TIM4-&gt;CCER &amp;= ~TIM_CCER_CC1P;</span><br><span class="line">    TIM4-&gt;CCER |= TIM_CCER_CC2P;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 4.3 把 IC1映射到TI1 CCMR1_CC1S=01 上升沿*/</span></span><br><span class="line">    TIM4-&gt;CCMR1 &amp;= ~TIM_CCMR1_CC1S_1;</span><br><span class="line">    TIM4-&gt;CCMR1 |= TIM_CCMR1_CC1S_0;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 4.4 把 IC2映射到TI1 CCMR1_CC2S=10 下降沿*/</span></span><br><span class="line">    TIM4-&gt;CCMR1 |= TIM_CCMR1_CC2S_1;</span><br><span class="line">    TIM4-&gt;CCMR1 &amp;= ~TIM_CCMR1_CC2S_0;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 4.5 IC1和IC2的预分频 都不分频 */</span></span><br><span class="line">    TIM4-&gt;CCMR1 &amp;= ~TIM_CCMR1_IC1PSC;</span><br><span class="line">    TIM4-&gt;CCMR1 &amp;= ~TIM_CCMR1_IC2PSC;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 4.6 配置TRGI信号:  TI1FP1（TI1FP1作为触发定时器从模式复位模式源）   SMCR_TS = 101 */</span></span><br><span class="line">    TIM4-&gt;SMCR |= (TIM_SMCR_TS_2 | TIM_SMCR_TS_0);</span><br><span class="line">    TIM4-&gt;SMCR &amp;= ~TIM_SMCR_TS_1;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 4.7 配置从模式: 为复位模式 SMCR_SMS = 100 */</span></span><br><span class="line">    TIM4-&gt;SMCR |= TIM_SMCR_SMS_2;</span><br><span class="line">    TIM4-&gt;SMCR &amp;= ~(TIM_SMCR_SMS_1 | TIM_SMCR_SMS_0);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 4.8 使能通道1捕获和通道2捕获 */</span></span><br><span class="line">    TIM4-&gt;CCER |= TIM_CCER_CC1E;</span><br><span class="line">    TIM4-&gt;CCER |= TIM_CCER_CC2E;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_TIM4_Start</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    TIM4-&gt;CR1 |= TIM_CR1_CEN; <span class="comment">/* 计数器使能 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_TIM4_Stop</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    TIM4-&gt;CR1 &amp;= ~TIM_CR1_CEN; <span class="comment">/* 计数器失能 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 返回PWM的周期 ms*/</span></span><br><span class="line"><span class="type">double</span> <span class="title function_">Driver_TIM4_GetPWMCycle</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> TIM4-&gt;CCR1 / <span class="number">1000.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 返回PWM的频率 */</span></span><br><span class="line"><span class="type">double</span> <span class="title function_">Driver_TIM4_GetPWMFreq</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1000000.0</span> / TIM4-&gt;CCR1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回占空比</span></span><br><span class="line"><span class="type">double</span> <span class="title function_">Driver_TIM4_GetDutyCycle</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> TIM4-&gt;CCR2 * <span class="number">1.0</span> / TIM4-&gt;CCR1;<span class="comment">//一定要注意，不然相除就是0了</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h5 id="main-c-9"><a href="#main-c-9" class="headerlink" title="main.c"></a>main.c</h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Driver_USART.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Driver_SysTick.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Driver_TIM5.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Driver_TIM4.h&quot;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Driver_USART1_Init();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;系统定时器实验开始...\r\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Driver_TIM5_Init();</span><br><span class="line">    Driver_TIM5_Start();</span><br><span class="line">    </span><br><span class="line">    Driver_TIM4_Init();</span><br><span class="line">    Driver_TIM4_Start();</span><br><span class="line">    <span class="type">double</span> t, f, dutyCycle;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        t = Driver_TIM4_GetPWMCycle();</span><br><span class="line">        f = Driver_TIM4_GetPWMFreq();</span><br><span class="line">        dutyCycle = Driver_TIM4_GetDutyCycle();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;t=%.4fms, f=%.4fHz, dutyCycle=%.2f%%\r\n&quot;</span>, t, f, dutyCycle * <span class="number">100</span>);  <span class="comment">// 40%</span></span><br><span class="line"></span><br><span class="line">        Delay_ms(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此代码实现全自动测量，不需要像实验2一样专门用输入捕获中断。</p><ol><li><h4 id="软件设计（HAL库）-4"><a href="#软件设计（HAL库）-4" class="headerlink" title="软件设计（HAL库）"></a>软件设计（HAL库）</h4></li><li><h5 id="STM32CubeMX配置-1"><a href="#STM32CubeMX配置-1" class="headerlink" title="STM32CubeMX配置"></a>STM32CubeMX配置</h5></li></ol><p>TIM5的配置参考前面案例。</p><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172558968363942.png" alt="img"></p><ol><li><h5 id="添加其他代码-1"><a href="#添加其他代码-1" class="headerlink" title="添加其他代码"></a>添加其他代码</h5></li><li><h6 id="tim-c-4"><a href="#tim-c-4" class="headerlink" title="tim.c"></a>tim.c</h6></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN 1 */</span></span><br><span class="line"><span class="comment">/* 返回PWM的周期 ms*/</span></span><br><span class="line"><span class="type">double</span> <span class="title function_">Driver_TIM4_GetPWMCycle</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// return TIM4-&gt;CCR1 / 1000.0;;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (__HAL_TIM_GetCompare(&amp;htim4, TIM_CHANNEL_1) + <span class="number">1</span>) / <span class="number">1000.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">double</span> <span class="title function_">Driver_TIM4_GetPWMFreq</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// return 1000000.0 / TIM4-&gt;CCR1;</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">1000000.0</span> / (__HAL_TIM_GetCompare(&amp;htim4, TIM_CHANNEL_1) + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回占空比</span></span><br><span class="line"><span class="type">double</span> <span class="title function_">Driver_TIM4_GetDutyCycle</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// return TIM4-&gt;CCR2 * 1.0 / TIM4-&gt;CCR1;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (<span class="number">1</span> + __HAL_TIM_GetCompare(&amp;htim4, TIM_CHANNEL_2)) * <span class="number">1.0</span> / (<span class="number">1</span> + __HAL_TIM_GetCompare(&amp;htim4, TIM_CHANNEL_1));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE END 1 */</span></span><br></pre></td></tr></table></figure><ol><li><h6 id="main-c-10"><a href="#main-c-10" class="headerlink" title="main.c"></a>main.c</h6></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_Init();</span><br><span class="line">    SystemClock_Config();</span><br><span class="line">    MX_GPIO_Init();</span><br><span class="line">    MX_TIM4_Init();</span><br><span class="line">    MX_TIM5_Init();</span><br><span class="line">    MX_USART1_UART_Init();</span><br><span class="line">    </span><br><span class="line">    HAL_TIM_PWM_Start(&amp;htim5, TIM_CHANNEL_2);</span><br><span class="line"></span><br><span class="line">    HAL_TIM_IC_Start(&amp;htim4, TIM_CHANNEL_1);</span><br><span class="line">    HAL_TIM_IC_Start(&amp;htim4, TIM_CHANNEL_2);</span><br><span class="line">    <span class="type">double</span> t, f, dutyCycle;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        t = Driver_TIM4_GetPWMCycle();</span><br><span class="line">        f = Driver_TIM4_GetPWMFreq();</span><br><span class="line">        dutyCycle = Driver_TIM4_GetDutyCycle();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;t=%.4fms, f=%.4fHz, dutyCycle=%.2f%%\r\n&quot;</span>, t, f, dutyCycle * <span class="number">100</span>); <span class="comment">// 40%</span></span><br><span class="line">        HAL_Delay(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为啥获取CCR1和CCR2的值还要手动+1？</p><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172558968363943.png" alt="img"></p><p>比我们设定的相差一个<strong>1us（计数器少计了1个数，相当于**</strong>少一个计数周期<strong>**）</strong>。因为TIM4配置的预分频值是<strong>72 - 1</strong>，并不是看TIM5生成PWM的配置（因为PWM配好了且已经确定了）。</p><p>为啥？</p><p>TIM4计数周期是1us，来一个上升沿记一个数，被测信号是来一个上升沿计数器复位，然后再来一个上升沿定时器捕获。可能被测信号的上升沿在计数周期前来临（在下一个1us之间），那么此时计数周期没有计数，所以计数器CNT的时间值实际要小于被测信号的值，<strong>少一个计数周期</strong>。</p><p>可以这样理解，待测信号第二个上升沿与计数器的时钟周期不一定同时来临。因为待测信号的上升沿和计数器的时钟周期之间可能存在对齐问题，导致计数器记录的时间小于实际经过的时间。</p><ol><li><h2 id="高级定时器"><a href="#高级定时器" class="headerlink" title="高级定时器"></a>高级定时器</h2></li><li><h3 id="高级定时器介绍"><a href="#高级定时器介绍" class="headerlink" title="高级定时器介绍"></a>高级定时器介绍</h3></li></ol><p>高级定时器有2个分别是：<strong>TIM1、TIM8</strong>。</p><p>如图：</p><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172558968363944.png" alt="img"></p><p>高级定时器除了拥有通用定时器的所有功能外，还具有以下功能：</p><ol><li>死区时间可编程的互补输出。</li><li>断路输入信号（刹车输入信号）。</li><li>重复次数计数器：<ol><li>重复次数计数器（REP寄存器），硬件上也叫RCR寄存器，也有对应影子寄存器。重复次数计数器的初始化来源于<strong>RCR</strong>寄存器<strong>REP</strong>位。</li><li>有了重复次数计数器之后，此时计数器CNT溢出后，不会产生更新事件及中断（前提使能相应的中断），在高级定时器中，计数器每溢出，会产生一个信号，让<strong>重复次数计数器的值 - 1。</strong>只有重复次数计数器溢出后才会产生更新事件及中断。</li><li><strong>当重复次数计数器的值减到 0 ，如果CNT计数器再溢出 1 次，重复次数计数器再减 1 次，则产生更新事件。</strong></li></ol></li><li>互补输出：<ol><li>高级定时器的通道1/2/3可以分别输出2路互补信号：CH1和CH1N（通道4没有）。</li><li>互补信号：频率周期相等，相位差180°。</li><li>互补输出一般用于驱动H桥电路，而H桥通常用于驱动较大电流的负载，比如电机。</li></ol></li></ol><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172558968364045.png" alt="img"></p><ul><li>CH1高电平，Q1和Q4导通，电机正转。</li><li>CH1N高电平，Q2和Q3导通，电机反转。</li></ul><p>理论上CH1和CH1N永远反相，但是会出现<strong>开通比较快，关闭比较慢（惯性）</strong>的现象。假设电机在正转，关断后，让电机反转，由于惯性，四个mos管全导通，直接烧毁器件。</p><p>解决方法：开通的时间（高电平的时间）出现的晚一点<strong>（先关后通）</strong>。例如上下车，先下后上，先出再入。</p><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172558968364046.png" alt="img"></p><ul><li>有效电平（默认高电平）要延时。</li><li>死区时间可配置。</li></ul><ol><li><h3 id="高级定时器实验：输出有限个周期的PWM波"><a href="#高级定时器实验：输出有限个周期的PWM波" class="headerlink" title="高级定时器实验：输出有限个周期的PWM波"></a>高级定时器实验：输出有限个周期的PWM波</h3></li><li><h4 id="需求描述-5"><a href="#需求描述-5" class="headerlink" title="需求描述"></a>需求描述</h4></li></ol><p>用寄存器实现。输出5个周期的PWM波，频率2Hz，观察发光二极管闪烁5次，或者用示波器观察波形。</p><p><strong>需求实现思路：</strong>使用高级定时器的重复计数器，当计数器溢出时，在溢出中断中停止定时器工作。重复计数器寄存器的值设置为4，即可输出5个周期的PWM波，发光二极管会闪烁5次。</p><ol><li><h4 id="硬件电路设计-4"><a href="#硬件电路设计-4" class="headerlink" title="硬件电路设计"></a>硬件电路设计</h4></li></ol><p>设置高级定时器TIM1的CH1。</p><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172558968364047.png" alt="img"></p><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172558968364048.png" alt="img"></p><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172558968364049.png" alt="img"></p><ol><li><h4 id="软件设计（寄存器）-5"><a href="#软件设计（寄存器）-5" class="headerlink" title="软件设计（寄存器）"></a>软件设计（寄存器）</h4></li><li><h5 id="main-c-11"><a href="#main-c-11" class="headerlink" title="main.c"></a>main.c</h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Driver_USART.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Driver_TIM1.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Driver_USART1_Init();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;高级定时器实验开始...\r\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Driver_TIM1_Init();</span><br><span class="line">    Driver_TIM1_Start();</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h5 id="Driver-TIM1-h"><a href="#Driver-TIM1-h" class="headerlink" title="Driver_TIM1.h"></a>Driver_TIM1.h</h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __DRIVER_TIM1_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __DRIVER_TIM1_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_TIM1_Init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_TIM1_Start</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><ol><li><h5 id="Driver-TIM1-c"><a href="#Driver-TIM1-c" class="headerlink" title="Driver_TIM1.c"></a>Driver_TIM1.c</h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Driver_TIM1.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Driver_USART.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_TIM1_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 开启时钟 */</span></span><br><span class="line">    <span class="comment">/* 1.1 TIM1的时钟 */</span></span><br><span class="line">    RCC-&gt;APB2ENR |= RCC_APB2ENR_TIM1EN;</span><br><span class="line">    <span class="comment">/* 1.2 GPIO的时钟 */</span></span><br><span class="line">    RCC-&gt;APB2ENR |= RCC_APB2ENR_IOPAEN;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 2. 给PA8配置复用推挽输出 CNF=10  MODE=11*/</span></span><br><span class="line">    GPIOA-&gt;CRH |= (GPIO_CRH_CNF8_1 | GPIO_CRH_MODE8);</span><br><span class="line">    GPIOA-&gt;CRH &amp;= ~GPIO_CRH_CNF8_0;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 3. 时基单元的配置  频率是2Hz的PWM*/</span></span><br><span class="line">    <span class="comment">/* 3.1 预分频 */</span></span><br><span class="line">    TIM1-&gt;PSC = <span class="number">7200</span> - <span class="number">1</span>;</span><br><span class="line">    <span class="comment">/* 3.2 自动重装载寄存器的值 */</span></span><br><span class="line">    TIM1-&gt;ARR = <span class="number">5000</span> - <span class="number">1</span>;</span><br><span class="line">    <span class="comment">/* 3.3 计数方向 0=向上计数 1=向下计数*/</span></span><br><span class="line">    TIM1-&gt;CR1 &amp;= ~TIM_CR1_DIR;</span><br><span class="line">    <span class="comment">/* 3.4 重复寄存器 RCR=4 表示CNT计数器溢出5次,才会产生更新时间(中断)*/</span></span><br><span class="line">    TIM1-&gt;RCR = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 4. 输出部分配置 */</span></span><br><span class="line">    <span class="comment">/* 4.1 把通道1配置为输出*/</span></span><br><span class="line">    TIM1-&gt;CCMR1 &amp;= ~TIM_CCMR1_CC1S;</span><br><span class="line">    <span class="comment">/* 4.2 配置捕获比较寄存器的值 */</span>;</span><br><span class="line">    TIM1-&gt;CCR1 = <span class="number">2500</span>; <span class="comment">/* 占空比 50% */</span></span><br><span class="line">    <span class="comment">/* 4.3 输出的极性 0=高电平有效 1=低电平有效 */</span>;</span><br><span class="line">    TIM1-&gt;CCER &amp;= TIM_CCER_CC1P;</span><br><span class="line">    <span class="comment">/* 4.4 使能通道1 */</span>;</span><br><span class="line">    TIM1-&gt;CCER |= TIM_CCER_CC1E;</span><br><span class="line">    <span class="comment">/* 4.5 配置通道1输出模式: PWM1=110   */</span></span><br><span class="line">    TIM1-&gt;CCMR1 |= (TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1);</span><br><span class="line">    TIM1-&gt;CCMR1 &amp;= ~TIM_CCMR1_OC1M_0;</span><br><span class="line">    <span class="comment">/* 4.6 主输出使能(只有高级定时器需要配置)*/</span></span><br><span class="line">    TIM1-&gt;BDTR |= TIM_BDTR_MOE;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 4.7 防止一启动就进入更新中断: 1. 使用UG位产生一个更新事件 2.然后预分频和重复计数器的值更新到影子寄存器 */</span>;</span><br><span class="line">    TIM1-&gt;EGR |= TIM_EGR_UG;</span><br><span class="line">    TIM1-&gt;SR &amp;= ~TIM_SR_UIF;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 5. 配置中断 */</span></span><br><span class="line">    <span class="comment">/* 5.1 定时器更新中断使能 */</span></span><br><span class="line">    TIM1-&gt;DIER |= TIM_DIER_UIE;</span><br><span class="line">    <span class="comment">/* 5.2 NVIC的配置 */</span></span><br><span class="line">    NVIC_SetPriorityGrouping(<span class="number">3</span>);</span><br><span class="line">    NVIC_SetPriority(TIM1_UP_IRQn, <span class="number">3</span>);</span><br><span class="line">    NVIC_EnableIRQ(TIM1_UP_IRQn);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_TIM1_Start</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    TIM1-&gt;CR1 |= TIM_CR1_CEN;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_TIM1_Stop</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    TIM1-&gt;CR1 &amp;= ~TIM_CR1_CEN;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">TIM1_UP_IRQHandler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 停掉计数器</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a\r\n&quot;</span>);</span><br><span class="line">    TIM1-&gt;SR &amp;= ~TIM_SR_UIF;</span><br><span class="line">    Driver_TIM1_Stop();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h4 id="软件设计（HAL库）-5"><a href="#软件设计（HAL库）-5" class="headerlink" title="软件设计（HAL库）"></a>软件设计（HAL库）</h4></li><li><h5 id="STM32CubeMX配置-2"><a href="#STM32CubeMX配置-2" class="headerlink" title="STM32CubeMX配置"></a>STM32CubeMX配置</h5></li></ol><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172558968364050.png" alt="img"></p><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172558968364051.png" alt="img"></p><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172558968364052.png" alt="img"></p><ol><li><h5 id="添加其他代码-2"><a href="#添加其他代码-2" class="headerlink" title="添加其他代码"></a>添加其他代码</h5></li><li><h6 id="tim-c-5"><a href="#tim-c-5" class="headerlink" title="tim.c"></a>tim.c</h6></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN 1 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_TIM_PeriodElapsedCallback</span><span class="params">(TIM_HandleTypeDef *htim)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 关闭计数器 */</span></span><br><span class="line">    <span class="keyword">if</span> (htim-&gt;Instance == TIM1)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//HAL_TIM_PWM_Stop(&amp;htim1, TIM_CHANNEL_1);</span></span><br><span class="line">        </span><br><span class="line">       <span class="comment">//这三行做的事与 HAL_TIM_PWM_Stop 一样，少一个步骤都不行，这样才能保持 CubeMX 设置的空闲状态</span></span><br><span class="line">       TIM1-&gt;CCER &amp;= ~TIM_CCER_CC1E;</span><br><span class="line">       TIM1-&gt;BDTR &amp;= ~TIM_BDTR_MOE;</span><br><span class="line">       htim-&gt;Instance-&gt;CR1 &amp;= ~TIM_CR1_CEN;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* USER CODE END 1 */</span></span><br></pre></td></tr></table></figure><p>当重复寄存器向下递减5次后就进入中断，此时要停掉，不然重复寄存器递减后还会以原来初值重新循环递减， 导致LED灯一直闪。</p><p>有个疑问？为啥<strong><code>HAL_TIM_PWM_Stop</code></strong>有时候没有效果？</p><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172558968364053.png" alt="img"></p><p><img src="/2024/09/05/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E8%BF%9B%E9%98%B6%E7%AF%87/-172558968364054.png" alt="img"></p><p><strong>因此想停计数器，必须先把对应通道关掉。</strong></p><ol><li><h6 id="main-c-12"><a href="#main-c-12" class="headerlink" title="main.c"></a>main.c</h6></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_Init();</span><br><span class="line">    SystemClock_Config();</span><br><span class="line">    MX_GPIO_Init();</span><br><span class="line">    MX_TIM1_Init();</span><br><span class="line">    MX_USART1_UART_Init();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*初始化的时候 UG已经被置位.  先清除中断标志位,防止一启动就进入中断 */</span></span><br><span class="line">     __HAL_TIM_CLEAR_IT(&amp;htim1, TIM_IT_UPDATE);</span><br><span class="line">    <span class="comment">/* 启用更新中断 */</span></span><br><span class="line">    __HAL_TIM_ENABLE_IT(&amp;htim1, TIM_IT_UPDATE);</span><br><span class="line">    </span><br><span class="line">    HAL_TIM_PWM_Start(&amp;htim1, TIM_CHANNEL_1);</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用更新中断来实现需求，因此需要提前产生更新事件并将标志位清除。</p><p>一方面是为了不让第一次中断来的过快，另一方面<strong>REP</strong>寄存器也有影子寄存器，不提前产生更新事件将REP寄存器的值更新到对应影子寄存器，REP的默认值就是0，此时就瞬间产生更新事件（重复次数寄存器溢出才会产生更新事件），进入更新中断。</p><p><strong>举例：</strong></p><p>定时器里的计数器里的值就是过了一定时间后，此时的计数值！！</p><p>计数器的值通常是指定时器计数器的当前数值，该数值代表定时器自启动以来所经过的计数周期数。它既不是时间也不是频率，但它与时间和频率都有直接关系。</p><p>为了更清晰地解释这一点，我们可以进行一个详细的计算，结合你的定时器配置来说明：</p><ol><li><strong>基准时钟频率</strong>：72 MHz</li><li><strong>预分频器值</strong>：7200</li><li><strong>重装载寄存器值</strong>：100</li></ol><p>首先，我们确定定时器的计数频率：</p><p>计数频率 = 基准时钟频率 \ 预分频器值</p><p>将基准时钟频率和预分频器值代入公式：</p><p>计数频率 = 72MHZ \ 7200= 10,000Hz</p><p>这意味着定时器每秒钟计数10,000次。</p><p>接下来，重装载寄存器值决定了定时器在达到该值后重新从0开始计数的周期。重装载寄存器值为100意味着定时器计数从0到100（实际上是从0到99，总共100个计数周期），然后自动重置。</p><p>当重装载寄存器值为100时，一个完整的计数周期所花费的时间为：</p><p>将之前计算出的计数频率和重装载寄存器值代入公式：</p><p>一个计数周期的时间 = 10,000Hz \ 100 = 0.01秒 = 10毫秒</p><p>因此，每10毫秒定时器会从0计数到100（实际上是从0到99）。</p><p>此时计数器里的值就是10。</p><p>所以，计数器的值本身不是直接的时间或频率，但通过定时器的配置（基准时钟、预分频器、重装载寄存器值等），我们可以将计数值转换为相应的时间间隔。这就解释了计数器值如何与时间和频率相关联。</p>]]></content>
      
      
      <categories>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STM32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IAP</title>
      <link href="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/IAP/"/>
      <url>/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/IAP/</url>
      
        <content type="html"><![CDATA[<h1 id="1-IAP"><a href="#1-IAP" class="headerlink" title="1.IAP"></a>1.IAP</h1><p>IAP<strong>（In-Application Programming）</strong>，中文名为“应用内编程”，是指在系统运行时，应用程序可以通过特定的机制来进行固件更新或更改应用程序的一部分。</p><blockquote><p>系统框图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501182053364.png" alt="image-20250118205320326"></p><p>IAP的实现通常包括以下几个步骤：</p><ol><li>在应用程序中实现一段代码，允许通过特定的接口接收新固件。</li><li>在IAP过程中，设备会暂时停止主应用的运行，进入更新模式。</li><li>更新完毕后，重新启动系统，使得新固件生效。</li></ol></blockquote><h2 id="1-内存分配"><a href="#1-内存分配" class="headerlink" title="1.内存分配"></a>1.内存分配</h2><blockquote><p>Flash内部分配框图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/QChilli/Picture/202501182118453.png" alt="image-20250118211841395"></p><ul><li><strong>BootLoader区</strong>（24KB）：这部分存储引导程序代码，通常用于启动系统和加载主应用程序。引导程序通常在设备复位时首先执行。</li><li><strong>Param区</strong>（8KB）：这一部分用于存储一些参数数据，例如设备配置、序列号、版本信息等。这是一个小区域，通常用于存储和应用程序相关的配置信息。</li><li><strong>Application区</strong>（480KB）：这部分用于存储主要的应用程序代码，它占用了Flash的绝大部分空间。这是用户开发的应用程序所在区域。</li></ul><p><strong>Param区</strong>尽管被单独划分出来用于存储参数和配置数据，但它并不是独立于BootLoader区的。在很多IAP（In-Application Programming）方案中，<strong>Param区</strong>存储与固件更新、启动状态相关的参数信息，比如升级标志位、设备配置、版本信息等。</p><p>因此，<strong>Param区也可视为BootLoader区的一部分</strong>，它在系统重启后可能会被BootLoader读取并决定是否需要进行固件更新（对应上图）。</p></blockquote><h2 id="2-内部实现"><a href="#2-内部实现" class="headerlink" title="2.内部实现"></a>2.内部实现</h2><blockquote><p>单片机上电时，首先从<code>0x08000000</code>地址处执行BootLoader。BootLoader初始化硬件并检查OTA信息中的升级标志位。如果标志位为0，表示无需固件更新，系统将直接跳转并执行Application区中的原有程序。</p><p>在应用程序运行时，如果收到串口一发送的固件更新指令，应用程序将把OTA标志位设置为1，表示准备进行固件更新。接着，应用程序重启单片机。重启后，BootLoader再次启动，检查OTA标志位。此时标志位为1，BootLoader将等待通过串口二接收新的固件文件进行更新。固件更新完成后，BootLoader会清除升级标志位（置为0），并跳转回Application区执行更新后代码。</p></blockquote><h2 id="3-Bootloader"><a href="#3-Bootloader" class="headerlink" title="3.Bootloader"></a>3.Bootloader</h2><p>Bootloader，中文名为“引导加载程序”，是嵌入式系统的核心部分之一，负责在设备上电或重启时初始化硬件并加载操作系统或应用程序。Bootloader的作用非常重要，它是系统启动过程中的第一段代码，负责将设备引导到正确的运行状态。其基本功能包括：</p><ul><li><strong>硬件初始化</strong>：在系统启动时，bootloader会初始化处理器、内存、存储设备等硬件组件。</li><li><strong>固件加载</strong>：bootloader会从存储介质（如闪存、SD卡等）中读取主应用程序或操作系统的镜像，并将其加载到内存中。</li><li><strong>固件验证</strong>：许多bootloader还包括固件的完整性检查，确保加载的固件未被篡改。</li><li><strong>支持IAP</strong>：在某些系统中，bootloader也支持IAP功能，允许固件更新在设备启动时进行。</li></ul><h3 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h3><p>IAP技术通常依赖于一个预置的Bootloader程序，该程序负责在设备启动时初始化硬件、设置内存映射，并在接收到更新指令时加载新的固件到Flash存储器中。更新过程中，Bootloader通过特定的通信接口接收新固件数据，验证其完整性和正确性后，执行Flash操作（如擦除旧固件、写入新固件）以完成更新。</p><ul><li><strong>Bootloader</strong>：负责设备的启动和加载，检查是否有新的固件或者配置。</li><li><strong>IAP</strong>：在应用程序中运行，允许通过应用内的机制进行固件更新。</li></ul><p>总结来说，IAP通常是嵌入式设备中用于应用程序更新的技术，而Bootloader则是设备启动时必须运行的程序，两者结合在一起，可以使设备实现高效、灵活的固件更新和恢复机制。</p>]]></content>
      
      
      <categories>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STM32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STM32基础篇</title>
      <link href="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
      <url>/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<ol><li><h1 id="开发板简介"><a href="#开发板简介" class="headerlink" title="开发板简介"></a>开发板简介</h1></li><li><h2 id="开发板实物图"><a href="#开发板实物图" class="headerlink" title="开发板实物图"></a>开发板实物图</h2></li></ol><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515591.png" alt="img"></p><ol><li><h2 id="STM32最小系统"><a href="#STM32最小系统" class="headerlink" title="STM32最小系统"></a>STM32最小系统</h2></li></ol><p>STM32单片机能工作的最小外围电路就叫<strong>最小系统</strong>。</p><p>最小系统通常包括：<strong>STM32芯片、电源、时钟、下载调试和复位</strong>5部分组成。</p><ol><li>STM32芯片</li></ol><p>选用的是<strong>STM32F103ZET6</strong>这款芯片。</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-17255325651511.png" alt="img"></p><ol><li>电源<ol><li>采用3.3V电源供电。我们电路采用了两路供电。</li><li>一路是USB的TypeC供电， TypeC提供的是5V，使用芯片AMS1117把5V转成3.3V。</li><li>另一路是STLink下载器直接提供3.3V供电（下载器内部已经把5V转成了3.3V）。</li></ol></li></ol><ul><li>MCU电源</li></ul><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-17255325651522.png" alt="img"></p><ul><li>USB供电转3.3v</li></ul><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-17255325651523.png" alt="img"></p><ul><li>MCU调试口</li></ul><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-17255325651524.png" alt="img"></p><p>不用额外再接串口模块。</p><ol><li>时钟</li></ol><p>SMT32提供了两路外部时钟： <strong>外部高速时钟和外部低速时钟</strong> 。</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-17255325651525.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-17255325651526.png" alt="img"></p><ol><li>复位</li></ol><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-17255325651527.png" alt="img"></p><ol><li>下载调试</li></ol><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-17255325651528.png" alt="img"></p><ol><li><h1 id="点亮LED灯案例（寄存器）"><a href="#点亮LED灯案例（寄存器）" class="headerlink" title="点亮LED灯案例（寄存器）"></a>点亮LED灯案例（寄存器）</h1><p>我们首先使用基于寄存器开发方式点亮第一个LED灯。</p></li></ol><p>在代码期间会涉及到一些寄存器知识，先不要深究，后面再详细介绍。现在要做的就是点亮第一个LED灯。</p><ol><li><h2 id="需求描述"><a href="#需求描述" class="headerlink" title="需求描述"></a>需求描述</h2></li></ol><p>快速体验STM32开发：点亮LED1。</p><ol><li><h2 id="硬件电路设计"><a href="#硬件电路设计" class="headerlink" title="硬件电路设计"></a>硬件电路设计</h2></li></ol><p>LED1-LED3是普通LED灯，LED4为电源指示灯。</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-17255325651529.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515210.png" alt="img"></p><p>说明：</p><ol><li><p>LED1连接的是端口PA0</p></li><li><p>只要让PA0引脚输出低电平就可以点亮LED1。</p></li><li><h2 id="创建项目工程"><a href="#创建项目工程" class="headerlink" title="创建项目工程"></a>创建项目工程</h2></li><li><h3 id="创建工程准备"><a href="#创建工程准备" class="headerlink" title="创建工程准备"></a>创建工程准备</h3></li><li><p>创建需要的目录</p></li></ol><p>在磁盘上创建一个目录 atguigu，然后再在atguigu目录下创建我们的第一个工程目录 led_register。</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515211.png" alt="img"></p><ol><li>准备启动文件</li></ol><p>STM32程序需要启动文件，我们需要提前准备好。先去ST官网下载官方提供的外设标准库，里面有提供标准的启动文件，我们从里面copy一份出来。</p><p>标准外设库下载地址：<strong><a href="https://www.st.com/zh/embedded-software/stm32-standard-peripheral-libraries/products.html">https://www.st.com/zh/embedded-software/stm32-standard-peripheral-libraries/products.html</a></strong></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515212.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515213.png" alt="img"></p><p>下载完成之后解压，后面我们需要从里面copy文件出来。</p><ol><li>创建目录放入启动文件和其他核心文件</li></ol><p>为了方便管理，我们把启动文件放入专门目录中。在刚才创建的工程目录中创建一个目录：Start（名字没有强制要求，随意，但是最好不要有中文）。</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515214.png" alt="img"></p><p>去到我们刚才下载的标准外设库目录，找到我们需要的启动文件和其他核心文件copy到Start目录。</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515215.png" alt="img"></p><p>启动文件选择标准：</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515216.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515217.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515218.png" alt="img"></p><p>Copy完之后：</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515219.png" alt="img"></p><ol><li>创建工程</li></ol><p>打开Keil MDK创建工程。</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515220.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515221.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515222.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515223.png" alt="img"></p><ol><li><h3 id="工程配置"><a href="#工程配置" class="headerlink" title="工程配置"></a>工程配置</h3></li><li><p>添加两个Project Group方便管理代码文件。</p></li></ol><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515224.png" alt="img"></p><ol><li>先删除默认的Source Group 1，再添加两个：Start（启动相关的文件），User（我们自己写的代码）。</li></ol><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515225.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515226.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515227.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515328.png" alt="img"></p><ol><li>创建main.c 文件</li></ol><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515329.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515330.png" alt="img"></p><p>User路径不存在，让它帮我们创建。</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515331.png" alt="img"></p><ol><li><h3 id="编译配置"><a href="#编译配置" class="headerlink" title="编译配置"></a>编译配置</h3></li><li><p>编译器版本改为5</p></li></ol><p>目前最新的Keil ARM用的是 Compiler version 6，与前面的core_cm3.c不兼容，所以需要提前准备好Compiler version 5。</p><p>下载地址：<strong><a href="https://developer.arm.com/downloads/view/ACOMP5">https://developer.arm.com/downloads/view/ACOMP5</a></strong></p><p>解压之后，把解压的后文件夹放入到<strong>Keil MDK的安装目录</strong>下：</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515332.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515333.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515334.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515335.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515336.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515337.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515338.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515339.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515340.png" alt="img"></p><ol><li>一些其他配置</li></ol><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515341.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515342.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515343.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515344.png" alt="img"></p><ol><li><h2 id="软件设计"><a href="#软件设计" class="headerlink" title="软件设计"></a>软件设计</h2></li><li><h3 id="main-c"><a href="#main-c" class="headerlink" title="main.c"></a>main.c</h3></li></ol><p>根据前面硬件电路设计，我们只要让<strong>GPIOA的0口输出低电平就行了</strong>。代码需要按照下面的步骤来实现。</p><ol><li>开启时钟</li></ol><p>在STM32中，让IO口工作，必须先开启对应的时钟。所以需要先查找到开启时钟的寄存器，然后通过该寄存器操作时钟的开启或关闭。我们要打开的是GPIOA的时钟。</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515345.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515346.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515347.png" alt="img"></p><p>我们需要知道RCC_APB2ENR这个寄存器的地址。如何查找呢？先知道RCC这个外设的基地址，然后加上这个寄存器的偏移地址就行了。</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515348.png" alt="img"></p><p>从上面可以看出来，RCC的基地址是0x4002 1000，APB2ENR的偏移量是0x18，所以<strong>APB2ENR的地址值是0x4002 1000 + 0x18</strong></p><p>有了地址，在这个地址写入一个数据，这个数据的二进制第2是1就行了。其他位暂时不管。我们写入4。这样就开启了GPIOA的时钟。</p><p>在代码中，我们需要把地址强转成指针才能给这个地址赋值。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*(<span class="type">uint32_t</span> *)(<span class="number">0x40021000</span> + <span class="number">0x18</span>) = <span class="number">4</span>;</span><br></pre></td></tr></table></figure><ol><li>给IO口设置输出模式</li></ol><p>在STM32中，如果要让IO口输出低电平或高电平，必须给要使用的IO设置为输出模式。</p><p>根据前面的思路，需要先找到GPIOA的基地址，再根据偏移地址找到要使用的寄存器的地址。GPIOA的基地址是<strong>0x4001 0800</strong>。</p><p>配置PA0口的输出模式的寄存器是GPIOA_CRL。</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515349.png" alt="img"></p><p>只需要让这个寄存器的最后4位是 0011，就是最大速度的推挽输出。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*(<span class="type">uint32_t</span> *)(<span class="number">0x40010800</span> + <span class="number">0x00</span>) = <span class="number">3</span>;</span><br></pre></td></tr></table></figure><ol><li>给PA0口输出0</li></ol><p>给指定PA0口输出0就可以点亮LED1了。用到的寄存器是ODR数据输出寄存器。</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515350.png" alt="img"></p><p>ODR寄存器的地址是 <strong>0x40010800 + 0x0c</strong>。给这个地址的第0位写0，其他位写1。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*(<span class="type">uint32_t</span> *)((<span class="number">0x40010800</span> + <span class="number">0x0c</span>)) = <span class="number">0xfffe</span>;</span><br></pre></td></tr></table></figure><p><strong>main.c具体代码清单。</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;stdint.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 开启GPIOA的时钟 */</span></span><br><span class="line">    *(<span class="type">uint32_t</span> *)(<span class="number">0x40021000</span> + <span class="number">0x18</span>) = <span class="number">4</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 给PA0设置为通用推挽输出 */</span></span><br><span class="line">    *(<span class="type">uint32_t</span> *)(<span class="number">0x40010800</span> + <span class="number">0x00</span>) = <span class="number">3</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 给输出寄存器赋值 */</span></span><br><span class="line">    *(<span class="type">uint32_t</span> *)(<span class="number">0x40010800</span> + <span class="number">0x0c</span>) = <span class="number">0xfffe</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h3 id="编译工程"><a href="#编译工程" class="headerlink" title="编译工程"></a>编译工程</h3></li></ol><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515351.png" alt="img"></p><ol><li><h3 id="安装ST-LINK驱动"><a href="#安装ST-LINK驱动" class="headerlink" title="安装ST-LINK驱动"></a>安装ST-LINK驱动</h3></li><li><p>我们使用ST-LINK仿真器下载程序。</p></li></ol><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515352.png" alt="img"></p><ol><li>Keil的安装目录下自带了ST-LINK的USB驱动，双击安装即可。</li></ol><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515353.png" alt="img"></p><ol><li>升级STLink固件</li></ol><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515354.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515355.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515356.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515357.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515358.png" alt="img"></p><ol><li><h3 id="Keil中配置ST-LINK"><a href="#Keil中配置ST-LINK" class="headerlink" title="Keil中配置ST-LINK"></a>Keil中配置ST-LINK</h3></li></ol><p>还需要在Keil软件中，对仿真器做一些必要的配置。</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515459.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515460.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515461.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515462.png" alt="img"></p><ol><li><h3 id="下载程序"><a href="#下载程序" class="headerlink" title="下载程序"></a>下载程序</h3></li></ol><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515463.png" alt="img"></p><ol><li><h3 id="操作寄存器方式的”进化”"><a href="#操作寄存器方式的”进化”" class="headerlink" title="操作寄存器方式的”进化”"></a>操作寄存器方式的”进化”</h3></li><li><h4 id="“进化1”"><a href="#“进化1”" class="headerlink" title="“进化1”"></a>“进化1”</h4></li></ol><p>在操作寄存器的时候，如果每次都查手册计算地址，是相当麻烦且无聊。ST公司早就考虑到了这个问题，已经提前把每个外设寄存器的地址提前给我们用<strong>宏定义</strong>的方式给算好了，我只需要直接使用即可。比如下面是定义的RCC各个寄存器地址。（stm32f10x.h中定义）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> PERIPH_BASE                ((uint32_t)0x40000000)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AHBPERIPH_BASE             (PERIPH_BASE +0x20000)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RCC_BASE                   (AHBPERIPH_BASE +0x1000)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RCC                        ((RCC_TypeDef*) RCC_BASE)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    __IO <span class="type">uint32_t</span> CR;</span><br><span class="line">    __IO <span class="type">uint32_t</span> CFGR;</span><br><span class="line">    __IO <span class="type">uint32_t</span> CIR;</span><br><span class="line">    __IO <span class="type">uint32_t</span> APB2RSTR;</span><br><span class="line">    __IO <span class="type">uint32_t</span> APB1RSTR;</span><br><span class="line">    __IO <span class="type">uint32_t</span> AHBENR;</span><br><span class="line">    __IO <span class="type">uint32_t</span> APB2ENR;</span><br><span class="line">    __IO <span class="type">uint32_t</span> APB1ENR;</span><br><span class="line">    __IO <span class="type">uint32_t</span> BDCR;</span><br><span class="line">    __IO <span class="type">uint32_t</span> CSR;</span><br><span class="line">&#125; RCC_TypeDef;</span><br></pre></td></tr></table></figure><p>这里还巧妙的运用了<strong>结构体中各个成员地址是连续的特征</strong>。CR寄存器是RCC第0个32位寄存器，所以它相对于基地址的偏移是0。CFGR相对于基地址的偏移是4，…</p><p>APB2ENR的相对于基地址的偏移是6*4=24=0x18，和我们前面查找手册的结果是一致的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    RCC-&gt;APB2ENR = <span class="number">4</span>;</span><br><span class="line">    GPIOA-&gt;CRL = <span class="number">3</span>;</span><br><span class="line">    GPIOA-&gt;ODR = <span class="number">0xfffe</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样写起来是不是可读性就好很多了，而且也简单了很多。</p><ol><li><h4 id="“进化2”"><a href="#“进化2”" class="headerlink" title="“进化2”"></a>“进化2”</h4></li></ol><p>其实在上面的代码中还有一些问题。在STM32中一个寄存器是32位的，我们在编写代码的时候只是需要给某位或某几位赋值。由于STM32不支持位寻址，所以在前面的操作中，我们其实是修改了所有位。这是非常不合理的，也许其他位在其他地方有赋值，我们重新赋值势必会覆盖了其他值，带来的后果也是很严重的。</p><p>如何只修改特定的位的值，而不影响其他位呢？我们需要先回顾下一些常见的位操作，再来继续进化上面的代码。</p><ol><li>常用的一些位操作回顾</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;stdlib.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> buffer[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printfBinary</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *op, <span class="type">unsigned</span> <span class="type">char</span> result)</span></span><br><span class="line">&#123;</span><br><span class="line">    itoa(result, buffer, <span class="number">2</span>); <span class="comment">// 把result转成2进制字符串</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s = %s\r\n&quot;</span>, op, buffer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 左移 8&lt;&lt;1 = 1000&lt;&lt;1 = 10000*/</span></span><br><span class="line">    printfBinary(<span class="string">&quot;8 &lt;&lt; 1&quot;</span>, <span class="number">8</span> &lt;&lt; <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 右移 8&gt;&gt;1 = 1000&gt;&gt;1 = 100*/</span></span><br><span class="line">    printfBinary(<span class="string">&quot;8 &gt;&gt; 1&quot;</span>, <span class="number">8</span> &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 按位或 8|7 = 1000|0111 = 1111 */</span></span><br><span class="line">    printfBinary(<span class="string">&quot;8 | 7&quot;</span>, <span class="number">8</span> | <span class="number">7</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 按位或 8&amp;7 = 1000&amp;0111 = 0000 */</span></span><br><span class="line">    printfBinary(<span class="string">&quot;8 &amp; 7&quot;</span>, <span class="number">8</span> &amp; <span class="number">7</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 按位取反 ~8 = ~1000 = 0111 */</span></span><br><span class="line">    printfBinary(<span class="string">&quot;~8&quot;</span>, ~<span class="number">8</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        把某位置 1  (0 位 1位 ...)</span></span><br><span class="line"><span class="comment">            比如把 mum 的第 2 位置 1</span></span><br><span class="line"><span class="comment">                1. 得到一个数第 2 位是 1 其他都为 0</span></span><br><span class="line"><span class="comment">                   a =  0000 0100  是由 1&lt;&lt;2 得到</span></span><br><span class="line"><span class="comment">                2. 让 num | a</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    printfBinary(<span class="string">&quot;8置第 2 位为 1 &quot;</span>, <span class="number">8</span> | (<span class="number">1</span> &lt;&lt; <span class="number">2</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        把连续的多位同时置 1  (0 位 1位 ...)</span></span><br><span class="line"><span class="comment">            比如把 mum 的第 1和2 位置 1</span></span><br><span class="line"><span class="comment">                1  a =  3 &lt;&lt; 1</span></span><br><span class="line"><span class="comment">                2. num | a</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    printfBinary(<span class="string">&quot;8置第 1和2 位为 1 &quot;</span>, <span class="number">8</span> | (<span class="number">3</span> &lt;&lt; <span class="number">1</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        把某位置 0  (0位 1位 ...)</span></span><br><span class="line"><span class="comment">            比如把 mum 的第 2 位置 0</span></span><br><span class="line"><span class="comment">                1. 得到一个数第 2 位是 0 其他都为 1</span></span><br><span class="line"><span class="comment">                   a =  1111 0100  是由 ~(1&lt;&lt;2) 得到</span></span><br><span class="line"><span class="comment">                2. 让 num &amp; a</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    printfBinary(<span class="string">&quot;7置第 2 位为 0 &quot;</span>, <span class="number">7</span> &amp; ~(<span class="number">1</span> &lt;&lt; <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        把连续多位同时置 0  (0位 1位 ...)</span></span><br><span class="line"><span class="comment">            比如把 mum 的第 1和2 位置 0</span></span><br><span class="line"><span class="comment">                1. a = ~(3&lt;&lt;1)</span></span><br><span class="line"><span class="comment">                2. 让 num &amp; a</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    printfBinary(<span class="string">&quot;7置第 1和2 位为 0 &quot;</span>, <span class="number">7</span> &amp; ~(<span class="number">3</span> &lt;&lt; <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        把连续的多位同时置位  101 (二进制)</span></span><br><span class="line"><span class="comment">            比如把 mum 的第 1,2,3 位置为 101</span></span><br><span class="line"><span class="comment">            1. num的 1,2,3位置为0</span></span><br><span class="line"><span class="comment">                num &amp;= ~(7&lt;&lt;1)</span></span><br><span class="line"><span class="comment">            2. num |= (5 &lt;&lt; 1);    (5 = 101)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> num = <span class="number">13</span>;</span><br><span class="line">    num &amp;= ~(<span class="number">7</span> &lt;&lt; <span class="number">1</span>);</span><br><span class="line">    num |= <span class="number">5</span> &lt;&lt; <span class="number">1</span>;</span><br><span class="line">    printfBinary(<span class="string">&quot;13&quot;</span>, <span class="number">13</span>);</span><br><span class="line">    printfBinary(<span class="string">&quot;10的123位置为101 &quot;</span>, num);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>继续进化</li></ol><p>根据前面基本位操作的回顾，我们综合使用这些位操作，可以把代码进化为下面的形式。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 开启GPIOA的时钟 第2位置1*/</span></span><br><span class="line">    RCC-&gt;APB2ENR |= <span class="number">0x1</span> &lt;&lt; <span class="number">2</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* GPIOA_CRL的最后4位置 0011 */</span></span><br><span class="line">    GPIOA-&gt;CRL &amp;= ~(<span class="number">0x1</span> &lt;&lt; <span class="number">3</span>);</span><br><span class="line">    GPIOA-&gt;CRL &amp;= ~(<span class="number">0x1</span> &lt;&lt; <span class="number">2</span>);</span><br><span class="line">    GPIOA-&gt;CRL |= <span class="number">0x1</span> &lt;&lt; <span class="number">1</span>;</span><br><span class="line">    GPIOA-&gt;CRL |= <span class="number">0x1</span> &lt;&lt; <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* GPIOA_ODR的第0位置0 */</span></span><br><span class="line">    GPIOA-&gt;ODR &amp;= ~(<span class="number">0x1</span> &lt;&lt; <span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h4 id="“进化3”"><a href="#“进化3”" class="headerlink" title="“进化3”"></a>“进化3”</h4></li></ol><p>在上次的进化中，我们是给寄存器“或等”和“与等”了一些值，这些值都是通过相应的“移位”操作得到的。比如要操作第2位，就需要把0x1左移2位得到。我们需要查找手册才能知道要移位几。也是很不方便。</p><p>其实ST公司也把我们需要的<strong>移位后的值给提前计算好</strong>了，用宏定义的方式供我们使用。</p><p>比如前面的开启时钟，已经定义了好了这个值。正好就是1&lt;&lt;2</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span>    RCC_APB2ENR_IOPAEN        ((uint32_t)0x00000004)</span></span><br></pre></td></tr></table></figure><p>利用ST公司提前预定义的这些值，可以进一步进化代码为下面的形式。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    RCC-&gt;APB2ENR |= RCC_APB2ENR_IOPAEN;</span><br><span class="line">    </span><br><span class="line">    GPIOA-&gt;CRL &amp;= ~GPIO_CRL_CNF0_1;</span><br><span class="line">    GPIOA-&gt;CRL &amp;= ~GPIO_CRL_CNF0_0;</span><br><span class="line">    GPIOA-&gt;CRL |= GPIO_CRL_MODE0_1;</span><br><span class="line">    GPIOA-&gt;CRL |= GPIO_CRL_MODE0_0;</span><br><span class="line"></span><br><span class="line">    GPIOA-&gt;ODR &amp;= ~GPIO_ODR_ODR0;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样可读性就好多了，等操作熟练之后，很多操作不查找寄存器手册也能直接操作了。</p><ol><li><h1 id="GPIO外设"><a href="#GPIO外设" class="headerlink" title="GPIO外设"></a>GPIO外设</h1></li><li><h2 id="GPIO概述"><a href="#GPIO概述" class="headerlink" title="GPIO概述"></a>GPIO概述</h2></li></ol><p>GPIO <strong>（General-purpose input/output）</strong> ，通用型输入输出。简单理解就是我们可以<strong>控制输入输出</strong>的STM32引脚，统称为GPIO。</p><p>GPIO存在的意义就是<strong>用程序控制或读取</strong>他们的<strong>输出或输入</strong>。</p><ol><li><h3 id="GPIO总体说明"><a href="#GPIO总体说明" class="headerlink" title="GPIO总体说明"></a>GPIO总体说明</h3></li></ol><p>STM32有多组GPIO，比如我们使用的芯片：STM32F103ZET6共有 <strong>7组GPIO端口</strong> ，他们分别是 <strong>GPIOx（x从A-G）</strong> ，<strong>每组控制16个引脚，\</strong>共有*<em>112<strong>个GPIO引脚。具体一个其他STM32芯片有多少组GPIO，可以去查看他们的对应的</strong>数据手册*</em>。</p><p>每个引脚的电平是 <strong>0-3.3V</strong> ，部分引脚最高可以兼容到 <strong>5V</strong> 。</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515464.png" alt="img"></p><ol><li><h3 id="GPIO的主要特点"><a href="#GPIO的主要特点" class="headerlink" title="GPIO的主要特点"></a>GPIO的主要特点</h3></li><li><p>不同型号，IO口的数量可能不一样。</p></li><li><p>快速翻转。最快可以达到每2个时钟周期翻转一次。（STM32F1系列最快可以达到50MHz的翻转速度）。</p></li><li><p>每个IO都可以作为外部中断。</p></li><li><p>支持8种工作模式。</p></li><li><h3 id="GPIO的8种工作模式"><a href="#GPIO的8种工作模式" class="headerlink" title="GPIO的8种工作模式"></a>GPIO的8种工作模式</h3></li></ol><p>GPIO端口的每个位（引脚）可以由<strong>软件</strong>分别<strong>配置</strong>成8种模式，当然对同一个引脚同一时间只能处于某一种模式中。</p><ol><li><strong>输入浮空（Input floating）</strong></li><li><strong>输入上拉（Input pull-up）</strong> <strong>信号默认高电平</strong></li><li><strong>输入下拉（Input-pull-down）</strong> <strong>信号默认低电平</strong></li><li><strong>模拟输入（Analog）</strong></li><li><strong>通用开漏式输出（Output open-drain）</strong></li><li><strong>通用推挽式输出（Output push-pull）</strong></li><li><strong>复用推挽式功能（Alternate function push-pull）</strong></li><li><strong>复用开漏式功能（Alternate function open-drain）</strong></li></ol><p>每个I/O端口位可以自由编程，然而I/0端口寄存器必须按<strong>32位字</strong>被访问。</p><p><strong>输出模式</strong>下可以<strong>控制端口输出</strong>高电平低电平，用于驱动LED，蜂鸣器等，如果是大功率器件（比如电机），还需要加上驱动器（小电流控制大电流）。</p><p><strong>输入模式</strong>下可以<strong>读取端口</strong>的高低电平，用于读取外接按键，外接模拟信号的输入，ADC电压采集，模拟通信协议接受数据等。</p><ol><li><h2 id="GPIO工作模式"><a href="#GPIO工作模式" class="headerlink" title="GPIO工作模式"></a>GPIO工作模式</h2></li><li><h3 id="GPIO每位的具体电路结构"><a href="#GPIO每位的具体电路结构" class="headerlink" title="GPIO每位的具体电路结构"></a>GPIO每位的具体电路结构</h3></li></ol><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515465.png" alt="img"></p><ol><li><h3 id="每种模式详解"><a href="#每种模式详解" class="headerlink" title="每种模式详解"></a>每种模式详解</h3></li><li><h4 id="输出模式"><a href="#输出模式" class="headerlink" title="输出模式"></a>输出模式</h4></li><li><p><strong>输出缓冲器被激活。</strong></p></li><li><p><strong>推挽模式：输出寄存器上的 1 将激活P-MOS，输出高电平。0 将激活N-MOS，输出低电平。</strong></p></li><li><p><strong>开漏模式：P-MOS永远关闭。 输出寄存器上的 0 激活N-MOS，而输出寄存器上的 1 将端口置于高阻状态，所以外部必须要接上拉电阻。</strong></p></li><li><p><strong>施密特触发输入被激活。</strong></p></li><li><p><strong>弱上拉和下拉电阻被禁止。</strong></p></li><li><p><strong>出现在I/O脚上的数据在每个APB2时钟被采样到输入数据寄存器。</strong></p></li><li><p><strong>在开漏模式时，对输入数据寄存器的读访问可得到I/O状态。</strong></p></li><li><p><strong>在推挽模式时，对输出数据寄存器的读访问得到最后一次写的值。</strong></p></li><li><h4 id="复用输出模式"><a href="#复用输出模式" class="headerlink" title="复用输出模式"></a>复用输出模式</h4></li></ol><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515466.png" alt="img"></p><ol><li><p><strong>在开漏或推挽式配置中，输出缓冲器被打开。</strong></p></li><li><p><strong>内置外设的信号驱动输出缓冲器（复用功能输出）。</strong></p></li><li><p><strong>施密特触发输入被激活。</strong></p></li><li><p><strong>弱上拉和下拉电阻被禁止。</strong></p></li><li><p><strong>在每个APB2时钟周期，出现在I/O脚上的数据被采样到输入数据寄存器。</strong></p></li><li><p><strong>开漏模式时，读输入数据寄存器时可得到I/O口状态。</strong></p></li><li><p><strong>在推挽模式时，读输出数据寄存器时可得到最后一次写的值。</strong></p></li><li><h4 id="输入模式"><a href="#输入模式" class="headerlink" title="输入模式"></a>输入模式</h4></li></ol><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515467.png" alt="img"></p><ol><li><strong>2个保护二极管的作用是保护我们的芯片不会由于电压过高或过低而烧毁。</strong></li></ol><p>VDD是接电源（3.3V），VSS接地（0V）。如果IO引脚的输入电压高于VDD的值到一定程度，上方保护二极管导通，则引脚电压被拉低到VDD。如果IO引脚的输入电压（负电压）低于VSS到一定程度，则下方保护二极管导通，电压被拉高到VSS。</p><ol><li>2个开关控制引脚没有输入的时候是上拉，下拉还是浮空。</li></ol><p>当上面的开关闭合的时候，输入被拉高到高电平。当下面的开关闭合的时候，入被拉低到低电平。如果两个都不闭合，输入就是悬空状态。 <strong>两个同时闭合，就是费电了，不会这么做的</strong> 。</p><ol><li>施密特（图中翻译成肖特基触发器应该是翻译错误，英文版手册是TTL Schmitt trigger）触发器是包含正反馈的比较器电路。可以对信号进行波形整形。</li></ol><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515468.png" alt="img"></p><ol><li><p>从施密特触发起出来的数据，进入到输入数据寄存器中，我们就可以从中读取数据了。</p></li><li><h4 id="模拟输入模式"><a href="#模拟输入模式" class="headerlink" title="模拟输入模式"></a>模拟输入模式</h4></li></ol><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515469.png" alt="img"></p><p>当配置为<strong>模拟输入</strong>时：</p><ol><li><p>输出部分被禁止。</p></li><li><p><strong>禁止施密特触发输入</strong>，实现了每个模拟I/O引脚上的零消耗。施密特触发输出值被强置为0，此时也可以不用开启对应GPIO的时钟。</p></li><li><p>弱上拉和下拉电阻被禁止。</p></li><li><p>读取输入数据寄存器时数值永远为0。</p></li><li><h2 id="与GPIO相关的7个寄存器（重要）"><a href="#与GPIO相关的7个寄存器（重要）" class="headerlink" title="与GPIO相关的7个寄存器（重要）"></a>与GPIO相关的7个寄存器（重要）</h2></li></ol><p>每个GPI/O端口有7个相关的：</p><ul><li>2个32位配置寄存器 <strong>（GPIOx_CRL，GPIOx_CRH）</strong> 。</li><li>2个32位数据寄存器 <strong>（GPIOx_IDR和GPIOx_ODR）</strong> 。</li><li>1个32位置位/复位寄存器 <strong>（GPIOx_BSRR）</strong> 。</li><li>1个16位复位寄存器 <strong>（GPIOx_BRR）</strong> 。</li><li>1个32位锁定寄存器 <strong>（GPIOx_LCKR）</strong> 。</li></ul><ol><li><h3 id="GPIOx-CRL（端口配置低寄存器）"><a href="#GPIOx-CRL（端口配置低寄存器）" class="headerlink" title="GPIOx_CRL（端口配置低寄存器）"></a>GPIOx_CRL（端口配置低寄存器）</h3></li></ol><p><strong>GPIOx_CRL（Port configuration register low）</strong> ，<strong>x</strong>可以是 <strong>A-G</strong> 。</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515470.png" alt="img"></p><p>该寄存器配置的每个GPIO的 0-7 这个8个位，所以叫低寄存器。</p><ol><li><p>MODE：每个端口有2个MODE位进行控制。</p><ol><li>00：输入模式（复位后的状态）</li><li>01：输出模式，最大速度10MHz</li><li>10：输出模式，最大速度2MHz</li><li>11：输出模式，最大速度50MHz</li></ol></li><li><p>CNF：每个端口有2个CNF位进行控制。</p><ol><li>当MODE是00 （输入模式）<ol><li>00：模拟输入模式</li><li>01：浮空输入模式(复位后的状态)</li><li>10：上拉/下拉输入模式</li><li>11：保留</li></ol></li><li>当MODE&gt;00（输出模式）<ol><li>00：通用推挽输出模式</li><li>01：通用开漏输出模式</li><li>10：复用功能推挽输出模式</li><li>11：复用功能开漏输出模式</li></ol></li></ol></li><li><h3 id="GPIOx-CRH（端口配置高寄存器）"><a href="#GPIOx-CRH（端口配置高寄存器）" class="headerlink" title="GPIOx_CRH（端口配置高寄存器）"></a>GPIOx_CRH（端口配置高寄存器）</h3></li></ol><p><strong>GPIOx_CRH（Port configuration register high）</strong> 。</p><p>该寄存器配置的是每个端口的 8-15引脚，配置方式和低位寄存器完全一样。</p><ol><li><h3 id="GPIOx-IDR（端口输入数据寄存器）"><a href="#GPIOx-IDR（端口输入数据寄存器）" class="headerlink" title="GPIOx_IDR（端口输入数据寄存器）"></a>GPIOx_IDR（端口输入数据寄存器）</h3></li></ol><p>Port input data register</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515471.png" alt="img"></p><p>保留位始终读为0。剩下的分别对应每个引脚的输入值。</p><ol><li><h3 id="GPIOx-ODR（端口输出数据寄存器）"><a href="#GPIOx-ODR（端口输出数据寄存器）" class="headerlink" title="GPIOx_ODR（端口输出数据寄存器）"></a>GPIOx_ODR（端口输出数据寄存器）</h3></li></ol><p><strong>Port output data register</strong></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515472.png" alt="img"></p><p>保留位始终读为0。剩下的分别对应每个引脚的输出值。</p><ol><li><h3 id="GPIOx-BSRR（端口位设置-清除寄存器）"><a href="#GPIOx-BSRR（端口位设置-清除寄存器）" class="headerlink" title="GPIOx_BSRR（端口位设置/清除寄存器）"></a>GPIOx_BSRR（端口位设置/清除寄存器）</h3></li></ol><p>Port bit set/reset register</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515473.png" alt="img"></p><ol><li><p>高16位是用清除对应的数据输出寄存器的位（0-15）的值：设置为0不影响，设置为1会清除ODR对应的位的值（置为0）。</p></li><li><p>低16位是用设置对应的数据输出寄存器的位（0-15）的值：设置为0不影响，设置为1会设置ODR对应的位的值（置为1）。</p></li><li><h3 id="GPIOx-BRR（端口位清除寄存器）"><a href="#GPIOx-BRR（端口位清除寄存器）" class="headerlink" title="GPIOx_BRR（端口位清除寄存器）"></a>GPIOx_BRR（端口位清除寄存器）</h3></li></ol><p>这个寄存器具有了 <strong>GPIOx_BSRR一半的功能：清除</strong> 。</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515474.png" alt="img"></p><ol><li><h3 id="GPIOx-LCKR（端口配置锁定寄存器）"><a href="#GPIOx-LCKR（端口配置锁定寄存器）" class="headerlink" title="GPIOx_LCKR（端口配置锁定寄存器）"></a>GPIOx_LCKR（端口配置锁定寄存器）</h3></li></ol><p><strong>Port configuration lock register</strong></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515475.png" alt="img"></p><p>该寄存器用来锁定端口位的配置。位[15:0]用于锁定GPIO端口的配置。在规定的写入操作期间，不能改变LCKP[15:0]。当对相应的端口位执行了LOCK序列后，在下次系统复位之前将不能再更改端口位的配置。</p><p>每个锁定位锁定控制寄存器（CRL，CRH）中相应的4个位（CNF2位和MODE2位）。</p><p>第16位用来激活锁定寄存器，必须按照规定的时序来操作才行: 写1 -&gt; 写0 -&gt; 写1 -&gt; 读0 -&gt; 读1。</p><p>对0-15位：</p><ul><li>0：不锁定对应端口的配置。</li><li>1：锁定对应端口的配置。</li></ul><ol><li><h2 id="GPIO案例：流水灯"><a href="#GPIO案例：流水灯" class="headerlink" title="GPIO案例：流水灯"></a>GPIO案例：流水灯</h2></li><li><h3 id="需求描述-1"><a href="#需求描述-1" class="headerlink" title="需求描述"></a>需求描述</h3></li></ol><p>在3个LED上实现流水灯效果。</p><ol><li><h3 id="硬件电路设计-1"><a href="#硬件电路设计-1" class="headerlink" title="硬件电路设计"></a>硬件电路设计</h3></li></ol><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515476.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515477.png" alt="img"></p><ol><li><h3 id="软件设计（寄存器）"><a href="#软件设计（寄存器）" class="headerlink" title="软件设计（寄存器）"></a>软件设计（寄存器）</h3></li><li><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4></li><li><p>copy上一个项目</p></li><li><p>并做如下操作</p></li></ol><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515478.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515479.png" alt="img"></p><ol><li>创建一个目录： Hardware/Led 存储我们的LED驱动文件。</li><li>在 Hardware/Led下创建2个文件 led.h和led.c。</li><li>使用keil打开项目，做下简单配置。</li></ol><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515480.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515481.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515482.png" alt="img"></p><ol><li><h4 id="具体代码"><a href="#具体代码" class="headerlink" title="具体代码"></a>具体代码</h4></li><li><h5 id="main-c-1"><a href="#main-c-1" class="headerlink" title="main.c"></a>main.c</h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Driver_LED.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Delay.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint32_t</span> leds[] = &#123;LED_1, LED_2, LED_3&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 1. 初始化LED */</span></span><br><span class="line">    Driver_LED_Init();</span><br><span class="line">    Driver_LED_OffAll(leds, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">uint8_t</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            Driver_LED_OffAll(leds, <span class="number">3</span>);</span><br><span class="line">            Driver_LED_On(leds[i]);</span><br><span class="line">            Delay_ms(<span class="number">500</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        Driver_LED_OffAll(leds, <span class="number">3</span>);</span><br><span class="line">        Driver_LED_On(leds[<span class="number">1</span>]);</span><br><span class="line">        Delay_ms(<span class="number">500</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h5 id="Delay-h"><a href="#Delay-h" class="headerlink" title="Delay.h"></a>Delay.h</h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __delay_h</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __delay_h</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;stm32f10x.h&quot;</span><span class="comment">// Device header</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay_us</span><span class="params">(<span class="type">uint16_t</span> us)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay_ms</span><span class="params">(<span class="type">uint16_t</span> ms)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay_s</span><span class="params">(<span class="type">uint16_t</span> s)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><ol><li><h5 id="Delay-c"><a href="#Delay-c" class="headerlink" title="Delay.c"></a>Delay.c</h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//延时函数使用到了系统定时器，大家先使用，到提高篇时再学习具体为什么这么写。</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;delay.h&quot;</span><span class="comment">// Device header</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay_us</span><span class="params">(<span class="type">uint16_t</span> us)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 定时器重装值 */</span></span><br><span class="line">    SysTick-&gt;LOAD = <span class="number">72</span> * us;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 清除当前计数值 */</span></span><br><span class="line">    SysTick-&gt;VAL = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*设置内部时钟源（2位-&gt;1）,不需要中断（1位-&gt;0），并启动定时器(0位-&gt;1)*/</span></span><br><span class="line">    SysTick-&gt;CTRL = <span class="number">0x5</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*等待计数到0， 如果计数到0则16位会置为1*/</span></span><br><span class="line">    <span class="keyword">while</span> (!(SysTick-&gt;CTRL &amp; SysTick_CTRL_COUNTFLAG));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 关闭定时器 */</span></span><br><span class="line">    SysTick-&gt;CTRL &amp;= ~SysTick_CTRL_ENABLE; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay_ms</span><span class="params">(<span class="type">uint16_t</span> ms)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (ms--)</span><br><span class="line">    &#123;</span><br><span class="line">        Delay_us(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay_s</span><span class="params">(<span class="type">uint16_t</span> s)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (s--)</span><br><span class="line">    &#123;</span><br><span class="line">        Delay_ms(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h5 id="Driver-LED-h"><a href="#Driver-LED-h" class="headerlink" title="Driver_LED.h"></a>Driver_LED.h</h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __DRIVER_LED_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __DRIVER_LED_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED_1 GPIO_ODR_ODR0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED_2 GPIO_ODR_ODR1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED_3 GPIO_ODR_ODR8</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_Init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_On</span><span class="params">(<span class="type">uint32_t</span> led)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_Off</span><span class="params">(<span class="type">uint32_t</span> led)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_Toggle</span><span class="params">(<span class="type">uint32_t</span> led)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_OnAll</span><span class="params">(<span class="type">uint32_t</span> leds[], <span class="type">uint8_t</span> size)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_OffAll</span><span class="params">(<span class="type">uint32_t</span> leds[], <span class="type">uint8_t</span> size)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><ol><li><h5 id="Driver-LED-c"><a href="#Driver-LED-c" class="headerlink" title="Driver_LED.c"></a>Driver_LED.c</h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Driver_LED.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 对LED进行初始化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 打开GPIOA的时钟 */</span></span><br><span class="line">    RCC-&gt;APB2ENR |= RCC_APB2ENR_IOPAEN;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 2. 给用到的端口的所有 PIN (PA0 PA1 PA8) 设置工作模式: 通用推挽输出 MODE:11  CNF:00 */</span></span><br><span class="line">    GPIOA-&gt;CRL |= (GPIO_CRL_MODE0 | GPIO_CRL_MODE1);</span><br><span class="line">    GPIOA-&gt;CRL &amp;= ~(GPIO_CRL_CNF0 | GPIO_CRL_CNF1);</span><br><span class="line"></span><br><span class="line">    GPIOA-&gt;CRH |= GPIO_CRH_MODE8;</span><br><span class="line">    GPIOA-&gt;CRH &amp;= ~GPIO_CRH_CNF8;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 3. 关闭所有灯  */</span></span><br><span class="line">    Driver_LED_Off(LED_1);</span><br><span class="line">    Driver_LED_Off(LED_2);</span><br><span class="line">    Driver_LED_Off(LED_3);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 点亮指定的LED</span></span><br><span class="line"><span class="comment"> * @param &#123;uint32_t&#125; led 要点亮的LED</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_On</span><span class="params">(<span class="type">uint32_t</span> led)</span></span><br><span class="line">&#123;</span><br><span class="line">    GPIOA-&gt;ODR &amp;= ~led;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 关闭指定的LED</span></span><br><span class="line"><span class="comment"> * @param &#123;uint32_t&#125; led 要关闭的LED</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_Off</span><span class="params">(<span class="type">uint32_t</span> led)</span></span><br><span class="line">&#123;</span><br><span class="line">    GPIOA-&gt;ODR |= led;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 翻转LED的状态</span></span><br><span class="line"><span class="comment"> * @param &#123;uint32_t&#125; led 要翻转的LED</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_Toggle</span><span class="params">(<span class="type">uint32_t</span> led)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 读取引脚的电平,如果是1(目前是关闭), 打开, 否则就关闭 */</span></span><br><span class="line">    <span class="keyword">if</span> ((GPIOA-&gt;IDR &amp; led) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Driver_LED_Off(led);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        Driver_LED_On(led);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 打开数组中所有的灯</span></span><br><span class="line"><span class="comment"> * @param &#123;uint32_t&#125; leds 所有灯</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; size 灯的个数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_OnAll</span><span class="params">(<span class="type">uint32_t</span> leds[], <span class="type">uint8_t</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint8_t</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Driver_LED_On(leds[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 关闭数组中所有的灯</span></span><br><span class="line"><span class="comment"> * @param &#123;uint32_t&#125; leds 所有灯</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; size 灯的个数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_OffAll</span><span class="params">(<span class="type">uint32_t</span> leds[], <span class="type">uint8_t</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint8_t</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Driver_LED_Off(leds[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h1 id="总体架构和时钟系统"><a href="#总体架构和时钟系统" class="headerlink" title="总体架构和时钟系统"></a>总体架构和时钟系统</h1></li><li><h2 id="STM32总体架构"><a href="#STM32总体架构" class="headerlink" title="STM32总体架构"></a>STM32总体架构</h2></li></ol><p>经过一段时间的学习，我们需要从宏观上了解下它的系统架构，各个模块之间的层级关系以及相互的影响。</p><ol><li><h2 id="时钟系统"><a href="#时钟系统" class="headerlink" title="时钟系统"></a>时钟系统</h2></li><li><h3 id="时钟树"><a href="#时钟树" class="headerlink" title="时钟树"></a>时钟树</h3></li></ol><p>在STM32中有3种不同的时钟源用来驱动系统时钟(SYSCLK)：</p><ul><li>HSI振荡器时钟（High Speed Internal oscillator，高速内部时钟）</li><li>HSE振荡器时钟（High Speed External（Oscillator / Clock），高速外部时钟）</li><li>PLL时钟（Phase Locked Loop 锁相环/倍频器）</li></ul><p>还有2种2级时钟：</p><ul><li>LSI时钟（Low Speed Internal，低速内部时钟）</li><li>LSE时钟（Low Speed External oscillator，低速外部时钟）。</li></ul><p>为什么提供这么多的时钟？<strong>节能！</strong>高速设备接高速时钟，低速设备接低速时钟，可以最大程度的达到节能效果。详见下图时钟树。</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515483.png" alt="img"></p><p>可以看这个简图：</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515484.png" alt="img"></p><p><strong>该时钟树目前不要求记住，等以后编程时，只需要时不时回头翻看即可。代码写多了，这些知识自会烂熟于胸。</strong></p><ol><li><h3 id="各个时钟介绍"><a href="#各个时钟介绍" class="headerlink" title="各个时钟介绍"></a>各个时钟介绍</h3></li><li><p>HSE时钟</p></li></ol><p>高速外部时钟是由外部时钟源提供，目前几乎所有的STM32单片机的设计都是在外部接一个8MHz的晶振，经过PLL倍频（9倍频）后得到一个72MHz的系统时钟。我们系统默认就是这个时钟。这个在启动文件可以看到。</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515485.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515486.png" alt="img"></p><ol><li>HSI时钟</li></ol><p>HSI时钟信号由内部8MHz的RC振荡器产生，可直接作为系统时钟或在2分频后作为PLL输入。HSI RC振荡器能够在不需要任何外部器件的条件下提供系统时钟。它的启动时间比HSE晶体振荡器短。然而，即使在校准之后它的时钟频率<strong>精度仍较差</strong>。</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515487.png" alt="img"></p><ol><li>PLL时钟</li></ol><p>内部PLL用来倍频<strong>HSI RC</strong>的输出时钟或<strong>HSE</strong>晶体输出时钟。PLL的设置必须在其被激活前完成。 <strong>一旦PLL被激活，这些参数就不能被改动</strong> 。如果PLL中断在时钟中断寄存器里被允许，当PLL准备就绪时，可产生中断申请。</p><p>PLL时钟一般都是对外部的8MHz的时钟信号经过9倍频后，得到72MHz的时钟频率，这是STM32F1系列允许的最高时钟频率。</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515488.png" alt="img"></p><ol><li>LSE时钟</li></ol><p>LSE晶体是一个32.768kHz的低速外部晶体或陶瓷谐振器。它为实时时钟或者其他定时功能提供一个低功耗且精确的时钟源。</p><p>LSE是<strong>不能驱动系统时钟</strong>的。</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515489.png" alt="img"></p><ol><li>LSI时钟</li></ol><p>LSI RC担当一个低功耗时钟源的角色，它可以在停机和待机模式下保持运行，为独立看门狗和自动唤醒单元提供时钟。LSI时钟频率大约40kHz（在30kHz和60kHz之间）。</p><p>LSI也是<strong>不能驱动系统时钟</strong>的。</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-172553256515490.png" alt="img"></p><ol><li><h1 id="HAL库开发入门"><a href="#HAL库开发入门" class="headerlink" title="HAL库开发入门"></a>HAL库开发入门</h1></li><li><h2 id="HAL介绍"><a href="#HAL介绍" class="headerlink" title="HAL介绍"></a>HAL介绍</h2></li><li><p>为什么要学习HAL库开发</p></li></ol><p>到目前我们已经学会1种开发SMT32程序的姿势：基于寄存器开发。</p><p>寄存器开发效率比较低，在工作中如果想<strong>快速开发</strong>还是要会用到HAL库开发。</p><p>HAL库是目前ST主力推广的开发方式，所以你如果还<strong>要用ST的芯片</strong>，会使用HAL库开发是势在必行的。而且最最关键的是，使用HAL开发有诸多的好处。</p><p>目前，HAL库已经支持STM32全线产品。</p><ol><li>什么是HAL库</li></ol><p>HAL库的全称是Hardware Abstraction Layer，翻译成<strong>硬件抽象层</strong>。HAL库是ST为STM32最新推出的抽象层嵌入式软件，可以更好的确保跨STM32产品的最大可移植性。该库提供了一整套一致的中间件组件，如RTOS，USB，TCP/IP和图形等。</p><p>HAL库是基于一个非限制性的BSD许可协议（Berkeley Software Distribution）而发布的开源代码。 ST制作的中间件堆栈（USB主机和设备库，STemWin）带有允许轻松重用的许可模式，只要是在ST公司的MCU 芯片上使用，库中的中间件(USB 主机/设备库,STemWin)协议栈即被允许随便修改，并可以反复使用。至于基于其它著名的开源解决方案商的中间件（FreeRTOS，FatFs，LwIP和PolarSSL）也都具有友好的用户许可条款。</p><ol><li>CMSIS和HAL库的关系</li></ol><p><strong>CMSIS</strong> <strong>（</strong> <strong>Cortex Microcontroller Software Interface Standard</strong> <strong>）</strong> 是 Cortex-M 处理器系列的与供应商无关的硬件抽象层。它是ARM公司制定的一个标准。它可以为处理器和外设实现一致且简单的软件接口，从而简化软件的重用、缩短微控制器新开发人员的学习过程，并缩短新设备的上市时间。简单来说，就是ARM公司制定标准，芯片厂商按照此标准编写相应的程序，实现统一的接口，方便开发人员的使用。</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735623183.png" alt="img"></p><ol><li><h2 id="HAL库开发环境搭建"><a href="#HAL库开发环境搭建" class="headerlink" title="HAL库开发环境搭建"></a>HAL库开发环境搭建</h2></li><li><h3 id="安装Java运行环境"><a href="#安装Java运行环境" class="headerlink" title="安装Java运行环境"></a>安装Java运行环境</h3></li></ol><p>STM32CubeMX 要求java8的运行环境。下载地址：<strong><a href="https://www.oracle.com/java/technologies/javase/javase8u211-later-archive-downloads.html">https://www.oracle.com/java/technologies/javase/javase8u211-later-archive-downloads.html</a></strong></p><ol><li><h3 id="安装STM32CubeMX"><a href="#安装STM32CubeMX" class="headerlink" title="安装STM32CubeMX"></a>安装STM32CubeMX</h3></li></ol><p>ST公司提供的一个工具，非常方便的用图形化的方式帮我们创建工程，和完成各种配置。</p><p>下载地址：<strong><a href="https://www.st.com/zh/development-tools/stm32cubemx.html">https://www.st.com/zh/development-tools/stm32cubemx.html#get-software</a></strong></p><p>双击安装即可。</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735623184.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735623185.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735623186.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735623187.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735623188.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735624189.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735624190.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735624191.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735624192.png" alt="img"></p><ol><li><h3 id="在线下载芯片支持包"><a href="#在线下载芯片支持包" class="headerlink" title="在线下载芯片支持包"></a>在线下载芯片支持包</h3></li></ol><p>双击<strong>CubeMX</strong>进入如下界面。</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735624193.png" alt="img"></p><p>先安装下软件支持包：</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735624194.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735624195.png" alt="img"></p><p>点击安装之后，需要先登录你的ST账号，没有就先注册一个。</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735624196.png" alt="img"></p><ol><li><h3 id="离线安装芯片支持包"><a href="#离线安装芯片支持包" class="headerlink" title="离线安装芯片支持包"></a>离线安装芯片支持包</h3></li></ol><p>如果网速不好，下载会比较慢。也可以选择离线安装。</p><ol><li>下载离线芯片支持包</li></ol><p>下载地址：<strong><a href="https://www.st.com/zh/development-tools/stm32cubemx.html#tools-software">https://www.st.com/zh/development-tools/stm32cubemx.html#tools-software</a></strong></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735624197.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735624198.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735624199.png" alt="img"></p><ol><li>导入芯片支持包</li></ol><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735624200.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735624201.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735624202.png" alt="img"></p><p><strong>注意:</strong></p><ol><li><p><strong>上面的离线安装方式只能安装基础包(en.stm32cubef1.zip),升级包(en.stm32cubef1-v1-8-5.zip)无法安装.</strong></p></li><li><p><strong>把en.stm32cubef1-v1-8-5.zip拷贝到stm32cube的仓库中,直接解压就行了.仓库位置: C:\Users\你的用户名\STM32Cube</strong> <strong>Repository</strong> <strong>. 用解压的文件覆盖原来的基础包.</strong></p></li><li><h2 id="LED流水灯案例（HAL库）"><a href="#LED流水灯案例（HAL库）" class="headerlink" title="LED流水灯案例（HAL库）"></a>LED流水灯案例（HAL库）</h2></li><li><h3 id="需求描述-2"><a href="#需求描述-2" class="headerlink" title="需求描述"></a>需求描述</h3></li></ol><p>实现LED流水灯。用的GPIOA的 0、1、8口。</p><ol><li><h3 id="硬件电路设计-2"><a href="#硬件电路设计-2" class="headerlink" title="硬件电路设计"></a>硬件电路设计</h3></li></ol><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735624203.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735624204.png" alt="img"></p><ol><li><h3 id="软件设计-1"><a href="#软件设计-1" class="headerlink" title="软件设计"></a>软件设计</h3></li><li><h4 id="创建HAL库工程"><a href="#创建HAL库工程" class="headerlink" title="创建HAL库工程"></a>创建HAL库工程</h4></li><li><p>操作页面介绍</p></li></ol><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735624205.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735624206.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735624207.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735624208.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735624209.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735624210.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735624211.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735624212.png" alt="img"></p><ol><li>根据需求设置参数</li></ol><ul><li>Debug参数选择</li></ul><p>默认debug选项没有设置，需要开启。<strong>选择\</strong>**串口**<em>\</em>即可。这个地方务必设置好，否则只能下载一次程序到*<em>\</em>*MCU**<em>\</em>，以后就无法下载了。**</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735624213.png" alt="img"></p><ul><li>RCC时钟选择</li></ul><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735624214.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735624215.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735624216.png" alt="img"></p><ol><li>GPIO配置</li></ol><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735624217.png" alt="img"></p><ol><li>配置PA0引脚。</li></ol><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735624218.png" alt="img"></p><ol><li>同样的方式配置PA1和PA8，然后可以看到这3个引脚。</li></ol><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735624219.png" alt="img"></p><ol><li>分别对他们进行设置。</li></ol><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735624220.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735624221.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735625222.png" alt="img"></p><ol><li>工程配置</li></ol><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735625223.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735625224.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735625225.png" alt="img"></p><ol><li>生成代码</li></ol><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735625226.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735625227.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735625228.png" alt="img"></p><ol><li>生成的工程目录介绍</li></ol><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735625229.png" alt="img"></p><ol><li><h4 id="自动生成的代码解读"><a href="#自动生成的代码解读" class="headerlink" title="自动生成的代码解读"></a>自动生成的代码解读</h4></li></ol><p><strong>main</strong>函数中已经替我们调用了HAL的初始化，时钟的初始化，GPIO的初始化。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_Init();</span><br><span class="line">    SystemClock_Config();</span><br><span class="line">    MX_GPIO_Init();</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//下面是GPIO初始化的代码。</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">MX_GPIO_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    GPIO_InitTypeDef GPIO_InitStruct = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="comment">/* GPIO Ports Clock Enable */</span></span><br><span class="line">    __HAL_RCC_GPIOC_CLK_ENABLE();</span><br><span class="line">    __HAL_RCC_GPIOA_CLK_ENABLE();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*Configure GPIO pin Output Level */</span></span><br><span class="line">    HAL_GPIO_WritePin(GPIOA, LED1_Pin | LED2_Pin | LED3_Pin, GPIO_PIN_SET);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*Configure GPIO pins : PAPin PAPin PAPin */</span></span><br><span class="line">    GPIO_InitStruct.Pin = LED1_Pin | LED2_Pin | LED3_Pin;</span><br><span class="line">    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;</span><br><span class="line">    GPIO_InitStruct.Pull = GPIO_NOPULL;</span><br><span class="line">    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;</span><br><span class="line">    HAL_GPIO_Init(GPIOA, &amp;GPIO_InitStruct);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h4 id="构建LED驱动"><a href="#构建LED驱动" class="headerlink" title="构建LED驱动"></a>构建LED驱动</h4></li></ol><p>为了方便管理，我们把LED驱动放入单独的文件夹管理。在项目根目录下创建Hardware/led目录。</p><p>然后在Hardware/led目录下创建2个文件led.h和led.c。</p><p>并在Keil中添加如下配置。</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735625230.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735625231.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735625232.png" alt="img"></p><ol><li><h5 id="led-h"><a href="#led-h" class="headerlink" title="led.h"></a>led.h</h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __led_h</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __led_h</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;gpio.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED uint16_t</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">LED_Turn_On</span><span class="params">(LED led)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">LED_Turn_Off</span><span class="params">(LED led)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">LED_Toggle</span><span class="params">(LED led)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">LED_Turn_Off_All</span><span class="params">(LED led[], <span class="type">uint8_t</span> len)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><ol><li><h5 id="led-c"><a href="#led-c" class="headerlink" title="led.c"></a>led.c</h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;led.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 点亮LED</span></span><br><span class="line"><span class="comment"> * @param &#123;LED&#125; led</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">LED_Turn_On</span><span class="params">(LED led)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_GPIO_WritePin(GPIOA, led, GPIO_PIN_RESET);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 熄灭LED</span></span><br><span class="line"><span class="comment"> * @param &#123;LED&#125; led</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">LED_Turn_Off</span><span class="params">(LED led)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_GPIO_WritePin(GPIOA, led, GPIO_PIN_SET);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 翻转LED的状态</span></span><br><span class="line"><span class="comment"> * @param &#123;LED&#125; led</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">LED_Toggle</span><span class="params">(LED led)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_GPIO_TogglePin(GPIOA, led);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 关闭所有LED</span></span><br><span class="line"><span class="comment"> * @param &#123;LED&#125; led</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; len</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">LED_Turn_Off_All</span><span class="params">(LED led[], <span class="type">uint8_t</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint8_t</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        LED_Turn_Off(led[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h5 id="main函数"><a href="#main函数" class="headerlink" title="main函数"></a>main函数</h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;LED.h&quot;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_Init();</span><br><span class="line">    SystemClock_Config();</span><br><span class="line">    MX_GPIO_Init();</span><br><span class="line">    <span class="type">uint16_t</span> leds[] = &#123;LED1_Pin, LED2_Pin, LED3_Pin&#125;;</span><br><span class="line">    <span class="type">uint8_t</span> i;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            LED_Turn_Off_All(leds, <span class="number">3</span>);</span><br><span class="line">            LED_Turn_On(leds[i]);</span><br><span class="line">            HAL_Delay(<span class="number">200</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            LED_Turn_Off_All(leds, <span class="number">3</span>);</span><br><span class="line">            LED_Turn_On(leds[<span class="number">2</span> - i]);</span><br><span class="line">            HAL_Delay(<span class="number">200</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4></li></ol><p>每新建一个工程，都需要<strong>重新配置</strong> <strong>Include Path和Debug参数</strong> 。</p><ol><li><h1 id="STM32的中断系统"><a href="#STM32的中断系统" class="headerlink" title="STM32的中断系统"></a>STM32的中断系统</h1></li><li><h2 id="中断概述"><a href="#中断概述" class="headerlink" title="中断概述"></a>中断概述</h2></li><li><h3 id="中断的概念"><a href="#中断的概念" class="headerlink" title="中断的概念"></a>中断的概念</h3></li></ol><p>在主程序运行过程中，出现了特定事件，使得CPU暂停当前正在运行的程序，转而去处理这个事件，等这个事件处理完成之后，CPU再回到刚才被打断的位置继续处理，这就是<strong>中断</strong>。</p><p>在ARM体系结构中，中断通常由外设或外部输入产生，有时也可以由软件触发。中断是单片机系统处理紧急或突发事件的重要方式，如定时器溢出、按键输入、串口数据到达等。</p><p>那个打断CPU执行的特定事件，我们一般称之为<strong>中断源</strong>。被中断源打断的位置我们称为<strong>断点</strong>。处理特定事件的过程，我们称为执行<strong>中断处理程序</strong>。</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735625233.png" alt="img"></p><p>正在执行中断程序的时候，这个时候有可能被另外一个中断源给中断，CPU转而去执行另外一个中断源的中断处理程序，这叫<strong>中断嵌套</strong>。</p><p>中断B能否打断中断A，要看他们的优先级，优先级高的可以打断优先级低的，优先级低的无法打断优先级高的。</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735625234.png" alt="img"></p><p>中断源可以是外部的，也可以是内部的。外部的叫<strong>外部中断源</strong>，内部的叫<strong>内部中断源（有时候也叫异常）</strong>。</p><ol><li><h3 id="为什么需要中断"><a href="#为什么需要中断" class="headerlink" title="为什么需要中断"></a>为什么需要中断</h3></li></ol><p>对单片机系统来说，<strong>中断至关重要</strong>。</p><p>中断的主要意义在于提高CPU的效率，而不会一直占用CPU，实现对突发事件的实时处理，以及实现程序的并行化和嵌入式系统进程之间的切换。相较于轮询方式（即按照一定的频率和周期不断地检测某些事件的发生），中断在处理一些偶然发生的事情时效率更高。</p><p>假设我们要检测按键是否按下，如果没有中断，则需要用循环的方式（阻塞）不断的去检测按键对应的IO口的电平，这是比较耗费CPU的时间的。如果要检测的更多的话，CPU有可能会导致阻塞。 <strong>中断则使这件事简单化</strong> ，主程序不需要循环不断的去检测按键，当有按键按下的时候，CPU执行被打断，去执行按键处理程序就行了。当没有按键按下的时候，CPU完全可以正常执行代码，丝毫不受任何的影响。</p><ol><li><h3 id="STM32的中断"><a href="#STM32的中断" class="headerlink" title="STM32的中断"></a>STM32的中断</h3></li></ol><p>Cortext-M3内核支持256个中断，其中包含了16个内核中断和240个外部中断，并且具有256级的可编程中断设置。</p><p>一般情况下，芯片厂商会对Cortex-M3的中断进行裁剪。</p><p>STM32有84个中断，包括16个内核中断和68个可屏蔽中断，具有16级可编程的中断优先级。</p><p>STM32F103系列70个中断（咱们目前使用的芯片）有10个内核中断和60个可编程的外部中断。</p><p>下面的列表中，灰色背景的是内部中断（或者异常），其他的为外部中断。</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735625235.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735626236.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735626237.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735626238.png" alt="img"></p><ol><li><h3 id="STM32的中断体系架构"><a href="#STM32的中断体系架构" class="headerlink" title="STM32的中断体系架构"></a>STM32的中断体系架构</h3></li></ol><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735626239.png" alt="img"></p><p><strong>这图已经无敌了！</strong></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735626240.png" alt="img"></p><ol><li><h3 id="NVIC嵌套向量中断控制器"><a href="#NVIC嵌套向量中断控制器" class="headerlink" title="NVIC嵌套向量中断控制器"></a>NVIC嵌套向量中断控制器</h3></li><li><h4 id="NVIC的介绍"><a href="#NVIC的介绍" class="headerlink" title="NVIC的介绍"></a>NVIC的介绍</h4></li></ol><p><strong>NVIC（Nested vectored \</strong>**interrupt**<em>\</em>controller<strong><em>* 嵌套向量中断控制器）和处理器核的接口紧密相连，可以实现</em></strong>*低延迟** **的中断处理和高效地处理中断。** 嵌套向量中断控制器管理着包括内核异常，外部中断等**所有中断**。**NVIC决定哪个中断的处理程序交给*<strong>*CPU</strong> <strong>来执行（秘书，大内总管）</strong> 。</p><p>每一个外部中断都可以被使能或者禁止，并且可以被设置为挂起状态或者清除状态。处理器的中断可以电平的形式的，也可以是脉冲形式的，这样中断控制器就可以处理任何中断源。</p><p>16个IO的中断与PVD(电源电压检测)，RTC(实时时钟)，USB，以太网检测这20个外部中断会通过EXTI来控制，然后交给NVIC。其他中断都是直接交给NVIC来处理。</p><p>NVIC提供了灵活、高效、可扩展的中断处理机制，支持多级优先级、多向中断、嵌套向量中断等特性。当一个中断请求到达时，NVIC会确定其优先级并决定是否应该中断当前执行的程序，以便及时响应和处理该中断 请求。这种设计有助于提高系统的响应速度和可靠性，特别是在需要处理大量中断请求的实时应用程序中。</p><ol><li><h4 id="NVIC原理"><a href="#NVIC原理" class="headerlink" title="NVIC原理"></a>NVIC原理</h4></li></ol><p>如图：</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735626241.png" alt="img"></p><ol><li><h4 id="中断优先级"><a href="#中断优先级" class="headerlink" title="中断优先级"></a>中断优先级</h4></li></ol><p>NVIC为了方便管理中断，可以通过软件给每个中断设置优先级。NVIC用4个位来控制优先级，值小的优先级高。把优先级分为两种：抢占优先级和响应优先级。</p><p>规则：</p><ul><li>优先级值越小，优先级越高。</li><li>如果不设置优先级，则默认优先级为0。</li><li>先比较抢占优先级。抢占优先级高的可以打断抢占优先级低的。</li><li>若抢占优先级一样，再比较响应优先级。<strong>但是响应优先级\</strong>**不会**<em>\</em>导致中断*<em>*<em>嵌套。</em></em></li><li>若<strong>抢占优先级一样</strong>的同时挂起，则优先处理<strong>响应抢占优先级高</strong>的。</li><li>若挂起的优先级（抢占和响应）都一样，则查找中断向量表，值小的先响应（看自然优先级优先级）。</li><li>NVIC对优先级分了5组，在程序中先对中断进行分组，优先级寄存器 IPR 有 8 位，但实际只使用到高 4 位，用于决定抢占优先级、响应优先级的等级。</li><li>具体这 4 位如何切割？由又由 AIRCR 寄存器控制，而且分组只能分一次，若多次分，只有最后一次生效。</li></ul><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735626242.png" alt="img"></p><div class="table-container"><table><thead><tr><th>分组</th><th>抢占优先级</th><th>响应优先级</th></tr></thead><tbody><tr><td>0</td><td>0位 取值范围：0</td><td>4位 取值范围：0-15</td></tr><tr><td>1</td><td>1位 取值范围：0-1</td><td>3位 取值范围：0-7</td></tr><tr><td>2</td><td>2位 取值范围：0-3</td><td>2位 取值范围：0-3</td></tr><tr><td>3</td><td>3位 取值范围：0-7</td><td>1位 取值范围：0-1</td></tr><tr><td>4</td><td>4位 取值范围：0-15</td><td>0位 取值范围：0</td></tr></tbody></table></div><p>抢占优先级和子优先级可通过CubeMX配置。</p><ol><li><h4 id="NVIC常用寄存器"><a href="#NVIC常用寄存器" class="headerlink" title="NVIC常用寄存器"></a>NVIC常用寄存器</h4></li></ol><p>如图：</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735626243.png" alt="img"></p><ol><li><h4 id="NVIC配置思路"><a href="#NVIC配置思路" class="headerlink" title="NVIC配置思路"></a>NVIC配置思路</h4></li></ol><p><strong>设置中断分组 → 设置中断优先级 → 使能中断</strong></p><ol><li><h3 id="中断向量表"><a href="#中断向量表" class="headerlink" title="中断向量表"></a>中断向量表</h3></li></ol><p><strong>STM32的\</strong>*<em>中断向量表<strong> </strong>是一个存储中断处理函数地址的数组，位于Flash区的起始位置。*</em> 每个数组元素对应一个中断源，其地址指向相应的中断服务程序。当中断发生时，处理器会根据中断号查找向量表，然后跳转到 对应的中断服务程序执行。</p><p>中断向量表的主要作用是解决中断函数地址不固定与中断必须跳转到固定地方执行程序之间的矛盾。由于编 译器每次编译都会为中断函数随机分配地址，但硬件要求中断必须跳转到固定的位置。</p><p>因此，中断向量表就作为这样一个固定的地址列表，其中包含了中断函数的地址以及跳转到这些地址的程序。当中断发生时，处理器会跳转到这个固定的中断向量表，然后根据其中的信息跳转到相应的中断处理函数，从而执行中断。</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735626244.png" alt="img"></p><p>注意：</p><p><strong>NVIC（Nested Vectored \</strong>*<em>Interrupt*<em> *<em>Controller*<em> *<em>）*</em> 和</em></em>中断向量表</em></em>不是一回事。NVIC是处理器中的一个组件，负责管理和响应中断请求，包括优先级和中断的嵌套处理。中断向量表则是一个存储中断服务程序（ISR）地址的表格，当中断发生时，NVIC使用这个表来找到对应的ISR。它们配合工作，NVIC通过中断向量表来确定应执行哪个中断处理程序。</p><ol><li><h3 id="中断执行流程"><a href="#中断执行流程" class="headerlink" title="中断执行流程"></a>中断执行流程</h3></li></ol><p>中断发生时，STM32的执行流程如下：</p><p>首先，由外设发出中断请求；然后，处理器暂停当前执行的任务，保护现场（如将当前位置的PC地址压栈）；接着，程序跳转到对应的中断服务程序（ISR）并执行；中断服务程序执行完毕后，恢复现场（如将栈顶的值送回PC）；最后，处理器返回到被中断的位置，继续执行下一个指令。</p><ol><li><h2 id="中断案例：检测按键按下"><a href="#中断案例：检测按键按下" class="headerlink" title="中断案例：检测按键按下"></a>中断案例：检测按键按下</h2></li><li><h3 id="需求描述-3"><a href="#需求描述-3" class="headerlink" title="需求描述"></a>需求描述</h3></li></ol><p>利用外部中断检测按键KEY3，当按键按下，翻转LED1显示。</p><ol><li><h3 id="硬件电路设计-3"><a href="#硬件电路设计-3" class="headerlink" title="硬件电路设计"></a>硬件电路设计</h3></li><li><h4 id="LED1的硬件电路"><a href="#LED1的硬件电路" class="headerlink" title="LED1的硬件电路"></a>LED1的硬件电路</h4></li></ol><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735626245.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735626246.png" alt="img"></p><ol><li><h4 id="KEY的硬件电路"><a href="#KEY的硬件电路" class="headerlink" title="KEY的硬件电路"></a>KEY的硬件电路</h4></li></ol><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735626247.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735626248.png" alt="img"></p><p>说明：</p><ol><li><p>PF10对应的是KEY_3(SW3),我们可以设置PF10的模式为<strong>下拉输入</strong>，则当按键没有按下的时候是低电平，当按键按下的时候是高电平。</p></li><li><p>由于按键没有设置硬件防抖，则我们需要软件设计防抖。一般延时10-15ms即可实现软件防抖。</p></li><li><h3 id="软件设计（寄存器）-1"><a href="#软件设计（寄存器）-1" class="headerlink" title="软件设计（寄存器）"></a>软件设计（寄存器）</h3></li></ol><p>复制我们第一个项目，在第一个项目的基础上修改，可以省去一些配置步骤。</p><p>另外文件如何创建以后不再说明。</p><ol><li><h4 id="main-c-2"><a href="#main-c-2" class="headerlink" title="main.c"></a>main.c</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Driver_LED.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Driver_Key.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123; </span><br><span class="line">    <span class="comment">/* 1. 初始化LED */</span></span><br><span class="line">    Driver_LED_Init();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 2. 初始化按键 */</span></span><br><span class="line">    Driver_Key_Init();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">            </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h4 id="Delay-h-1"><a href="#Delay-h-1" class="headerlink" title="Delay.h"></a>Delay.h</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __delay_h</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __delay_h</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;stm32f10x.h&quot;</span><span class="comment">// Device header</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay_us</span><span class="params">(<span class="type">uint16_t</span> us)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay_ms</span><span class="params">(<span class="type">uint16_t</span> ms)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay_s</span><span class="params">(<span class="type">uint16_t</span> s)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><ol><li><h4 id="Delay-c-1"><a href="#Delay-c-1" class="headerlink" title="Delay.c"></a>Delay.c</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;delay.h&quot;</span><span class="comment">// Device header</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay_us</span><span class="params">(<span class="type">uint16_t</span> us)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 定时器重装值 */</span></span><br><span class="line">    SysTick-&gt;LOAD = <span class="number">72</span> * us;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 清除当前计数值 */</span></span><br><span class="line">    SysTick-&gt;VAL = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*设置内部时钟源（2位-&gt;1）,不需要中断（1位-&gt;0），并启动定时器(0位-&gt;1)*/</span></span><br><span class="line">    SysTick-&gt;CTRL = <span class="number">0x5</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*等待计数到0， 如果计数到0则16位会置为1*/</span>   </span><br><span class="line">    <span class="keyword">while</span> (!(SysTick-&gt;CTRL &amp; SysTick_CTRL_COUNTFLAG));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 关闭定时器 */</span></span><br><span class="line">    SysTick-&gt;CTRL &amp;= ~SysTick_CTRL_ENABLE; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay_ms</span><span class="params">(<span class="type">uint16_t</span> ms)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (ms--)</span><br><span class="line">    &#123;</span><br><span class="line">        Delay_us(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay_s</span><span class="params">(<span class="type">uint16_t</span> s)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (s--)</span><br><span class="line">    &#123;</span><br><span class="line">        Delay_ms(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h4 id="Driver-LED-h-1"><a href="#Driver-LED-h-1" class="headerlink" title="Driver_LED.h"></a>Driver_LED.h</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __DRIVER_LED_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __DRIVER_LED_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED_1 GPIO_ODR_ODR0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED_2 GPIO_ODR_ODR1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED_3 GPIO_ODR_ODR8</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_Init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_On</span><span class="params">(<span class="type">uint32_t</span> led)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_Off</span><span class="params">(<span class="type">uint32_t</span> led)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_Toggle</span><span class="params">(<span class="type">uint32_t</span> led)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_OnAll</span><span class="params">(<span class="type">uint32_t</span> leds[], <span class="type">uint8_t</span> size)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_OffAll</span><span class="params">(<span class="type">uint32_t</span> leds[], <span class="type">uint8_t</span> size)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><ol><li><h4 id="Driver-LED-c-1"><a href="#Driver-LED-c-1" class="headerlink" title="Driver_LED.c"></a>Driver_LED.c</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Driver_LED.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 对LED进行初始化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 打开GPIOA的时钟 */</span></span><br><span class="line">    RCC-&gt;APB2ENR |= RCC_APB2ENR_IOPAEN;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 2. 给用到的端口的所有 PIN (PA0 PA1 PA8) 设置工作模式: 通用推挽输出 MODE:11  CNF:00 */</span></span><br><span class="line">    GPIOA-&gt;CRL |= (GPIO_CRL_MODE0 | GPIO_CRL_MODE1);</span><br><span class="line">    GPIOA-&gt;CRL &amp;= ~(GPIO_CRL_CNF0 | GPIO_CRL_CNF1);</span><br><span class="line"></span><br><span class="line">    GPIOA-&gt;CRH |= GPIO_CRH_MODE8;</span><br><span class="line">    GPIOA-&gt;CRH &amp;= ~GPIO_CRH_CNF8;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 3. 关闭所有灯  */</span></span><br><span class="line">    Driver_LED_Off(LED_1);</span><br><span class="line">    Driver_LED_Off(LED_2);</span><br><span class="line">    Driver_LED_Off(LED_3);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 点亮指定的LED</span></span><br><span class="line"><span class="comment"> * @param &#123;uint32_t&#125; led 要点亮的LED</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_On</span><span class="params">(<span class="type">uint32_t</span> led)</span></span><br><span class="line">&#123;</span><br><span class="line">    GPIOA-&gt;ODR &amp;= ~led;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 关闭指定的LED</span></span><br><span class="line"><span class="comment"> * @param &#123;uint32_t&#125; led 要关闭的LED</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_Off</span><span class="params">(<span class="type">uint32_t</span> led)</span></span><br><span class="line">&#123;</span><br><span class="line">    GPIOA-&gt;ODR |= led;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 翻转LED的状态</span></span><br><span class="line"><span class="comment"> * @param &#123;uint32_t&#125; led 要翻转的LED</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_Toggle</span><span class="params">(<span class="type">uint32_t</span> led)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 读取引脚的电平,如果是1(目前是关闭), 打开, 否则就关闭 */</span></span><br><span class="line">    <span class="keyword">if</span> ((GPIOA-&gt;IDR &amp; led) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Driver_LED_Off(led);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        Driver_LED_On(led);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 打开数组中所有的灯</span></span><br><span class="line"><span class="comment"> * @param &#123;uint32_t&#125; leds 所有灯</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; size 灯的个数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_OnAll</span><span class="params">(<span class="type">uint32_t</span> leds[], <span class="type">uint8_t</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint8_t</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Driver_LED_On(leds[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 关闭数组中所有的灯</span></span><br><span class="line"><span class="comment"> * @param &#123;uint32_t&#125; leds 所有灯</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; size 灯的个数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_OffAll</span><span class="params">(<span class="type">uint32_t</span> leds[], <span class="type">uint8_t</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint8_t</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Driver_LED_Off(leds[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h4 id="Driver-Key-h"><a href="#Driver-Key-h" class="headerlink" title="Driver_Key.h"></a>Driver_Key.h</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __DRIVER_KEY_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __DRIVER_KEY_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_Key_Init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><ol><li><h4 id="Driver-Key-c"><a href="#Driver-Key-c" class="headerlink" title="Driver_Key.c"></a>Driver_Key.c</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Driver_Key.&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Driver_LED.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Delay.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 初始化按键.</span></span><br><span class="line"><span class="comment"> *  1. 给按键对应的io口设置工作模式: 下拉输入</span></span><br><span class="line"><span class="comment"> *  2. 配置复用为外部中断</span></span><br><span class="line"><span class="comment"> *  3. 配置外部中断控制器 EXTI</span></span><br><span class="line"><span class="comment"> *  4. 配置NVIC</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_Key_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 开启时钟 */</span></span><br><span class="line">    <span class="comment">/* 1.1  GPIOF*/</span></span><br><span class="line">    RCC-&gt;APB2ENR |= RCC_APB2ENR_IOPFEN;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 1.2  AFIO*/</span></span><br><span class="line">    RCC-&gt;APB2ENR |= RCC_APB2ENR_AFIOEN;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 2. 配置 PF10为下拉输入: MODE=00 CNF=10  ODR=0 */</span></span><br><span class="line">    GPIOF-&gt;CRH &amp;= ~GPIO_CRH_MODE10;</span><br><span class="line">    GPIOF-&gt;CRH |= GPIO_CRH_CNF10_1;</span><br><span class="line">    GPIOF-&gt;CRH &amp;= ~GPIO_CRH_CNF10_0;</span><br><span class="line">    GPIOF-&gt;ODR &amp;= ~GPIO_ODR_ODR10;<span class="comment">/* ODR为0 下拉输入  ODR为1 上拉输入 */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 3. 配置AFIO 配置PF10引脚为外部中断  EXTICR3  0101 */</span></span><br><span class="line">    AFIO-&gt;EXTICR[<span class="number">2</span>] &amp;= ~AFIO_EXTICR3_EXTI10;</span><br><span class="line">    AFIO-&gt;EXTICR[<span class="number">2</span>] |= AFIO_EXTICR3_EXTI10_PF;</span><br><span class="line">    <span class="comment">/* 使用AFIO配置寄存器（AFIO-&gt;EXTICR[2]）将PF10引脚映射到外部中断线10（EXTI10）。*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 4. 配置EXTI */</span></span><br><span class="line">    <span class="comment">/* 4.1. 配置上升沿触发 RTSR TR10=1*/</span></span><br><span class="line">    EXTI-&gt;RTSR |= EXTI_RTSR_TR10;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 4.2 开启 LINE10, 配置的中断屏蔽寄存器 */</span></span><br><span class="line">    EXTI-&gt;IMR |= EXTI_IMR_MR10;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 5. 配置 NVIC */</span></span><br><span class="line">    <span class="comment">/* 5.1 配置优先级组 (3-7) 配置3表示4个二进制位全部用于表示抢占优先级*/</span></span><br><span class="line">    NVIC_SetPriorityGrouping(<span class="number">3</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 5.2 配置优先级 参数1:中断号*/</span></span><br><span class="line">    NVIC_SetPriority(EXTI15_10_IRQn, <span class="number">3</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 5.3 使能Line10 */</span></span><br><span class="line">    NVIC_EnableIRQ(EXTI15_10_IRQn);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: line 15-10的中断服务函数.</span></span><br><span class="line"><span class="comment"> *  一旦按键下按键1,则会执行一次这个函数</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">EXTI15_10_IRQHandler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 务必一定必须要清除中断标志位 */</span></span><br><span class="line">    EXTI-&gt;PR |= EXTI_PR_PR10;</span><br><span class="line"></span><br><span class="line">    Delay_ms(<span class="number">5</span>);<span class="comment">/* 务必一定必须要清除中断标志位 */</span> </span><br><span class="line">    <span class="keyword">if</span> ((GPIOF-&gt;IDR &amp; GPIO_IDR_IDR10) != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Driver_LED_Toggle(LED_1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3></li></ol><p><strong>为啥\</strong>**LED**<em>\</em>翻转电平这个函数的if条件判断必须要用*<em>*<em>if<strong> </strong> ((<strong> </strong>GPIOA<strong> </strong>-&gt;<strong> </strong>IDR<em>**</em> &amp; led) == *</em></em>*0*<strong><em>)，而不是*</em></strong>if*<em> *<em> ((*<em> *<em>GPIOA*<em> *<em>-&gt;*<em> *</em>IDR\</em></em></em></em> &amp; led) == 1)？</em></em></p><p>举个例子：</p><p><strong>假设 \</strong>**led**<em>\</em> 是一个位掩码**</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> LED1 (1 &lt;&lt; 0)  <span class="comment">// LED1对应GPIOA的第0位</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED2 (1 &lt;&lt; 1)  <span class="comment">// LED2对应GPIOA的第1位</span></span></span><br><span class="line"><span class="comment">// 可能还有其他LED定义...</span></span><br></pre></td></tr></table></figure><p><strong>而 GPIOA-&gt;IDR 是一个输入数据寄存器，其中的每一位对应一个特定的输入引脚的状态（通常是0或1）。</strong></p><p><strong>现在假设 GPIOA-&gt;</strong> <strong>IDR**</strong> 的值是 0b00000011，即第0位和第1位都为1。如果我们使用位掩码 <strong><em>\</em>led**</strong> = LED1 | LED2，即 led = (1 &lt;&lt; 0) | (1 &lt;&lt; 1)，那么 led 的值将是 0b00000011。**</p><p><strong>现在来看 (GPIOA-&gt;</strong> <strong>IDR**</strong> &amp; <strong> </strong>led<strong> </strong>) 的计算：**</p><p><strong>因此，(GPIOA-&gt;</strong> <strong>IDR**</strong> &amp; <strong> </strong>led<strong> </strong>) 的结果将是 0b00000011，而不是单纯的1。**</p><p><strong>如果\</strong>*<em>条件语句<strong> </strong>是 if ((GPIOA-&gt;<strong> </strong>IDR<strong>** &amp; </strong> <strong>led</strong> <em>*) == 1)，那么 (GPIOA-&gt;IDR &amp; led) 的值是 0b00000011，显然不等于1，因此条件将不会成立，这可能与预期的逻辑相悖。</em></em></p><p>因此，<strong>if</strong> <strong> ((</strong> <strong>GPIOA</strong> <strong>-&gt;</strong> <strong>IDR**</strong> &amp; <strong> </strong>led<strong> </strong>) == *<em>\</em>*0**<em>\</em>)是正解！**</p><ol><li><h3 id="软件设计（HAL库）"><a href="#软件设计（HAL库）" class="headerlink" title="软件设计（HAL库）"></a>软件设计（HAL库）</h3></li><li><h4 id="STM32CubeMX配置"><a href="#STM32CubeMX配置" class="headerlink" title="STM32CubeMX配置"></a>STM32CubeMX配置</h4></li></ol><p>配置LED1的PA0引脚。</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735626249.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735626250.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735626251.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735626252.png" alt="img"></p><p>调整滴答定时器和外部中断的优先级。否则使用延时消抖会卡死。</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735626253.png" alt="img"></p><ol><li><h4 id="GPIO初始化代码"><a href="#GPIO初始化代码" class="headerlink" title="GPIO初始化代码"></a>GPIO初始化代码</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">MX_GPIO_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    GPIO_InitTypeDef GPIO_InitStruct = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* GPIO Ports Clock Enable */</span></span><br><span class="line">    __HAL_RCC_GPIOE_CLK_ENABLE();</span><br><span class="line">    __HAL_RCC_GPIOC_CLK_ENABLE();</span><br><span class="line">    __HAL_RCC_GPIOG_CLK_ENABLE();</span><br><span class="line">    __HAL_RCC_GPIOA_CLK_ENABLE();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*Configure GPIO pin Output Level */</span></span><br><span class="line">    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*Configure GPIO pin : PE3 */</span></span><br><span class="line">    GPIO_InitStruct.Pin = GPIO_PIN_3;</span><br><span class="line">    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;</span><br><span class="line">    GPIO_InitStruct.Pull = GPIO_NOPULL;</span><br><span class="line">    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;</span><br><span class="line">    HAL_GPIO_Init(GPIOE, &amp;GPIO_InitStruct);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*Configure GPIO pin : PG6 */</span></span><br><span class="line">    GPIO_InitStruct.Pin = GPIO_PIN_6;</span><br><span class="line">    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;</span><br><span class="line">    GPIO_InitStruct.Pull = GPIO_PULLDOWN;</span><br><span class="line">    HAL_GPIO_Init(GPIOG, &amp;GPIO_InitStruct);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* EXTI interrupt init*/</span></span><br><span class="line">    HAL_NVIC_SetPriority(EXTI9_5_IRQn, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h4 id="添加中断处理函数"><a href="#添加中断处理函数" class="headerlink" title="添加中断处理函数"></a>添加中断处理函数</h4></li></ol><p>当有按键按下的时候，检测到上升沿会执行中断服务函数：EXTI15_10_IRQHandler，内部又会调用HAL库总的外部中断处理函数HAL_GPIO_EXTI_IRQHandler，然后会调用中断回调函数HAL_GPIO_EXTI_Callback，它是一个<strong>弱实现函数</strong>（用<strong>__weak</strong>修饰，如果有新的同名函数实现，则执行时会自动调用新的实现函数），我们重新实现这个函数就可以了。</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532735626254.png" alt="img"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">EXTI15_10_IRQHandler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* USER CODE BEGIN EXTI15_10_IRQn 0 */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* USER CODE END EXTI15_10_IRQn 0 */</span></span><br><span class="line">    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);</span><br><span class="line">    <span class="comment">/* USER CODE BEGIN EXTI15_10_IRQn 1 */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* USER CODE END EXTI15_10_IRQn 1 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_GPIO_EXTI_IRQHandler</span><span class="params">(<span class="type">uint16_t</span> GPIO_Pin)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* EXTI line interrupt detected */</span></span><br><span class="line">    <span class="keyword">if</span> (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != <span class="number">0x00</span>u)</span><br><span class="line">    &#123;</span><br><span class="line">        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);</span><br><span class="line">        HAL_GPIO_EXTI_Callback(GPIO_Pin);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">__weak <span class="type">void</span> <span class="title function_">HAL_GPIO_EXTI_Callback</span><span class="params">(<span class="type">uint16_t</span> GPIO_Pin)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* Prevent unused argument(s) compilation warning */</span></span><br><span class="line">    UNUSED(GPIO_Pin);</span><br><span class="line">    <span class="comment">/* <span class="doctag">NOTE:</span> This function Should not be modified, when the callback is needed,</span></span><br><span class="line"><span class="comment">           the HAL_GPIO_EXTI_Callback could be implemented in the user file</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在gpio.c中实现中断回调函数即可。</span></span><br><span class="line"><span class="comment">/* USER CODE BEGIN 2 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_GPIO_EXTI_Callback</span><span class="params">(<span class="type">uint16_t</span> GPIO_Pin)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (GPIO_Pin == GPIO_PIN_10)</span><br><span class="line">    &#123;</span><br><span class="line">        HAL_Delay(<span class="number">15</span>);<span class="comment">//调整一下SYSTick的优先级，其默认是最低的！</span></span><br><span class="line">        <span class="comment">// 防抖： 延迟15ms之后再次检测是否仍然是高电平，</span></span><br><span class="line">        <span class="keyword">if</span> (HAL_GPIO_ReadPin(GPIOF, GPIO_Pin) == GPIO_PIN_SET)</span><br><span class="line">        &#123;</span><br><span class="line">            HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* USER CODE END 2 */</span></span><br></pre></td></tr></table></figure><ol><li><h1 id="USART串口通讯"><a href="#USART串口通讯" class="headerlink" title="USART串口通讯"></a>USART串口通讯</h1></li><li><h2 id="通讯基础知识"><a href="#通讯基础知识" class="headerlink" title="通讯基础知识"></a>通讯基础知识</h2></li><li><h3 id="串口介绍"><a href="#串口介绍" class="headerlink" title="串口介绍"></a>串口介绍</h3></li></ol><p>串口通讯（Serial Communication）是一种设备间非常常用的串行通讯方式，因为它简单便捷，因此大部分电子设备都支持该通讯方式，电子工程师在调试设备时也经常使用该通讯方式输出调试信息。</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532893314327.png" alt="img"></p><ol><li><h3 id="串口通讯协议"><a href="#串口通讯协议" class="headerlink" title="串口通讯协议"></a>串口通讯协议</h3></li></ol><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532893314328.png" alt="img"></p><p>六个重点：</p><ol><li><strong>波特率</strong></li></ol><p><strong>”波特“（Baudrate），它表示每秒钟传输了多少个码元。**</strong>在二进制的世界码元和位是等价的<strong>**。用每秒传输的比特数表示波特率。</strong></p><p><strong>STM32提供的是**</strong>串口<strong><strong>异步通讯，异步通讯中由于没有时钟信号，所以两个通讯设备之间需要</strong></strong>约定好波特率<strong>**，即每个码元的长度，以便对信号进行解码。常见的波特率为 4800、9600、115200等。</strong></p><ol><li><strong>通讯的起始位</strong></li></ol><p><strong>每开始一次通信时发送方先发出一个逻辑”0”的信号（低电平），表示传输字符的开始。因为总线空闲时为高电平所以开始一次通信时先发送一个明显区别于空闲状态的信号即低电平。</strong></p><ol><li><strong>通讯的停止位</strong></li></ol><p><strong>停止信号可由 0.5、1、1.5 或 2个逻辑1的数据位表示，只要双方约定一致即可。</strong></p><ol><li><strong>空闲位</strong></li></ol><p><strong>串口**</strong>协议规定，当总线处于空闲状态时信号线的状态为‘1’即高电平，表示当前线路上没有数据。**</p><ol><li><strong>有效数据位</strong></li></ol><p><strong>在数据包的起始位之后紧接着的就是要传输的主体数据内容，也称为有效数据，有效数据的长度常被约定为 5、6、7 或8位长。构成一个字符（一般都是8位）。**</strong>先发送最低位<strong><strong>，最后发送最高位（</strong></strong>LSB<strong> </strong>-&gt; MSB），使用低电平表示’0’高电平表示’1’完成数据位的传输。**</p><ol><li><strong>校验位</strong></li></ol><p><strong>数据位加上这一位后，使得“1”的位数应为偶数（偶校验）或奇数（奇校验），以此来校验数据传送的正确性。</strong></p><p><strong>串口**</strong>校验分几种方式：**</p><ol><li><strong>无校验（no</strong> <strong>parity**</strong>）。**</li><li><strong>奇校验（**</strong>odd<strong> </strong>parity<strong><strong>）：如果数据位中“1”的数目是偶数，则</strong></strong>校验位<strong>**为“1”，如果“1”的数目是奇数，校验位为“0”。</strong></li><li><strong>偶校验（even</strong> <strong>parity**</strong>）：如果数据为中“1”的数目是偶数，则<strong><strong>校验位</strong></strong>为“0”，如果为奇数，校验位为“1”。**</li></ol><p><strong>现在的通讯效率非常高，一般也不用**</strong>奇偶校验<strong>**，还有更复杂的检验算法！</strong></p><ol><li><h2 id="USART外设"><a href="#USART外设" class="headerlink" title="USART外设"></a>USART外设</h2></li></ol><p>STM32提供了USART（Universal Synchronous Asynchronous Receiver and Transmitter）通用同步异步收发器。是一个串行通信设备，可以灵活地与外部设备进行全双工数据交换。</p><p>还有UART相比USART去掉了同步通讯功能。</p><p>一共提供5个串口供开发者选择。 </p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532893314329.png" alt="img"></p><p>STM32的USART功能框图如下：</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532893314330.png" alt="img"></p><ol><li>功能引脚说明</li></ol><ul><li><strong>TX：发送数据输出引脚。</strong></li><li><strong>RX：接收数据输入引脚。</strong></li><li><strong>SW_RX：数据接收引脚，只用于单线和**</strong>智能卡<strong>**模式，属于内部引脚，没有具体外部引脚。</strong></li><li><strong>nRTS：请求以发送（**</strong>Request To Send<strong><strong>），n 表示低电平有效。如果使能</strong></strong>RTS<strong><strong>流控制，当 USART接收器准备好接收新数据时就会将nRTS变成低电平；当接收寄存器已满时，nRTS 将被设置为高电平。该</strong></strong>引脚<strong>**只适用于硬件流控制。</strong></li><li><strong>nCTS：清除以发送（**</strong>Clear To Send<strong><strong>），n 表示低电平有效。如果使能</strong></strong>CTS<strong><strong>流控制，发送器在发送下一帧数据之前会检测nCTS引脚，如果为低电平，表示可以发送数据，如果为高电平则在发送完当前</strong></strong>数据帧<strong>**之后停止发送。该引脚只适用于硬件流控制。</strong></li><li><strong>SCLK：发送器时钟输出引脚。这个引脚仅适用于同步模式。</strong></li></ul><ol><li>波特率的产生</li></ol><p>发送器和接收器的波特率是一致的，都是通过设置BRR寄存器来得到。</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532893314331.png" alt="img"></p><p>这里的是给外设的时钟（usart1在APB2上一般是72MHz，usart2，3，4，5在APB1上一般为36MHz）。</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532893314332.png" alt="img"></p><p>假设我们需要的波特率是<strong>115200</strong>，则对应的分频值应该是：<strong>39.0625</strong>，把这个值写入到BRR寄存器中。<strong>39.0625</strong>的小数部分：<strong>0.0625 * 16 = 1</strong>, 整数部分是：<strong>39(0x27)</strong>。</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532893314333.png" alt="img"></p><p>所以写入到BRR寄存器的值是：<strong>0x0271</strong>。</p><ol><li>相关寄存器</li></ol><p>查阅参考手册540页，这里就不一一列举了。</p><ol><li><h2 id="串口案例1：计算机和串口通讯"><a href="#串口案例1：计算机和串口通讯" class="headerlink" title="串口案例1：计算机和串口通讯"></a>串口案例1：计算机和串口通讯</h2></li><li><h3 id="需求描述-4"><a href="#需求描述-4" class="headerlink" title="需求描述"></a>需求描述</h3></li></ol><p>电脑通过串口向STM32发送数据，STM32原封不动的再发送过来。电脑可以借助串口助手来发送或接受数据。</p><ol><li><h3 id="硬件电路设计-4"><a href="#硬件电路设计-4" class="headerlink" title="硬件电路设计"></a>硬件电路设计</h3></li></ol><p>目前很多电脑已经没有串口接口了，为了使用串口，我们自制的下载器STLink2.1拥有USB转串口的功能。</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532893314334.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532893314335.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532893314336.png" alt="img"></p><ol><li><h3 id="软件设计：轮询的方式接收（寄存器）"><a href="#软件设计：轮询的方式接收（寄存器）" class="headerlink" title="软件设计：轮询的方式接收（寄存器）"></a>软件设计：轮询的方式接收（寄存器）</h3></li><li><h4 id="main-c-3"><a href="#main-c-3" class="headerlink" title="main.c"></a>main.c</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Driver_USART.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;string.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> buff[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">uint8_t</span> len = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Driver_USART1_Init();</span><br><span class="line">    <span class="comment">// Driver_USART1_SendChar(&#x27;a&#x27;);</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// uint8_t *str = &quot;Hello atguigu!\r\n&quot;;</span></span><br><span class="line">        <span class="comment">// Driver_USART1_SendString(str, strlen((char *)str));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* uint8_t *str = &quot;尚硅谷\r\n&quot;;</span></span><br><span class="line"><span class="comment">        Driver_USART1_SendString(str, strlen((char *)str));</span></span><br><span class="line"><span class="comment">        Delay_s(1); */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// uint8_t c =  Driver_USART1_ReceiveChar();</span></span><br><span class="line">        <span class="comment">// Driver_USART1_SendChar(c);</span></span><br><span class="line"></span><br><span class="line">        Driver_USART1_ReceiveString(buff, &amp;len);</span><br><span class="line">        Driver_USART1_SendString(buff, len);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h4 id="Driver-USART-h"><a href="#Driver-USART-h" class="headerlink" title="Driver_USART.h"></a>Driver_USART.h</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __DRVIER_USART_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __DRVIER_USART_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_USART1_Init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_USART1_SendChar</span><span class="params">(<span class="type">uint8_t</span> byte)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_USART1_SendString</span><span class="params">(<span class="type">uint8_t</span> *str, <span class="type">uint16_t</span> len)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">Driver_USART1_ReceiveChar</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_USART1_ReceiveString</span><span class="params">(<span class="type">uint8_t</span> buff[], <span class="type">uint8_t</span> *len)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><ol><li><h4 id="Driver-USART-c"><a href="#Driver-USART-c" class="headerlink" title="Driver_USART.c"></a>Driver_USART.c</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Driver_USART.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 初始化串口1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_USART1_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 开启时钟 */</span></span><br><span class="line">    <span class="comment">/* 1.1 串口1外设的时钟 */</span></span><br><span class="line">    RCC-&gt;APB2ENR |= RCC_APB2ENR_USART1EN;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 1.2 GPIO时钟 */</span></span><br><span class="line">    RCC-&gt;APB2ENR |= RCC_APB2ENR_IOPAEN;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 2. 配置GPIO引脚的工作模式  PA9=Tx(复用推挽 CNF=10 MODE=11)  PA10=Rx(浮空输入 CNF=01 MODE=00)*/</span></span><br><span class="line">    GPIOA-&gt;CRH |= GPIO_CRH_CNF9_1;</span><br><span class="line">    GPIOA-&gt;CRH &amp;= ~GPIO_CRH_CNF9_0;</span><br><span class="line">    GPIOA-&gt;CRH |= GPIO_CRH_MODE9;</span><br><span class="line"></span><br><span class="line">    GPIOA-&gt;CRH &amp;= ~GPIO_CRH_CNF10_1;</span><br><span class="line">    GPIOA-&gt;CRH |= GPIO_CRH_CNF10_0;   </span><br><span class="line">    GPIOA-&gt;CRH &amp;= ~GPIO_CRH_MODE10;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 3. 串口的参数配置 */</span>   </span><br><span class="line">    <span class="comment">/* 3.1 配置波特率 115200 */</span></span><br><span class="line">    USART1-&gt;BRR = <span class="number">0x271</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 3.2 配置一个字的长度 8位 */</span></span><br><span class="line">    USART1-&gt;CR1 &amp;= ~USART_CR1_M;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 3.3 配置不需要校验位 */</span></span><br><span class="line">    USART1-&gt;CR1 &amp;= ~USART_CR1_PCE;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 3.4 配置停止位的长度 */</span></span><br><span class="line">    USART1-&gt;CR2 &amp;= ~USART_CR2_STOP;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 3.5 使能接收和发送 */</span></span><br><span class="line">    USART1-&gt;CR1 |= USART_CR1_TE;</span><br><span class="line">    USART1-&gt;CR1 |= USART_CR1_RE;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 4. 使能串口 */</span></span><br><span class="line">    USART1-&gt;CR1 |= USART_CR1_UE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 发送一个字节</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; byte 要发送的字节</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_USART1_SendChar</span><span class="params">(<span class="type">uint8_t</span> byte)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 等待发送寄存器为空 */</span></span><br><span class="line">    <span class="keyword">while</span> ((USART1-&gt;SR &amp; USART_SR_TXE) == <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 2. 数据写出到数据寄存器 */</span></span><br><span class="line">    USART1-&gt;DR = byte;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 发送一个字符串</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; *str 要发送的字符串</span></span><br><span class="line"><span class="comment"> * @param &#123;uint16_t&#125; len 字符串中字节的长度</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_USART1_SendString</span><span class="params">(<span class="type">uint8_t</span> *str, <span class="type">uint16_t</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint16_t</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Driver_USART1_SendChar(str[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 接收一个字节的数据</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125; 接收到的字节</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">Driver_USART1_ReceiveChar</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 等待数据寄存器非空 */</span></span><br><span class="line">    <span class="keyword">while</span> ((USART1-&gt;SR &amp; USART_SR_RXNE) == <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> USART1-&gt;DR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 接收变长数据.接收到的数据存入到 buff中</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; buff 存放接收到的数据</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; *len 存放收到的数据的字节的长度</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_USART1_ReceiveString</span><span class="params">(<span class="type">uint8_t</span> buff[], <span class="type">uint8_t</span> *len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint8_t</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 等待接收非空</span></span><br><span class="line">        <span class="keyword">while</span> ((USART1-&gt;SR &amp; USART_SR_RXNE) == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//在等待期间, 判断是否收到空闲帧</span></span><br><span class="line">            <span class="keyword">if</span> (USART1-&gt;SR &amp; USART_SR_IDLE)</span><br><span class="line">            &#123;</span><br><span class="line">                *len = i;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        buff[i] = USART1-&gt;DR;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h3 id="软件设计：中断的方式接收（寄存器）"><a href="#软件设计：中断的方式接收（寄存器）" class="headerlink" title="软件设计：中断的方式接收（寄存器）"></a>软件设计：中断的方式接收（寄存器）</h3></li></ol><p>USART提供了多个中断事件。</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532893314337.png" alt="img"></p><ol><li><h4 id="Driver-USART-c-1"><a href="#Driver-USART-c-1" class="headerlink" title="Driver_USART.c"></a>Driver_USART.c</h4></li></ol><p>添加中断相关代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Driver_USART.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 初始化串口1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_USART1_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 开启时钟 */</span></span><br><span class="line">    <span class="comment">/* 1.1 串口1外设的时钟 */</span></span><br><span class="line">    RCC-&gt;APB2ENR |= RCC_APB2ENR_USART1EN;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 1.2 GPIO时钟 */</span></span><br><span class="line">    RCC-&gt;APB2ENR |= RCC_APB2ENR_IOPAEN;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 2. 配置GPIO引脚的工作模式  PA9=Tx(复用推挽 CNF=10 MODE=11)  PA10=Rx(浮空输入 CNF=01 MODE=00)*/</span></span><br><span class="line">    GPIOA-&gt;CRH |= GPIO_CRH_CNF9_1;</span><br><span class="line">    GPIOA-&gt;CRH &amp;= ~GPIO_CRH_CNF9_0;</span><br><span class="line">    GPIOA-&gt;CRH |= GPIO_CRH_MODE9;</span><br><span class="line"></span><br><span class="line">    GPIOA-&gt;CRH &amp;= ~GPIO_CRH_CNF10_1;</span><br><span class="line">    GPIOA-&gt;CRH |= GPIO_CRH_CNF10_0;   </span><br><span class="line">    GPIOA-&gt;CRH &amp;= ~GPIO_CRH_MODE10;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 3. 串口的参数配置 */</span>   </span><br><span class="line">    <span class="comment">/* 3.1 配置波特率 115200 */</span></span><br><span class="line">    USART1-&gt;BRR = <span class="number">0x271</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 3.2 配置一个字的长度 8位 */</span></span><br><span class="line">    USART1-&gt;CR1 &amp;= ~USART_CR1_M;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 3.3 配置不需要校验位 */</span></span><br><span class="line">    USART1-&gt;CR1 &amp;= ~USART_CR1_PCE;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 3.4 配置停止位的长度 */</span></span><br><span class="line">    USART1-&gt;CR2 &amp;= ~USART_CR2_STOP;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 3.5 使能接收和发送 */</span></span><br><span class="line">    USART1-&gt;CR1 |= USART_CR1_TE;</span><br><span class="line">    USART1-&gt;CR1 |= USART_CR1_RE;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 4. 使能串口 */</span></span><br><span class="line">    USART1-&gt;CR1 |= USART_CR1_UE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 发送一个字节</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; byte 要发送的字节</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_USART1_SendChar</span><span class="params">(<span class="type">uint8_t</span> byte)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 等待发送寄存器为空 */</span></span><br><span class="line">    <span class="keyword">while</span> ((USART1-&gt;SR &amp; USART_SR_TXE) == <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 2. 数据写出到数据寄存器 */</span></span><br><span class="line">    USART1-&gt;DR = byte;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 发送一个字符串</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; *str 要发送的字符串</span></span><br><span class="line"><span class="comment"> * @param &#123;uint16_t&#125; len 字符串中字节的长度</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_USART1_SendString</span><span class="params">(<span class="type">uint8_t</span> *str, <span class="type">uint16_t</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint16_t</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Driver_USART1_SendChar(str[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 接收一个字节的数据</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125; 接收到的字节</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">Driver_USART1_ReceiveChar</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 等待数据寄存器非空 */</span></span><br><span class="line">    <span class="keyword">while</span> ((USART1-&gt;SR &amp; USART_SR_RXNE) == <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> USART1-&gt;DR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 接收变长数据.接收到的数据存入到buff中</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; buff 存放接收到的数据</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; *len 存放收到的数据的字节的长度</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_USART1_ReceiveString</span><span class="params">(<span class="type">uint8_t</span> buff[], <span class="type">uint8_t</span> *len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint8_t</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 等待接收非空</span></span><br><span class="line">        <span class="keyword">while</span> ((USART1-&gt;SR &amp; USART_SR_RXNE) == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//在等待期间, 判断是否收到空闲帧</span></span><br><span class="line">            <span class="keyword">if</span> (USART1-&gt;SR &amp; USART_SR_IDLE)</span><br><span class="line">            &#123;</span><br><span class="line">                *len = i;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        buff[i] = USART1-&gt;DR;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 缓冲接收到的数据 */</span></span><br><span class="line"><span class="type">uint8_t</span> buff[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="comment">/* 存储接收到的字节的长度 */</span></span><br><span class="line"><span class="type">uint8_t</span> len = <span class="number">0</span>;</span><br><span class="line"><span class="type">uint8_t</span> isToSend = <span class="number">0</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">USART1_IRQHandler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 数据接收寄存器非空 */</span></span><br><span class="line">    <span class="keyword">if</span> (USART1-&gt;SR &amp; USART_SR_RXNE)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 对USART_DR的读操作可以将接收非空的中断位清零。 所以不用单独清除了.</span></span><br><span class="line">        <span class="comment">//USART1-&gt;SR &amp;= ~USART_SR_RXNE;</span></span><br><span class="line">        buff[len] = USART1-&gt;DR;</span><br><span class="line">        len++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (USART1-&gt;SR &amp; USART_SR_IDLE)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* 清除空闲中断标志位: 先读sr,再读dr.就可以实现清除了 */</span></span><br><span class="line">        USART1-&gt;SR;</span><br><span class="line">        USART1-&gt;DR;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* 变长数据接收完毕 */</span></span><br><span class="line">        <span class="comment">//Driver_USART1_SendString(buff, len);</span></span><br><span class="line">        </span><br><span class="line">        isToSend = <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* 把接收字节的长度清0 */</span></span><br><span class="line">        <span class="comment">// len = 0;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h4 id="main-c-4"><a href="#main-c-4" class="headerlink" title="main.c"></a>main.c</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Driver_USART.h&quot;</span></span></span><br><span class="line"><span class="comment">/* 缓冲接收到的数据 */</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">uint8_t</span> buff[<span class="number">100</span>];</span><br><span class="line"><span class="comment">/* 存储接收到的字节的长度 */</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">uint8_t</span> len;</span><br><span class="line"><span class="keyword">extern</span> <span class="type">uint8_t</span> isToSend;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Driver_USART1_Init();</span><br><span class="line">    Driver_USART1_SendString(<span class="string">&quot;abc&quot;</span>, <span class="number">3</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(isToSend)</span><br><span class="line">        &#123;</span><br><span class="line">            Driver_USART1_SendString(buff, len);</span><br><span class="line">            isToSend = <span class="number">0</span>;</span><br><span class="line">            len = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h3 id="软件设计（HAL库）-1"><a href="#软件设计（HAL库）-1" class="headerlink" title="软件设计（HAL库）"></a>软件设计（HAL库）</h3></li><li><h4 id="使用STM32CubeMx搭建工程"><a href="#使用STM32CubeMx搭建工程" class="headerlink" title="使用STM32CubeMx搭建工程"></a>使用STM32CubeMx搭建工程</h4></li><li><p>基本配置</p></li></ol><p>选择芯片，配置debug，配置时钟参考前面的内容。</p><ol><li>配置串口</li></ol><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532893314338.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532893314339.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532893315340.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532893315341.png" alt="img"></p><ol><li>添加我们的代码</li></ol><p>时钟初始化，串口初始化工具已经帮我们完成了。我们可以轮询方式收发数据，也可以采用中断的方式收发数据。 </p><ol><li><h4 id="轮询的方式收发"><a href="#轮询的方式收发" class="headerlink" title="轮询的方式收发"></a>轮询的方式收发</h4></li></ol><p><strong>轮询**</strong>的方式就是在循环中一直检测<strong><strong>串口</strong></strong>，是否有数据进来，如果有就读进来，然后再原封不动的发出。**</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint8_t</span> buff[<span class="number">10</span>];</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_Init();</span><br><span class="line">    SystemClock_Config();</span><br><span class="line">    MX_GPIO_Init();</span><br><span class="line">    MX_USART1_UART_Init();</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* 从串口读取数据：参数1 指定的串口 参数2：存储读取到的数据 参数3：一接收多少条数据 */</span></span><br><span class="line">        <span class="keyword">if</span> (HAL_UART_Receive(&amp;huart1, buff, <span class="number">10</span>, HAL_MAX_DELAY) == HAL_OK)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 把收到的数据原封不动的发出去</span></span><br><span class="line">            HAL_UART_Transmit(&amp;huart1, buff, <span class="number">10</span>, HAL_MAX_DELAY);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>轮询方式的一些问题：轮询模式使用起来最简单，但是会占用大量的CPU时间，在等待接收和等待发送完毕时，CPU不能去做别的运算，只能在这里空等，运行的效率很低。</p><ol><li><h4 id="中断的方式接收：定长数据"><a href="#中断的方式接收：定长数据" class="headerlink" title="中断的方式接收：定长数据"></a>中断的方式接收：定长数据</h4></li></ol><p><strong>stm32f1xx_hal_uart.c</strong>中关于中断回调函数的描述。</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532893315342.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532893315343.png" alt="img"></p><p>这里函数用了__weak 修饰，当有其他实现的时候，编译器会忽略这里的。我们只要在这个函数中写收发逻辑就行了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint8_t</span> buff[<span class="number">1</span>];    <span class="comment">// 接收缓冲， 一次接受一个字节的数据</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_UART_RxCpltCallback</span><span class="params">(UART_HandleTypeDef *huart)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (huart1.Instance == USART1)</span><br><span class="line">    &#123;</span><br><span class="line">        HAL_UART_Transmit(&amp;huart1, buff, <span class="number">1</span>, HAL_MAX_DELAY);</span><br><span class="line">        HAL_UART_Receive_IT(&amp;huart1, buff, <span class="number">1</span>); <span class="comment">// 继续接收</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_Init();</span><br><span class="line">    MX_GPIO_Init();</span><br><span class="line">    MX_USART1_UART_Init();   </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 用中断的方式接收一个字节的数据 */</span></span><br><span class="line">    HAL_UART_Receive_IT(&amp;huart1, buff, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h4 id="中断的方式接收：变长数据"><a href="#中断的方式接收：变长数据" class="headerlink" title="中断的方式接收：变长数据"></a>中断的方式接收：变长数据</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint8_t</span> rxBuff[<span class="number">1000</span>]; <span class="comment">// 接收缓冲区</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// size 实际接收的数据的长度</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_UARTEx_RxEventCallback</span><span class="params">(UART_HandleTypeDef *huart, <span class="type">uint16_t</span> Size)</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (huart1.Instance == USART1)</span><br><span class="line">    &#123;</span><br><span class="line">        HAL_UART_Transmit(&amp;huart1, rxBuff, Size, <span class="number">100</span>);</span><br><span class="line">        HAL_UARTEx_ReceiveToIdle_IT(&amp;huart1, rxBuff, <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_Init();</span><br><span class="line">    SystemClock_Config();</span><br><span class="line">    MX_GPIO_Init();</span><br><span class="line">    MX_USART1_UART_Init();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 当接收到1000个字符或者碰到空闲帧, 则接收结束 */</span></span><br><span class="line">    HAL_UARTEx_ReceiveToIdle_IT(&amp;huart1, rxBuff, <span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h2 id="串口案例2：重定向printf"><a href="#串口案例2：重定向printf" class="headerlink" title="串口案例2：重定向printf"></a>串口案例2：重定向printf</h2></li><li><h3 id="需求描述-5"><a href="#需求描述-5" class="headerlink" title="需求描述"></a>需求描述</h3></li></ol><p>C语言中经常使用printf来输出调试信息，打印到屏幕（控制台）。由于在单片机中没有屏幕，但是我们可以重定向printf，把数据<strong>打印到**</strong>串口**，从而在电脑端接收调试信息。这是除了debug外，另外一个非常有效的调试手段。</p><ol><li><h3 id="软件设计（寄存器）-2"><a href="#软件设计（寄存器）-2" class="headerlink" title="软件设计（寄存器）"></a>软件设计（寄存器）</h3></li><li><h4 id="Driver-USART-c-2"><a href="#Driver-USART-c-2" class="headerlink" title="Driver_USART.c"></a>Driver_USART.c</h4></li></ol><p>添加<strong>fputc</strong>函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">fputc</span><span class="params">(<span class="type">int</span> c, FILE *file)</span></span><br><span class="line">&#123;</span><br><span class="line">    Driver_USART1_SendChar(c);</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 当调用printf的时候,会自动调用这个方法来执行,只需要调用一个通过串口发送字符的函数</span></span><br></pre></td></tr></table></figure><ol><li><h4 id="main-c-5"><a href="#main-c-5" class="headerlink" title="main.c"></a>main.c</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Driver_USART.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Delay.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Driver_USART1_Init();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;hello world\r\n&quot;</span>);</span><br><span class="line">        Delay_ms(<span class="number">500</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h4 id="Keil设置"><a href="#Keil设置" class="headerlink" title="Keil设置"></a>Keil设置</h4></li></ol><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532893315344.png" alt="img"></p><ol><li><h3 id="软件设计（HAL库）-2"><a href="#软件设计（HAL库）-2" class="headerlink" title="软件设计（HAL库）"></a>软件设计（HAL库）</h3></li><li><h4 id="usart-h-代码清单"><a href="#usart-h-代码清单" class="headerlink" title="usart.h 代码清单"></a>usart.h 代码清单</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;main.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">extern</span> UART_HandleTypeDef huart1;</span><br><span class="line"><span class="type">void</span> <span class="title function_">MX_USART1_UART_Init</span><span class="params">(<span class="type">void</span>)</span>;</span><br></pre></td></tr></table></figure><ol><li><h4 id="usart-c-代码清单"><a href="#usart-c-代码清单" class="headerlink" title="usart.c 代码清单"></a>usart.c 代码清单</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">fputc</span><span class="params">(<span class="type">int</span> ch, FILE *f)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 发送一个字节数据到串口DEBUG_USART */</span></span><br><span class="line">    HAL_UART_Transmit(&amp;huart1, (<span class="type">uint8_t</span> *)&amp;ch, <span class="number">1</span>, <span class="number">1000</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> (ch);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h1 id="I2C-通讯"><a href="#I2C-通讯" class="headerlink" title="I2C 通讯"></a>I2C 通讯</h1></li><li><h2 id="I2C基础知识"><a href="#I2C基础知识" class="headerlink" title="I2C基础知识"></a>I2C基础知识</h2></li></ol><p>I2C 通讯协议（Inter-Integrated Circuit）是由Phiilps公司开发的，由于它引脚少，硬件实现简单，可扩展性强，不需要 USART、CAN等通讯协议的外部收发设备，现在被广泛地使用在系统内多个集成电路（IC）间的通讯。</p><p>I2C（Inter-Integrated Circuit）集成电路总线，是一种同步 串行 半双工通信总线。通信协议中，SDA（串行数据线）和SCL（串行时钟线）是两个主要的信号线。因为有SCL时钟线所以当然是同步的，只有一根SDA线且不可同时收发，I2C总线是一个多主设备、多从设备的总线，通常由主设备（比如微控制器）发起通信，而从设备（比如EEPROM芯片）响应。</p><p>I2C总线采用开漏（open-drain）或开集电极（open-collector）驱动方式，这意味着设备只能将信号线拉低，而不能主动拉高。相反，电平被拉高是通过上拉电阻实现的，是一种简单的双向两线制总线协议标准，支持<strong>同步串行**</strong>半双工**通讯。</p><p>I2C 通讯设备之间的常用连接方式：</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532893315345.png" alt="img"></p><p><a href="https://xiza3i1x6q4.feishu.cn/sync/J3r7d3lz1s5Mqjb5aGDcqo5pnFd">https://xiza3i1x6q4.feishu.cn/sync/J3r7d3lz1s5Mqjb5aGDcqo5pnFd</a></p><p>在I²C通信协议中，SDA（Serial Data Line）的电平状态确实用来表示通信的控制权归属。拉高（置高电平）SDA通常表示的是主设备（Master）释放了总线的控制权，让从设备（Slave）有机会在总线上发送数据或者响应主设备的请求。</p><p>1.开漏结构：<strong>I²C总线通常是开漏结构</strong>，这意味着在不同的设备之间，SDA和SCL都会被外部上拉电阻拉高，而设备在通信时通过拉低SDA和SCL来进行通信。因此，<strong>释放控制权通常是通过主设备放弃拉低SDA线实现的，SDA线由上拉电阻拉到高电平</strong>。 2.从设备响应：当主设备完成其通信操作后，它将SDA线拉高，这样从设备便能够知道主设备已经完成了其发送的数据或者请求。从设备此时可以在总线上发送数据回复或者等待下一次主设备的指令。 3.协议规定：根据I²C协议，<strong>SDA的高电平表示空闲状态或者主设备释放总线的意图</strong>。从设备检测到SDA被拉高后，会知道主设备当前没有在总线上发送数据或者请求，因此从设备有机会接管总线并发送数据或响应。</p><p>总之，SDA被拉高表示主设备不再活跃地发送数据或命令，从而让从设备可以在总线上接管，发送数据或者响应主设备。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ol><li>总线空闲状态：<ol><li>当总线空闲时，SDA和SCL都被上拉电阻拉高，表示没有设备在使用总线。这是总线的默认状态。</li></ol></li><li>启动和停止条件：<ol><li>I2C通信开始时，主设备会发出一个启动条件（Start Condition），这表现为SDA从高到低的跳变，而SCL保持高电平。</li><li>通信结束时，主设备会发出一个停止条件（Stop Condition），这表现为SDA从低到高的跳变，而SCL保持高电平。</li></ol></li><li>数据传输：<ol><li>在数据传输过程中，无论是主设备还是从设备，都在SCL时钟周期内驱动SDA线进行数据传输。当某个设备需要发送数据时，它会控制SDA线，在SCL的上升沿之前设置好数据。</li><li>主设备在发送完地址后，根据LSB的值（LSB是用来指示数据传输的读写方向的）继续进行数据传输。</li><li>如果是写操作，主设备会发送数据字节到从设备，然后等待从设备的确认信号。</li><li>如果是读操作，从设备要响应数据。在这种情况下，主设备释放SDA线，让SDA通过上拉电阻恢复到高电平，然后从设备在接下来的时钟周期内驱动SDA线，以发送数据。主设备会接收从设备发送的数据，并发送确认（ACK）或非确认（NACK）信号以告知从设备是否需要继续发送数据。</li></ol></li></ol><p>因为SDA被设计成开漏驱动，任何设备都只能拉低SDA，而不能直接拉高，这样也避免了多个设备同时驱动SDA线时的电平冲突，这样的一种机制保证了I2C总线上设备之间的协调和无冲突通信。</p><h2 id="通信方向"><a href="#通信方向" class="headerlink" title="通信方向"></a>通信方向</h2><ul><li>LSB为0时，表示主设备要向从设备写入数据。</li><li>LSB为1时，表示主设备要从从设备读取数据。</li></ul><p>主设备发送数据给从设备（写操作）</p><ul><li>SDA控制：主设备控制SDA线发送地址和数据字节。</li><li>SCL控制：主设备控制SCL线产生时钟信号，确定数据传输的时序。</li></ul><p>从设备发送数据给主设备（读操作）</p><ul><li>SDA控制：从设备控制SDA线发送数据字节。</li><li>SCL控制：主设备控制SCL线产生时钟信号，确定数据传输的时序。</li></ul><p>总的来说，主设备负责控制总线的时钟和发送地址/数据，而从设备负责在主设备的控制下发送数据。</p><ol><li><h2 id="I2C案例1：软件模拟I2C"><a href="#I2C案例1：软件模拟I2C" class="headerlink" title="I2C案例1：软件模拟I2C"></a>I2C案例1：软件模拟I2C</h2></li></ol><p>EEPROM芯片最常用的通讯方式就是I2C协议。我们使用的芯片是M24C02。</p><ol><li><h3 id="需求描述-6"><a href="#需求描述-6" class="headerlink" title="需求描述"></a>需求描述</h3></li></ol><p>我们向E2PROM写入一段数据，再读取出来，最后发送到串口，核对是否读写正确。</p><ol><li><h3 id="硬件电路设计-5"><a href="#硬件电路设计-5" class="headerlink" title="硬件电路设计"></a>硬件电路设计</h3></li><li><h4 id="硬件原理图"><a href="#硬件原理图" class="headerlink" title="硬件原理图"></a>硬件原理图</h4></li></ol><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532893315346.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532893315347.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532893315348.png" alt="img"></p><ol><li><h4 id="M24C02简介"><a href="#M24C02简介" class="headerlink" title="M24C02简介"></a>M24C02简介</h4></li><li><p>M24C02的SCL及SDA 引脚连接到了STM32对应的I2C引脚中，结合上拉电阻，构成了I2C通讯总线，它们通过I2C总线交互。</p></li><li>E2PROM芯片的设备地址一共有7位，其中高4位固定为：1010，低3位则由E3/E2/E1信号线的电平决定E2PROM设备地址。</li><li>R/W是读写方向控制位，与地址无关。</li></ol><p>在我们电路图中由于E1/E2/E3均是接的低电平，所以它的地址是1010000即0x50。</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532893315349.png" alt="img"></p><p>由于I2C通讯时常常是地址跟读写方向连在一起构成一个8位数，且当R/W位为0 时，表示写方向，所以加上7位地址，其值为“0xA0”，常称该值为I2C设备的“写地址”。</p><p>当R/W位为1时，表示读方向，加上7位地址，其值为“0xA1”，常称该值为“读地址”。</p><ol><li><h3 id="操作时序图整理"><a href="#操作时序图整理" class="headerlink" title="操作时序图整理"></a>操作时序图整理</h3></li><li><h4 id="起始和停止信号"><a href="#起始和停止信号" class="headerlink" title="起始和停止信号"></a>起始和停止信号</h4></li></ol><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532893315350.png" alt="img"></p><ol><li><h4 id="数据有效性"><a href="#数据有效性" class="headerlink" title="数据有效性"></a>数据有效性</h4></li></ol><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532893315351.png" alt="img"></p><ol><li><h4 id="响应和非响应"><a href="#响应和非响应" class="headerlink" title="响应和非响应"></a>响应和非响应</h4></li></ol><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532893315352.png" alt="img"></p><ol><li><h4 id="写入一个字节时序"><a href="#写入一个字节时序" class="headerlink" title="写入一个字节时序"></a>写入一个字节时序</h4></li></ol><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532893315353.png" alt="img"></p><ol><li><h4 id="读出一个字节时序"><a href="#读出一个字节时序" class="headerlink" title="读出一个字节时序"></a>读出一个字节时序</h4></li></ol><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532893315354.png" alt="img"></p><ol><li><h4 id="单次写入多个字节时序"><a href="#单次写入多个字节时序" class="headerlink" title="单次写入多个字节时序"></a>单次写入多个字节时序</h4></li></ol><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532893315355.png" alt="img"></p><p>一次性写入多个字节，也叫页写入（Page Write）。AT24C02每页只有16个字节，每次只能写入单独的一个页中，所以一次性最多只能写入16个字节。当一次性写入超过16个字节的时候，则超过的部分会重新从这页的首地址重新写入。</p><ol><li><h4 id="单次读出多个字节时序"><a href="#单次读出多个字节时序" class="headerlink" title="单次读出多个字节时序"></a>单次读出多个字节时序</h4></li></ol><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532893315356.png" alt="img"></p><p><strong>读出多个字节的时候没有限制，可以读出任意多个。</strong></p><ol><li><h3 id="软件设计（寄存器）-3"><a href="#软件设计（寄存器）-3" class="headerlink" title="软件设计（寄存器）"></a>软件设计（寄存器）</h3></li><li><h4 id="main-c-6"><a href="#main-c-6" class="headerlink" title="main.c"></a>main.c</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Driver_USART.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Inf_W24C02.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Driver_USART1_Init();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;尚硅谷 I2C 软件模式实验开始....\r\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    Inf_W24C02_Init();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//写数据</span></span><br><span class="line">    Inf_W24C02_WriteByte(<span class="number">0x00</span>, <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    Inf_W24C02_WriteByte(<span class="number">0x01</span>, <span class="string">&#x27;b&#x27;</span>);</span><br><span class="line">    Inf_W24C02_WriteByte(<span class="number">0x02</span>, <span class="string">&#x27;c&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//读数据</span></span><br><span class="line">    <span class="type">uint8_t</span> byte1 = Inf_W24C02_ReadByte(<span class="number">0x00</span>);</span><br><span class="line">    <span class="type">uint8_t</span> byte2 = Inf_W24C02_ReadByte(<span class="number">0x01</span>);</span><br><span class="line">    <span class="type">uint8_t</span> byte3 = Inf_W24C02_ReadByte(<span class="number">0x02</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c\r\n&quot;</span>, byte1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c\r\n&quot;</span>, byte2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c\r\n&quot;</span>, byte3);</span><br><span class="line"></span><br><span class="line">    Inf_W24C02_WriteBytes(<span class="number">0x00</span>, <span class="string">&quot;123456&quot;</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> buff[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    Inf_W24C02_ReadBytes(<span class="number">0x00</span>, buff, <span class="number">6</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\r\n&quot;</span>, buff);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清零缓冲区</span></span><br><span class="line">    <span class="built_in">memset</span>(buff, <span class="number">0</span>, <span class="keyword">sizeof</span>(buff));</span><br><span class="line">    </span><br><span class="line">    Inf_W24C02_WriteBytes(<span class="number">0x00</span>, <span class="string">&quot;0123456789abcdefghijk&quot;</span>, <span class="number">21</span>);</span><br><span class="line">    Inf_W24C02_ReadBytes(<span class="number">0x00</span>, buff, <span class="number">21</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\r\n&quot;</span>, buff);</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h4 id="Driver-I2C2-h"><a href="#Driver-I2C2-h" class="headerlink" title="Driver_I2C2.h"></a>Driver_I2C2.h</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __DRIVER_I2C2_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __DRIVER_I2C2_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Driver_USART.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ACK 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NACK 1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SCL_HIGH  (GPIOB-&gt;ODR |= GPIO_ODR_ODR10)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SCL_LOW  (GPIOB-&gt;ODR &amp;= ~GPIO_ODR_ODR10)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SDA_HIGH  (GPIOB-&gt;ODR |= GPIO_ODR_ODR11)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SDA_LOW  (GPIOB-&gt;ODR &amp;= ~GPIO_ODR_ODR11)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> READ_SDA (GPIOB-&gt;IDR &amp; GPIO_IDR_IDR11)</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_I2C2_Init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_I2C2_Start</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_I2C2_Stop</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_I2C2_Ack</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_I2C2_NAck</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">Driver_I2C2_WaitAck</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_I2C_SendByte</span><span class="params">(<span class="type">uint8_t</span> byte)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">Driver_I2C_ReadByte</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><ol><li><h4 id="Driver-I2C2-c"><a href="#Driver-I2C2-c" class="headerlink" title="Driver_I2C2.c"></a>Driver_I2C2.c</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Driver_I2C2.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Delay.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> I2C_DELAY Delay_us(10)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 初始化</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_I2C2_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/*  PB10-&gt;SCL</span></span><br><span class="line"><span class="comment">        PB11-&gt;SDA</span></span><br><span class="line"><span class="comment">        开漏输出: 既可以用于输出也可以输入. 外界要有上拉电阻.</span></span><br><span class="line"><span class="comment">        用于输入的时候,最好先输出一个1,把线的控制权交给外界.</span></span><br><span class="line"><span class="comment">        MODE=11 CNF=01 */</span></span><br><span class="line">    RCC-&gt;APB2ENR |= RCC_APB2ENR_IOPBEN;</span><br><span class="line"></span><br><span class="line">    GPIOB-&gt;CRH |= (GPIO_CRH_MODE10 | GPIO_CRH_MODE11 | GPIO_CRH_CNF10_0 | GPIO_CRH_CNF11_0);</span><br><span class="line">    GPIOB-&gt;CRH &amp;= ~(GPIO_CRH_CNF10_1 | GPIO_CRH_CNF11_1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 起始信号</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_I2C2_Start</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 拉高sda和scl */</span></span><br><span class="line">    SDA_HIGH;</span><br><span class="line">    SCL_HIGH;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 2. 延时 */</span></span><br><span class="line">    I2C_DELAY;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 3. 拉低sda */</span></span><br><span class="line">    SDA_LOW;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 4. 延时 */</span></span><br><span class="line">    I2C_DELAY;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 停止信号</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_I2C2_Stop</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. scl 拉高 sda拉低 */</span></span><br><span class="line">    SCL_HIGH;</span><br><span class="line">    SDA_LOW;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 2. 延时 */</span></span><br><span class="line">    I2C_DELAY;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 3. 拉高sda */</span></span><br><span class="line">    SDA_HIGH;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 4.  延时 */</span></span><br><span class="line">    I2C_DELAY;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 接收方产生应答信号</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_I2C2_Ack</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 拉高sda和拉低scl */</span></span><br><span class="line">    SDA_HIGH;</span><br><span class="line">    SCL_LOW;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 2. 延时 */</span></span><br><span class="line">    I2C_DELAY;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 3. sda拉低 */</span></span><br><span class="line">    SDA_LOW;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 4. 延时 */</span></span><br><span class="line">    I2C_DELAY;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 5. scl拉高 */</span></span><br><span class="line">    SCL_HIGH;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 6. 延时 */</span></span><br><span class="line">    I2C_DELAY;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 7. scl拉低 */</span></span><br><span class="line">    SCL_LOW;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 8. 延时 */</span></span><br><span class="line">    I2C_DELAY;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 9. sda 拉高 */</span></span><br><span class="line">    SDA_HIGH;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 10. 延时 */</span></span><br><span class="line">    I2C_DELAY;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 接收方产生非应答信号</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_I2C2_NAck</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 拉高sda和拉低scl */</span></span><br><span class="line">    SDA_HIGH;</span><br><span class="line">    SCL_LOW;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 2. 延时 */</span></span><br><span class="line">    I2C_DELAY;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 3. scl拉高 */</span></span><br><span class="line">    SCL_HIGH;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 4. 延时 */</span></span><br><span class="line">    I2C_DELAY;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 5. scl拉低*/</span></span><br><span class="line">    SCL_LOW;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 6. 延时 */</span></span><br><span class="line">    I2C_DELAY;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 等待接收方法的应答</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125; 应答或非应答</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">Driver_I2C2_WaitAck</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 把sda拉高, sda的主动权交给对方(e2prom芯片) </span></span><br><span class="line"><span class="comment">    等待应答的过程是主机操作时钟线scl，因此之后就读sda</span></span><br><span class="line"><span class="comment">    对应引脚的ODR寄存器 获得高低电平来判断应答非应答 */</span></span><br><span class="line">    SDA_HIGH;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 2. scl拉低  */</span></span><br><span class="line">    SCL_LOW;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 3. 延时 */</span></span><br><span class="line">    I2C_DELAY;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 4. 拉高scl */</span></span><br><span class="line">    SCL_HIGH;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 5. 延时 */</span></span><br><span class="line">    I2C_DELAY;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 6. 读取sda的电平 */</span></span><br><span class="line">    <span class="type">uint8_t</span> ack = ACK;</span><br><span class="line">    <span class="keyword">if</span> (READ_SDA)</span><br><span class="line">    &#123;</span><br><span class="line">        ack = NACK;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 7. 拉低scl */</span></span><br><span class="line">    SCL_LOW;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 8. 延时 */</span></span><br><span class="line">    I2C_DELAY;</span><br><span class="line">    <span class="keyword">return</span> ack;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 发送一个字节的数据</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; byte 要发送的字节</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_I2C_SendByte</span><span class="params">(<span class="type">uint8_t</span> byte)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint8_t</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* 1. sda和scl 拉低 */</span></span><br><span class="line">        SDA_LOW;</span><br><span class="line">        SCL_LOW;</span><br><span class="line"></span><br><span class="line">        I2C_DELAY;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 2. 向sda写数据 */</span></span><br><span class="line">        <span class="keyword">if</span> (byte &amp; <span class="number">0x80</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            SDA_HIGH;   </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            SDA_LOW;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        I2C_DELAY;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 3. 时钟拉高 */</span></span><br><span class="line">        SCL_HIGH;</span><br><span class="line"></span><br><span class="line">        I2C_DELAY;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 4. 时钟拉低 */</span></span><br><span class="line">        SCL_LOW;</span><br><span class="line"></span><br><span class="line">        I2C_DELAY;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 5. 左移1位, 为下一次发送做准备 */</span></span><br><span class="line">        byte &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 读一个字节的数据</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; byte 要发送的字节</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">Driver_I2C_ReadByte</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint8_t</span> data = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint8_t</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        SDA_HIGH;<span class="comment">/* 也可不加 */</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* 1. 拉低scl */</span></span><br><span class="line">        SCL_LOW;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* 2. 延时 */</span></span><br><span class="line">        I2C_DELAY;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* 3. 拉高scl */</span></span><br><span class="line">        SCL_HIGH;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* 4. 延时 */</span></span><br><span class="line">        I2C_DELAY;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* 5. 读取sda */</span></span><br><span class="line">        data &lt;&lt;= <span class="number">1</span>;    <span class="comment">/* 一定要放前面才能实现读一个字节(八位)，最低位移位7次 */</span></span><br><span class="line">        <span class="keyword">if</span> (READ_SDA)</span><br><span class="line">        &#123;</span><br><span class="line">            data |= <span class="number">0x01</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* 6. 拉低scl */</span></span><br><span class="line">        SCL_LOW;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 7. 延时 */</span></span><br><span class="line">        I2C_DELAY;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h4 id="Inf-W24C02-h"><a href="#Inf-W24C02-h" class="headerlink" title="Inf_W24C02.h"></a>Inf_W24C02.h</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __INF_W24C02_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __INF_W24C02_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Driver_I2C2.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;string.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ADDR 0xA0</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Inf_W24C02_Init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Inf_W24C02_WriteByte</span><span class="params">(<span class="type">uint8_t</span> innerAddr, <span class="type">uint8_t</span> byte)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">Inf_W24C02_ReadByte</span><span class="params">(<span class="type">uint8_t</span> innerAddr)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Inf_W24C02_WriteBytes</span><span class="params">(<span class="type">uint8_t</span> innerAddr, <span class="type">uint8_t</span> *bytes, <span class="type">uint8_t</span> len)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Inf_W24C02_ReadBytes</span><span class="params">(<span class="type">uint8_t</span> innerAddr, <span class="type">uint8_t</span> *bytes, <span class="type">uint8_t</span> len)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><ol><li><h4 id="Inf-W24C02-c"><a href="#Inf-W24C02-c" class="headerlink" title="Inf_W24C02.c"></a>Inf_W24C02.c</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Inf_W24C02.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Inf_W24C02_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Driver_I2C2_Init();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Inf_W24C02_WriteByte</span><span class="params">(<span class="type">uint8_t</span> innerAddr, <span class="type">uint8_t</span> byte)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 开始信号 */</span></span><br><span class="line">    Driver_I2C2_Start();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 2. 发送写地址 */</span></span><br><span class="line">    Driver_I2C_SendByte(ADDR);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 3. 等待响应 */</span></span><br><span class="line">    <span class="type">uint8_t</span> ack = Driver_I2C2_WaitAck();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (ack == ACK)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* 4. 发送内部地址 */</span></span><br><span class="line">        Driver_I2C_SendByte(innerAddr);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* 5. 等待响应 */</span></span><br><span class="line">        Driver_I2C2_WaitAck();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* 6. 发送具体数据 */</span></span><br><span class="line">        Driver_I2C_SendByte(byte);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* 7. 等待响应 */</span></span><br><span class="line">        Driver_I2C2_WaitAck();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* 8. 停止信号 */</span></span><br><span class="line">        Driver_I2C2_Stop();</span><br><span class="line">    &#125;</span><br><span class="line">    Delay_ms(<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">Inf_W24C02_ReadByte</span><span class="params">(<span class="type">uint8_t</span> innerAddr)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 起始信号 */</span></span><br><span class="line">    Driver_I2C2_Start();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 2. 发送一个写地址   假写 */</span></span><br><span class="line">    Driver_I2C_SendByte(ADDR);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 3. 等待响应 */</span></span><br><span class="line">    Driver_I2C2_WaitAck();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 4. 发送内部地址 */</span></span><br><span class="line">    Driver_I2C_SendByte(innerAddr);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 5. 等待响应 */</span></span><br><span class="line">    Driver_I2C2_WaitAck();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 6. 起始信号 */</span></span><br><span class="line">    Driver_I2C2_Start();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 7. 发送读地址  真读 */</span></span><br><span class="line">    Driver_I2C_SendByte(ADDR + <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 8. 等待响应 */</span></span><br><span class="line">    Driver_I2C2_WaitAck();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 9. 读取一个字节 */</span></span><br><span class="line">    <span class="type">uint8_t</span> byte = Driver_I2C_ReadByte();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 10. 给对方一个非应答 */</span></span><br><span class="line">    Driver_I2C2_NAck();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 11. 停止信号 */</span></span><br><span class="line">    Driver_I2C2_Stop();</span><br><span class="line">    <span class="keyword">return</span> byte;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 页写入.一次写入多个字节</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; innerAddr</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; *bytes</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; len</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Inf_W24C02_WriteBytes</span><span class="params">(<span class="type">uint8_t</span> innerAddr, <span class="type">uint8_t</span> *bytes, <span class="type">uint8_t</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 开始信号 */</span></span><br><span class="line">    Driver_I2C2_Start();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 2. 发送写地址 */</span></span><br><span class="line">    Driver_I2C_SendByte(ADDR);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 3. 等待响应 */</span></span><br><span class="line">    <span class="type">uint8_t</span> ack = Driver_I2C2_WaitAck();</span><br><span class="line">    <span class="keyword">if</span> (ack == ACK)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* 4. 发送内部地址 */</span></span><br><span class="line">        Driver_I2C_SendByte(innerAddr);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* 5. 等待响应 */</span></span><br><span class="line">        Driver_I2C2_WaitAck();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">uint8_t</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">/* 6. 发送具体数据 */</span></span><br><span class="line">            Driver_I2C_SendByte(bytes[i]);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">/* 7. 等待响应 */</span></span><br><span class="line">            Driver_I2C2_WaitAck();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* 8. 停止信号 */</span></span><br><span class="line">        Driver_I2C2_Stop();</span><br><span class="line">    &#125;</span><br><span class="line">    Delay_ms(<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 一次性读取多个字节的数据</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; innerAddr 起始位置</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; *bytes 存储读到的数据</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; len 读取的字节数</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Inf_W24C02_ReadBytes</span><span class="params">(<span class="type">uint8_t</span> innerAddr, <span class="type">uint8_t</span> *bytes, <span class="type">uint8_t</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 起始信号 */</span></span><br><span class="line">    Driver_I2C2_Start();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 2. 发送一个写地址   假写 */</span></span><br><span class="line">    Driver_I2C_SendByte(ADDR);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 3. 等待响应 */</span></span><br><span class="line">    Driver_I2C2_WaitAck();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 4. 发送内部地址 */</span></span><br><span class="line">    Driver_I2C_SendByte(innerAddr);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 5. 等待响应 */</span></span><br><span class="line">    Driver_I2C2_WaitAck();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 6. 起始信号 */</span></span><br><span class="line">    Driver_I2C2_Start();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 7. 发送读地址  真读 */</span></span><br><span class="line">    Driver_I2C_SendByte(ADDR + <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 8. 等待响应 */</span></span><br><span class="line">    Driver_I2C2_WaitAck();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint8_t</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* 9. 读取一个字节 */</span></span><br><span class="line">        bytes[i] = Driver_I2C_ReadByte();</span><br><span class="line">        <span class="keyword">if</span> (i &lt; len - <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Driver_I2C2_Ack();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            Driver_I2C2_NAck();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 11. 停止信号 */</span></span><br><span class="line">    Driver_I2C2_Stop();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h2 id="I2C案例2：硬件实现I2C"><a href="#I2C案例2：硬件实现I2C" class="headerlink" title="I2C案例2：硬件实现I2C"></a>I2C案例2：硬件实现I2C</h2></li><li><h3 id="需求描述-7"><a href="#需求描述-7" class="headerlink" title="需求描述"></a>需求描述</h3></li></ol><p>使用STM32的I2C外设读写E2PROM，基于寄存器操作。不需要手动控制引脚电平的输入输出，只需要操作I2C外设对应的寄存器即可。</p><ol><li><h3 id="硬件电路设计-6"><a href="#硬件电路设计-6" class="headerlink" title="硬件电路设计"></a>硬件电路设计</h3></li><li><h4 id="I2C外设简介"><a href="#I2C外设简介" class="headerlink" title="I2C外设简介"></a>I2C外设简介</h4></li></ol><p>前面我们用软件模拟I2C协议实现了通讯，代码写起来比较复杂。</p><p>起始STM32有专门负责协议的I2C外设，只要配置好该外设，它就会自动根据协议要求产生通讯信号，收发数据并缓存起来，CPU只要检测该外设的状态和访问数据寄存器，就能完成数据收发。</p><p>这种由硬件外设处理 I2C 协议的方式减轻了CPU的工作，且使软件设计更加简单。</p><p>STM32的 I2C 外设可用作通讯的主机及从机，支持100Kbit/s和400Kbit/s的速率，支持7位、10位设备地址，支持DMA数据传输，并具有数据校验功能。</p><p>它的I2C外设还支持 SMBus2.0协议，SMBus协议与I2C类似。</p><ol><li><h4 id="STM32的I2C外设的功能框图"><a href="#STM32的I2C外设的功能框图" class="headerlink" title="STM32的I2C外设的功能框图"></a>STM32的I2C外设的功能框图</h4></li></ol><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532893315357.png" alt="img"></p><p>I2C的所有硬件架构都是根据图中左侧SCL线和SDA线展开的（其中的SMBA线用于SMBUS的警告信号，I2C通讯没有使用）。STM32芯片有多个I2C外设，咱们现在用的这款有2个I2C外设，它们的I2C通讯信号引出到不同的GPIO引脚上，使用时必须配置到这些指定的引脚。</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532893315358.png" alt="img"></p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532893315359.png" alt="img"></p><ol><li><h3 id="软件设计（寄存器）-4"><a href="#软件设计（寄存器）-4" class="headerlink" title="软件设计（寄存器）"></a>软件设计（寄存器）</h3></li><li><h4 id="main-c-7"><a href="#main-c-7" class="headerlink" title="main.c"></a>main.c</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Driver_USART.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Inf_W24C02.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Driver_USART1_Init();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;I2C 硬件 实验开始....\r\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Inf_W24C02_Init();</span><br><span class="line"></span><br><span class="line">    Inf_W24C02_WriteByte(<span class="number">0x00</span>, <span class="string">&#x27;x&#x27;</span>);</span><br><span class="line">    Inf_W24C02_WriteByte(<span class="number">0x01</span>, <span class="string">&#x27;y&#x27;</span>);</span><br><span class="line">    Inf_W24C02_WriteByte(<span class="number">0x02</span>, <span class="string">&#x27;z&#x27;</span>);</span><br><span class="line">    <span class="type">uint8_t</span> byte1 = Inf_W24C02_ReadByte(<span class="number">0x00</span>);</span><br><span class="line">    <span class="type">uint8_t</span> byte2 = Inf_W24C02_ReadByte(<span class="number">0x01</span>);</span><br><span class="line">    <span class="type">uint8_t</span> byte3 = Inf_W24C02_ReadByte(<span class="number">0x02</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c\r\n&quot;</span>, byte1);   </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c\r\n&quot;</span>, byte2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c\r\n&quot;</span>, byte3);</span><br><span class="line"></span><br><span class="line">    Inf_W24C02_WriteBytes(<span class="number">0x00</span>, <span class="string">&quot;123456&quot;</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> buff[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    Inf_W24C02_ReadBytes(<span class="number">0x00</span>, buff, <span class="number">6</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\r\n&quot;</span>, buff);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清零缓冲区</span></span><br><span class="line">    <span class="built_in">memset</span>(buff, <span class="number">0</span>, <span class="keyword">sizeof</span>(buff));</span><br><span class="line">    Inf_W24C02_WriteBytes(<span class="number">0x00</span>, <span class="string">&quot;0123456789abcdefghijk&quot;</span>, <span class="number">21</span>);</span><br><span class="line">    Inf_W24C02_ReadBytes(<span class="number">0x00</span>, buff, <span class="number">21</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\r\n&quot;</span>, buff);</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">            </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h4 id="Driver-I2C2-h-1"><a href="#Driver-I2C2-h-1" class="headerlink" title="Driver_I2C2.h"></a>Driver_I2C2.h</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __DRIVER_I2C2_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __DRIVER_I2C2_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Driver_USART.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ACK 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NACK 1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FAIL 0</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_I2C2_Init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">Driver_I2C2_Start</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_I2C2_Stop</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_I2C2_Ack</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_I2C2_NAck</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">Driver_I2C_SendAddr</span><span class="params">(<span class="type">uint8_t</span> addr)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">Driver_I2C_SendByte</span><span class="params">(<span class="type">uint8_t</span> byte)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">Driver_I2C_ReadByte</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><ol><li><h4 id="Driver-I2C2-c-1"><a href="#Driver-I2C2-c-1" class="headerlink" title="Driver_I2C2.c"></a>Driver_I2C2.c</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Driver_I2C2.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Delay.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> I2C_DELAY Delay_us(10)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 初始化</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_I2C2_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 1. 开启时钟 */</span></span><br><span class="line">    <span class="comment">/* 1.1 i2c硬件的时钟 */</span></span><br><span class="line">    RCC-&gt;APB1ENR |= RCC_APB1ENR_I2C2EN;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 1.2 GPIO时钟 */</span></span><br><span class="line">    RCC-&gt;APB2ENR |= RCC_APB2ENR_IOPBEN;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 2. 设置gpio的引脚的工作模式 */</span></span><br><span class="line">    <span class="comment">/* PB10-&gt;SCL PB11-&gt;SDA </span></span><br><span class="line"><span class="comment">    复用开漏输出: 既可以用于输出也可以输入. </span></span><br><span class="line"><span class="comment">    外界要有上拉电阻.用于输入的时候,最好先输出一个1,把线的控制权交给外界.</span></span><br><span class="line"><span class="comment">    MODE=11 CNF=11 */</span></span><br><span class="line">     </span><br><span class="line">    <span class="comment">/* 9.3.4.1 */</span></span><br><span class="line">    GPIOB-&gt;CRH |= (GPIO_CRH_MODE10 | GPIO_CRH_MODE11 | GPIO_CRH_CNF10 | GPIO_CRH_CNF11);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 3. 设置I2C2 */</span></span><br><span class="line">    <span class="comment">/* 3.1 配置硬件的工作模式  I2C  */</span></span><br><span class="line">    I2C2-&gt;CR1 &amp;= ~I2C_CR1_SMBUS;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 3.2 配置给I2C设备提供的时钟的频率 36MHz*/</span></span><br><span class="line">    I2C2-&gt;CR2 |= <span class="number">36</span> &lt;&lt; <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 万一前面CR2低五位并不全是0咋办，应该还要现清0再写入吧，为啥这里不用呢？*/</span></span><br><span class="line">    <span class="comment">/* 因为数据手册清楚地写了CR2的复位值为0X0000 */</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 3.3 设置标准模式=0 or 快速模式=1 */</span></span><br><span class="line">    I2C2-&gt;CCR &amp;= ~I2C_CCR_FS;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 3.3 配置I2C产生时钟的频率 100K or 400K</span></span><br><span class="line"><span class="comment">        Thigh=CCR * Tcplk1</span></span><br><span class="line"><span class="comment">        ccr = Thigh/=Tcplk1 = 5us / (1/36)us = 180 */</span></span><br><span class="line">    I2C2-&gt;CCR |= <span class="number">180</span> &lt;&lt; <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 3.4 时钟信号的上升沿100KHz的时候要求最大上升沿不超过1us(手册)。</span></span><br><span class="line"><span class="comment">        时钟频率是36MHz则 写入：1 /（1/36） + 1 = 37</span></span><br><span class="line"><span class="comment">        其实就是计算的 最大上升沿时间/时钟周期 + 1 */</span></span><br><span class="line">    I2C2-&gt;TRISE |= <span class="number">37</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 3.4 使能I2C */</span></span><br><span class="line">    I2C2-&gt;CR1 |= I2C_CR1_PE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 起始信号</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">Driver_I2C2_Start</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    I2C2-&gt;CR1 |= I2C_CR1_START;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint16_t</span> timeout = <span class="number">0xffff</span>;</span><br><span class="line">    <span class="keyword">while</span> (((I2C2-&gt;SR1 &amp; I2C_SR1_SB) == <span class="number">0</span>) &amp;&amp; timeout)</span><br><span class="line">    &#123;</span><br><span class="line">        timeout--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> timeout ? OK : FAIL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 停止信号</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_I2C2_Stop</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 产生终止条件 */</span></span><br><span class="line">    I2C2-&gt;CR1 |= I2C_CR1_STOP;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 接收方产生应答信号</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_I2C2_Ack</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 产生应答信号 */</span></span><br><span class="line">    I2C2-&gt;CR1 |= I2C_CR1_ACK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 接收方产生非应答信号</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_I2C2_NAck</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    I2C2-&gt;CR1 &amp;= ~I2C_CR1_ACK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 发送一个设备地址</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; byte</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">Driver_I2C_SendAddr</span><span class="params">(<span class="type">uint8_t</span> addr)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 把要发送的数据写入到数据寄存器，其实可以加上判断DR寄存器的TXE位，查看一下是否为空</span></span><br><span class="line">    I2C2-&gt;DR = addr;</span><br><span class="line"></span><br><span class="line">    timeout = <span class="number">0xffff</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将设备地址发送给数据寄存器后再判断SR1的ADDR位</span></span><br><span class="line">    <span class="keyword">while</span> (((I2C2-&gt;SR1 &amp; I2C_SR1_ADDR) == <span class="number">0</span>) &amp;&amp; timeout)</span><br><span class="line">    &#123;</span><br><span class="line">        timeout--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 9.3.4.2 */</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (timeout)</span><br><span class="line">    &#123;</span><br><span class="line">        I2C2-&gt;SR2;<span class="comment">/* 读取SR1寄存器后，对SR2寄存器的读操作将清除ADDR位 */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> timeout ? OK : FAIL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 发送一个字节的数据（数据和内部地址适用）</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; byte 要发送的字节</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">Driver_I2C_SendByte</span><span class="params">(<span class="type">uint8_t</span> byte)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint16_t</span> timeout = <span class="number">0xffff</span>;</span><br><span class="line">    <span class="comment">//1 先判断寄存器，假如寄存器不空就要等待至空状态（在超时时间内）后写入数据</span></span><br><span class="line">    <span class="keyword">while</span> (((I2C2-&gt;SR1 &amp; I2C_SR1_TXE) == <span class="number">0</span>) &amp;&amp; timeout)</span><br><span class="line">    &#123;</span><br><span class="line">        timeout--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 把要发送的数据写入到数据寄存器，由于上一次执行已经读取SR寄存器，这行代码执行完后便将BTF置0</span></span><br><span class="line">    I2C2-&gt;DR = byte;</span><br><span class="line"></span><br><span class="line">    timeout = <span class="number">0xffff</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//2 判断寄存器，假如数据没发送完成就要等待数据发送完成</span></span><br><span class="line">    <span class="keyword">while</span> (((I2C2-&gt;SR1 &amp; I2C_SR1_BTF) == <span class="number">0</span>) &amp;&amp; timeout)</span><br><span class="line">    &#123;</span><br><span class="line">        timeout--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> timeout ? OK : FAIL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 读一个字节的数据</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; byte 要发送的字节</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">Driver_I2C_ReadByte</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint16_t</span> timeout = <span class="number">0xffff</span>;</span><br><span class="line">    <span class="comment">// 等待SR1寄存器RXNE位，一旦非空表示收到数据（在超时时间内），可以读取数据</span></span><br><span class="line">    <span class="keyword">while</span> (((I2C2-&gt;SR1 &amp; I2C_SR1_RXNE) == <span class="number">0</span>) &amp;&amp; timeout)</span><br><span class="line">    &#123;</span><br><span class="line">        timeout--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 把数据寄存器的值返回</span></span><br><span class="line">    <span class="type">uint8_t</span> data = timeout ? I2C2-&gt;DR : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你可能很好奇为啥要加个超时时间？万一有多个主机同时操作，在while循环里就要一直等待，所以最好加个超时时间表示等待成功或失败！</p><ol><li><h4 id="Inf-W24C02-h-1"><a href="#Inf-W24C02-h-1" class="headerlink" title="Inf_W24C02.h"></a>Inf_W24C02.h</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __INF_W24C02_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __INF_W24C02_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Driver_I2C2.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;string.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ADDR 0xA0</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Inf_W24C02_Init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Inf_W24C02_WriteByte</span><span class="params">(<span class="type">uint8_t</span> innerAddr, <span class="type">uint8_t</span> byte)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">Inf_W24C02_ReadByte</span><span class="params">(<span class="type">uint8_t</span> innerAddr)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Inf_W24C02_WriteBytes</span><span class="params">(<span class="type">uint8_t</span> innerAddr, <span class="type">uint8_t</span> *bytes, <span class="type">uint8_t</span> len)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Inf_W24C02_ReadBytes</span><span class="params">(<span class="type">uint8_t</span> innerAddr, <span class="type">uint8_t</span> *bytes, <span class="type">uint8_t</span> len)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><ol><li><h4 id="Inf-W24C02-c-1"><a href="#Inf-W24C02-c-1" class="headerlink" title="Inf_W24C02.c"></a>Inf_W24C02.c</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Inf_W24C02.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Inf_W24C02_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Driver_I2C2_Init();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Inf_W24C02_WriteByte</span><span class="params">(<span class="type">uint8_t</span> innerAddr, <span class="type">uint8_t</span> byte)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint8_t</span> ack;<span class="comment">/* 用来测试写字节是否成功的变量，测完就注释掉要不然影响时序 */</span></span><br><span class="line">    <span class="comment">/* 1. 开始信号 */</span></span><br><span class="line">    ack = Driver_I2C2_Start();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// printf(&quot;start_ack=%d\r\n&quot;, ack);</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 2. 发送写地址 */</span></span><br><span class="line">    ack = Driver_I2C_SendAddr(ADDR);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// printf(&quot;addr_ack=%d\r\n&quot;, ack);</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 4. 发送内部地址 */</span></span><br><span class="line">    ack = Driver_I2C_SendByte(innerAddr);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// printf(&quot;inner_ack=%d\r\n&quot;, ack);</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 6. 发送具体数据 */</span></span><br><span class="line">    ack = Driver_I2C_SendByte(byte);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// printf(&quot;byte_ack=%d\r\n&quot;, ack);</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 8. 停止信号 */</span></span><br><span class="line">    Driver_I2C2_Stop();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 9.3.4.3 */</span></span><br><span class="line">    Delay_ms(<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">Inf_W24C02_ReadByte</span><span class="params">(<span class="type">uint8_t</span> innerAddr)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 起始信号 */</span></span><br><span class="line">    Driver_I2C2_Start();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 2. 发送一个写地址   假写 */</span></span><br><span class="line">    Driver_I2C_SendAddr(ADDR);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 4. 发送内部地址 */</span></span><br><span class="line">    Driver_I2C_SendByte(innerAddr);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 6. 起始信号 */</span></span><br><span class="line">    Driver_I2C2_Start();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 7. 发送读地址  真读 */</span></span><br><span class="line">    Driver_I2C_SendAddr(ADDR + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 10. 产生一个非应答信号 */</span></span><br><span class="line">    Driver_I2C2_NAck();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 11. 停止信号 */</span></span><br><span class="line">    Driver_I2C2_Stop();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 9. 读取一个字节 */</span></span><br><span class="line">    <span class="type">uint8_t</span> byte = Driver_I2C_ReadByte();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> byte;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 页写入.一次写入多个字节</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; innerAddr</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; *bytes</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; len</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Inf_W24C02_WriteBytes</span><span class="params">(<span class="type">uint8_t</span> innerAddr, <span class="type">uint8_t</span> *bytes, <span class="type">uint8_t</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 开始信号 */</span></span><br><span class="line">    Driver_I2C2_Start();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 2. 发送写地址 */</span></span><br><span class="line">    Driver_I2C_SendAddr(ADDR);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 4. 发送内部地址 */</span></span><br><span class="line">    Driver_I2C_SendByte(innerAddr);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint8_t</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* 6. 发送具体数据 */</span></span><br><span class="line">        Driver_I2C_SendByte(bytes[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 8. 停止信号 */</span></span><br><span class="line">    Driver_I2C2_Stop();</span><br><span class="line"></span><br><span class="line">    Delay_ms(<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 一次性读取多个字节的数据</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; innerAddr 起始位置</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; *bytes 存储读到的数据</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; len 读取的字节数</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Inf_W24C02_ReadBytes</span><span class="params">(<span class="type">uint8_t</span> innerAddr, <span class="type">uint8_t</span> *bytes, <span class="type">uint8_t</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 起始信号 */</span></span><br><span class="line">    Driver_I2C2_Start();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 2. 发送一个写地址   假写 */</span></span><br><span class="line">    Driver_I2C_SendAddr(ADDR);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 4. 发送内部地址 */</span></span><br><span class="line">    Driver_I2C_SendByte(innerAddr);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 6. 起始信号 */</span></span><br><span class="line">    Driver_I2C2_Start();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 9.3.4.3 */</span></span><br><span class="line">    <span class="comment">/* 7. 发送读地址  真读 */</span></span><br><span class="line">    Driver_I2C_SendAddr(ADDR + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint8_t</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* 9. 读取一个字节 都要产生一个应答信号*/</span></span><br><span class="line">        <span class="keyword">if</span> (i &lt; len - <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Driver_I2C2_Ack();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>    <span class="comment">/* EV7_1 */</span></span><br><span class="line">        &#123;</span><br><span class="line">            Driver_I2C2_NAck();</span><br><span class="line">            <span class="comment">/* 11. 停止信号 */</span></span><br><span class="line">            Driver_I2C2_Stop();</span><br><span class="line">        &#125;</span><br><span class="line">        bytes[i] = Driver_I2C_ReadByte();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h3 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h3></li><li><p><strong>GPIO**</strong>为复用功能**</p></li></ol><p><strong>涉及到寄存器的配置！注意：我们的PB10、PB11此时并不是两个普通的**</strong>GPIO<strong><strong>而是复用作</strong></strong>IIC<strong><strong>的</strong></strong>IO<strong>**输出。</strong></p><ol><li><strong>在I²C通信中，发送完设备地址后需要清除ADDR寄存器？</strong></li></ol><p><strong>清除ADDR寄存器的目的是为了确保下一次的I²C传输或操作不会受到上一次的地址信息的干扰。如果不清除ADDR寄存器，可能会导致通信错误或设备不正确响应。</strong></p><ol><li><strong>I²C地址传输阶段</strong>：<ol><li>在I²C通信中，主设备（通常是微控制器）需要向从设备发送数据或者请求数据。通信开始时，主设备首先发送一个设备地址和读写位（R/W位）给总线上的所有设备。</li></ol></li><li><strong>ADDR寄存器的作用</strong>：<ol><li>ADDR寄存器用于存储要发送的设备地址和读写位。当主设备开始传输设备地址后，这些信息会被加载到ADDR寄存器中。</li></ol></li><li><strong>ADDR寄存器的清除</strong>：<ol><li><strong>在I²C通信中，主设备发送完设备地址后，通常需要软件来清除ADDR寄存器中的地址信息。这是因为I²C控制器通常不会自动清除ADDR寄存器的内容。</strong></li></ol></li><li><strong>软件操作</strong>：<ol><li>在大多数情况下，软件需要在发送设备地址后显式地清除ADDR寄存器。这通常通过写入特定的控制位或寄存器来完成，具体的操作取决于使用的I²C控制器和微控制器。</li></ol></li><li><strong>硬件实现的例外</strong>：<ol><li>尽管大多数情况下需要软件操作来清除ADDR寄存器，有些特定的I²C控制器和微控制器可能提供了自动清除的功能，但这并不是通用情况。</li></ol></li></ol><p><strong>void Inf_W24C02_ReadBytes(uint8_t innerAddr, uint8_t *bytes, uint8_t len)的使用</strong></p><p><strong>多字节不能读取太快，不然会发生数据覆盖。</strong></p><p>还有就是最后为啥要先产生应答信号后再读取数据，而不是先读取数据之后产生应答信号（<strong>无论是写入数据还是读取数据，主机在发送完地址后等待从机的应答信号</strong>）？</p><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532893315360.png" alt="img"></p><ul><li><strong>实际是**</strong>用上一次的响应信号来设置这一次的响应<strong><strong>,</strong></strong>读完数据硬件就立即响应<strong><strong>，如果不先产生应答，硬件响应的是从机非应答信号，</strong></strong>这样读取多字节数据就可以了<strong><strong>,</strong></strong>而且<strong>**最后一个字节要注意EV7_1包括响应和停止！</strong></li><li><strong>主要是硬件响应太快，所以要**</strong>先准备好应答信号，再由硬件响应<strong>**。一个字节就不用考虑（就和做一次生意是一个意思，哈哈）！</strong></li></ul><ol><li><h3 id="软件设计（HAL库）-3"><a href="#软件设计（HAL库）-3" class="headerlink" title="软件设计（HAL库）"></a>软件设计（HAL库）</h3><ol><li><h4 id="STM32CubeMx中配置"><a href="#STM32CubeMx中配置" class="headerlink" title="STM32CubeMx中配置"></a>STM32CubeMx中配置</h4></li></ol></li></ol><p><img src="/2024/09/01/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32%E5%9F%BA%E7%A1%80%E7%AF%87/-1725532893315361.png" alt="img"></p><ol><li><h4 id="main-c-8"><a href="#main-c-8" class="headerlink" title="main.c"></a>main.c</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_Init();</span><br><span class="line">    SystemClock_Config();</span><br><span class="line">    MX_GPIO_Init();</span><br><span class="line">    MX_USART1_UART_Init();</span><br><span class="line">    </span><br><span class="line">    Inf_W24C02_Init();</span><br><span class="line"></span><br><span class="line">    Inf_W24C02_WriteByte(<span class="number">0x00</span>, <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    <span class="type">uint8_t</span> c = Inf_W24C02_ReadByte(<span class="number">0x00</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;c=%c\r\n&quot;</span>, c);</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> wbuff[<span class="number">10</span>] = &#123;<span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;o&#x27;</span>&#125;;</span><br><span class="line">    Inf_W24C02_WriteBytes(<span class="number">0x01</span>, wbuff, <span class="number">5</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;c=%c\r\n&quot;</span>, Inf_W24C02_ReadByte(<span class="number">0x01</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;c=%c\r\n&quot;</span>, Inf_W24C02_ReadByte(<span class="number">0x02</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;c=%c\r\n&quot;</span>, Inf_W24C02_ReadByte(<span class="number">0x03</span>));</span><br><span class="line">    <span class="type">uint8_t</span> buff[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    Inf_W24C02_ReadBytes(<span class="number">0x00</span>, buff, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;buff=%s\r\n&quot;</span>, buff);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h4 id="Inf-W24C02-h-2"><a href="#Inf-W24C02-h-2" class="headerlink" title="Inf_W24C02.h"></a>Inf_W24C02.h</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __INF_W24C02_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __INF_W24C02_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;string.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;i2c.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ADDR 0xA0</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Inf_W24C02_Init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Inf_W24C02_WriteByte</span><span class="params">(<span class="type">uint8_t</span> innerAddr, <span class="type">uint8_t</span> byte)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">Inf_W24C02_ReadByte</span><span class="params">(<span class="type">uint8_t</span> innerAddr)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Inf_W24C02_WriteBytes</span><span class="params">(<span class="type">uint8_t</span> innerAddr, <span class="type">uint8_t</span> *bytes, <span class="type">uint8_t</span> len)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Inf_W24C02_ReadBytes</span><span class="params">(<span class="type">uint8_t</span> innerAddr, <span class="type">uint8_t</span> *bytes, <span class="type">uint8_t</span> len)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><ol><li><h4 id="Inf-W24C02-c-2"><a href="#Inf-W24C02-c-2" class="headerlink" title="Inf_W24C02.c"></a>Inf_W24C02.c</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Inf_W24C02.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Inf_W24C02_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    MX_I2C2_Init();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Inf_W24C02_WriteByte</span><span class="params">(<span class="type">uint8_t</span> innerAddr, <span class="type">uint8_t</span> byte)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_I2C_Mem_Write(&amp;hi2c2, ADDR, innerAddr, I2C_MEMADD_SIZE_8BIT, &amp;byte, <span class="number">1</span>, <span class="number">2000</span>);</span><br><span class="line">    </span><br><span class="line">    HAL_Delay(<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">Inf_W24C02_ReadByte</span><span class="params">(<span class="type">uint8_t</span> innerAddr)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint8_t</span> byte;</span><br><span class="line">    HAL_I2C_Mem_Read(&amp;hi2c2, ADDR + <span class="number">1</span>, innerAddr, I2C_MEMADD_SIZE_8BIT, &amp;byte, <span class="number">1</span>, <span class="number">2000</span>);</span><br><span class="line">    <span class="keyword">return</span> byte;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 页写入.一次写入多个字节</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; innerAddr</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; *bytes</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; len</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Inf_W24C02_WriteBytes</span><span class="params">(<span class="type">uint8_t</span> innerAddr, <span class="type">uint8_t</span> *bytes, <span class="type">uint8_t</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_I2C_Mem_Write(&amp;hi2c2, ADDR, innerAddr, I2C_MEMADD_SIZE_8BIT, bytes, len, <span class="number">2000</span>);</span><br><span class="line">    HAL_Delay(<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 一次性读取多个字节的数据</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; innerAddr 起始位置</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; *bytes 存储读到的数据</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; len 读取的字节数</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Inf_W24C02_ReadBytes</span><span class="params">(<span class="type">uint8_t</span> innerAddr, <span class="type">uint8_t</span> *bytes, <span class="type">uint8_t</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_I2C_Mem_Read(&amp;hi2c2, ADDR + <span class="number">1</span>, innerAddr, I2C_MEMADD_SIZE_8BIT, bytes, len, <span class="number">2000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STM32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构</title>
      <link href="/2024/09/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>/2024/09/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<ol><li><h1 id="基础顺序表"><a href="#基础顺序表" class="headerlink" title="基础顺序表"></a>基础顺序表</h1></li><li><h2 id="顺序表分类"><a href="#顺序表分类" class="headerlink" title="顺序表分类"></a><strong>顺序表分类</strong></h2><p>顺序表分为动态顺序表和静态顺序表，他们的基本结构是怎么展现的呢？</p></li><li><p><strong>静态顺序表</strong></p></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> N 100</span></span><br><span class="line"><span class="comment">//静态顺序表</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Seqlist</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">        <span class="type">int</span> arr[N];<span class="comment">//存放数组大小</span></span><br><span class="line">        <span class="type">int</span> size;<span class="comment">//有效存储数据个数</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>静态顺序表只有两个成员，首先是存放数据数组，其次我们还要知道有效的数据个数,其存放数据大小是一开始便已经确定的，并不灵活，实际开发中根本不会用这种方式。</p><ol><li><strong>动态顺序表</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Seqlist</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span>* arr;<span class="comment">//存放数组大小</span></span><br><span class="line">    <span class="type">int</span> size;<span class="comment">//有效存储数据个数</span></span><br><span class="line">    <span class="type">int</span> capacity;<span class="comment">//开辟空间大小</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>为啥这里用 <strong>int</strong> <strong>*</strong> ？当然是因为需要动态开辟内存空间。既然是动态，当然要用到动态内存管理的知识 ，让我们的<strong>arr</strong>依据存储数据<strong>size</strong>需求量，对数组空间进行扩容或缩容。这里多了一个<strong>capacity</strong>表示开辟空间的大小。为啥要这样设计，因为有效存储数据size的大小并不一定等于空间capacity的大小，这样便于逻辑书写。</p><p>诚然，动态和静态都能解决问题，可是对于静态顺序表来说，一开始我们也不知道到底需要存储多少数据，就像短视频的老板一样，他也不知道自己的产品需要存储多少用户信息。万一初始空间给小了，就放不了太多，容易导致数据丢失；万一初始空间给大了，会占用很大的内存空间，导致代码低效！</p><p>​    因此，对比动态和静态顺序表，我们可以清楚的知道动态顺序表更有优势，接下来就是实现一个简单的动态顺序表。</p><ol><li><h2 id="动态顺序表的具体实现"><a href="#动态顺序表的具体实现" class="headerlink" title="动态顺序表的具体实现"></a>动态顺序表的具体实现</h2></li><li><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3></li></ol><p>上述定义其实不太完美。改良一下，将<strong>int</strong>重定义为<strong>SLDataType</strong>，其目的是为了以后方便<strong>修改数据类型</strong> 。</p><p><img src="/2024/09/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/-172554078033116.png" alt="img"></p><p>试想一下，万一以后要往顺序表里存储字符串咋办，很多涉及到int这个关键字的地方肯定不能全用VS的替换吧，有些变量可能本身用int来定义，以后代码万一增多，手动修改出现错误或误操作，代码可能直接崩溃，这是很可怕的事情。</p><p>因此，提前做好防范。同时为了避免每次传结构体都要加上struct，把它重新命名为SL，这样会很方便！</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 动态顺序表</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> SLDataType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Seqlist</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    SLDataType *arr; <span class="comment">// 存放数组大小</span></span><br><span class="line">    <span class="type">int</span> size;        <span class="comment">// 有效存储数据个数</span></span><br><span class="line">    <span class="type">int</span> capacity;    <span class="comment">// 开辟空间的大小</span></span><br><span class="line">&#125; SL;</span><br></pre></td></tr></table></figure><ol><li><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3></li></ol><p>初始化其实很简单，用一个封装函数，让arr指针为空，size和capacity都置为0，也可以用malloc初始扩充一定的空间，不多赘述。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Seqlist_Init</span><span class="params">(SL* ps)</span></span><br><span class="line">&#123;</span><br><span class="line">    ps-&gt;arr = <span class="literal">NULL</span>;</span><br><span class="line">    ps-&gt;capacity = ps-&gt;size = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那我初始化函数这样写对不对？</p><p>当然是不对的，我们渴望修改结构体里的数据，从而初始化。根据函数调用中实参和形参的关系可知，形参只是形参的临时拷贝，改变形参不会改变实参，所以传值调用是不合法的（建议可以了解一下函数栈帧的知识），对于用函数交换两个变量，我们是不是只能传两个变量的地址啊，这里也一样。</p><p>经过调试，成功实现顺序表初始化。</p><p><img src="/2024/09/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/-17255407803301.png" alt="img"></p><ol><li><h3 id="销毁"><a href="#销毁" class="headerlink" title="销毁"></a>销毁</h3><p>有初始化必然就有销毁！销毁就必然要将开辟的内存空间重新还给操作系统，并将size和capacity置为0。</p></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Seqlist_Destroy</span><span class="params">(SL* ps)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (ps-&gt;arr) <span class="comment">//等价于  if(ps-&gt;arr != NULL)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">free</span>(ps-&gt;arr);</span><br><span class="line">    &#125;</span><br><span class="line">    ps-&gt;arr = <span class="literal">NULL</span>;</span><br><span class="line">    ps-&gt;size = ps-&gt;capacity = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>勿忘将arr置为 <strong>NULL</strong> 。我们用free函数将内存释放只是失去了访问之前开辟空间的能力，首地址还是那个地址没有变，可是已经没有明确的指向，构成野指针，而且free不会自动置空。</p><p>补充一点，例如return 返回值，我们调用一个函数来返回一个结果，我们是不是一般都是返回一个值啊，万一返回一个地址咋办，而且这个地址是正常的吗？</p><p>以一道题目为例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> *<span class="title function_">GetMemory</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> p[] = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Test</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> *str = <span class="literal">NULL</span>;</span><br><span class="line">    str = GetMemory();</span><br><span class="line">    <span class="built_in">printf</span>(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以运行吗？</p><p><img src="/2024/09/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/-17255407803302.png" alt="img"></p><p>编译器直接报错。原因嘛和上面一样啊，这个p地址还是那个地址，但是GetMemory函数执行完后p指向的空间还给操作系统了，没有访问权限，就会指向不明确，所以p为野指针，不能正确执行程序。就算有些编译器可以成功运行此程序，那也是非法访问。</p><ol><li><h3 id="打印数据"><a href="#打印数据" class="headerlink" title="打印数据"></a>打印数据</h3></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//打印</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">PrintSeqlist</span><span class="params">(SL* ps)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ps-&gt;size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, ps-&gt;arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/09/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/-17255407803303.png" alt="img"></p><p><strong>注意：</strong></p><ol><li><p><strong>不需要考虑\</strong>**arr**<em>\</em>里面的数据是啥，所以我们只需要打印有效数据就可以。并不需要对要删除的数据做处理。**</p></li><li><p><strong>要断言一下，如果ps为空指针，删除就无意义了。</strong></p></li><li><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">插入方法各种各样。</span><br></pre></td></tr></table></figure></li><li><h4 id="尾插"><a href="#尾插" class="headerlink" title="尾插"></a>尾插</h4></li></ol><p><img src="/2024/09/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/-17255407803314.png" alt="img"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//尾插</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SLPushBack</span><span class="params">(SL* ps, SLDataType x)</span><span class="comment">//x为插入数据</span></span><br><span class="line">&#123;</span><br><span class="line">    assert(ps);</span><br><span class="line">    ps-&gt;arr[ps-&gt;size++] = x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接这样写行不行？试想，万一<strong>capacity</strong>和<strong>size</strong>相等，即空间大小等于有效个数大小，是不是没有空间了，需要扩容。还有如果capacity为0，arr的地址是无效的哦，也不能插入数据吧！</p><p>每一次插入数据我都需要判断顺序表空是否的存在，从而决定是否扩容。</p><p><strong>因此需要实现一个通用的判断函数：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">SLCheckOut</span><span class="params">(SL* ps)</span></span><br><span class="line">&#123;   </span><br><span class="line">    <span class="keyword">if</span> (ps-&gt;capacity == ps-&gt;size)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> NEWCapacity = (!ps-&gt;capacity) ? <span class="number">4</span> : <span class="number">2</span> * ps-&gt;capacity;</span><br><span class="line">        SLDataType* tmp = (SLDataType*)<span class="built_in">realloc</span>(ps-&gt;arr, NEWCapacity * <span class="keyword">sizeof</span>(SLDataType));</span><br><span class="line">        <span class="comment">//空间开辟失败</span></span><br><span class="line">        <span class="keyword">if</span> (!tmp)</span><br><span class="line">        &#123;</span><br><span class="line">            perror(<span class="string">&quot;realloc&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//空间开辟成功</span></span><br><span class="line">        ps-&gt;arr = tmp;</span><br><span class="line">        ps-&gt;capacity = NEWCapacity;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><ol><li><strong>capacity</strong> <strong> == size怎么办？</strong> 说明此时需要先扩容再插入数据。</li><li><strong>capacity</strong> <strong>为0怎么办？</strong> 所以要单独先判断capacity，为0就给个初始空间为4（随便给，别太离谱），不为0，扩容两倍。</li><li><strong>realloc万一开辟失败怎么办？</strong> 需要报错，来终止程序,开辟内存成功后，才能进行插入数据操作。因为一旦realloc开辟失败，不光不能解决问题，同时还有极大可能把我原来的数据删掉，这不是帮倒忙吗，因此我们使用realloc必须考虑这一点。</li><li><strong>万一ps接收到空指针怎么办？</strong> 那就无法实现插入数据，因此要用assert断言一下（可以去网上找一下assert的用法）其他插入删除数据同理。</li><li><strong>exit(1)</strong> :只是一个简单的退出程序语句。</li><li><strong>size</strong>表示有效数据个数，其初始值为0，所以插入完要++，因为是后置++，在插入数据前不会影响，也可以分开写，无所谓。</li></ol><p>测试一下：</p><p><img src="/2024/09/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/-17255407803315.png" alt="img"></p><p>成功插入数据。</p><ol><li><h4 id="头插"><a href="#头插" class="headerlink" title="头插"></a>头插</h4></li></ol><p>如图，方便理解：</p><p><img src="/2024/09/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/-17255407803316.png" alt="img"></p><p>看到这里是不是就明白了，简单：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//头插</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SLPushFront</span><span class="params">(SL* ps, SLDataType x)</span></span><br><span class="line">&#123;</span><br><span class="line">    assert(ps);</span><br><span class="line">    SLCheckOut(ps);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = ps-&gt;size; i &gt; <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        ps-&gt;arr[i] = ps-&gt;arr[i - <span class="number">1</span>];<span class="comment">//最终arr[1] = arr[0]</span></span><br><span class="line">    &#125;</span><br><span class="line">    ps-&gt;arr[<span class="number">0</span>] = x;</span><br><span class="line">    ps-&gt;size++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试成功！</p><p>注意：</p><p>ps-&gt;size++为啥最后写？<strong>只要顺序表有空间，ps-&gt;size一定小于ps-&gt;**</strong>capacity**，我们这样设计便于理解，删除数据涉及到的ps-&gt;size—同理。</p><ol><li><h4 id="任插"><a href="#任插" class="headerlink" title="任插"></a>任插</h4></li></ol><p>如图，方便理解：</p><p><img src="/2024/09/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/-17255407803317.png" alt="img"></p><p>因此，就是要将pos位之后的数据向右移动一位，再把要放入的数据赋值给数组第pos位，最后有效数据个数加一，并不是将原来pos位的数据替换。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//任意位置插入</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SLInsert</span><span class="params">(SL* ps, <span class="type">int</span> pos, SLDataType x)</span></span><br><span class="line">&#123;</span><br><span class="line">    assert(ps);</span><br><span class="line">    <span class="comment">//不能让顺序表为空</span></span><br><span class="line">    assert(pos &gt;= <span class="number">0</span> &amp;&amp; pos &lt;= ps-&gt;size);</span><br><span class="line">    SLCheckOut(ps);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = ps-&gt;size; i &gt;= pos + <span class="number">1</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        ps-&gt;arr[i] = ps-&gt;arr[i - <span class="number">1</span>];<span class="comment">//ps-&gt;arr[pos + 1] = ps-&gt;arr[pos]</span></span><br><span class="line">    &#125;</span><br><span class="line">    ps-&gt;arr[pos] = x;</span><br><span class="line">    ps-&gt;size++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试一下：</p><p><img src="/2024/09/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/-17255407803318.png" alt="img"></p><p>由此观知，头插尾插也是这种任插的特殊情况。</p><ol><li><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3></li></ol><p>删除不需要考虑那么多，只要传入的顺序表不为空即可。</p><ol><li><h4 id="尾删"><a href="#尾删" class="headerlink" title="尾删"></a>尾删</h4></li></ol><p>如图，方便理解：</p><p><img src="/2024/09/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/-17255407803319.png" alt="img"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//尾删</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SLPopBack</span><span class="params">(SL* ps)</span></span><br><span class="line">&#123;</span><br><span class="line">    assert(ps);</span><br><span class="line">    ps-&gt;size--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试一下：</p><p><img src="/2024/09/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/-172554078033110.png" alt="img"></p><ol><li><h4 id="头删"><a href="#头删" class="headerlink" title="头删"></a>头删</h4></li></ol><p>如图，方便理解：</p><p><img src="/2024/09/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/-172554078033111.png" alt="img"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//头删</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SLPopFront</span><span class="params">(SL* ps)</span></span><br><span class="line">&#123;</span><br><span class="line">    assert(ps);</span><br><span class="line">    <span class="comment">//判断顺序表是否为空</span></span><br><span class="line">    assert(ps-&gt;size);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ps-&gt;size - <span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ps-&gt;arr[i] = ps-&gt;arr[i + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    ps-&gt;size--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>assert(ps-&gt;size)是判断顺序表是否为空，要是size为0，虽然打印有一个数据，但是此时无效数据为0。</strong></p><p>测试一下：</p><p><img src="/2024/09/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/-172554078033112.png" alt="img"></p><ol><li><h4 id="任删"><a href="#任删" class="headerlink" title="任删"></a>任删</h4></li></ol><p>如图，方便理解：</p><p><img src="/2024/09/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/-172554078033113.png" alt="img"></p><p>将pos位之后的数据向前移动，移动位置不在pos位前，最后有效数据个数减一。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//任意位置删除</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SLErase</span><span class="params">(SL* ps, <span class="type">int</span> pos)</span></span><br><span class="line">&#123;</span><br><span class="line">    assert(ps);</span><br><span class="line">    assert(pos &gt;= <span class="number">0</span> &amp;&amp; pos &lt; ps-&gt;size);</span><br><span class="line">    SLCheckOut(ps);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = pos; i &lt; ps-&gt;size - <span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ps-&gt;arr[i] = ps-&gt;arr[i + <span class="number">1</span>];<span class="comment">//ps-&gt;arr[ps-&gt;size - 2] = ps-&gt;arr[ps-&gt;size - 1]</span></span><br><span class="line">    &#125;</span><br><span class="line">    ps-&gt;size--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试一下：</p><p><img src="/2024/09/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/-172554078033114.png" alt="img"></p><p><strong>注意：</strong></p><ol><li><strong>用assert断言\</strong>**pos**<em>\</em>，让pos在安全且合法的范围内。**</li><li><strong>插入数据时，可以把数据插入到下标size上，而删除数据时，不能删除下标size-1后面的数据。</strong></li></ol><p><strong>上图说明：</strong></p><p><img src="/2024/09/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/-172554078033115.png" alt="img"></p><p>简洁明了。</p><ol><li><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3></li></ol><p>遍历查找。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查找</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">FindSL</span><span class="params">(SL* ps, SLDataType x)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ps-&gt;size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (ps-&gt;arr[i] == x)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//找到了</span></span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//没有找到</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>这里我用下标i来遍历数组中的元素，如果找到数据返回下标，如果没找到返回-1，其中-1是随便给的数，目的是为了与数组下标区分开。</strong></p><ol><li><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>顺序表的本质就是对一个数组增删查改，顺序表是属于线性表的一种。顺序表物理和逻辑结构都是线性的，而线性表不同的地方是其只在物理结构是非线性，逻辑结构依然是线性的！</p></li><li><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2></li><li><h3 id="sqlist-h"><a href="#sqlist-h" class="headerlink" title="sqlist.h"></a><strong>sqlist.h</strong></h3></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="comment">// #define N 100</span></span><br><span class="line"><span class="comment">////静态顺序表</span></span><br><span class="line"><span class="comment">// struct Seqlist</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//  int arr[N];//存放数组大小</span></span><br><span class="line"><span class="comment">//  int size;//有效存储数据个数</span></span><br><span class="line"><span class="comment">// &#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 动态顺序表</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> SLDataType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Seqlist</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    SLDataType *arr; <span class="comment">// 存放数组大小</span></span><br><span class="line">    <span class="type">int</span> size;        <span class="comment">// 有效存储数据个数</span></span><br><span class="line">    <span class="type">int</span> capacity;    <span class="comment">// 开辟空间的大小</span></span><br><span class="line">&#125; SL;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Seqlist_Init</span><span class="params">(SL *ps)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 销毁</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Seqlist_Destroy</span><span class="params">(SL *ps)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">PrintSeqlist</span><span class="params">(SL *ps)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 头部插入 / 尾部插入</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SLPushBack</span><span class="params">(SL *ps, SLDataType x)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">SLPushFront</span><span class="params">(SL *ps, SLDataType x)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 头部删除 / 尾部删除</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SLPopBack</span><span class="params">(SL *ps)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">SLPopFront</span><span class="params">(SL *ps)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 任意位置插入</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SLInsert</span><span class="params">(SL *ps, <span class="type">int</span> pos, SLDataType x)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 任意位置删除</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SLErase</span><span class="params">(SL *ps, <span class="type">int</span> pos)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">FindSL</span><span class="params">(SL *ps, SLDataType x)</span>;</span><br></pre></td></tr></table></figure><ol><li><h3 id="sqlist-c"><a href="#sqlist-c" class="headerlink" title="sqlist.c"></a><strong>sqlist.c</strong></h3></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;sqlist.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Seqlist_Init</span><span class="params">(SL* ps)</span></span><br><span class="line">&#123;</span><br><span class="line">    ps-&gt;arr = <span class="literal">NULL</span>;</span><br><span class="line">    ps-&gt;capacity = ps-&gt;size = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Seqlist_Destroy</span><span class="params">(SL* ps)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (ps-&gt;arr) <span class="comment">//等价于  if(ps-&gt;arr != NULL)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">free</span>(ps-&gt;arr);</span><br><span class="line">    &#125;</span><br><span class="line">    ps-&gt;arr = <span class="literal">NULL</span>;</span><br><span class="line">    ps-&gt;size = ps-&gt;capacity = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">SLCheckOut</span><span class="params">(SL* ps)</span></span><br><span class="line">&#123;   </span><br><span class="line">    <span class="keyword">if</span> (ps-&gt;capacity == ps-&gt;size)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> NEWCapacity = (!ps-&gt;capacity) ? <span class="number">4</span> : <span class="number">2</span> * ps-&gt;capacity;</span><br><span class="line">        SLDataType* tmp = (SLDataType*)<span class="built_in">realloc</span>(ps-&gt;arr, NEWCapacity * <span class="keyword">sizeof</span>(SLDataType));</span><br><span class="line">        <span class="comment">//空间开辟失败</span></span><br><span class="line">        <span class="keyword">if</span> (!tmp)</span><br><span class="line">        &#123;</span><br><span class="line">            perror(<span class="string">&quot;realloc&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//空间开辟成功</span></span><br><span class="line">        ps-&gt;arr = tmp;</span><br><span class="line">        ps-&gt;capacity = NEWCapacity;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//尾插</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SLPushBack</span><span class="params">(SL* ps, SLDataType x)</span><span class="comment">//x为插入数据</span></span><br><span class="line">&#123;</span><br><span class="line">    assert(ps);</span><br><span class="line">    SLCheckOut(ps);</span><br><span class="line">    ps-&gt;arr[ps-&gt;size++] = x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//头插</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SLPushFront</span><span class="params">(SL* ps, SLDataType x)</span></span><br><span class="line">&#123;</span><br><span class="line">    assert(ps);</span><br><span class="line">    SLCheckOut(ps);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = ps-&gt;size; i &gt; <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        ps-&gt;arr[i] = ps-&gt;arr[i - <span class="number">1</span>];<span class="comment">//最终arr[1] = arr[0]</span></span><br><span class="line">    &#125;</span><br><span class="line">    ps-&gt;arr[<span class="number">0</span>] = x;</span><br><span class="line">    ps-&gt;size++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">PrintSeqlist</span><span class="params">(SL* ps)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ps-&gt;size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, ps-&gt;arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//尾删</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SLPopBack</span><span class="params">(SL* ps)</span></span><br><span class="line">&#123;</span><br><span class="line">    assert(ps);</span><br><span class="line">    ps-&gt;size--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//头删</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SLPopFront</span><span class="params">(SL* ps)</span></span><br><span class="line">&#123;</span><br><span class="line">    assert(ps);</span><br><span class="line">    <span class="comment">//判断顺序表是否为空</span></span><br><span class="line">    assert(ps-&gt;size);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ps-&gt;size - <span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ps-&gt;arr[i] = ps-&gt;arr[i + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    ps-&gt;size--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//任意位置插入</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SLInsert</span><span class="params">(SL* ps, <span class="type">int</span> pos, SLDataType x)</span></span><br><span class="line">&#123;</span><br><span class="line">    assert(ps);</span><br><span class="line">    <span class="comment">//不能让顺序表为空</span></span><br><span class="line">    assert(pos &gt;= <span class="number">0</span> &amp;&amp; pos &lt;= ps-&gt;size);</span><br><span class="line">    SLCheckOut(ps);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = ps-&gt;size; i &gt;= pos + <span class="number">1</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        ps-&gt;arr[i] = ps-&gt;arr[i - <span class="number">1</span>];<span class="comment">//ps-&gt;arr[pos + 1] = ps-&gt;arr[pos]</span></span><br><span class="line">    &#125;</span><br><span class="line">    ps-&gt;arr[pos] = x;</span><br><span class="line">    ps-&gt;size++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//任意位置删除</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SLErase</span><span class="params">(SL* ps, <span class="type">int</span> pos)</span></span><br><span class="line">&#123;</span><br><span class="line">    assert(ps);</span><br><span class="line">    assert(pos &gt;= <span class="number">0</span> &amp;&amp; pos &lt; ps-&gt;size);</span><br><span class="line">    SLCheckOut(ps);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = pos; i &lt; ps-&gt;size - <span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ps-&gt;arr[i] = ps-&gt;arr[i + <span class="number">1</span>];<span class="comment">//ps-&gt;arr[ps-&gt;size - 2] = ps-&gt;arr[ps-&gt;size - 1]</span></span><br><span class="line">    &#125;</span><br><span class="line">    ps-&gt;size--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查找</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">FindSL</span><span class="params">(SL* ps, SLDataType x)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ps-&gt;size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (ps-&gt;arr[i] == x)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//找到了</span></span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//没有找到</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方便调用。</p><ol><li><h2 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h2></li></ol><p>关于扩容的规则，可以参考一下这篇博客：<a href="http://t.csdnimg.cn/wqt8P">http://t.csdnimg.cn/wqt8P</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>定时器从模式的使用</title>
      <link href="/2024/09/01/%E6%9D%82%E8%B0%88/%E5%AE%9A%E6%97%B6%E5%99%A8%E4%BB%8E%E6%A8%A1%E5%BC%8F%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2024/09/01/%E6%9D%82%E8%B0%88/%E5%AE%9A%E6%97%B6%E5%99%A8%E4%BB%8E%E6%A8%A1%E5%BC%8F%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="定时器从模式的使用"><a href="#定时器从模式的使用" class="headerlink" title="定时器从模式的使用"></a>定时器从模式的使用</h1><p>可能很多群友听完PWM和输入捕获的课后，不知道为啥输入捕获要用定时器从模式，今天我基于自己的理解来尝试说明一下。</p><h2 id="触发输入信号"><a href="#触发输入信号" class="headerlink" title="触发输入信号"></a>触发输入信号</h2><p><img src="/2024/09/01/%E6%9D%82%E8%B0%88/%E5%AE%9A%E6%97%B6%E5%99%A8%E4%BB%8E%E6%A8%A1%E5%BC%8F%E7%9A%84%E4%BD%BF%E7%94%A8/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240920214747.png" alt="微信截图_20240920214747"></p><p>​    当定时器从外部模式1设置到从模式，触发输入信号TRGI信号可以控制我们的定时器。其信号来源可以通过外部或自己的定时器通道过来到本定时器的信号。可以用来控制本定时器的一些动作，比如复位。这种情况下<strong>本定时器</strong>就处于<strong>从模式</strong>，被控制。</p><p>​    顺便说一下<strong>TRGO</strong>用于控制别的定时器，这个时候产生TRGO信号的定时器处于主模式。可以用来控制其他外设和定时器。</p><h2 id="定时器从模式"><a href="#定时器从模式" class="headerlink" title="定时器从模式"></a>定时器从模式</h2><p><img src="/2024/09/01/%E6%9D%82%E8%B0%88/%E5%AE%9A%E6%97%B6%E5%99%A8%E4%BB%8E%E6%A8%A1%E5%BC%8F%E7%9A%84%E4%BD%BF%E7%94%A8/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240921095440.png" alt="微信截图_20240921095440"></p><h2 id="案例一："><a href="#案例一：" class="headerlink" title="案例一："></a>案例一：</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 存储信号的周期 */</span></span><br><span class="line"><span class="type">uint16_t</span> t = <span class="number">0</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_TIM_IC_CaptureCallback</span><span class="params">(TIM_HandleTypeDef *htim)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (htim-&gt;Instance == TIM4)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (htim-&gt;Channel == HAL_TIM_ACTIVE_CHANNEL_1)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">/* 计数器清零 */</span></span><br><span class="line">            __HAL_TIM_SetCounter(&amp;htim4, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 返回PWM的周期 ms */</span></span><br><span class="line"><span class="type">double</span> <span class="title function_">Driver_TIM4_GetPWMCycle</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> __HAL_TIM_GetCompare(&amp;htim4, TIM_CHANNEL_1) / <span class="number">1000.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 返回PWM的频率 （对应换算的周期 s）*/</span></span><br><span class="line"><span class="type">double</span> <span class="title function_">Driver_TIM4_GetPWMFreq</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1000000.0</span> / __HAL_TIM_GetCompare(&amp;htim4, TIM_CHANNEL_1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    这个代码就能实现测量PWM的周期，特别强调一点，输入捕获中断是在CCRX捕获到CNT的值之后，才能进入中断，每一次进入中断，便会每次调用中断服务函数，手动清零CNT计数器。</p><h2 id="案例二"><a href="#案例二" class="headerlink" title="案例二"></a>案例二</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_Init();</span><br><span class="line">    SystemClock_Config();</span><br><span class="line">    MX_GPIO_Init();</span><br><span class="line">    MX_TIM4_Init();</span><br><span class="line">    MX_TIM5_Init();</span><br><span class="line">    MX_USART1_UART_Init();</span><br><span class="line">    </span><br><span class="line">    HAL_TIM_PWM_Start(&amp;htim5, TIM_CHANNEL_2);</span><br><span class="line"></span><br><span class="line">    HAL_TIM_IC_Start(&amp;htim4, TIM_CHANNEL_1);</span><br><span class="line">    HAL_TIM_IC_Start(&amp;htim4, TIM_CHANNEL_2);</span><br><span class="line">    </span><br><span class="line">    <span class="type">double</span> t, f, dutyCycle;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        t = Driver_TIM4_GetPWMCycle();</span><br><span class="line">        f = Driver_TIM4_GetPWMFreq();</span><br><span class="line">        dutyCycle = Driver_TIM4_GetDutyCycle();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;t=%.4fms, f=%.4fHz, dutyCycle=%.2f%%\r\n&quot;</span>, t, f, dutyCycle * <span class="number">100</span>);</span><br><span class="line">        HAL_Delay(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 返回PWM的周期 ms*/</span></span><br><span class="line"><span class="type">double</span> <span class="title function_">Driver_TIM4_GetPWMCycle</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> (__HAL_TIM_GetCompare(&amp;htim4, TIM_CHANNEL_1) + <span class="number">1</span>) / <span class="number">1000.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 返回PWM的频率 Hz*/</span></span><br><span class="line"><span class="type">double</span> <span class="title function_">Driver_TIM4_GetPWMFreq</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1000000.0</span> / (__HAL_TIM_GetCompare(&amp;htim4, TIM_CHANNEL_1) + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回占空比</span></span><br><span class="line"><span class="type">double</span> <span class="title function_">Driver_TIM4_GetDutyCycle</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">1</span> + __HAL_TIM_GetCompare(&amp;htim4, TIM_CHANNEL_2)) * <span class="number">1.0</span> / (<span class="number">1</span> + __HAL_TIM_GetCompare(&amp;htim4, TIM_CHANNEL_1));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    配置了定时器从模式之后（上升沿捕获），我们甚至不需要再用中断来手动清零CNT计数器。</p><blockquote><p>第一次上升沿来临时CCRX捕获CNT的值之后，从模式的复位模式才会起作用，CNT计数值会被复位，之后CCRX的值不变，直到下一次上升沿来临后重复第一次上升沿的操作。相当于每一次输入捕获都是记录一个周期的时间，非常方便，我们想知道捕获信号对应的频率或周期，直接读寄存器就可以。</p></blockquote><h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><p>​    为啥调用<strong>__HAL_TIM_GetCompare</strong>时还要手动加1，肯定是有误差的。加一肯定就是少算了一个计数周期嘛。</p><blockquote><p>​    解释：<strong>TIM4计数周期是1us（我用的TIM4）</strong>，来一个上升沿记一个数，被测信号是来一个上升沿计数器复位，来一个上升沿定时器捕获。可能被测信号的上升沿在计数周期前来临（在下一个1us之间），那么此时计数周期没有计数，所以计数器CNT的时间值实际要小于被测信号的值，<strong>少一个计数周期</strong>。</p></blockquote><p>​    可以这样理解：<strong>待测信号第二个上升沿与计数器的时钟周期不一定同时来临</strong>。因为待测信号的上升沿和计数器的时钟周期之间可能存在对齐问题，导致计数器记录的时间小于实际经过的时间。</p><p><img src="/2024/09/01/%E6%9D%82%E8%B0%88/%E5%AE%9A%E6%97%B6%E5%99%A8%E4%BB%8E%E6%A8%A1%E5%BC%8F%E7%9A%84%E4%BD%BF%E7%94%A8/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240921104618.png" alt="微信截图_20240921104618"></p><p>关于选择通道问题我是这么理解的，途中TI1FP1和TI1FP2，本质是一个信号，是经过TIM1通道以及输入滤波器和边沿检测器后分到不同的通道，TI1FP1是进入IC1，TI1FP2是进入IC2的信号。</p><p><img src="/2024/09/01/%E6%9D%82%E8%B0%88/%E5%AE%9A%E6%97%B6%E5%99%A8%E4%BB%8E%E6%A8%A1%E5%BC%8F%E7%9A%84%E4%BD%BF%E7%94%A8/963a6482-103a-40b1-91c0-cb888b350b98.png" alt="963a6482-103a-40b1-91c0-cb888b350b98"></p><p>假设我用了TI1FP1，那么通道一就要用直连direct mode，而通道二也可以用这个信号，但是只能用indirect mode。</p><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><h3 id="定时器信号来源"><a href="#定时器信号来源" class="headerlink" title="定时器信号来源"></a>定时器信号来源</h3><h4 id="外部信号（GPIO-引脚）"><a href="#外部信号（GPIO-引脚）" class="headerlink" title="外部信号（GPIO 引脚）"></a><strong>外部信号（GPIO 引脚）</strong></h4><ul><li>这种方式是最常见的输入捕获配置，用于捕获来自外部设备的脉冲信号，比如传感器输出。</li><li><strong>CubeMX 中的配置</strong>：你可以在 <strong>CubeMX</strong> 中将定时器的输入通道（如 TIMx_CH1、TIMx_CH2 等）映射到特定的 GPIO 引脚，然后在定时器配置界面选择对应的输入捕获模式。</li><li><strong>相关配置</strong>：在 <code>ICSelection</code> 中选择 <code>TIM_ICSELECTION_DIRECTTI</code>，表示直接从外部输入捕获信号。</li></ul><h4 id="内部信号"><a href="#内部信号" class="headerlink" title="内部信号"></a><strong>内部信号</strong></h4><ul><li>有些定时器支持捕获内部的信号，比如定时器之间的同步或者触发信号。</li><li><strong>CubeMX 中的配置</strong>：定时器的内部信号选择在 <strong>CubeMX</strong> 中通常通过定时器的触发选择（TRGO）来配置。例如，一个定时器的输出比较事件可以被另一个定时器捕获。</li><li><strong>相关配置</strong>：通过选择 <code>ICSelection</code> 为 <code>TIM_ICSELECTION_INDIRECTTI</code>，你可以选择内部信号作为输入捕获源。</li></ul><h4 id="复用输入信号"><a href="#复用输入信号" class="headerlink" title="复用输入信号"></a><strong>复用输入信号</strong></h4><ul><li>某些情况下，多个外部输入信号可以通过 GPIO 引脚复用，并映射到同一个输入捕获通道。</li><li><strong>CubeMX 中的配置</strong>：这通常与特定引脚的复用功能有关。在 <strong>CubeMX</strong> 中，当你配置某个定时器的输入捕获通道时，特定的 GPIO 引脚会列出它们支持的复用功能。</li><li><strong>相关配置</strong>：在 <code>ICSelection</code> 中选择 <code>TIM_ICSELECTION_DIRECTTI</code> 或其他选项来选择信号源。</li></ul><h4 id="触发信号"><a href="#触发信号" class="headerlink" title="触发信号"></a><strong>触发信号</strong></h4><ul><li>触发信号常用于定时器之间的同步，一个定时器可以产生一个触发信号，另一个定时器可以使用该触发信号作为输入捕获源。</li><li><strong>CubeMX 中的配置</strong>：你可以在定时器的触发设置中选择特定的触发源（TRGO），并配置另一个定时器来捕获这个触发信号。</li><li><strong>相关配置</strong>：通过 <code>ICSelection</code> 中的 <code>TIM_ICSELECTION_TRC</code>，可以选择使用定时器触发输入作为捕获源。</li></ul><h4 id="其他信号来源"><a href="#其他信号来源" class="headerlink" title="其他信号来源"></a><strong>其他信号来源</strong></h4><p><strong>CubeMX</strong> 中还有其他一些较为特殊的输入捕获方式，可能取决于具体的 STM32 定时器型号：</p><ul><li><strong>编码器模式（Encoder Mode）</strong>：某些定时器可以用于编码器输入捕获，用于捕获旋转或线性运动的编码信号。<ul><li><strong>CubeMX 中的配置</strong>：选择定时器的 Encoder 模式后，可以配置定时器的两个输入通道来捕获编码器的 A 和 B 信号。</li></ul></li><li><strong>正交编码器模式</strong>：通过捕获两个相互正交的信号（如编码器的 A、B 相），可以计算旋转的角度或位置。</li><li><strong>PWM 输入模式（PWM Input Mode）</strong>：有些定时器支持 PWM 输入捕获，用于捕获输入信号的频率和占空比。<ul><li><strong>CubeMX 中的配置</strong>：可以在 CubeMX 的 TIMx 设定中选择 PWM 输入模式，使用两个通道来捕获 PWM 信号的频率和占空比。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STM32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第2篇文章</title>
      <link href="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/MCU/mm/"/>
      <url>/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/MCU/mm/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 蓝桥杯51 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>测试</title>
      <link href="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/"/>
      <url>/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/</url>
      
        <content type="html"><![CDATA[<ol><li><h2 id="STM32最小系统"><a href="#STM32最小系统" class="headerlink" title="STM32最小系统"></a>STM32最小系统</h2></li></ol><p>STM32单片机能工作的最小外围电路就叫<strong>最小系统</strong>。</p><p>最小系统通常包括：<strong>STM32芯片、电源、时钟、下载调试和复位</strong>5部分组成。</p><ol><li>STM32芯片</li></ol><p>选用的是<strong>STM32F103ZET6</strong>这款芯片。</p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-1725522045635140.png" alt="img"></p><ol><li>电源<ol><li>采用3.3V电源供电。我们电路采用了两路供电。</li><li>一路是USB的TypeC供电， TypeC提供的是5V，使用芯片AMS1117把5V转成3.3V。</li><li>另一路是STLink下载器直接提供3.3V供电（下载器内部已经把5V转成了3.3V）。</li></ol></li></ol><ul><li>MCU电源</li></ul><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-17255220456171.png" alt="img"></p><ul><li>USB供电转3.3v</li></ul><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-17255220456172.png" alt="img"></p><ul><li>MCU调试口</li></ul><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-17255220456173.png" alt="img"></p><p>不用额外再接串口模块。</p><ol><li>时钟</li></ol><p>SMT32提供了两路外部时钟：<strong>外部高速时钟和外部低速时钟</strong>。</p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-17255220456174.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-17255220456175.png" alt="img"></p><ol><li>复位</li></ol><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-17255220456176.png" alt="img"></p><ol><li>下载调试</li></ol><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-17255220456177.png" alt="img"></p><ol><li><h1 id="点亮LED灯案例（寄存器）"><a href="#点亮LED灯案例（寄存器）" class="headerlink" title="点亮LED灯案例（寄存器）"></a>点亮LED灯案例（寄存器）</h1><p> 我们首先使用基于寄存器开发方式点亮第一个LED灯。</p></li></ol><p>在代码期间会涉及到一些寄存器知识，先不要深究，后面再详细介绍。现在要做的就是点亮第一个LED灯。</p><ol><li><h2 id="需求描述"><a href="#需求描述" class="headerlink" title="需求描述"></a>需求描述</h2></li></ol><p>快速体验STM32开发：点亮LED1。</p><ol><li><h2 id="硬件电路设计"><a href="#硬件电路设计" class="headerlink" title="硬件电路设计"></a>硬件电路设计</h2></li></ol><p>LED1-LED3是普通LED灯，LED4为电源指示灯。</p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-17255220456178.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-17255220456179.png" alt="img"></p><p>说明：</p><ol><li>LED1连接的是端口PA0</li><li><p>只要让PA0引脚输出低电平就可以点亮LED1。</p></li><li><h2 id="创建项目工程"><a href="#创建项目工程" class="headerlink" title="创建项目工程"></a>创建项目工程</h2></li><li><h3 id="创建工程准备"><a href="#创建工程准备" class="headerlink" title="创建工程准备"></a>创建工程准备</h3></li><li><p>创建需要的目录</p></li></ol><p>在磁盘上创建一个目录 atguigu，然后再在atguigu目录下创建我们的第一个工程目录 led_register。</p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561710.png" alt="img"></p><ol><li>准备启动文件</li></ol><p>STM32程序需要启动文件，我们需要提前准备好。先去ST官网下载官方提供的外设标准库，里面有提供标准的启动文件，我们从里面copy一份出来。</p><p>标准外设库下载地址：<strong><a href="https://www.st.com/zh/embedded-software/stm32-standard-peripheral-libraries/products.html">https://www.st.com/zh/embedded-software/stm32-standard-peripheral-libraries/products.html</a></strong></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561711.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561712.png" alt="img"></p><p>下载完成之后解压，后面我们需要从里面copy文件出来。</p><ol><li>创建目录放入启动文件和其他核心文件</li></ol><p>为了方便管理，我们把启动文件放入专门目录中。在刚才创建的工程目录中创建一个目录：Start（名字没有强制要求，随意，但是最好不要有中文）。</p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561713.png" alt="img"></p><p>去到我们刚才下载的标准外设库目录，找到我们需要的启动文件和其他核心文件copy到Start目录。</p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561814.png" alt="img"></p><p>启动文件选择标准：</p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561815.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561816.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561817.png" alt="img"></p><p>Copy完之后：</p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561818.png" alt="img"></p><ol><li>创建工程</li></ol><p>打开Keil MDK创建工程。</p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561819.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561820.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561821.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561822.png" alt="img"></p><ol><li><h3 id="工程配置"><a href="#工程配置" class="headerlink" title="工程配置"></a>工程配置</h3></li><li><p>添加两个Project Group方便管理代码文件。</p></li></ol><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561823.png" alt="img"></p><ol><li>先删除默认的Source Group 1，再添加两个：Start（启动相关的文件），User（我们自己写的代码）。</li></ol><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561824.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561825.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561826.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561827.png" alt="img"></p><ol><li>创建main.c 文件</li></ol><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561828.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561829.png" alt="img"></p><p>User路径不存在，让它帮我们创建。</p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561830.png" alt="img"></p><ol><li><h3 id="编译配置"><a href="#编译配置" class="headerlink" title="编译配置"></a>编译配置</h3></li><li><p>编译器版本改为5</p></li></ol><p>目前最新的Keil ARM用的是 Compiler version 6，与前面的core_cm3.c不兼容，所以需要提前准备好Compiler version 5。</p><p>下载地址：<strong><a href="https://developer.arm.com/downloads/view/ACOMP5">https://developer.arm.com/downloads/view/ACOMP5</a></strong></p><p>解压之后，把解压的后文件夹放入到<strong>Keil</strong> <strong>MDK**</strong>的安装目录**下：</p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561831.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561832.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561833.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561834.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561835.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561836.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561837.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561838.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561839.png" alt="img"></p><ol><li>一些其他配置</li></ol><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561840.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561841.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561942.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561943.png" alt="img"></p><ol><li><h2 id="软件设计"><a href="#软件设计" class="headerlink" title="软件设计"></a>软件设计</h2></li><li><h3 id="main-c"><a href="#main-c" class="headerlink" title="main.c"></a>main.c</h3></li></ol><p>根据前面硬件电路设计，我们只要让<strong>GPIOA的0口输出低电平就行了</strong>。代码需要按照下面的步骤来实现。</p><ol><li>开启时钟</li></ol><p>在STM32中，让IO口工作，必须先开启对应的时钟。所以需要先查找到开启时钟的寄存器，然后通过该寄存器操作时钟的开启或关闭。我们要打开的是GPIOA的时钟。</p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561944.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561945.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561946.png" alt="img"></p><p>我们需要知道RCC_APB2ENR这个寄存器的地址。如何查找呢？先知道RCC这个外设的基地址，然后加上这个寄存器的偏移地址就行了。</p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561947.png" alt="img"></p><p>从上面可以看出来，RCC的基地址是0x4002 1000，APB2ENR的偏移量是0x18，所以<strong>APB2ENR的地址值是0x4002 1000 + 0x18</strong></p><p>有了地址，在这个地址写入一个数据，这个数据的二进制第2是1就行了。其他位暂时不管。我们写入4。这样就开启了GPIOA的时钟。</p><p>在代码中，我们需要把地址强转成指针才能给这个地址赋值。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*(<span class="type">uint32_t</span> *)(<span class="number">0x40021000</span> + <span class="number">0x18</span>) = <span class="number">4</span>;</span><br></pre></td></tr></table></figure><ol><li>给IO口设置输出模式</li></ol><p>在STM32中，如果要让IO口输出低电平或高电平，必须给要使用的IO设置为输出模式。</p><p>根据前面的思路，需要先找到GPIOA的基地址，再根据偏移地址找到要使用的寄存器的地址。GPIOA的基地址是<strong>0x4001 0800</strong>。</p><p>配置PA0口的输出模式的寄存器是GPIOA_CRL。</p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561948.png" alt="img"></p><p>只需要让这个寄存器的最后4位是 0011，就是最大速度的推挽输出。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*(<span class="type">uint32_t</span> *)(<span class="number">0x40010800</span> + <span class="number">0x00</span>) = <span class="number">3</span>;</span><br></pre></td></tr></table></figure><ol><li>给PA0口输出0</li></ol><p>给指定PA0口输出0就可以点亮LED1了。用到的寄存器是ODR数据输出寄存器。</p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561949.png" alt="img"></p><p>ODR寄存器的地址是 <strong>0x40010800 + 0x0c</strong> 。给这个地址的第0位写0，其他位写1。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*(<span class="type">uint32_t</span> *)((<span class="number">0x40010800</span> + <span class="number">0x0c</span>)) = <span class="number">0xfffe</span>;</span><br></pre></td></tr></table></figure><p><strong>main.c具体代码清单。</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdint.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 开启GPIOA的时钟 */</span></span><br><span class="line">    *(<span class="type">uint32_t</span> *)(<span class="number">0x40021000</span> + <span class="number">0x18</span>) = <span class="number">4</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 给PA0设置为通用推挽输出 */</span></span><br><span class="line">    *(<span class="type">uint32_t</span> *)(<span class="number">0x40010800</span> + <span class="number">0x00</span>) = <span class="number">3</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 给输出寄存器赋值 */</span></span><br><span class="line">    *(<span class="type">uint32_t</span> *)(<span class="number">0x40010800</span> + <span class="number">0x0c</span>) = <span class="number">0xfffe</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h3 id="编译工程"><a href="#编译工程" class="headerlink" title="编译工程"></a>编译工程</h3></li></ol><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561950.png" alt="img"></p><ol><li><h3 id="安装ST-LINK驱动"><a href="#安装ST-LINK驱动" class="headerlink" title="安装ST-LINK驱动"></a>安装ST-LINK驱动</h3></li><li><p>我们使用ST-LINK仿真器下载程序。</p></li></ol><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561951.png" alt="img"></p><ol><li>Keil的安装目录下自带了ST-LINK的USB驱动，双击安装即可。</li></ol><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561952.png" alt="img"></p><ol><li>升级STLink固件</li></ol><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561953.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561954.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561955.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561956.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561957.png" alt="img"></p><ol><li><h3 id="Keil中配置ST-LINK"><a href="#Keil中配置ST-LINK" class="headerlink" title="Keil中配置ST-LINK"></a>Keil中配置ST-LINK</h3></li></ol><p>还需要在Keil软件中，对仿真器做一些必要的配置。</p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561958.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561959.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561960.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561961.png" alt="img"></p><ol><li><h3 id="下载程序"><a href="#下载程序" class="headerlink" title="下载程序"></a>下载程序</h3></li></ol><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561962.png" alt="img"></p><ol><li><h3 id="操作寄存器方式的”进化”"><a href="#操作寄存器方式的”进化”" class="headerlink" title="操作寄存器方式的”进化”"></a>操作寄存器方式的”进化”</h3></li><li><h4 id="“进化1”"><a href="#“进化1”" class="headerlink" title="“进化1”"></a>“进化1”</h4></li></ol><p>在操作寄存器的时候，如果每次都查手册计算地址，是相当麻烦且无聊。ST公司早就考虑到了这个问题，已经提前把每个外设寄存器的地址提前给我们用<strong>宏定义</strong>的方式给算好了，我只需要直接使用即可。比如下面是定义的RCC各个寄存器地址。（stm32f10x.h中定义）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> PERIPH_BASE                ((uint32_t)0x40000000) </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AHBPERIPH_BASE             (PERIPH_BASE + 0x20000)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RCC_BASE                   (AHBPERIPH_BASE + 0x1000)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RCC                        ((RCC_TypeDef *) RCC_BASE)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    __IO <span class="type">uint32_t</span> CR;</span><br><span class="line">    __IO <span class="type">uint32_t</span> CFGR;</span><br><span class="line">    __IO <span class="type">uint32_t</span> CIR;</span><br><span class="line">    __IO <span class="type">uint32_t</span> APB2RSTR;</span><br><span class="line">    __IO <span class="type">uint32_t</span> APB1RSTR;</span><br><span class="line">    __IO <span class="type">uint32_t</span> AHBENR;</span><br><span class="line">    __IO <span class="type">uint32_t</span> APB2ENR;</span><br><span class="line">    __IO <span class="type">uint32_t</span> APB1ENR;</span><br><span class="line">    __IO <span class="type">uint32_t</span> BDCR;</span><br><span class="line">    __IO <span class="type">uint32_t</span> CSR;</span><br><span class="line">&#125; RCC_TypeDef;</span><br></pre></td></tr></table></figure><p>这里还巧妙的运用了<strong>结构体中各个成员地址是连续的特征</strong>。CR寄存器是RCC第0个32位寄存器，所以它相对于基地址的偏移是0。CFGR相对于基地址的偏移是4，…</p><p>APB2ENR的相对于基地址的偏移是6*4=24=0x18，和我们前面查找手册的结果是一致的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    RCC-&gt;APB2ENR = <span class="number">4</span>;</span><br><span class="line">    GPIOA-&gt;CRL = <span class="number">3</span>;</span><br><span class="line">    GPIOA-&gt;ODR = <span class="number">0xfffe</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样写起来是不是可读性就好很多了，而且也简单了很多。</p><ol><li><h4 id="“进化2”"><a href="#“进化2”" class="headerlink" title="“进化2”"></a>“进化2”</h4></li></ol><p>其实在上面的代码中还有一些问题。在STM32中一个寄存器是32位的，我们在编写代码的时候只是需要给某位或某几位赋值。由于STM32不支持位寻址，所以在前面的操作中，我们其实是修改了所有位。这是非常不合理的，也许其他位在其他地方有赋值，我们重新赋值势必会覆盖了其他值，带来的后果也是很严重的。</p><p>如何只修改特定的位的值，而不影响其他位呢？我们需要先回顾下一些常见的位操作，再来继续进化上面的代码。</p><ol><li>常用的一些位操作回顾</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdlib.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> buffer[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printfBinary</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *op, <span class="type">unsigned</span> <span class="type">char</span> result)</span></span><br><span class="line">&#123;</span><br><span class="line">    itoa(result, buffer, <span class="number">2</span>); <span class="comment">// 把result转成2进制字符串</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s = %s\r\n&quot;</span>, op, buffer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 左移 8&lt;&lt;1 = 1000&lt;&lt;1 = 10000*/</span></span><br><span class="line">    printfBinary(<span class="string">&quot;8 &lt;&lt; 1&quot;</span>, <span class="number">8</span> &lt;&lt; <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 右移 8&gt;&gt;1 = 1000&gt;&gt;1 = 100*/</span></span><br><span class="line">    printfBinary(<span class="string">&quot;8 &gt;&gt; 1&quot;</span>, <span class="number">8</span> &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 按位或 8|7 = 1000|0111 = 1111 */</span></span><br><span class="line">    printfBinary(<span class="string">&quot;8 | 7&quot;</span>, <span class="number">8</span> | <span class="number">7</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 按位或 8&amp;7 = 1000&amp;0111 = 0000 */</span></span><br><span class="line">    printfBinary(<span class="string">&quot;8 &amp; 7&quot;</span>, <span class="number">8</span> &amp; <span class="number">7</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 按位取反 ~8 = ~1000 = 0111 */</span></span><br><span class="line">    printfBinary(<span class="string">&quot;~8&quot;</span>, ~<span class="number">8</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        把某位置 1  (0 位 1位 ...)</span></span><br><span class="line"><span class="comment">            比如把 mum 的第 2 位置 1</span></span><br><span class="line"><span class="comment">                1. 得到一个数第 2 位是 1 其他都为 0</span></span><br><span class="line"><span class="comment">                   a =  0000 0100  是由 1&lt;&lt;2 得到</span></span><br><span class="line"><span class="comment">                2. 让 num | a</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    printfBinary(<span class="string">&quot;8置第 2 位为 1 &quot;</span>, <span class="number">8</span> | (<span class="number">1</span> &lt;&lt; <span class="number">2</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        把连续的多位同时置 1  (0 位 1位 ...)</span></span><br><span class="line"><span class="comment">            比如把 mum 的第 1和2 位置 1</span></span><br><span class="line"><span class="comment">                1  a =  3 &lt;&lt; 1</span></span><br><span class="line"><span class="comment">                2. num | a</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    printfBinary(<span class="string">&quot;8置第 1和2 位为 1 &quot;</span>, <span class="number">8</span> | (<span class="number">3</span> &lt;&lt; <span class="number">1</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        把某位置 0  (0位 1位 ...)</span></span><br><span class="line"><span class="comment">            比如把 mum 的第 2 位置 0</span></span><br><span class="line"><span class="comment">                1. 得到一个数第 2 位是 0 其他都为 1</span></span><br><span class="line"><span class="comment">                   a =  1111 0100  是由 ~(1&lt;&lt;2) 得到</span></span><br><span class="line"><span class="comment">                2. 让 num &amp; a</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    printfBinary(<span class="string">&quot;7置第 2 位为 0 &quot;</span>, <span class="number">7</span> &amp; ~(<span class="number">1</span> &lt;&lt; <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        把连续多位同时置 0  (0位 1位 ...)</span></span><br><span class="line"><span class="comment">            比如把 mum 的第 1和2 位置 0</span></span><br><span class="line"><span class="comment">                1. a = ~(3&lt;&lt;1)</span></span><br><span class="line"><span class="comment">                2. 让 num &amp; a</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    printfBinary(<span class="string">&quot;7置第 1和2 位为 0 &quot;</span>, <span class="number">7</span> &amp; ~(<span class="number">3</span> &lt;&lt; <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        把连续的多位同时置位  101 (二进制)</span></span><br><span class="line"><span class="comment">            比如把 mum 的第 1,2,3 位置为 101</span></span><br><span class="line"><span class="comment">            1. num的 1,2,3位置为0</span></span><br><span class="line"><span class="comment">                num &amp;= ~(7&lt;&lt;1)</span></span><br><span class="line"><span class="comment">            2. num |= (5 &lt;&lt; 1);    (5 = 101)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> num = <span class="number">13</span>;</span><br><span class="line">    num &amp;= ~(<span class="number">7</span> &lt;&lt; <span class="number">1</span>);</span><br><span class="line">    num |= <span class="number">5</span> &lt;&lt; <span class="number">1</span>;</span><br><span class="line">    printfBinary(<span class="string">&quot;13&quot;</span>, <span class="number">13</span>);</span><br><span class="line">    printfBinary(<span class="string">&quot;10的123位置为101 &quot;</span>, num);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>继续进化</li></ol><p>根据前面基本位操作的回顾，我们综合使用这些位操作，可以把代码进化为下面的形式。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 开启GPIOA的时钟 第2位置1*/</span></span><br><span class="line">    RCC-&gt;APB2ENR |= <span class="number">0x1</span> &lt;&lt; <span class="number">2</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* GPIOA_CRL的最后4位置 0011 */</span></span><br><span class="line">    GPIOA-&gt;CRL &amp;= ~(<span class="number">0x1</span> &lt;&lt; <span class="number">3</span>);</span><br><span class="line">    GPIOA-&gt;CRL &amp;= ~(<span class="number">0x1</span> &lt;&lt; <span class="number">2</span>);</span><br><span class="line">    GPIOA-&gt;CRL |= <span class="number">0x1</span> &lt;&lt; <span class="number">1</span>;</span><br><span class="line">    GPIOA-&gt;CRL |= <span class="number">0x1</span> &lt;&lt; <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* GPIOA_ODR的第0位置0 */</span></span><br><span class="line">    GPIOA-&gt;ODR &amp;= ~(<span class="number">0x1</span> &lt;&lt; <span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h4 id="“进化3”"><a href="#“进化3”" class="headerlink" title="“进化3”"></a>“进化3”</h4></li></ol><p>在上次的进化中，我们是给寄存器“或等”和“与等”了一些值，这些值都是通过相应的“移位”操作得到的。比如要操作第2位，就需要把0x1左移2位得到。我们需要查找手册才能知道要移位几。也是很不方便。</p><p>其实ST公司也把我们需要的<strong>移位后的值给提前计算好</strong>了，用宏定义的方式供我们使用。</p><p>比如前面的开启时钟，已经定义了好了这个值。正好就是1&lt;&lt;2</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span>    RCC_APB2ENR_IOPAEN        ((uint32_t)0x00000004)</span></span><br></pre></td></tr></table></figure><p>利用ST公司提前预定义的这些值，可以进一步进化代码为下面的形式。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    RCC-&gt;APB2ENR |= RCC_APB2ENR_IOPAEN;</span><br><span class="line">    </span><br><span class="line">    GPIOA-&gt;CRL &amp;= ~GPIO_CRL_CNF0_1;</span><br><span class="line">    GPIOA-&gt;CRL &amp;= ~GPIO_CRL_CNF0_0;</span><br><span class="line">    GPIOA-&gt;CRL |= GPIO_CRL_MODE0_1;</span><br><span class="line">    GPIOA-&gt;CRL |= GPIO_CRL_MODE0_0;</span><br><span class="line"></span><br><span class="line">    GPIOA-&gt;ODR &amp;= ~GPIO_ODR_ODR0;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样可读性就好多了，等操作熟练之后，很多操作不查找寄存器手册也能直接操作了。</p><ol><li><h1 id="GPIO外设"><a href="#GPIO外设" class="headerlink" title="GPIO外设"></a>GPIO外设</h1></li><li><h2 id="GPIO概述"><a href="#GPIO概述" class="headerlink" title="GPIO概述"></a>GPIO概述</h2></li></ol><p>GPIO<strong>（General-purpose</strong> <strong>input**</strong>/<strong><strong>output</strong></strong>）<strong>，通用型输入输出。简单理解就是我们可以</strong>控制输入输出**的STM32引脚，统称为GPIO。</p><p>GPIO存在的意义就是<strong>用程序控制或读取</strong>他们的<strong>输出或输入</strong>。</p><ol><li><h3 id="GPIO总体说明"><a href="#GPIO总体说明" class="headerlink" title="GPIO总体说明"></a>GPIO总体说明</h3></li></ol><p>STM32有多组GPIO，比如我们使用的芯片：STM32F103ZET6共有<strong>7组GPIO**</strong>端口<strong>，他们分别是</strong>GPIOx（x从A-G）<strong>，</strong>每组控制16个引脚，<strong>共有</strong>112<strong>个GPIO引脚。具体一个其他STM32芯片有多少组GPIO，可以去查看他们的对应的</strong>数据手册**。</p><p>每个引脚的电平是<strong>0-3.3V</strong>，部分引脚最高可以兼容到<strong>5V</strong>。</p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561963.png" alt="img"></p><ol><li><h3 id="GPIO的主要特点"><a href="#GPIO的主要特点" class="headerlink" title="GPIO的主要特点"></a>GPIO的主要特点</h3></li><li><p>不同型号，IO口的数量可能不一样。</p></li><li>快速翻转。最快可以达到每2个时钟周期翻转一次。（STM32F1系列最快可以达到50MHz的翻转速度）。</li><li>每个IO都可以作为外部中断。</li><li><p>支持8种工作模式。</p></li><li><h3 id="GPIO的8种工作模式"><a href="#GPIO的8种工作模式" class="headerlink" title="GPIO的8种工作模式"></a>GPIO的8种工作模式</h3></li></ol><p>GPIO端口的每个位（引脚）可以由<strong>软件</strong>分别<strong>配置</strong>成8种模式，当然对同一个引脚同一时间只能处于某一种模式中。</p><ol><li><strong>输入浮空（**</strong>Input<strong> </strong>floating<strong>**）</strong></li><li><strong>输入上拉（**</strong>Input<strong> </strong>pull-up）<strong>**信号默认高电平</strong></li><li><strong>输入下拉（Input-pull-down）**</strong>信号默认低电平**</li><li><strong>模拟输入（**</strong>Analog<strong>**）</strong></li><li><strong>通用开漏式输出（**</strong>Output<strong> </strong>open-drain）**</li><li><strong>通用推挽式输出（**</strong>Output<strong> </strong>push-pull）**</li><li><strong>复用推挽式功能（Alternate function push-pull）</strong></li><li><strong>复用开漏式功能（Alternate function open-drain）</strong></li></ol><p>每个I/O端口位可以自由编程，然而I/0端口寄存器必须按<strong>32位字</strong>被访问。</p><p><strong>输出模式</strong>下可以<strong>控制**</strong>端口<strong>**输出</strong>高电平低电平，用于驱动LED，蜂鸣器等，如果是大功率器件（比如电机），还需要加上驱动器（小电流控制大电流）。</p><p><strong>输入模式</strong>下可以<strong>读取**</strong>端口**的高低电平，用于读取外接按键，外接模拟信号的输入，ADC电压采集，模拟通信协议接受数据等。</p><ol><li><h2 id="GPIO工作模式"><a href="#GPIO工作模式" class="headerlink" title="GPIO工作模式"></a>GPIO工作模式</h2></li><li><h3 id="GPIO每位的具体电路结构"><a href="#GPIO每位的具体电路结构" class="headerlink" title="GPIO每位的具体电路结构"></a>GPIO每位的具体电路结构</h3></li></ol><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561964.png" alt="img"></p><ol><li><h3 id="每种模式详解"><a href="#每种模式详解" class="headerlink" title="每种模式详解"></a>每种模式详解</h3></li><li><h4 id="输出模式"><a href="#输出模式" class="headerlink" title="输出模式"></a>输出模式</h4></li><li><p><strong>输出**</strong>缓冲器<strong>**被激活。</strong></p></li><li><strong>推挽模式：输出寄存器上的 1 将激活P-MOS，输出高电平。0 将激活N-MOS，输出低电平。</strong></li><li><strong>开漏模式：P-MOS永远关闭。 输出寄存器上的 0 激活N-MOS，而输出寄存器上的 1 将**</strong>端口<strong><strong>置于高阻状态，所以外部必须要接</strong></strong>上拉电阻<strong>**。</strong></li><li><strong>施密特触发输入被激活。</strong></li><li><strong>弱上拉和下拉电阻被禁止。</strong></li><li><strong>出现在**</strong>I/O<strong>**脚上的数据在每个APB2时钟被采样到输入数据寄存器。</strong></li><li><strong>在开漏模式时，对输入数据寄存器的读访问可得到**</strong>I/O<strong>**状态。</strong></li><li><p><strong>在推挽模式时，对输出数据寄存器的读访问得到最后一次写的值。</strong></p></li><li><h4 id="复用输出模式"><a href="#复用输出模式" class="headerlink" title="复用输出模式"></a>复用输出模式</h4></li></ol><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561965.png" alt="img"></p><ol><li><strong>在开漏或推挽式配置中，输出**</strong>缓冲器<strong>**被打开。</strong></li><li><strong>内置外设的信号驱动输出**</strong>缓冲器<strong>**（复用功能输出）。</strong></li><li><strong>施密特触发输入被激活。</strong></li><li><strong>弱上拉和下拉电阻被禁止。</strong></li><li><strong>在每个APB2**</strong>时钟周期<strong><strong>，出现在</strong></strong>I/O<strong>**脚上的数据被采样到输入数据寄存器。</strong></li><li><strong>开漏模式时，读输入数据寄存器时可得到**</strong>I/O<strong>**口状态。</strong></li><li><p><strong>在推挽模式时，读输出数据寄存器时可得到最后一次写的值。</strong></p></li><li><h4 id="输入模式"><a href="#输入模式" class="headerlink" title="输入模式"></a>输入模式</h4></li></ol><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561966.png" alt="img"></p><ol><li><strong>2个保护**</strong>二极管<strong>**的作用是保护我们的芯片不会由于电压过高或过低而烧毁。</strong></li></ol><p>VDD是接电源（3.3V），VSS接地（0V）。如果IO引脚的输入电压高于VDD的值到一定程度，上方保护二极管导通，则引脚电压被拉低到VDD。如果IO引脚的输入电压（负电压）低于VSS到一定程度，则下方保护二极管导通，电压被拉高到VSS。</p><ol><li>2个开关控制引脚没有输入的时候是上拉，下拉还是浮空。</li></ol><p>当上面的开关闭合的时候，输入被拉高到高电平。当下面的开关闭合的时候，入被拉低到低电平。如果两个都不闭合，输入就是悬空状态。<strong>两个同时闭合，就是费电了，不会这么做的</strong>。</p><ol><li>施密特（图中翻译成肖特基触发器应该是翻译错误，英文版手册是TTL Schmitt trigger）触发器是包含正反馈的比较器电路。可以对信号进行波形整形。</li></ol><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561967.png" alt="img"></p><ol><li><p>从施密特触发起出来的数据，进入到输入数据寄存器中，我们就可以从中读取数据了。</p></li><li><h4 id="模拟输入模式"><a href="#模拟输入模式" class="headerlink" title="模拟输入模式"></a>模拟输入模式</h4></li></ol><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561968.png" alt="img"></p><p>当配置为<strong>模拟输入</strong>时：</p><ol><li>输出部分被禁止。</li><li><strong>禁止施密特触发输入</strong>，实现了每个模拟I/O引脚上的零消耗。施密特触发输出值被强置为0，此时也可以不用开启对应GPIO的时钟。</li><li>弱上拉和下拉电阻被禁止。</li><li><p>读取输入数据寄存器时数值永远为0。</p></li><li><h2 id="与GPIO相关的7个寄存器（重要）"><a href="#与GPIO相关的7个寄存器（重要）" class="headerlink" title="与GPIO相关的7个寄存器（重要）"></a>与GPIO相关的7个寄存器（重要）</h2></li></ol><p>每个GPI/O端口有7个相关的：</p><ul><li>2个32位配置寄存器<strong>（GPIOx_CRL，GPIOx_CRH）</strong>。</li><li>2个32位数据寄存器<strong>（GPIOx_IDR和GPIOx_ODR）</strong>。</li><li>1个32位置位/复位寄存器<strong>（GPIOx_BSRR）</strong>。</li><li>1个16位复位寄存器<strong>（GPIOx_BRR）</strong>。</li><li>1个32位锁定寄存器<strong>（GPIOx_LCKR）</strong>。</li></ul><ol><li><h3 id="GPIOx-CRL（端口配置低寄存器）"><a href="#GPIOx-CRL（端口配置低寄存器）" class="headerlink" title="GPIOx_CRL（端口配置低寄存器）"></a>GPIOx_CRL（端口配置低寄存器）</h3></li></ol><p><strong>GPIOx_CRL（Port configuration register low）</strong>，<strong>x</strong>可以是<strong>A-G</strong>。</p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561969.png" alt="img"></p><p>该寄存器配置的每个GPIO的 0-7 这个8个位，所以叫低寄存器。</p><ol><li>MODE：每个端口有2个MODE位进行控制。<ol><li>00：输入模式（复位后的状态） </li><li>01：输出模式，最大速度10MHz </li><li>10：输出模式，最大速度2MHz </li><li>11：输出模式，最大速度50MHz</li></ol></li><li><p>CNF：每个端口有2个CNF位进行控制。</p><ol><li>当MODE是00 （输入模式）<ol><li>00：模拟输入模式 </li><li>01：浮空输入模式(复位后的状态) </li><li>10：上拉/下拉输入模式 </li><li>11：保留 </li></ol></li><li>当MODE&gt;00（输出模式）<ol><li>00：通用推挽输出模式 </li><li>01：通用开漏输出模式 </li><li>10：复用功能推挽输出模式 </li><li>11：复用功能开漏输出模式</li></ol></li></ol></li><li><h3 id="GPIOx-CRH（端口配置高寄存器）"><a href="#GPIOx-CRH（端口配置高寄存器）" class="headerlink" title="GPIOx_CRH（端口配置高寄存器）"></a>GPIOx_CRH（端口配置高寄存器）</h3></li></ol><p><strong>GPIOx_CRH（Port configuration register high）</strong>。</p><p>该寄存器配置的是每个端口的 8-15引脚，配置方式和低位寄存器完全一样。</p><ol><li><h3 id="GPIOx-IDR（端口输入数据寄存器）"><a href="#GPIOx-IDR（端口输入数据寄存器）" class="headerlink" title="GPIOx_IDR（端口输入数据寄存器）"></a>GPIOx_IDR（端口输入数据寄存器）</h3></li></ol><p><strong>Port</strong> <strong>i**</strong>nput<strong> </strong>d<strong>**ata</strong> <strong>r**</strong>egister**</p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561970.png" alt="img"></p><p>保留位始终读为0。剩下的分别对应每个引脚的输入值。</p><ol><li><h3 id="GPIOx-ODR（端口输出数据寄存器）"><a href="#GPIOx-ODR（端口输出数据寄存器）" class="headerlink" title="GPIOx_ODR（端口输出数据寄存器）"></a>GPIOx_ODR（端口输出数据寄存器）</h3></li></ol><p><strong>Port</strong> <strong>o**</strong>utput<strong> </strong>d<strong>**ata</strong> <strong>r**</strong>egister**</p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204561971.png" alt="img"></p><p>保留位始终读为0。剩下的分别对应每个引脚的输出值。</p><ol><li><h3 id="GPIOx-BSRR（端口位设置-清除寄存器）"><a href="#GPIOx-BSRR（端口位设置-清除寄存器）" class="headerlink" title="GPIOx_BSRR（端口位设置/清除寄存器）"></a>GPIOx_BSRR（端口位设置/清除寄存器）</h3></li></ol><p><strong>Port</strong> <strong>b**</strong>it<strong> </strong>s<strong><strong>et/</strong></strong>r<strong>**eset</strong> <strong>r**</strong>egister**</p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204562072.png" alt="img"></p><ol><li>高16位是用清除对应的数据输出寄存器的位（0-15）的值：设置为0不影响，设置为1会清除ODR对应的位的值（置为0）。</li><li><p>低16位是用设置对应的数据输出寄存器的位（0-15）的值：设置为0不影响，设置为1会设置ODR对应的位的值（置为1）。</p></li><li><h3 id="GPIOx-BRR（端口位清除寄存器）"><a href="#GPIOx-BRR（端口位清除寄存器）" class="headerlink" title="GPIOx_BRR（端口位清除寄存器）"></a>GPIOx_BRR（端口位清除寄存器）</h3></li></ol><p>这个寄存器具有了<strong>GPIOx_BSRR一半的功能：清除</strong>。</p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204562073.png" alt="img"></p><ol><li><h3 id="GPIOx-LCKR（端口配置锁定寄存器）"><a href="#GPIOx-LCKR（端口配置锁定寄存器）" class="headerlink" title="GPIOx_LCKR（端口配置锁定寄存器）"></a>GPIOx_LCKR（端口配置锁定寄存器）</h3></li></ol><p><strong>Port configuration</strong> <strong>l**</strong>o<strong>**ck</strong> <strong>r**</strong>egister**</p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204562074.png" alt="img"></p><p>该寄存器用来锁定端口位的配置。位[15:0]用于锁定GPIO端口的配置。在规定的写入操作期间，不能改变LCKP[15:0]。当对相应的端口位执行了LOCK序列后，在下次系统复位之前将不能再更改端口位的配置。</p><p>每个锁定位锁定控制寄存器（CRL，CRH）中相应的4个位（CNF2位和MODE2位）。</p><p>第16位用来激活锁定寄存器，必须按照规定的时序来操作才行: 写1 -&gt; 写0 -&gt; 写1 -&gt; 读0 -&gt; 读1。</p><p>对0-15位：</p><ul><li>0：不锁定对应端口的配置。</li><li>1：锁定对应端口的配置。</li></ul><ol><li><h2 id="GPIO案例：流水灯"><a href="#GPIO案例：流水灯" class="headerlink" title="GPIO案例：流水灯"></a>GPIO案例：流水灯</h2></li><li><h3 id="需求描述-1"><a href="#需求描述-1" class="headerlink" title="需求描述"></a>需求描述</h3></li></ol><p>在3个LED上实现流水灯效果。</p><ol><li><h3 id="硬件电路设计-1"><a href="#硬件电路设计-1" class="headerlink" title="硬件电路设计"></a>硬件电路设计</h3></li></ol><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204562075.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204562076.png" alt="img"></p><ol><li><h3 id="软件设计（寄存器）"><a href="#软件设计（寄存器）" class="headerlink" title="软件设计（寄存器）"></a>软件设计（寄存器）</h3></li><li><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4></li><li><p>copy上一个项目</p></li><li>并做如下操作</li></ol><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204562077.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204562078.png" alt="img"></p><ol><li>创建一个目录： Hardware/Led 存储我们的LED驱动文件。</li><li>在 Hardware/Led下创建2个文件 led.h和led.c。</li><li>使用keil打开项目，做下简单配置。</li></ol><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204562079.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204562080.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204562081.png" alt="img"></p><ol><li><h4 id="具体代码"><a href="#具体代码" class="headerlink" title="具体代码"></a>具体代码</h4></li><li><h5 id="main-c-1"><a href="#main-c-1" class="headerlink" title="main.c"></a>main.c</h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Driver_LED.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Delay.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint32_t</span> leds[] = &#123;LED_1, LED_2, LED_3&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 1. 初始化LED */</span></span><br><span class="line">    Driver_LED_Init();</span><br><span class="line">    Driver_LED_OffAll(leds, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">uint8_t</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            Driver_LED_OffAll(leds, <span class="number">3</span>);</span><br><span class="line">            Driver_LED_On(leds[i]);</span><br><span class="line">            Delay_ms(<span class="number">500</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        Driver_LED_OffAll(leds, <span class="number">3</span>);</span><br><span class="line">        Driver_LED_On(leds[<span class="number">1</span>]);</span><br><span class="line">        Delay_ms(<span class="number">500</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h5 id="Delay-h"><a href="#Delay-h" class="headerlink" title="Delay.h"></a>Delay.h</h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __delay_h</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __delay_h</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span>    <span class="comment">// Device header</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay_us</span><span class="params">(<span class="type">uint16_t</span> us)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay_ms</span><span class="params">(<span class="type">uint16_t</span> ms)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay_s</span><span class="params">(<span class="type">uint16_t</span> s)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><ol><li><h5 id="Delay-c"><a href="#Delay-c" class="headerlink" title="Delay.c"></a>Delay.c</h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//延时函数使用到了系统定时器，大家先使用，到提高篇时再学习具体为什么这么写。</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;delay.h&quot;</span> <span class="comment">// Device header</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay_us</span><span class="params">(<span class="type">uint16_t</span> us)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 定时器重装值 */</span></span><br><span class="line">    SysTick-&gt;LOAD = <span class="number">72</span> * us;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 清除当前计数值 */</span></span><br><span class="line">    SysTick-&gt;VAL = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*设置内部时钟源（2位-&gt;1）,不需要中断（1位-&gt;0），并启动定时器(0位-&gt;1)*/</span></span><br><span class="line">    SysTick-&gt;CTRL = <span class="number">0x5</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*等待计数到0， 如果计数到0则16位会置为1*/</span>   </span><br><span class="line">    <span class="keyword">while</span> (!(SysTick-&gt;CTRL &amp; SysTick_CTRL_COUNTFLAG));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 关闭定时器 */</span></span><br><span class="line">    SysTick-&gt;CTRL &amp;= ~SysTick_CTRL_ENABLE; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay_ms</span><span class="params">(<span class="type">uint16_t</span> ms)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (ms--)</span><br><span class="line">    &#123;</span><br><span class="line">        Delay_us(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay_s</span><span class="params">(<span class="type">uint16_t</span> s)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (s--)</span><br><span class="line">    &#123;</span><br><span class="line">        Delay_ms(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h5 id="Driver-LED-h"><a href="#Driver-LED-h" class="headerlink" title="Driver_LED.h"></a>Driver_LED.h</h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __DRIVER_LED_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __DRIVER_LED_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED_1 GPIO_ODR_ODR0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED_2 GPIO_ODR_ODR1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED_3 GPIO_ODR_ODR8</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_Init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_On</span><span class="params">(<span class="type">uint32_t</span> led)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_Off</span><span class="params">(<span class="type">uint32_t</span> led)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_Toggle</span><span class="params">(<span class="type">uint32_t</span> led)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_OnAll</span><span class="params">(<span class="type">uint32_t</span> leds[], <span class="type">uint8_t</span> size)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_OffAll</span><span class="params">(<span class="type">uint32_t</span> leds[], <span class="type">uint8_t</span> size)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><ol><li><h5 id="Driver-LED-c"><a href="#Driver-LED-c" class="headerlink" title="Driver_LED.c"></a>Driver_LED.c</h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Driver_LED.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 对LED进行初始化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 打开GPIOA的时钟 */</span></span><br><span class="line">    RCC-&gt;APB2ENR |= RCC_APB2ENR_IOPAEN;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 2. 给用到的端口的所有 PIN (PA0 PA1 PA8) 设置工作模式: 通用推挽输出 MODE:11  CNF:00 */</span></span><br><span class="line">    GPIOA-&gt;CRL |= (GPIO_CRL_MODE0 | GPIO_CRL_MODE1);</span><br><span class="line">    GPIOA-&gt;CRL &amp;= ~(GPIO_CRL_CNF0 | GPIO_CRL_CNF1);</span><br><span class="line"></span><br><span class="line">    GPIOA-&gt;CRH |= GPIO_CRH_MODE8;</span><br><span class="line">    GPIOA-&gt;CRH &amp;= ~GPIO_CRH_CNF8;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 3. 关闭所有灯  */</span></span><br><span class="line">    Driver_LED_Off(LED_1);</span><br><span class="line">    Driver_LED_Off(LED_2);</span><br><span class="line">    Driver_LED_Off(LED_3);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 点亮指定的LED</span></span><br><span class="line"><span class="comment"> * @param &#123;uint32_t&#125; led 要点亮的LED</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_On</span><span class="params">(<span class="type">uint32_t</span> led)</span></span><br><span class="line">&#123;</span><br><span class="line">    GPIOA-&gt;ODR &amp;= ~led;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 关闭指定的LED</span></span><br><span class="line"><span class="comment"> * @param &#123;uint32_t&#125; led 要关闭的LED</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_Off</span><span class="params">(<span class="type">uint32_t</span> led)</span></span><br><span class="line">&#123;</span><br><span class="line">    GPIOA-&gt;ODR |= led;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 翻转LED的状态</span></span><br><span class="line"><span class="comment"> * @param &#123;uint32_t&#125; led 要翻转的LED</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_Toggle</span><span class="params">(<span class="type">uint32_t</span> led)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 读取引脚的电平,如果是1(目前是关闭), 打开, 否则就关闭 */</span></span><br><span class="line">    <span class="keyword">if</span> ((GPIOA-&gt;IDR &amp; led) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Driver_LED_Off(led);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        Driver_LED_On(led);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 打开数组中所有的灯</span></span><br><span class="line"><span class="comment"> * @param &#123;uint32_t&#125; leds 所有灯</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; size 灯的个数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_OnAll</span><span class="params">(<span class="type">uint32_t</span> leds[], <span class="type">uint8_t</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint8_t</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Driver_LED_On(leds[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 关闭数组中所有的灯</span></span><br><span class="line"><span class="comment"> * @param &#123;uint32_t&#125; leds 所有灯</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; size 灯的个数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Driver_LED_OffAll</span><span class="params">(<span class="type">uint32_t</span> leds[], <span class="type">uint8_t</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint8_t</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Driver_LED_Off(leds[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h1 id="总体架构和时钟系统"><a href="#总体架构和时钟系统" class="headerlink" title="总体架构和时钟系统"></a>总体架构和时钟系统</h1></li><li><h2 id="STM32总体架构"><a href="#STM32总体架构" class="headerlink" title="STM32总体架构"></a>STM32总体架构</h2></li></ol><p>经过一段时间的学习，我们需要从宏观上了解下它的系统架构，各个模块之间的层级关系以及相互的影响。</p><ol><li><h2 id="时钟系统"><a href="#时钟系统" class="headerlink" title="时钟系统"></a>时钟系统</h2></li><li><h3 id="时钟树"><a href="#时钟树" class="headerlink" title="时钟树"></a>时钟树</h3></li></ol><p>在STM32中有3种不同的时钟源用来驱动系统时钟(SYSCLK)：</p><ul><li>HSI振荡器时钟（High Speed Internal oscillator，高速内部时钟）</li><li>HSE振荡器时钟（High Speed External（Oscillator / Clock），高速外部时钟）</li><li>PLL时钟（Phase Locked Loop 锁相环/倍频器）</li></ul><p>还有2种2级时钟：</p><ul><li>LSI时钟（Low Speed Internal，低速内部时钟）</li><li>LSE时钟（Low Speed External oscillator，低速外部时钟）。</li></ul><p>为什么提供这么多的时钟？<strong>节能！</strong>高速设备接高速时钟，低速设备接低速时钟，可以最大程度的达到节能效果。详见下图时钟树。</p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204562082.png" alt="img"></p><p>可以看这个简图：</p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204562083.png" alt="img"></p><p><strong>该时钟树目前不要求记住，等以后编程时，只需要时不时回头翻看即可。代码写多了，这些知识自会烂熟于胸。</strong></p><ol><li><h3 id="各个时钟介绍"><a href="#各个时钟介绍" class="headerlink" title="各个时钟介绍"></a>各个时钟介绍</h3></li><li><p>HSE时钟</p></li></ol><p>高速外部时钟是由外部时钟源提供，目前几乎所有的STM32单片机的设计都是在外部接一个8MHz的晶振，经过PLL倍频（9倍频）后得到一个72MHz的系统时钟。我们系统默认就是这个时钟。这个在启动文件可以看到。</p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204562084.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204562085.png" alt="img"></p><ol><li>HSI时钟</li></ol><p>HSI时钟信号由内部8MHz的RC振荡器产生，可直接作为系统时钟或在2分频后作为PLL输入。HSI RC振荡器能够在不需要任何外部器件的条件下提供系统时钟。它的启动时间比HSE晶体振荡器短。然而，即使在校准之后它的时钟频率<strong>精度仍较差</strong>。</p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204562086.png" alt="img"></p><ol><li>PLL时钟</li></ol><p>内部PLL用来倍频<strong>HSI</strong> <strong>RC</strong>的输出时钟或<strong>HSE</strong>晶体输出时钟。PLL的设置必须在其被激活前完成。<strong>一旦PLL被激活，这些参数就不能被改动</strong>。如果PLL中断在时钟中断寄存器里被允许，当PLL准备就绪时，可产生中断申请。</p><p>PLL时钟一般都是对外部的8MHz的时钟信号经过9倍频后，得到72MHz的时钟频率，这是STM32F1系列允许的最高时钟频率。</p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204562087.png" alt="img"></p><ol><li>LSE时钟</li></ol><p>LSE晶体是一个32.768kHz的低速外部晶体或陶瓷谐振器。它为实时时钟或者其他定时功能提供一个低功耗且精确的时钟源。</p><p>LSE是<strong>不能**</strong>驱动系统<strong>**时钟</strong>的。</p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204562088.png" alt="img"></p><ol><li>LSI时钟</li></ol><p>LSI RC担当一个低功耗时钟源的角色，它可以在停机和待机模式下保持运行，为独立看门狗和自动唤醒单元提供时钟。LSI时钟频率大约40kHz（在30kHz和60kHz之间）。</p><p>LSI也是<strong>不能**</strong>驱动系统<strong>**时钟</strong>的。</p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204562089.png" alt="img"></p><ol><li><h1 id="HAL库开发入门"><a href="#HAL库开发入门" class="headerlink" title="HAL库开发入门"></a>HAL库开发入门</h1></li><li><h2 id="HAL介绍"><a href="#HAL介绍" class="headerlink" title="HAL介绍"></a>HAL介绍</h2></li><li><p>为什么要学习HAL库开发</p></li></ol><p>到目前我们已经学会1种开发SMT32程序的姿势：基于寄存器开发。</p><p>寄存器开发效率比较低，在工作中如果想<strong>快速开发</strong>还是要会用到HAL库开发。</p><p>HAL库是目前ST主力推广的开发方式，所以你如果还<strong>要用ST的芯片</strong>，会使用HAL库开发是势在必行的。而且最最关键的是，使用HAL开发有诸多的好处。</p><p>目前，HAL库已经支持STM32全线产品。</p><ol><li>什么是HAL库</li></ol><p>HAL库的全称是Hardware Abstraction Layer，翻译成<strong>硬件抽象层</strong>。HAL库是ST为STM32最新推出的抽象层嵌入式软件，可以更好的确保跨STM32产品的最大可移植性。该库提供了一整套一致的中间件组件，如RTOS，USB，TCP/IP和图形等。</p><p>HAL库是基于一个非限制性的BSD许可协议（Berkeley Software Distribution）而发布的开源代码。 ST制作的中间件堆栈（USB主机和设备库，STemWin）带有允许轻松重用的许可模式，只要是在ST公司的MCU 芯片上使用，库中的中间件(USB 主机/设备库,STemWin)协议栈即被允许随便修改，并可以反复使用。至于基于其它著名的开源解决方案商的中间件（FreeRTOS，FatFs，LwIP和PolarSSL）也都具有友好的用户许可条款。</p><ol><li>CMSIS和HAL库的关系</li></ol><p><strong>CMSIS**</strong>（<strong><strong>Cortex Microcontroller Software Interface Standard</strong></strong>）**是 Cortex-M 处理器系列的与供应商无关的硬件抽象层。它是ARM公司制定的一个标准。它可以为处理器和外设实现一致且简单的软件接口，从而简化软件的重用、缩短微控制器新开发人员的学习过程，并缩短新设备的上市时间。简单来说，就是ARM公司制定标准，芯片厂商按照此标准编写相应的程序，实现统一的接口，方便开发人员的使用。</p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204562090.png" alt="img"></p><ol><li><h2 id="HAL库开发环境搭建"><a href="#HAL库开发环境搭建" class="headerlink" title="HAL库开发环境搭建"></a>HAL库开发环境搭建</h2></li><li><h3 id="安装Java运行环境"><a href="#安装Java运行环境" class="headerlink" title="安装Java运行环境"></a>安装Java运行环境</h3></li></ol><p>STM32CubeMX 要求java8的运行环境。下载地址：<strong><a href="https://www.oracle.com/java/technologies/javase/javase8u211-later-archive-downloads.html">https://www.oracle.com/java/technologies/javase/javase8u211-later-archive-downloads.html</a></strong></p><ol><li><h3 id="安装STM32CubeMX"><a href="#安装STM32CubeMX" class="headerlink" title="安装STM32CubeMX"></a>安装STM32CubeMX</h3></li></ol><p>ST公司提供的一个工具，非常方便的用图形化的方式帮我们创建工程，和完成各种配置。</p><p>下载地址：<strong><a href="https://www.st.com/zh/development-tools/stm32cubemx.html">https://www.st.com/zh/development-tools/stm32cubemx.html#get-software</a></strong></p><p>双击安装即可。</p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204562091.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204562092.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204562093.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204562094.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204562095.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204562096.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204562097.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204562098.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-172552204562099.png" alt="img"></p><ol><li><h3 id="在线下载芯片支持包"><a href="#在线下载芯片支持包" class="headerlink" title="在线下载芯片支持包"></a>在线下载芯片支持包</h3></li></ol><p>双击<strong>CubeMX</strong>进入如下界面。</p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-1725522045620100.png" alt="img"></p><p>先安装下软件支持包：</p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-1725522045620101.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-1725522045620102.png" alt="img"></p><p>点击安装之后，需要先登录你的ST账号，没有就先注册一个。</p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-1725522045620103.png" alt="img"></p><ol><li><h3 id="离线安装芯片支持包"><a href="#离线安装芯片支持包" class="headerlink" title="离线安装芯片支持包"></a>离线安装芯片支持包</h3></li></ol><p>如果网速不好，下载会比较慢。也可以选择离线安装。</p><ol><li>下载离线芯片支持包</li></ol><p>下载地址：<strong><a href="https://www.st.com/zh/development-tools/stm32cubemx.html#tools-software">https://www.st.com/zh/development-tools/stm32cubemx.html#tools-software</a></strong></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-1725522045620104.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-1725522045620105.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-1725522045620106.png" alt="img"></p><ol><li>导入芯片支持包</li></ol><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-1725522045621107.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-1725522045621108.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-1725522045621109.png" alt="img"></p><p><strong>注意:</strong></p><ol><li><strong>上面的离线安装方式只能安装基础包(en.stm32cubef1.zip),升级包(en.stm32cubef1-v1-8-5.zip)无法安装.</strong></li><li><p><strong>把en.stm32cubef1-v1-8-5.zip拷贝到stm32cube的仓库中,直接解压就行了.仓库位置: C:\Users\你的用户名\STM32Cube**</strong>Repository<strong>**. 用解压的文件覆盖原来的基础包.</strong></p></li><li><h2 id="LED流水灯案例（HAL库）"><a href="#LED流水灯案例（HAL库）" class="headerlink" title="LED流水灯案例（HAL库）"></a>LED流水灯案例（HAL库）</h2></li><li><h3 id="需求描述-2"><a href="#需求描述-2" class="headerlink" title="需求描述"></a>需求描述</h3></li></ol><p>实现LED流水灯。用的GPIOA的 0、1、8口。</p><ol><li><h3 id="硬件电路设计-2"><a href="#硬件电路设计-2" class="headerlink" title="硬件电路设计"></a>硬件电路设计</h3></li></ol><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-1725522045621110.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-1725522045621111.png" alt="img"></p><ol><li><h3 id="软件设计-1"><a href="#软件设计-1" class="headerlink" title="软件设计"></a>软件设计</h3></li><li><h4 id="创建HAL库工程"><a href="#创建HAL库工程" class="headerlink" title="创建HAL库工程"></a>创建HAL库工程</h4></li><li><p>操作页面介绍</p></li></ol><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-1725522045621112.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-1725522045621113.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-1725522045621114.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-1725522045621115.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-1725522045621116.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-1725522045621117.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-1725522045621118.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-1725522045621119.png" alt="img"></p><ol><li>根据需求设置参数</li></ol><ul><li>Debug参数选择</li></ul><p>默认debug选项没有设置，需要开启。<strong>选择**</strong>串口<strong><strong>即可。这个地方务必设置好，否则只能下载一次程序到</strong></strong>MCU<strong>**，以后就无法下载了。</strong></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-1725522045621120.png" alt="img"></p><ul><li>RCC时钟选择</li></ul><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-1725522045621121.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-1725522045621122.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-1725522045621123.png" alt="img"></p><ol><li>GPIO配置</li></ol><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-1725522045621124.png" alt="img"></p><ol><li>配置PA0引脚。</li></ol><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-1725522045621125.png" alt="img"></p><ol><li>同样的方式配置PA1和PA8，然后可以看到这3个引脚。</li></ol><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-1725522045621126.png" alt="img"></p><ol><li>分别对他们进行设置。</li></ol><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-1725522045621127.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-1725522045621128.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-1725522045621129.png" alt="img"></p><ol><li>工程配置</li></ol><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-1725522045621130.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-1725522045621131.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-1725522045621132.png" alt="img"></p><ol><li>生成代码</li></ol><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-1725522045621133.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-1725522045621134.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-1725522045621135.png" alt="img"></p><ol><li>生成的工程目录介绍</li></ol><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-1725522045621136.png" alt="img"></p><ol><li><h4 id="自动生成的代码解读"><a href="#自动生成的代码解读" class="headerlink" title="自动生成的代码解读"></a>自动生成的代码解读</h4></li></ol><p><strong>main</strong>函数中已经替我们调用了HAL的初始化，时钟的初始化，GPIO的初始化。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_Init();</span><br><span class="line">    SystemClock_Config();</span><br><span class="line">    MX_GPIO_Init();</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//下面是GPIO初始化的代码。</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">MX_GPIO_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    GPIO_InitTypeDef GPIO_InitStruct = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="comment">/* GPIO Ports Clock Enable */</span></span><br><span class="line">    __HAL_RCC_GPIOC_CLK_ENABLE();</span><br><span class="line">    __HAL_RCC_GPIOA_CLK_ENABLE();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*Configure GPIO pin Output Level */</span></span><br><span class="line">    HAL_GPIO_WritePin(GPIOA, LED1_Pin | LED2_Pin | LED3_Pin, GPIO_PIN_SET);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*Configure GPIO pins : PAPin PAPin PAPin */</span></span><br><span class="line">    GPIO_InitStruct.Pin = LED1_Pin | LED2_Pin | LED3_Pin;</span><br><span class="line">    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;</span><br><span class="line">    GPIO_InitStruct.Pull = GPIO_NOPULL;</span><br><span class="line">    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;</span><br><span class="line">    HAL_GPIO_Init(GPIOA, &amp;GPIO_InitStruct);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h4 id="构建LED驱动"><a href="#构建LED驱动" class="headerlink" title="构建LED驱动"></a>构建LED驱动</h4></li></ol><p>为了方便管理，我们把LED驱动放入单独的文件夹管理。在项目根目录下创建Hardware/led目录。</p><p>然后在Hardware/led目录下创建2个文件led.h和led.c。</p><p>并在Keil中添加如下配置。</p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-1725522045621137.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-1725522045621138.png" alt="img"></p><p><img src="/2024/09/01/%E8%93%9D%E6%A1%A5%E6%9D%AF/STM/nn/-1725522045621139.png" alt="img"></p><ol><li><h5 id="led-h"><a href="#led-h" class="headerlink" title="led.h"></a>led.h</h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __led_h</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __led_h</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;gpio.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED uint16_t</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">LED_Turn_On</span><span class="params">(LED led)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">LED_Turn_Off</span><span class="params">(LED led)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">LED_Toggle</span><span class="params">(LED led)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">LED_Turn_Off_All</span><span class="params">(LED led[], <span class="type">uint8_t</span> len)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><ol><li><h5 id="led-c"><a href="#led-c" class="headerlink" title="led.c"></a>led.c</h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;led.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 点亮LED</span></span><br><span class="line"><span class="comment"> * @param &#123;LED&#125; led</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">LED_Turn_On</span><span class="params">(LED led)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_GPIO_WritePin(GPIOA, led, GPIO_PIN_RESET);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 熄灭LED</span></span><br><span class="line"><span class="comment"> * @param &#123;LED&#125; led</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">LED_Turn_Off</span><span class="params">(LED led)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_GPIO_WritePin(GPIOA, led, GPIO_PIN_SET);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 翻转LED的状态</span></span><br><span class="line"><span class="comment"> * @param &#123;LED&#125; led</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">LED_Toggle</span><span class="params">(LED led)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_GPIO_TogglePin(GPIOA, led);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 关闭所有LED</span></span><br><span class="line"><span class="comment"> * @param &#123;LED&#125; led</span></span><br><span class="line"><span class="comment"> * @param &#123;uint8_t&#125; len</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">LED_Turn_Off_All</span><span class="params">(LED led[], <span class="type">uint8_t</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint8_t</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        LED_Turn_Off(led[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h5 id="main函数"><a href="#main函数" class="headerlink" title="main函数"></a>main函数</h5></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;LED.h&quot;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_Init();</span><br><span class="line">    SystemClock_Config();</span><br><span class="line">    MX_GPIO_Init();</span><br><span class="line">    <span class="type">uint16_t</span> leds[] = &#123;LED1_Pin, LED2_Pin, LED3_Pin&#125;;</span><br><span class="line">    <span class="type">uint8_t</span> i;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            LED_Turn_Off_All(leds, <span class="number">3</span>);</span><br><span class="line">            LED_Turn_On(leds[i]);</span><br><span class="line">            HAL_Delay(<span class="number">200</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            LED_Turn_Off_All(leds, <span class="number">3</span>);</span><br><span class="line">            LED_Turn_On(leds[<span class="number">2</span> - i]);</span><br><span class="line">            HAL_Delay(<span class="number">200</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4></li></ol><p>每新建一个工程，都需要<strong>重新配置**</strong>Include Path和Debug参数**。</p>]]></content>
      
      
      <categories>
          
          <category> 蓝桥杯32 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
